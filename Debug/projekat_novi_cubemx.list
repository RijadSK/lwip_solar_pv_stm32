
projekat_novi_cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000245ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a9c  080247bc  080247bc  000257bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028258  08028258  0002a1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08028258  08028258  00029258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028260  08028260  0002a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028260  08028260  00029260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08028264  08028264  00029264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08028268  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000ac  08028314  0002a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000014c  080283b4  0002a14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001936c  200001ec  08028454  0002a1ec  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20019558  08028454  0002a558  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002a1ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005b889  00000000  00000000  0002a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d2c2  00000000  00000000  00085aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000043c8  00000000  00000000  00092d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003508  00000000  00000000  00097130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000485cb  00000000  00000000  0009a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0006d35f  00000000  00000000  000e2c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00142c8e  00000000  00000000  0014ff62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00292bf0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000127c8  00000000  00000000  00292c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  002a53fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080247a4 	.word	0x080247a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	080247a4 	.word	0x080247a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	@ 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000208 	.word	0x20000208
 8000604:	200002ac 	.word	0x200002ac

08000608 <httpc_free_state>:
} httpc_state_t;

/** Free http client state and deallocate all resources within */
static err_t
httpc_free_state(httpc_state_t* req)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  struct altcp_pcb* tpcb;

  if (req->request != NULL) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d007      	beq.n	8000628 <httpc_free_state+0x20>
    pbuf_free(req->request);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4618      	mov	r0, r3
 800061e:	f018 fccf 	bl	8018fc0 <pbuf_free>
    req->request = NULL;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  }
  if (req->rx_hdrs != NULL) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d007      	beq.n	8000640 <httpc_free_state+0x38>
    pbuf_free(req->rx_hdrs);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4618      	mov	r0, r3
 8000636:	f018 fcc3 	bl	8018fc0 <pbuf_free>
    req->rx_hdrs = NULL;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  }

  tpcb = req->pcb;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
  mem_free(req);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f017 fa26 	bl	8017a98 <mem_free>
  req = NULL;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]

  if (tpcb != NULL) {
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d023      	beq.n	800069e <httpc_free_state+0x96>
    err_t r;
    altcp_arg(tpcb, NULL);
 8000656:	2100      	movs	r1, #0
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f01a fc79 	bl	801af50 <tcp_arg>
    altcp_recv(tpcb, NULL);
 800065e:	2100      	movs	r1, #0
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f01a fc87 	bl	801af74 <tcp_recv>
    altcp_err(tpcb, NULL);
 8000666:	2100      	movs	r1, #0
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f01a fcc7 	bl	801affc <tcp_err>
    altcp_poll(tpcb, NULL, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f01a fcfc 	bl	801b070 <tcp_poll>
    altcp_sent(tpcb, NULL);
 8000678:	2100      	movs	r1, #0
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f01a fc9c 	bl	801afb8 <tcp_sent>
    r = altcp_close(tpcb);
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f019 fa35 	bl	8019af0 <tcp_close>
 8000686:	4603      	mov	r3, r0
 8000688:	72fb      	strb	r3, [r7, #11]
    if (r != ERR_OK) {
 800068a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d005      	beq.n	800069e <httpc_free_state+0x96>
      altcp_abort(tpcb);
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f019 fb72 	bl	8019d7c <tcp_abort>
      return ERR_ABRT;
 8000698:	f06f 030c 	mvn.w	r3, #12
 800069c:	e000      	b.n	80006a0 <httpc_free_state+0x98>
    }
  }
  return ERR_OK;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <httpc_close>:

/** Close the connection: call finished callback and free the state */
static err_t
httpc_close(httpc_state_t* req, httpc_result_t result, u32_t server_response, err_t err)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	72fb      	strb	r3, [r7, #11]
 80006b8:	4613      	mov	r3, r2
 80006ba:	72bb      	strb	r3, [r7, #10]
  if (req != NULL) {
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d01a      	beq.n	80006f8 <httpc_close+0x50>
    if (req->conn_settings != NULL) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6a1b      	ldr	r3, [r3, #32]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d011      	beq.n	80006ee <httpc_close+0x46>
      if (req->conn_settings->result_fn != NULL) {
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00c      	beq.n	80006ee <httpc_close+0x46>
        req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	689c      	ldr	r4, [r3, #8]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80006e2:	7af9      	ldrb	r1, [r7, #11]
 80006e4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	47a0      	blx	r4
      }
    }
    return httpc_free_state(req);
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f7ff ff8a 	bl	8000608 <httpc_free_state>
 80006f4:	4603      	mov	r3, r0
 80006f6:	e000      	b.n	80006fa <httpc_close+0x52>
  }
  return ERR_OK;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
	...

08000704 <http_parse_response_status>:

/** Parse http header response line 1 */
static err_t
http_parse_response_status(struct pbuf *p, u16_t *http_version, u16_t *http_status, u16_t *http_status_str_offset)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]
  u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 8000712:	2300      	movs	r3, #0
 8000714:	2202      	movs	r2, #2
 8000716:	4948      	ldr	r1, [pc, #288]	@ (8000838 <http_parse_response_status+0x134>)
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f018 ffa3 	bl	8019664 <pbuf_memfind>
 800071e:	4603      	mov	r3, r0
 8000720:	857b      	strh	r3, [r7, #42]	@ 0x2a
  if (end1 != 0xFFFF) {
 8000722:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000728:	4293      	cmp	r3, r2
 800072a:	d07f      	beq.n	800082c <http_parse_response_status+0x128>
    /* get parts of first line */
    u16_t space1, space2;
    space1 = pbuf_memfind(p, " ", 1, 0);
 800072c:	2300      	movs	r3, #0
 800072e:	2201      	movs	r2, #1
 8000730:	4942      	ldr	r1, [pc, #264]	@ (800083c <http_parse_response_status+0x138>)
 8000732:	68f8      	ldr	r0, [r7, #12]
 8000734:	f018 ff96 	bl	8019664 <pbuf_memfind>
 8000738:	4603      	mov	r3, r0
 800073a:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (space1 != 0xFFFF) {
 800073c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800073e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000742:	4293      	cmp	r3, r2
 8000744:	d072      	beq.n	800082c <http_parse_response_status+0x128>
      if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0)  && (pbuf_get_at(p, 6) == '.')) {
 8000746:	2305      	movs	r3, #5
 8000748:	4a3d      	ldr	r2, [pc, #244]	@ (8000840 <http_parse_response_status+0x13c>)
 800074a:	2100      	movs	r1, #0
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f018 ff34 	bl	80195ba <pbuf_memcmp>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d169      	bne.n	800082c <http_parse_response_status+0x128>
 8000758:	2106      	movs	r1, #6
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f018 fef4 	bl	8019548 <pbuf_get_at>
 8000760:	4603      	mov	r3, r0
 8000762:	2b2e      	cmp	r3, #46	@ 0x2e
 8000764:	d162      	bne.n	800082c <http_parse_response_status+0x128>
        char status_num[10];
        size_t status_num_len;
        /* parse http version */
        u16_t version = pbuf_get_at(p, 5) - '0';
 8000766:	2105      	movs	r1, #5
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f018 feed 	bl	8019548 <pbuf_get_at>
 800076e:	4603      	mov	r3, r0
 8000770:	3b30      	subs	r3, #48	@ 0x30
 8000772:	84fb      	strh	r3, [r7, #38]	@ 0x26
        version <<= 8;
 8000774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	84fb      	strh	r3, [r7, #38]	@ 0x26
        version |= pbuf_get_at(p, 7) - '0';
 800077a:	2107      	movs	r1, #7
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	f018 fee3 	bl	8019548 <pbuf_get_at>
 8000782:	4603      	mov	r3, r0
 8000784:	3b30      	subs	r3, #48	@ 0x30
 8000786:	b21a      	sxth	r2, r3
 8000788:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800078c:	4313      	orrs	r3, r2
 800078e:	b21b      	sxth	r3, r3
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        *http_version = version;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000796:	801a      	strh	r2, [r3, #0]

        /* parse http status number */
        space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8000798:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800079a:	3301      	adds	r3, #1
 800079c:	b29b      	uxth	r3, r3
 800079e:	2201      	movs	r2, #1
 80007a0:	4926      	ldr	r1, [pc, #152]	@ (800083c <http_parse_response_status+0x138>)
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f018 ff5e 	bl	8019664 <pbuf_memfind>
 80007a8:	4603      	mov	r3, r0
 80007aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (space2 != 0xFFFF) {
 80007ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d00a      	beq.n	80007cc <http_parse_response_status+0xc8>
          *http_status_str_offset = space2 + 1;
 80007b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007b8:	3301      	adds	r3, #1
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	801a      	strh	r2, [r3, #0]
          status_num_len = space2 - space1 - 1;
 80007c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	3b01      	subs	r3, #1
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007ca:	e004      	b.n	80007d6 <http_parse_response_status+0xd2>
        } else {
          status_num_len = end1 - space1 - 1;
 80007cc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80007ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	3b01      	subs	r3, #1
 80007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        if (status_num_len < sizeof(status_num)) {
 80007d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d8:	2b09      	cmp	r3, #9
 80007da:	d827      	bhi.n	800082c <http_parse_response_status+0x128>
          if (pbuf_copy_partial(p, status_num, (u16_t)status_num_len, space1 + 1) == status_num_len) {
 80007dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007de:	b29a      	uxth	r2, r3
 80007e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80007e2:	3301      	adds	r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f107 0114 	add.w	r1, r7, #20
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f018 fdde 	bl	80193ac <pbuf_copy_partial>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d118      	bne.n	800082c <http_parse_response_status+0x128>
            int status;
            status_num[status_num_len] = 0;
 80007fa:	f107 0214 	add.w	r2, r7, #20
 80007fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000800:	4413      	add	r3, r2
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
            status = atoi(status_num);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4618      	mov	r0, r3
 800080c:	f022 fce6 	bl	80231dc <atoi>
 8000810:	6238      	str	r0, [r7, #32]
            if ((status > 0) && (status <= 0xFFFF)) {
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dd09      	ble.n	800082c <http_parse_response_status+0x128>
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800081e:	da05      	bge.n	800082c <http_parse_response_status+0x128>
              *http_status = (u16_t)status;
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	b29a      	uxth	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	801a      	strh	r2, [r3, #0]
              return ERR_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	e001      	b.n	8000830 <http_parse_response_status+0x12c>
          }
        }
      }
    }
  }
  return ERR_VAL;
 800082c:	f06f 0305 	mvn.w	r3, #5
}
 8000830:	4618      	mov	r0, r3
 8000832:	3730      	adds	r7, #48	@ 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	080247bc 	.word	0x080247bc
 800083c:	080247c0 	.word	0x080247c0
 8000840:	080247c4 	.word	0x080247c4

08000844 <http_wait_headers>:

/** Wait for all headers to be received, return its length and content-length (if available) */
static err_t
http_wait_headers(struct pbuf *p, u32_t *content_length, u16_t *total_header_len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	@ 0x30
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8000850:	2300      	movs	r3, #0
 8000852:	2204      	movs	r2, #4
 8000854:	4931      	ldr	r1, [pc, #196]	@ (800091c <http_wait_headers+0xd8>)
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f018 ff04 	bl	8019664 <pbuf_memfind>
 800085c:	4603      	mov	r3, r0
 800085e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  if (end1 < (0xFFFF - 2)) {
 8000860:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000862:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000866:	4293      	cmp	r3, r2
 8000868:	d851      	bhi.n	800090e <http_wait_headers+0xca>
    /* all headers received */
    /* check if we have a content length (@todo: case insensitive?) */
    u16_t content_len_hdr;
    *content_length = HTTPC_CONTENT_LEN_INVALID;
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	601a      	str	r2, [r3, #0]
    *total_header_len = end1 + 4;
 8000872:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000874:	3304      	adds	r3, #4
 8000876:	b29a      	uxth	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	801a      	strh	r2, [r3, #0]

    content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 800087c:	2300      	movs	r3, #0
 800087e:	2210      	movs	r2, #16
 8000880:	4927      	ldr	r1, [pc, #156]	@ (8000920 <http_wait_headers+0xdc>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f018 feee 	bl	8019664 <pbuf_memfind>
 8000888:	4603      	mov	r3, r0
 800088a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (content_len_hdr != 0xFFFF) {
 800088c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800088e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000892:	4293      	cmp	r3, r2
 8000894:	d039      	beq.n	800090a <http_wait_headers+0xc6>
      u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8000896:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000898:	2202      	movs	r2, #2
 800089a:	4922      	ldr	r1, [pc, #136]	@ (8000924 <http_wait_headers+0xe0>)
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f018 fee1 	bl	8019664 <pbuf_memfind>
 80008a2:	4603      	mov	r3, r0
 80008a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      if (content_len_line_end != 0xFFFF) {
 80008a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80008a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d02c      	beq.n	800090a <http_wait_headers+0xc6>
        char content_len_num[16];
        u16_t content_len_num_len = (u16_t)(content_len_line_end - content_len_hdr - 16);
 80008b0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80008b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	3b10      	subs	r3, #16
 80008ba:	853b      	strh	r3, [r7, #40]	@ 0x28
        if (content_len_num_len < sizeof(content_len_num)) {
 80008bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d823      	bhi.n	800090a <http_wait_headers+0xc6>
          if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16) == content_len_num_len) {
 80008c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008c4:	3310      	adds	r3, #16
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80008ca:	f107 0114 	add.w	r1, r7, #20
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f018 fd6c 	bl	80193ac <pbuf_copy_partial>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008da:	4293      	cmp	r3, r2
 80008dc:	d115      	bne.n	800090a <http_wait_headers+0xc6>
            int len;
            content_len_num[content_len_num_len] = 0;
 80008de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008e0:	3330      	adds	r3, #48	@ 0x30
 80008e2:	443b      	add	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
            len = atoi(content_len_num);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f022 fc74 	bl	80231dc <atoi>
 80008f4:	6278      	str	r0, [r7, #36]	@ 0x24
            if ((len >= 0) && ((u32_t)len < HTTPC_CONTENT_LEN_INVALID)) {
 80008f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db06      	blt.n	800090a <http_wait_headers+0xc6>
 80008fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000902:	d002      	beq.n	800090a <http_wait_headers+0xc6>
              *content_length = (u32_t)len;
 8000904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	601a      	str	r2, [r3, #0]
            }
          }
        }
      }
    }
    return ERR_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e001      	b.n	8000912 <http_wait_headers+0xce>
  }
  return ERR_VAL;
 800090e:	f06f 0305 	mvn.w	r3, #5
}
 8000912:	4618      	mov	r0, r3
 8000914:	3730      	adds	r7, #48	@ 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	080247cc 	.word	0x080247cc
 8000920:	080247d4 	.word	0x080247d4
 8000924:	080247bc 	.word	0x080247bc

08000928 <httpc_tcp_recv>:

/** http client tcp recv callback */
static err_t
httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08d      	sub	sp, #52	@ 0x34
 800092c:	af02      	add	r7, sp, #8
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	70fb      	strb	r3, [r7, #3]
  httpc_state_t* req = (httpc_state_t*)arg;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	623b      	str	r3, [r7, #32]
  LWIP_UNUSED_ARG(r);

  if (p == NULL) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d125      	bne.n	800098c <httpc_tcp_recv+0x64>
    httpc_result_t result;
    if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000946:	2b02      	cmp	r3, #2
 8000948:	d003      	beq.n	8000952 <httpc_tcp_recv+0x2a>
      /* did not get RX data yet */
      result = HTTPC_RESULT_ERR_CLOSED;
 800094a:	2304      	movs	r3, #4
 800094c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000950:	e011      	b.n	8000976 <httpc_tcp_recv+0x4e>
    } else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID) &&
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095a:	d009      	beq.n	8000970 <httpc_tcp_recv+0x48>
      (req->hdr_content_len != req->rx_content_len)) {
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    } else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID) &&
 8000964:	429a      	cmp	r2, r3
 8000966:	d003      	beq.n	8000970 <httpc_tcp_recv+0x48>
      /* header has been received with content length but not all data received */
      result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8000968:	2309      	movs	r3, #9
 800096a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800096e:	e002      	b.n	8000976 <httpc_tcp_recv+0x4e>
    } else {
      /* receiving data and either all data received or no content length header */
      result = HTTPC_RESULT_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    return httpc_close(req, result, req->rx_status, ERR_OK);
 8000976:	6a3b      	ldr	r3, [r7, #32]
 8000978:	8b5b      	ldrh	r3, [r3, #26]
 800097a:	461a      	mov	r2, r3
 800097c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8000980:	2300      	movs	r3, #0
 8000982:	6a38      	ldr	r0, [r7, #32]
 8000984:	f7ff fe90 	bl	80006a8 <httpc_close>
 8000988:	4603      	mov	r3, r0
 800098a:	e0aa      	b.n	8000ae2 <httpc_tcp_recv+0x1ba>
  }
  if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000992:	2b02      	cmp	r3, #2
 8000994:	d07a      	beq.n	8000a8c <httpc_tcp_recv+0x164>
    if (req->rx_hdrs == NULL) {
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d103      	bne.n	80009a6 <httpc_tcp_recv+0x7e>
      req->rx_hdrs = p;
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	e005      	b.n	80009b2 <httpc_tcp_recv+0x8a>
    } else {
      pbuf_cat(req->rx_hdrs, p);
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f018 fbd5 	bl	801915c <pbuf_cat>
    }
    if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d115      	bne.n	80009e8 <httpc_tcp_recv+0xc0>
      u16_t status_str_off;
      err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status, &status_str_off);
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	6958      	ldr	r0, [r3, #20]
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	f103 0118 	add.w	r1, r3, #24
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	f103 021a 	add.w	r2, r3, #26
 80009cc:	f107 0316 	add.w	r3, r7, #22
 80009d0:	f7ff fe98 	bl	8000704 <http_parse_response_status>
 80009d4:	4603      	mov	r3, r0
 80009d6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80009d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d103      	bne.n	80009e8 <httpc_tcp_recv+0xc0>
        /* don't care status string */
        req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	2201      	movs	r2, #1
 80009e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
    }
    if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d14c      	bne.n	8000a8c <httpc_tcp_recv+0x164>
      u16_t total_header_len;
      err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	6958      	ldr	r0, [r3, #20]
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	332c      	adds	r3, #44	@ 0x2c
 80009fa:	f107 0214 	add.w	r2, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f7ff ff20 	bl	8000844 <http_wait_headers>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77bb      	strb	r3, [r7, #30]
      if (err == ERR_OK) {
 8000a08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d13d      	bne.n	8000a8c <httpc_tcp_recv+0x164>
        struct pbuf *q;
        /* full header received, send window update for header bytes and call into client callback */
        altcp_recved(pcb, total_header_len);
 8000a10:	8abb      	ldrh	r3, [r7, #20]
 8000a12:	4619      	mov	r1, r3
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f019 faaf 	bl	8019f78 <tcp_recved>
        if (req->conn_settings) {
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d023      	beq.n	8000a6a <httpc_tcp_recv+0x142>
          if (req->conn_settings->headers_done_fn) {
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d01e      	beq.n	8000a6a <httpc_tcp_recv+0x142>
            err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs, total_header_len, req->hdr_content_len);
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	68dc      	ldr	r4, [r3, #12]
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	8ab8      	ldrh	r0, [r7, #20]
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4603      	mov	r3, r0
 8000a44:	6a38      	ldr	r0, [r7, #32]
 8000a46:	47a0      	blx	r4
 8000a48:	4603      	mov	r3, r0
 8000a4a:	77bb      	strb	r3, [r7, #30]
            if (err != ERR_OK) {
 8000a4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00a      	beq.n	8000a6a <httpc_tcp_recv+0x142>
              return httpc_close(req, HTTPC_RESULT_LOCAL_ABORT, req->rx_status, err);
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	8b5b      	ldrh	r3, [r3, #26]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000a5e:	2108      	movs	r1, #8
 8000a60:	6a38      	ldr	r0, [r7, #32]
 8000a62:	f7ff fe21 	bl	80006a8 <httpc_close>
 8000a66:	4603      	mov	r3, r0
 8000a68:	e03b      	b.n	8000ae2 <httpc_tcp_recv+0x1ba>
            }
          }
        }
        /* hide header bytes in pbuf */
        q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	8aba      	ldrh	r2, [r7, #20]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f018 fa71 	bl	8018f5a <pbuf_free_header>
 8000a78:	61b8      	str	r0, [r7, #24]
        p = q;
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	607b      	str	r3, [r7, #4]
        req->rx_hdrs = NULL;
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
        /* go on with data */
        req->parse_state = HTTPC_PARSE_RX_DATA;
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	2202      	movs	r2, #2
 8000a88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
    }
  }
  if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d026      	beq.n	8000ae0 <httpc_tcp_recv+0x1b8>
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d121      	bne.n	8000ae0 <httpc_tcp_recv+0x1b8>
    req->rx_content_len += p->tot_len;
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	8912      	ldrh	r2, [r2, #8]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	629a      	str	r2, [r3, #40]	@ 0x28
    /* received valid data: reset timeout */
    req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	221e      	movs	r2, #30
 8000aae:	60da      	str	r2, [r3, #12]
    if (req->recv_fn != NULL) {
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00a      	beq.n	8000ace <httpc_tcp_recv+0x1a6>
      /* directly return here: the connection might already be aborted from the callback! */
      return req->recv_fn(req->callback_arg, pcb, p, r);
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	69dc      	ldr	r4, [r3, #28]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	47a0      	blx	r4
 8000aca:	4603      	mov	r3, r0
 8000acc:	e009      	b.n	8000ae2 <httpc_tcp_recv+0x1ba>
    } else {
      altcp_recved(pcb, p->tot_len);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	891b      	ldrh	r3, [r3, #8]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	68b8      	ldr	r0, [r7, #8]
 8000ad6:	f019 fa4f 	bl	8019f78 <tcp_recved>
      pbuf_free(p);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f018 fa70 	bl	8018fc0 <pbuf_free>
    }
  }
  return ERR_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	372c      	adds	r7, #44	@ 0x2c
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <httpc_tcp_err>:

/** http client tcp err callback */
static void
httpc_tcp_err(void *arg, err_t err)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	70fb      	strb	r3, [r7, #3]
  httpc_state_t* req = (httpc_state_t*)arg;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]
  if (req != NULL) {
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d009      	beq.n	8000b14 <httpc_tcp_err+0x2a>
    /* pcb has already been deallocated */
    req->pcb = NULL;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
    httpc_close(req, HTTPC_RESULT_ERR_CLOSED, 0, err);
 8000b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff fdca 	bl	80006a8 <httpc_close>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <httpc_tcp_poll>:

/** http client tcp poll callback */
static err_t
httpc_tcp_poll(void *arg, struct altcp_pcb *pcb)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  /* implement timeout */
  httpc_state_t* req = (httpc_state_t*)arg;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(pcb);
  if (req != NULL) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d014      	beq.n	8000b5a <httpc_tcp_poll+0x3e>
    if (req->timeout_ticks) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d004      	beq.n	8000b42 <httpc_tcp_poll+0x26>
      req->timeout_ticks--;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	60da      	str	r2, [r3, #12]
    }
    if (!req->timeout_ticks) {
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d107      	bne.n	8000b5a <httpc_tcp_poll+0x3e>
      return httpc_close(req, HTTPC_RESULT_ERR_TIMEOUT, 0, ERR_OK);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2105      	movs	r1, #5
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fda9 	bl	80006a8 <httpc_close>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e000      	b.n	8000b5c <httpc_tcp_poll+0x40>
    }
  }
  return ERR_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <httpc_tcp_sent>:

/** http client tcp sent callback */
static err_t
httpc_tcp_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	80fb      	strh	r3, [r7, #6]
  /* nothing to do here for now */
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(len);
  return ERR_OK;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <httpc_tcp_connected>:

/** http client tcp connected callback */
static err_t
httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
  err_t r;
  httpc_state_t* req = (httpc_state_t*)arg;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  /* send request; last char is zero termination */
  r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	6859      	ldr	r1, [r3, #4]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	895b      	ldrh	r3, [r3, #10]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f01d f910 	bl	801ddcc <tcp_write>
 8000bac:	4603      	mov	r3, r0
 8000bae:	74fb      	strb	r3, [r7, #19]
  if (r != ERR_OK) {
 8000bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <httpc_tcp_connected+0x4a>
     /* could not write the single small request -> fail, don't retry */
     return httpc_close(req, HTTPC_RESULT_ERR_MEM, 0, r);
 8000bb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2107      	movs	r1, #7
 8000bc0:	6978      	ldr	r0, [r7, #20]
 8000bc2:	f7ff fd71 	bl	80006a8 <httpc_close>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e00d      	b.n	8000be6 <httpc_tcp_connected+0x66>
  }
  /* everything written, we can free the request */
  pbuf_free(req->request);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f018 f9f6 	bl	8018fc0 <pbuf_free>
  req->request = NULL;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]

  altcp_output(req->pcb);
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f01d fede 	bl	801e9a0 <tcp_output>
  return ERR_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <httpc_get_internal_addr>:

/** Start the http request when the server IP addr is known */
static err_t
httpc_get_internal_addr(httpc_state_t* req, const ip_addr_t *ipaddr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  err_t err;
  LWIP_ASSERT("req != NULL", req != NULL);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <httpc_get_internal_addr+0x1e>
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <httpc_get_internal_addr+0x60>)
 8000c02:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8000c06:	4913      	ldr	r1, [pc, #76]	@ (8000c54 <httpc_get_internal_addr+0x64>)
 8000c08:	4813      	ldr	r0, [pc, #76]	@ (8000c58 <httpc_get_internal_addr+0x68>)
 8000c0a:	f022 fd2d 	bl	8023668 <iprintf>

  if (&req->remote_addr != ipaddr) {
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3304      	adds	r3, #4
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d003      	beq.n	8000c20 <httpc_get_internal_addr+0x30>
    /* fill in remote addr if called externally */
    req->remote_addr = *ipaddr;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
  }

  err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1d19      	adds	r1, r3, #4
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	891a      	ldrh	r2, [r3, #8]
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <httpc_get_internal_addr+0x6c>)
 8000c2e:	f019 fa3b 	bl	801a0a8 <tcp_connect>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <httpc_get_internal_addr+0x52>
    return ERR_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e001      	b.n	8000c46 <httpc_get_internal_addr+0x56>
  }
  LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("tcp_connect failed: %d\n", (int)err));
  return err;
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	080247e8 	.word	0x080247e8
 8000c54:	08024804 	.word	0x08024804
 8000c58:	08024810 	.word	0x08024810
 8000c5c:	08000b81 	.word	0x08000b81

08000c60 <httpc_create_request_string>:
}

static int
httpc_create_request_string(const httpc_connection_t *settings, const char* server_name, int server_port, const char* uri,
                            int use_host, char *buffer, size_t buffer_size)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af04      	add	r7, sp, #16
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
  if (settings && settings->use_proxy) {
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d02e      	beq.n	8000cd2 <httpc_create_request_string+0x72>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	799b      	ldrb	r3, [r3, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d02a      	beq.n	8000cd2 <httpc_create_request_string+0x72>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d106      	bne.n	8000c90 <httpc_create_request_string+0x30>
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <httpc_create_request_string+0xc0>)
 8000c84:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000c88:	4926      	ldr	r1, [pc, #152]	@ (8000d24 <httpc_create_request_string+0xc4>)
 8000c8a:	4827      	ldr	r0, [pc, #156]	@ (8000d28 <httpc_create_request_string+0xc8>)
 8000c8c:	f022 fcec 	bl	8023668 <iprintf>
    if (server_port != HTTP_DEFAULT_PORT) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b50      	cmp	r3, #80	@ 0x50
 8000c94:	d00f      	beq.n	8000cb6 <httpc_create_request_string+0x56>
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_PORT_FORMAT(server_name, server_port, uri, server_name));
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	9303      	str	r3, [sp, #12]
 8000c9a:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <httpc_create_request_string+0xcc>)
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	4a21      	ldr	r2, [pc, #132]	@ (8000d30 <httpc_create_request_string+0xd0>)
 8000caa:	6a39      	ldr	r1, [r7, #32]
 8000cac:	69f8      	ldr	r0, [r7, #28]
 8000cae:	f022 fced 	bl	802368c <sniprintf>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	e02f      	b.n	8000d16 <httpc_create_request_string+0xb6>
    } else {
      return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <httpc_create_request_string+0xcc>)
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <httpc_create_request_string+0xd4>)
 8000cc6:	6a39      	ldr	r1, [r7, #32]
 8000cc8:	69f8      	ldr	r0, [r7, #28]
 8000cca:	f022 fcdf 	bl	802368c <sniprintf>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e021      	b.n	8000d16 <httpc_create_request_string+0xb6>
    }
  } else if (use_host) {
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d015      	beq.n	8000d04 <httpc_create_request_string+0xa4>
    LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d106      	bne.n	8000cec <httpc_create_request_string+0x8c>
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <httpc_create_request_string+0xc0>)
 8000ce0:	f44f 72fd 	mov.w	r2, #506	@ 0x1fa
 8000ce4:	490f      	ldr	r1, [pc, #60]	@ (8000d24 <httpc_create_request_string+0xc4>)
 8000ce6:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <httpc_create_request_string+0xc8>)
 8000ce8:	f022 fcbe 	bl	8023668 <iprintf>
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <httpc_create_request_string+0xcc>)
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <httpc_create_request_string+0xd8>)
 8000cf8:	6a39      	ldr	r1, [r7, #32]
 8000cfa:	69f8      	ldr	r0, [r7, #28]
 8000cfc:	f022 fcc6 	bl	802368c <sniprintf>
 8000d00:	4603      	mov	r3, r0
 8000d02:	e008      	b.n	8000d16 <httpc_create_request_string+0xb6>
  } else {
    return snprintf(buffer, buffer_size, HTTPC_REQ_11_FORMAT(uri));
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <httpc_create_request_string+0xcc>)
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <httpc_create_request_string+0xdc>)
 8000d0c:	6a39      	ldr	r1, [r7, #32]
 8000d0e:	69f8      	ldr	r0, [r7, #28]
 8000d10:	f022 fcbc 	bl	802368c <sniprintf>
 8000d14:	4603      	mov	r3, r0
  }
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	080247e8 	.word	0x080247e8
 8000d24:	08024838 	.word	0x08024838
 8000d28:	08024810 	.word	0x08024810
 8000d2c:	080248a8 	.word	0x080248a8
 8000d30:	0802484c 	.word	0x0802484c
 8000d34:	080248e0 	.word	0x080248e0
 8000d38:	08024938 	.word	0x08024938
 8000d3c:	08024988 	.word	0x08024988

08000d40 <httpc_init_connection_common>:

/** Initialize the connection struct */
static err_t
httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings, const char* server_name,
                      u16_t server_port, const char* uri, altcp_recv_fn recv_fn, void* callback_arg, int use_host)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	@ 0x38
 8000d44:	af04      	add	r7, sp, #16
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	807b      	strh	r3, [r7, #2]
  httpc_state_t *req;
#if HTTPC_DEBUG_REQUEST
  size_t server_name_len, uri_len;
#endif

  LWIP_ERROR("httpc connection settings not give", settings != NULL, return ERR_ARG;);
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <httpc_init_connection_common+0x28>
 8000d54:	4b6d      	ldr	r3, [pc, #436]	@ (8000f0c <httpc_init_connection_common+0x1cc>)
 8000d56:	f240 220e 	movw	r2, #526	@ 0x20e
 8000d5a:	496d      	ldr	r1, [pc, #436]	@ (8000f10 <httpc_init_connection_common+0x1d0>)
 8000d5c:	486d      	ldr	r0, [pc, #436]	@ (8000f14 <httpc_init_connection_common+0x1d4>)
 8000d5e:	f022 fc83 	bl	8023668 <iprintf>
 8000d62:	f06f 030f 	mvn.w	r3, #15
 8000d66:	e0cd      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  LWIP_ASSERT("uri != NULL", uri != NULL);
 8000d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d106      	bne.n	8000d7c <httpc_init_connection_common+0x3c>
 8000d6e:	4b67      	ldr	r3, [pc, #412]	@ (8000f0c <httpc_init_connection_common+0x1cc>)
 8000d70:	f240 220f 	movw	r2, #527	@ 0x20f
 8000d74:	4968      	ldr	r1, [pc, #416]	@ (8000f18 <httpc_init_connection_common+0x1d8>)
 8000d76:	4867      	ldr	r0, [pc, #412]	@ (8000f14 <httpc_init_connection_common+0x1d4>)
 8000d78:	f022 fc76 	bl	8023668 <iprintf>

  /* get request len */
  req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8000d7c:	887a      	ldrh	r2, [r7, #2]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	68b8      	ldr	r0, [r7, #8]
 8000d90:	f7ff ff66 	bl	8000c60 <httpc_create_request_string>
 8000d94:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((req_len < 0) || (req_len > 0xFFFF)) {
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db03      	blt.n	8000da4 <httpc_init_connection_common+0x64>
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000da2:	db02      	blt.n	8000daa <httpc_init_connection_common+0x6a>
    return ERR_VAL;
 8000da4:	f06f 0305 	mvn.w	r3, #5
 8000da8:	e0ac      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  }
  /* alloc state and request in one block */
  alloc_len = sizeof(httpc_state_t);
 8000daa:	2334      	movs	r3, #52	@ 0x34
 8000dac:	623b      	str	r3, [r7, #32]
#if HTTPC_DEBUG_REQUEST
  server_name_len = server_name ? strlen(server_name) : 0;
  uri_len = strlen(uri);
  alloc_len += server_name_len + 1 + uri_len + 1;
#endif
  mem_alloc_len = (mem_size_t)alloc_len;
 8000dae:	6a3b      	ldr	r3, [r7, #32]
 8000db0:	83fb      	strh	r3, [r7, #30]
  if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8000db2:	8bfb      	ldrh	r3, [r7, #30]
 8000db4:	6a3a      	ldr	r2, [r7, #32]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d804      	bhi.n	8000dc4 <httpc_init_connection_common+0x84>
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	dd02      	ble.n	8000dca <httpc_init_connection_common+0x8a>
    return ERR_VAL;
 8000dc4:	f06f 0305 	mvn.w	r3, #5
 8000dc8:	e09c      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  }

  req = (httpc_state_t*)mem_malloc((mem_size_t)alloc_len);
 8000dca:	6a3b      	ldr	r3, [r7, #32]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f017 f802 	bl	8017dd8 <mem_malloc>
 8000dd4:	61b8      	str	r0, [r7, #24]
  if(req == NULL) {
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <httpc_init_connection_common+0xa2>
    return ERR_MEM;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	e090      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  }
  memset(req, 0, sizeof(httpc_state_t));
 8000de2:	2234      	movs	r2, #52	@ 0x34
 8000de4:	2100      	movs	r1, #0
 8000de6:	69b8      	ldr	r0, [r7, #24]
 8000de8:	f022 fcf1 	bl	80237ce <memset>
  req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	221e      	movs	r2, #30
 8000df0:	60da      	str	r2, [r3, #12]
  req->request = pbuf_alloc(PBUF_RAW, (u16_t)(req_len + 1), PBUF_RAM);
 8000df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3301      	adds	r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000dfe:	4619      	mov	r1, r3
 8000e00:	2000      	movs	r0, #0
 8000e02:	f017 fdc7 	bl	8018994 <pbuf_alloc>
 8000e06:	4602      	mov	r2, r0
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	611a      	str	r2, [r3, #16]
  if (req->request == NULL) {
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d105      	bne.n	8000e20 <httpc_init_connection_common+0xe0>
    httpc_free_state(req);
 8000e14:	69b8      	ldr	r0, [r7, #24]
 8000e16:	f7ff fbf7 	bl	8000608 <httpc_free_state>
    return ERR_MEM;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e071      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  }
  if (req->request->next != NULL) {
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <httpc_init_connection_common+0xf6>
    /* need a pbuf in one piece */
    httpc_free_state(req);
 8000e2a:	69b8      	ldr	r0, [r7, #24]
 8000e2c:	f7ff fbec 	bl	8000608 <httpc_free_state>
    return ERR_MEM;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	e066      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  }
  req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    memcpy(req->server_name, server_name, server_name_len + 1);
  }
  req->uri = req->server_name + server_name_len + 1;
  memcpy(req->uri, uri, uri_len + 1);
#endif
  req->pcb = altcp_new(settings ? settings->altcp_allocator : NULL);
 8000e3e:	f01a f871 	bl	801af24 <tcp_new>
 8000e42:	4602      	mov	r2, r0
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	601a      	str	r2, [r3, #0]
  if(req->pcb == NULL) {
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d105      	bne.n	8000e5c <httpc_init_connection_common+0x11c>
    httpc_free_state(req);
 8000e50:	69b8      	ldr	r0, [r7, #24]
 8000e52:	f7ff fbd9 	bl	8000608 <httpc_free_state>
    return ERR_MEM;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e053      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  }
  req->remote_port = (settings && settings->use_proxy) ? settings->proxy_port : server_port;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <httpc_init_connection_common+0x130>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	799b      	ldrb	r3, [r3, #6]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <httpc_init_connection_common+0x130>
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	889b      	ldrh	r3, [r3, #4]
 8000e6e:	e000      	b.n	8000e72 <httpc_init_connection_common+0x132>
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	8113      	strh	r3, [r2, #8]
  altcp_arg(req->pcb, req);
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f01a f867 	bl	801af50 <tcp_arg>
  altcp_recv(req->pcb, httpc_tcp_recv);
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4925      	ldr	r1, [pc, #148]	@ (8000f1c <httpc_init_connection_common+0x1dc>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f01a f873 	bl	801af74 <tcp_recv>
  altcp_err(req->pcb, httpc_tcp_err);
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4923      	ldr	r1, [pc, #140]	@ (8000f20 <httpc_init_connection_common+0x1e0>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f01a f8b1 	bl	801affc <tcp_err>
  altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4920      	ldr	r1, [pc, #128]	@ (8000f24 <httpc_init_connection_common+0x1e4>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f01a f8e4 	bl	801b070 <tcp_poll>
  altcp_sent(req->pcb, httpc_tcp_sent);
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	491e      	ldr	r1, [pc, #120]	@ (8000f28 <httpc_init_connection_common+0x1e8>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f01a f882 	bl	801afb8 <tcp_sent>

  /* set up request buffer */
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8000eb4:	8879      	ldrh	r1, [r7, #2]
    (char *)req->request->payload, req_len + 1);
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ebe:	3201      	adds	r2, #1
  req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8000ec0:	9202      	str	r2, [sp, #8]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eca:	460a      	mov	r2, r1
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	68b8      	ldr	r0, [r7, #8]
 8000ed0:	f7ff fec6 	bl	8000c60 <httpc_create_request_string>
 8000ed4:	6178      	str	r0, [r7, #20]
  if (req_len2 != req_len) {
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d005      	beq.n	8000eea <httpc_init_connection_common+0x1aa>
    httpc_free_state(req);
 8000ede:	69b8      	ldr	r0, [r7, #24]
 8000ee0:	f7ff fb92 	bl	8000608 <httpc_free_state>
    return ERR_VAL;
 8000ee4:	f06f 0305 	mvn.w	r3, #5
 8000ee8:	e00c      	b.n	8000f04 <httpc_init_connection_common+0x1c4>
  }

  req->recv_fn = recv_fn;
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000eee:	61da      	str	r2, [r3, #28]
  req->conn_settings = settings;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	621a      	str	r2, [r3, #32]
  req->callback_arg = callback_arg;
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24

  *connection = req;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3728      	adds	r7, #40	@ 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	080247e8 	.word	0x080247e8
 8000f10:	080249cc 	.word	0x080249cc
 8000f14:	08024810 	.word	0x08024810
 8000f18:	080249f0 	.word	0x080249f0
 8000f1c:	08000929 	.word	0x08000929
 8000f20:	08000aeb 	.word	0x08000aeb
 8000f24:	08000b1d 	.word	0x08000b1d
 8000f28:	08000b65 	.word	0x08000b65

08000f2c <httpc_init_connection_addr>:
 */
static err_t
httpc_init_connection_addr(httpc_state_t **connection, const httpc_connection_t *settings,
                           const ip_addr_t* server_addr, u16_t server_port, const char* uri,
                           altcp_recv_fn recv_fn, void* callback_arg)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af04      	add	r7, sp, #16
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	807b      	strh	r3, [r7, #2]
  char *server_addr_str = ipaddr_ntoa(server_addr);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f020 fcd2 	bl	80218e4 <ip4addr_ntoa>
 8000f40:	6178      	str	r0, [r7, #20]
  if (server_addr_str == NULL) {
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <httpc_init_connection_addr+0x22>
    return ERR_VAL;
 8000f48:	f06f 0305 	mvn.w	r3, #5
 8000f4c:	e00f      	b.n	8000f6e <httpc_init_connection_addr+0x42>
  }
  return httpc_init_connection_common(connection, settings, server_addr_str, server_port, uri,
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9303      	str	r3, [sp, #12]
 8000f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff feea 	bl	8000d40 <httpc_init_connection_common>
 8000f6c:	4603      	mov	r3, r0
    recv_fn, callback_arg, 1);
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <httpc_get_file>:
 *         or an error code
 */
err_t
httpc_get_file(const ip_addr_t* server_addr, u16_t port, const char* uri, const httpc_connection_t *settings,
               altcp_recv_fn recv_fn, void* callback_arg, httpc_state_t **connection)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	460b      	mov	r3, r1
 8000f86:	817b      	strh	r3, [r7, #10]
  err_t err;
  httpc_state_t* req;

  LWIP_ERROR("invalid parameters", (server_addr != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <httpc_get_file+0x22>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <httpc_get_file+0x22>
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <httpc_get_file+0x36>
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <httpc_get_file+0xb8>)
 8000f9c:	f240 2287 	movw	r2, #647	@ 0x287
 8000fa0:	4924      	ldr	r1, [pc, #144]	@ (8001034 <httpc_get_file+0xbc>)
 8000fa2:	4825      	ldr	r0, [pc, #148]	@ (8001038 <httpc_get_file+0xc0>)
 8000fa4:	f022 fb60 	bl	8023668 <iprintf>
 8000fa8:	f06f 030f 	mvn.w	r3, #15
 8000fac:	e03c      	b.n	8001028 <httpc_get_file+0xb0>

  err = httpc_init_connection_addr(&req, settings, server_addr, port,
 8000fae:	897a      	ldrh	r2, [r7, #10]
 8000fb0:	f107 0010 	add.w	r0, r7, #16
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	f7ff ffb1 	bl	8000f2c <httpc_init_connection_addr>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	75fb      	strb	r3, [r7, #23]
    uri, recv_fn, callback_arg);
  if (err != ERR_OK) {
 8000fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <httpc_get_file+0x64>
    return err;
 8000fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fda:	e025      	b.n	8001028 <httpc_get_file+0xb0>
  }

  if (settings->use_proxy) {
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	799b      	ldrb	r3, [r3, #6]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <httpc_get_file+0x7e>
    err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe00 	bl	8000bf0 <httpc_get_internal_addr>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	75fb      	strb	r3, [r7, #23]
 8000ff4:	e006      	b.n	8001004 <httpc_get_file+0x8c>
  } else {
    err = httpc_get_internal_addr(req, server_addr);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	68f9      	ldr	r1, [r7, #12]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fdf8 	bl	8000bf0 <httpc_get_internal_addr>
 8001000:	4603      	mov	r3, r0
 8001002:	75fb      	strb	r3, [r7, #23]
  }
  if(err != ERR_OK) {
 8001004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <httpc_get_file+0xa2>
    httpc_free_state(req);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fafa 	bl	8000608 <httpc_free_state>
    return err;
 8001014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001018:	e006      	b.n	8001028 <httpc_get_file+0xb0>
  }

  if (connection != NULL) {
 800101a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <httpc_get_file+0xae>
    *connection = req;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001024:	601a      	str	r2, [r3, #0]
  }
  return ERR_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	080247e8 	.word	0x080247e8
 8001034:	080249fc 	.word	0x080249fc
 8001038:	08024810 	.word	0x08024810

0800103c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001040:	f3bf 8f4f 	dsb	sy
}
 8001044:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001046:	f3bf 8f6f 	isb	sy
}
 800104a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <SCB_EnableICache+0x48>)
 800104e:	2200      	movs	r2, #0
 8001050:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001054:	f3bf 8f4f 	dsb	sy
}
 8001058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800105a:	f3bf 8f6f 	isb	sy
}
 800105e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <SCB_EnableICache+0x48>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <SCB_EnableICache+0x48>)
 8001066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800106a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800106c:	f3bf 8f4f 	dsb	sy
}
 8001070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001072:	f3bf 8f6f 	isb	sy
}
 8001076:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800108e:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <SCB_EnableDCache+0x84>)
 8001090:	2200      	movs	r2, #0
 8001092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001096:	f3bf 8f4f 	dsb	sy
}
 800109a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <SCB_EnableDCache+0x84>)
 800109e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	0b5b      	lsrs	r3, r3, #13
 80010a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	08db      	lsrs	r3, r3, #3
 80010b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	015a      	lsls	r2, r3, #5
 80010bc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80010c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010c6:	4911      	ldr	r1, [pc, #68]	@ (800110c <SCB_EnableDCache+0x84>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	60ba      	str	r2, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ef      	bne.n	80010b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1e5a      	subs	r2, r3, #1
 80010dc:	60fa      	str	r2, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1e5      	bne.n	80010ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80010e2:	f3bf 8f4f 	dsb	sy
}
 80010e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <SCB_EnableDCache+0x84>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a07      	ldr	r2, [pc, #28]	@ (800110c <SCB_EnableDCache+0x84>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010f4:	f3bf 8f4f 	dsb	sy
}
 80010f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010fa:	f3bf 8f6f 	isb	sy
}
 80010fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001116:	f7ff ff91 	bl	800103c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800111a:	f7ff ffb5 	bl	8001088 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f002 fe03 	bl	8003d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f84b 	bl	80011bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001126:	f000 f8bb 	bl	80012a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f001 f82d 	bl	8002188 <MX_GPIO_Init>
  MX_ADC3_Init();
 800112e:	f000 f8e9 	bl	8001304 <MX_ADC3_Init>
  MX_CRC_Init();
 8001132:	f000 f939 	bl	80013a8 <MX_CRC_Init>
  MX_DCMI_Init();
 8001136:	f000 f959 	bl	80013ec <MX_DCMI_Init>
  MX_DMA2D_Init();
 800113a:	f000 f98b 	bl	8001454 <MX_DMA2D_Init>
  MX_FMC_Init();
 800113e:	f000 ffd3 	bl	80020e8 <MX_FMC_Init>
  MX_I2C1_Init();
 8001142:	f000 f9b9 	bl	80014b8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001146:	f000 f9f7 	bl	8001538 <MX_I2C3_Init>
  MX_LTDC_Init();
 800114a:	f000 fa35 	bl	80015b8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800114e:	f000 fab5 	bl	80016bc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001152:	f000 fadf 	bl	8001714 <MX_RTC_Init>
  MX_SAI2_Init();
 8001156:	f000 fb81 	bl	800185c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800115a:	f000 fc27 	bl	80019ac <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800115e:	f000 fc47 	bl	80019f0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001162:	f000 fc75 	bl	8001a50 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001166:	f000 fcb1 	bl	8001acc <MX_TIM1_Init>
  MX_TIM2_Init();
 800116a:	f000 fd5d 	bl	8001c28 <MX_TIM2_Init>
  MX_TIM3_Init();
 800116e:	f000 fdd1 	bl	8001d14 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001172:	f000 fe47 	bl	8001e04 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001176:	f000 febd 	bl	8001ef4 <MX_TIM8_Init>
  MX_TIM12_Init();
 800117a:	f000 ff0f 	bl	8001f9c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800117e:	f000 ff53 	bl	8002028 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001182:	f000 ff81 	bl	8002088 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001186:	f00e f977 	bl	800f478 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <main+0xa4>)
 800118c:	1d3c      	adds	r4, r7, #4
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f011 fd05 	bl	8012bb0 <osThreadCreate>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a03      	ldr	r2, [pc, #12]	@ (80011b8 <main+0xa8>)
 80011aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011ac:	f011 fcdd 	bl	8012b6a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <main+0xa0>
 80011b4:	08024a1c 	.word	0x08024a1c
 80011b8:	20000cac 	.word	0x20000cac

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	@ 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2230      	movs	r2, #48	@ 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f022 faff 	bl	80237ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011e0:	f007 fb58 	bl	8008894 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <SystemClock_Config+0xdc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001298 <SystemClock_Config+0xdc>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <SystemClock_Config+0xdc>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <SystemClock_Config+0xe0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a26      	ldr	r2, [pc, #152]	@ (800129c <SystemClock_Config+0xe0>)
 8001202:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <SystemClock_Config+0xe0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001214:	2309      	movs	r3, #9
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800121e:	2301      	movs	r3, #1
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800122c:	2319      	movs	r3, #25
 800122e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001230:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800123a:	2309      	movs	r3, #9
 800123c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4618      	mov	r0, r3
 8001244:	f007 fc48 	bl	8008ad8 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800124e:	f001 f979 	bl	8002544 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001252:	f007 fb2f 	bl	80088b4 <HAL_PWREx_EnableOverDrive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800125c:	f001 f972 	bl	8002544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2302      	movs	r3, #2
 8001266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2106      	movs	r1, #6
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fece 	bl	8009020 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800128a:	f001 f95b 	bl	8002544 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3750      	adds	r7, #80	@ 0x50
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0a2      	sub	sp, #136	@ 0x88
 80012a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2284      	movs	r2, #132	@ 0x84
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f022 fa8e 	bl	80237ce <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <PeriphCommonClock_Config+0x60>)
 80012b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80012bc:	2305      	movs	r3, #5
 80012be:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80012c4:	2303      	movs	r3, #3
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80012cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80012d2:	2300      	movs	r3, #0
 80012d4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80012d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80012da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4618      	mov	r0, r3
 80012e8:	f008 f8b2 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012f2:	f001 f927 	bl	8002544 <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3788      	adds	r7, #136	@ 0x88
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	00b00008 	.word	0x00b00008

08001304 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001316:	4b21      	ldr	r3, [pc, #132]	@ (800139c <MX_ADC3_Init+0x98>)
 8001318:	4a21      	ldr	r2, [pc, #132]	@ (80013a0 <MX_ADC3_Init+0x9c>)
 800131a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <MX_ADC3_Init+0x98>)
 800131e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001322:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <MX_ADC3_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <MX_ADC3_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_ADC3_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <MX_ADC3_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_ADC3_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_ADC3_Init+0x98>)
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <MX_ADC3_Init+0xa0>)
 8001348:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_ADC3_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_ADC3_Init+0x98>)
 8001352:	2201      	movs	r2, #1
 8001354:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_ADC3_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_ADC3_Init+0x98>)
 8001360:	2201      	movs	r2, #1
 8001362:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <MX_ADC3_Init+0x98>)
 8001366:	f002 fd3d 	bl	8003de4 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001370:	f001 f8e8 	bl	8002544 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001374:	2304      	movs	r3, #4
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001378:	2301      	movs	r3, #1
 800137a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_ADC3_Init+0x98>)
 8001386:	f002 fd71 	bl	8003e6c <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001390:	f001 f8d8 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200004ac 	.word	0x200004ac
 80013a0:	40012200 	.word	0x40012200
 80013a4:	0f000001 	.word	0x0f000001

080013a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <MX_CRC_Init+0x3c>)
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <MX_CRC_Init+0x40>)
 80013b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_CRC_Init+0x3c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <MX_CRC_Init+0x3c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_CRC_Init+0x3c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <MX_CRC_Init+0x3c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_CRC_Init+0x3c>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_CRC_Init+0x3c>)
 80013d2:	f003 f87d 	bl	80044d0 <HAL_CRC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013dc:	f001 f8b2 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200004f4 	.word	0x200004f4
 80013e8:	40023000 	.word	0x40023000

080013ec <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_DCMI_Init+0x60>)
 80013f2:	4a17      	ldr	r2, [pc, #92]	@ (8001450 <MX_DCMI_Init+0x64>)
 80013f4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_DCMI_Init+0x60>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <MX_DCMI_Init+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_DCMI_Init+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <MX_DCMI_Init+0x60>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_DCMI_Init+0x60>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <MX_DCMI_Init+0x60>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_DCMI_Init+0x60>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <MX_DCMI_Init+0x60>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_DCMI_Init+0x60>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <MX_DCMI_Init+0x60>)
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_DCMI_Init+0x60>)
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <MX_DCMI_Init+0x60>)
 800143a:	f003 f933 	bl	80046a4 <HAL_DCMI_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001444:	f001 f87e 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000518 	.word	0x20000518
 8001450:	50050000 	.word	0x50050000

08001454 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 800145a:	4a16      	ldr	r2, [pc, #88]	@ (80014b4 <MX_DMA2D_Init+0x60>)
 800145c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 8001472:	2200      	movs	r2, #0
 8001474:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 8001478:	2200      	movs	r2, #0
 800147a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 800147e:	2200      	movs	r2, #0
 8001480:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 800148a:	f003 fa1f 	bl	80048cc <HAL_DMA2D_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001494:	f001 f856 	bl	8002544 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001498:	2101      	movs	r1, #1
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_DMA2D_Init+0x5c>)
 800149c:	f003 fb70 	bl	8004b80 <HAL_DMA2D_ConfigLayer>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014a6:	f001 f84d 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000568 	.word	0x20000568
 80014b4:	4002b000 	.word	0x4002b000

080014b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <MX_I2C1_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <MX_I2C1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_I2C1_Init+0x74>)
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <MX_I2C1_Init+0x7c>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_I2C1_Init+0x74>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_I2C1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f2:	480e      	ldr	r0, [pc, #56]	@ (800152c <MX_I2C1_Init+0x74>)
 80014f4:	f006 fd3c 	bl	8007f70 <HAL_I2C_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f001 f821 	bl	8002544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <MX_I2C1_Init+0x74>)
 8001506:	f006 fdc3 	bl	8008090 <HAL_I2CEx_ConfigAnalogFilter>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001510:	f001 f818 	bl	8002544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_I2C1_Init+0x74>)
 8001518:	f006 fe05 	bl	8008126 <HAL_I2CEx_ConfigDigitalFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f001 f80f 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200005a8 	.word	0x200005a8
 8001530:	40005400 	.word	0x40005400
 8001534:	00c0eaff 	.word	0x00c0eaff

08001538 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_I2C3_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <MX_I2C3_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001544:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <MX_I2C3_Init+0x7c>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_I2C3_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001550:	2201      	movs	r2, #1
 8001552:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_I2C3_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_I2C3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001572:	480e      	ldr	r0, [pc, #56]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001574:	f006 fcfc 	bl	8007f70 <HAL_I2C_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800157e:	f000 ffe1 	bl	8002544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001586:	f006 fd83 	bl	8008090 <HAL_I2CEx_ConfigAnalogFilter>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001590:	f000 ffd8 	bl	8002544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_I2C3_Init+0x74>)
 8001598:	f006 fdc5 	bl	8008126 <HAL_I2CEx_ConfigDigitalFilter>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 ffcf 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200005fc 	.word	0x200005fc
 80015b0:	40005c00 	.word	0x40005c00
 80015b4:	00c0eaff 	.word	0x00c0eaff

080015b8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	@ 0x38
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2234      	movs	r2, #52	@ 0x34
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f022 f902 	bl	80237ce <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015ca:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015cc:	4a3a      	ldr	r2, [pc, #232]	@ (80016b8 <MX_LTDC_Init+0x100>)
 80015ce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015d0:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015d6:	4b37      	ldr	r3, [pc, #220]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80015e8:	4b32      	ldr	r3, [pc, #200]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015ea:	2228      	movs	r2, #40	@ 0x28
 80015ec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015f0:	2209      	movs	r2, #9
 80015f2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80015f4:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015f6:	2235      	movs	r2, #53	@ 0x35
 80015f8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80015fa:	4b2e      	ldr	r3, [pc, #184]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 80015fc:	220b      	movs	r2, #11
 80015fe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001600:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 8001602:	f240 2215 	movw	r2, #533	@ 0x215
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 800160a:	f240 121b 	movw	r2, #283	@ 0x11b
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 8001612:	f240 2235 	movw	r2, #565	@ 0x235
 8001616:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 800161a:	f240 121d 	movw	r2, #285	@ 0x11d
 800161e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001638:	481e      	ldr	r0, [pc, #120]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 800163a:	f006 fdc1 	bl	80081c0 <HAL_LTDC_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001644:	f000 ff7e 	bl	8002544 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800164c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001650:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001656:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800165a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800165c:	2302      	movs	r3, #2
 800165e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001660:	23ff      	movs	r3, #255	@ 0xff
 8001662:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001668:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800166c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800166e:	2307      	movs	r3, #7
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001672:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001678:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800167e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_LTDC_Init+0xfc>)
 800169e:	f006 ff21 	bl	80084e4 <HAL_LTDC_ConfigLayer>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80016a8:	f000 ff4c 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3738      	adds	r7, #56	@ 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000650 	.word	0x20000650
 80016b8:	40016800 	.word	0x40016800

080016bc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016c2:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <MX_QUADSPI_Init+0x54>)
 80016c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016d4:	2210      	movs	r2, #16
 80016d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016da:	2218      	movs	r2, #24
 80016dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016e0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80016e4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <MX_QUADSPI_Init+0x50>)
 80016fa:	f007 f92b 	bl	8008954 <HAL_QSPI_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001704:	f000 ff1e 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200006f8 	.word	0x200006f8
 8001710:	a0001000 	.word	0xa0001000

08001714 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b090      	sub	sp, #64	@ 0x40
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800171a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800172e:	463b      	mov	r3, r7
 8001730:	2228      	movs	r2, #40	@ 0x28
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f022 f84a 	bl	80237ce <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800173a:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <MX_RTC_Init+0x140>)
 800173c:	4a46      	ldr	r2, [pc, #280]	@ (8001858 <MX_RTC_Init+0x144>)
 800173e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001740:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <MX_RTC_Init+0x140>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001746:	4b43      	ldr	r3, [pc, #268]	@ (8001854 <MX_RTC_Init+0x140>)
 8001748:	227f      	movs	r2, #127	@ 0x7f
 800174a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800174c:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <MX_RTC_Init+0x140>)
 800174e:	22ff      	movs	r2, #255	@ 0xff
 8001750:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001752:	4b40      	ldr	r3, [pc, #256]	@ (8001854 <MX_RTC_Init+0x140>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001758:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <MX_RTC_Init+0x140>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800175e:	4b3d      	ldr	r3, [pc, #244]	@ (8001854 <MX_RTC_Init+0x140>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001764:	483b      	ldr	r0, [pc, #236]	@ (8001854 <MX_RTC_Init+0x140>)
 8001766:	f008 fba3 	bl	8009eb0 <HAL_RTC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001770:	f000 fee8 	bl	8002544 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800178e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	482f      	ldr	r0, [pc, #188]	@ (8001854 <MX_RTC_Init+0x140>)
 8001798:	f008 fc0e 	bl	8009fb8 <HAL_RTC_SetTime>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80017a2:	f000 fecf 	bl	8002544 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	2201      	movs	r2, #1
 80017c4:	4619      	mov	r1, r3
 80017c6:	4823      	ldr	r0, [pc, #140]	@ (8001854 <MX_RTC_Init+0x140>)
 80017c8:	f008 fc90 	bl	800a0ec <HAL_RTC_SetDate>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80017d2:	f000 feb7 	bl	8002544 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017da:	2300      	movs	r3, #0
 80017dc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017de:	2300      	movs	r3, #0
 80017e0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	2201      	movs	r2, #1
 800180a:	4619      	mov	r1, r3
 800180c:	4811      	ldr	r0, [pc, #68]	@ (8001854 <MX_RTC_Init+0x140>)
 800180e:	f008 fcf1 	bl	800a1f4 <HAL_RTC_SetAlarm>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001818:	f000 fe94 	bl	8002544 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800181c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	2201      	movs	r2, #1
 8001826:	4619      	mov	r1, r3
 8001828:	480a      	ldr	r0, [pc, #40]	@ (8001854 <MX_RTC_Init+0x140>)
 800182a:	f008 fce3 	bl	800a1f4 <HAL_RTC_SetAlarm>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001834:	f000 fe86 	bl	8002544 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001838:	2202      	movs	r2, #2
 800183a:	2100      	movs	r1, #0
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_RTC_Init+0x140>)
 800183e:	f008 fea5 	bl	800a58c <HAL_RTCEx_SetTimeStamp>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001848:	f000 fe7c 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3740      	adds	r7, #64	@ 0x40
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000744 	.word	0x20000744
 8001858:	40002800 	.word	0x40002800

0800185c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001860:	4b4d      	ldr	r3, [pc, #308]	@ (8001998 <MX_SAI2_Init+0x13c>)
 8001862:	4a4e      	ldr	r2, [pc, #312]	@ (800199c <MX_SAI2_Init+0x140>)
 8001864:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001866:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <MX_SAI2_Init+0x13c>)
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800186c:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <MX_SAI2_Init+0x13c>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001872:	4b49      	ldr	r3, [pc, #292]	@ (8001998 <MX_SAI2_Init+0x13c>)
 8001874:	2240      	movs	r2, #64	@ 0x40
 8001876:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001878:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <MX_SAI2_Init+0x13c>)
 800187a:	2200      	movs	r2, #0
 800187c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800187e:	4b46      	ldr	r3, [pc, #280]	@ (8001998 <MX_SAI2_Init+0x13c>)
 8001880:	2200      	movs	r2, #0
 8001882:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001884:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <MX_SAI2_Init+0x13c>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800188a:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <MX_SAI2_Init+0x13c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001890:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <MX_SAI2_Init+0x13c>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001896:	4b40      	ldr	r3, [pc, #256]	@ (8001998 <MX_SAI2_Init+0x13c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <MX_SAI2_Init+0x13c>)
 800189e:	4a40      	ldr	r2, [pc, #256]	@ (80019a0 <MX_SAI2_Init+0x144>)
 80018a0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018b4:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80018ba:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018bc:	2208      	movs	r2, #8
 80018be:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018c0:	4b35      	ldr	r3, [pc, #212]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018cc:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80018e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80018f0:	4829      	ldr	r0, [pc, #164]	@ (8001998 <MX_SAI2_Init+0x13c>)
 80018f2:	f008 feb3 	bl	800a65c <HAL_SAI_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80018fc:	f000 fe22 	bl	8002544 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001900:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001902:	4a29      	ldr	r2, [pc, #164]	@ (80019a8 <MX_SAI2_Init+0x14c>)
 8001904:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001906:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800190c:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800190e:	2203      	movs	r2, #3
 8001910:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001912:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001914:	2240      	movs	r2, #64	@ 0x40
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800191a:	2200      	movs	r2, #0
 800191c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001920:	2200      	movs	r2, #0
 8001922:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001926:	2201      	movs	r2, #1
 8001928:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001936:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800194a:	2200      	movs	r2, #0
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001950:	2208      	movs	r2, #8
 8001952:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001956:	2201      	movs	r2, #1
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800195c:	2200      	movs	r2, #0
 800195e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001960:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001962:	2200      	movs	r2, #0
 8001964:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001966:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001968:	2200      	movs	r2, #0
 800196a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800196e:	2200      	movs	r2, #0
 8001970:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001974:	2200      	movs	r2, #0
 8001976:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <MX_SAI2_Init+0x148>)
 800197a:	2201      	movs	r2, #1
 800197c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001980:	2200      	movs	r2, #0
 8001982:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001984:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <MX_SAI2_Init+0x148>)
 8001986:	f008 fe69 	bl	800a65c <HAL_SAI_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001990:	f000 fdd8 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000764 	.word	0x20000764
 800199c:	40015c04 	.word	0x40015c04
 80019a0:	0002ee00 	.word	0x0002ee00
 80019a4:	200007e8 	.word	0x200007e8
 80019a8:	40015c24 	.word	0x40015c24

080019ac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <MX_SDMMC1_SD_Init+0x40>)
 80019b4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019ce:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <MX_SDMMC1_SD_Init+0x3c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000086c 	.word	0x2000086c
 80019ec:	40012c00 	.word	0x40012c00

080019f0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80019f4:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 80019f6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80019fa:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001a08:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <MX_SPDIFRX_Init+0x5c>)
 8001a3a:	f00a f89b 	bl	800bb74 <HAL_SPDIFRX_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001a44:	f000 fd7e 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200008f0 	.word	0x200008f0

08001a50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac8 <MX_SPI2_Init+0x78>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a68:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a6a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001a6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001aaa:	2208      	movs	r2, #8
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <MX_SPI2_Init+0x74>)
 8001ab0:	f00a f8bc 	bl	800bc2c <HAL_SPI_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 fd43 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000093c 	.word	0x2000093c
 8001ac8:	40003800 	.word	0x40003800

08001acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09a      	sub	sp, #104	@ 0x68
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	222c      	movs	r2, #44	@ 0x2c
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f021 fe61 	bl	80237ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b0c:	4b44      	ldr	r3, [pc, #272]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b0e:	4a45      	ldr	r2, [pc, #276]	@ (8001c24 <MX_TIM1_Init+0x158>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49999;
 8001b12:	4b43      	ldr	r3, [pc, #268]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b14:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001b18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001b20:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b22:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001b26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b3a:	4839      	ldr	r0, [pc, #228]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b3c:	f00a f921 	bl	800bd82 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001b46:	f000 fcfd 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b54:	4619      	mov	r1, r3
 8001b56:	4832      	ldr	r0, [pc, #200]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b58:	f00a fc6c 	bl	800c434 <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001b62:	f000 fcef 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b66:	482e      	ldr	r0, [pc, #184]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b68:	f00a f9da 	bl	800bf20 <HAL_TIM_PWM_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001b72:	f000 fce7 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4825      	ldr	r0, [pc, #148]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001b8a:	f00b f8dd 	bl	800cd48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001b94:	f000 fcd6 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b98:	2360      	movs	r3, #96	@ 0x60
 8001b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4818      	ldr	r0, [pc, #96]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001bbe:	f00a fb25 	bl	800c20c <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001bc8:	f000 fcbc 	bl	8002544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001c02:	f00b f92f 	bl	800ce64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001c0c:	f000 fc9a 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <MX_TIM1_Init+0x154>)
 8001c12:	f001 fa07 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001c16:	bf00      	nop
 8001c18:	3768      	adds	r7, #104	@ 0x68
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200009a0 	.word	0x200009a0
 8001c24:	40010000 	.word	0x40010000

08001c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	@ 0x38
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c62:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c6e:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c82:	4823      	ldr	r0, [pc, #140]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001c84:	f00a f87d 	bl	800bd82 <HAL_TIM_Base_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c8e:	f000 fc59 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481c      	ldr	r0, [pc, #112]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001ca0:	f00a fbc8 	bl	800c434 <HAL_TIM_ConfigClockSource>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001caa:	f000 fc4b 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cae:	4818      	ldr	r0, [pc, #96]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001cb0:	f00a f936 	bl	800bf20 <HAL_TIM_PWM_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cba:	f000 fc43 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4810      	ldr	r0, [pc, #64]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001cce:	f00b f83b 	bl	800cd48 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cd8:	f000 fc34 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	@ 0x60
 8001cde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4807      	ldr	r0, [pc, #28]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001cf4:	f00a fa8a 	bl	800c20c <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cfe:	f000 fc21 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d02:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <MX_TIM2_Init+0xe8>)
 8001d04:	f001 f98e 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001d08:	bf00      	nop
 8001d0a:	3738      	adds	r7, #56	@ 0x38
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200009ec 	.word	0x200009ec

08001d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	@ 0x38
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d46:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d48:	4a2d      	ldr	r2, [pc, #180]	@ (8001e00 <MX_TIM3_Init+0xec>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d58:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d66:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d6c:	4823      	ldr	r0, [pc, #140]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d6e:	f00a f808 	bl	800bd82 <HAL_TIM_Base_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d78:	f000 fbe4 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d86:	4619      	mov	r1, r3
 8001d88:	481c      	ldr	r0, [pc, #112]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d8a:	f00a fb53 	bl	800c434 <HAL_TIM_ConfigClockSource>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d94:	f000 fbd6 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d98:	4818      	ldr	r0, [pc, #96]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001d9a:	f00a f8c1 	bl	800bf20 <HAL_TIM_PWM_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001da4:	f000 fbce 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	4811      	ldr	r0, [pc, #68]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001db8:	f00a ffc6 	bl	800cd48 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dc2:	f000 fbbf 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc6:	2360      	movs	r3, #96	@ 0x60
 8001dc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4807      	ldr	r0, [pc, #28]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001dde:	f00a fa15 	bl	800c20c <HAL_TIM_PWM_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001de8:	f000 fbac 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dec:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <MX_TIM3_Init+0xe8>)
 8001dee:	f001 f919 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001df2:	bf00      	nop
 8001df4:	3738      	adds	r7, #56	@ 0x38
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000a38 	.word	0x20000a38
 8001e00:	40000400 	.word	0x40000400

08001e04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	@ 0x38
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e36:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e38:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef0 <MX_TIM5_Init+0xec>)
 8001e3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e48:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e5c:	4823      	ldr	r0, [pc, #140]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e5e:	f009 ff90 	bl	800bd82 <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001e68:	f000 fb6c 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e76:	4619      	mov	r1, r3
 8001e78:	481c      	ldr	r0, [pc, #112]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e7a:	f00a fadb 	bl	800c434 <HAL_TIM_ConfigClockSource>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001e84:	f000 fb5e 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e88:	4818      	ldr	r0, [pc, #96]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001e8a:	f00a f849 	bl	800bf20 <HAL_TIM_PWM_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001e94:	f000 fb56 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4811      	ldr	r0, [pc, #68]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001ea8:	f00a ff4e 	bl	800cd48 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001eb2:	f000 fb47 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb6:	2360      	movs	r3, #96	@ 0x60
 8001eb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	220c      	movs	r2, #12
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4807      	ldr	r0, [pc, #28]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001ece:	f00a f99d 	bl	800c20c <HAL_TIM_PWM_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001ed8:	f000 fb34 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001edc:	4803      	ldr	r0, [pc, #12]	@ (8001eec <MX_TIM5_Init+0xe8>)
 8001ede:	f001 f8a1 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001ee2:	bf00      	nop
 8001ee4:	3738      	adds	r7, #56	@ 0x38
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000a84 	.word	0x20000a84
 8001ef0:	40000c00 	.word	0x40000c00

08001ef4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f14:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <MX_TIM8_Init+0xa4>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f2a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f3e:	4815      	ldr	r0, [pc, #84]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f40:	f009 ff1f 	bl	800bd82 <HAL_TIM_Base_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001f4a:	f000 fafb 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480e      	ldr	r0, [pc, #56]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f5c:	f00a fa6a 	bl	800c434 <HAL_TIM_ConfigClockSource>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001f66:	f000 faed 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <MX_TIM8_Init+0xa0>)
 8001f7c:	f00a fee4 	bl	800cd48 <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f86:	f000 fadd 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000ad0 	.word	0x20000ad0
 8001f98:	40010400 	.word	0x40010400

08001f9c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
 8001fb0:	615a      	str	r2, [r3, #20]
 8001fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <MX_TIM12_Init+0x84>)
 8001fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <MX_TIM12_Init+0x88>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001fba:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <MX_TIM12_Init+0x84>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <MX_TIM12_Init+0x84>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <MX_TIM12_Init+0x84>)
 8001fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fcc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fce:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <MX_TIM12_Init+0x84>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <MX_TIM12_Init+0x84>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001fda:	4811      	ldr	r0, [pc, #68]	@ (8002020 <MX_TIM12_Init+0x84>)
 8001fdc:	f009 ffa0 	bl	800bf20 <HAL_TIM_PWM_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001fe6:	f000 faad 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fea:	2360      	movs	r3, #96	@ 0x60
 8001fec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4619      	mov	r1, r3
 8002000:	4807      	ldr	r0, [pc, #28]	@ (8002020 <MX_TIM12_Init+0x84>)
 8002002:	f00a f903 	bl	800c20c <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800200c:	f000 fa9a 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002010:	4803      	ldr	r0, [pc, #12]	@ (8002020 <MX_TIM12_Init+0x84>)
 8002012:	f001 f807 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8002016:	bf00      	nop
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000b1c 	.word	0x20000b1c
 8002024:	40001800 	.word	0x40001800

08002028 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 800202e:	4a15      	ldr	r2, [pc, #84]	@ (8002084 <MX_USART1_UART_Init+0x5c>)
 8002030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 8002034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_USART1_UART_Init+0x58>)
 800206c:	f00a ff96 	bl	800cf9c <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002076:	f000 fa65 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000b68 	.word	0x20000b68
 8002084:	40011000 	.word	0x40011000

08002088 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 800208e:	4a15      	ldr	r2, [pc, #84]	@ (80020e4 <MX_USART6_UART_Init+0x5c>)
 8002090:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 8002094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002098:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020ca:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <MX_USART6_UART_Init+0x58>)
 80020cc:	f00a ff66 	bl	800cf9c <HAL_UART_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80020d6:	f000 fa35 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000bf0 	.word	0x20000bf0
 80020e4:	40011400 	.word	0x40011400

080020e8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002100:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <MX_FMC_Init+0x98>)
 8002102:	4a20      	ldr	r2, [pc, #128]	@ (8002184 <MX_FMC_Init+0x9c>)
 8002104:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002106:	4b1e      	ldr	r3, [pc, #120]	@ (8002180 <MX_FMC_Init+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800210c:	4b1c      	ldr	r3, [pc, #112]	@ (8002180 <MX_FMC_Init+0x98>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <MX_FMC_Init+0x98>)
 8002114:	2204      	movs	r2, #4
 8002116:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002118:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <MX_FMC_Init+0x98>)
 800211a:	2210      	movs	r2, #16
 800211c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800211e:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <MX_FMC_Init+0x98>)
 8002120:	2240      	movs	r2, #64	@ 0x40
 8002122:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002124:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <MX_FMC_Init+0x98>)
 8002126:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800212a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800212c:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <MX_FMC_Init+0x98>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002132:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <MX_FMC_Init+0x98>)
 8002134:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002138:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <MX_FMC_Init+0x98>)
 800213c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002142:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <MX_FMC_Init+0x98>)
 8002144:	2200      	movs	r2, #0
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002148:	2302      	movs	r3, #2
 800214a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800214c:	2307      	movs	r3, #7
 800214e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002150:	2304      	movs	r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002154:	2307      	movs	r3, #7
 8002156:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002158:	2303      	movs	r3, #3
 800215a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002160:	2302      	movs	r3, #2
 8002162:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	@ (8002180 <MX_FMC_Init+0x98>)
 800216a:	f009 fcce 	bl	800bb0a <HAL_SDRAM_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002174:	f000 f9e6 	bl	8002544 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002178:	bf00      	nop
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000c78 	.word	0x20000c78
 8002184:	a0000140 	.word	0xa0000140

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b090      	sub	sp, #64	@ 0x40
 800218c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800219e:	4bb0      	ldr	r3, [pc, #704]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4aaf      	ldr	r2, [pc, #700]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4bad      	ldr	r3, [pc, #692]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021b6:	4baa      	ldr	r3, [pc, #680]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4aa9      	ldr	r2, [pc, #676]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4ba7      	ldr	r3, [pc, #668]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	4ba4      	ldr	r3, [pc, #656]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4aa3      	ldr	r2, [pc, #652]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4ba1      	ldr	r3, [pc, #644]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a9d      	ldr	r2, [pc, #628]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b9b      	ldr	r3, [pc, #620]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	4b98      	ldr	r3, [pc, #608]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a97      	ldr	r2, [pc, #604]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b95      	ldr	r3, [pc, #596]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b92      	ldr	r3, [pc, #584]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a91      	ldr	r2, [pc, #580]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800222e:	4b8c      	ldr	r3, [pc, #560]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a8b      	ldr	r2, [pc, #556]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b89      	ldr	r3, [pc, #548]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002246:	4b86      	ldr	r3, [pc, #536]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a85      	ldr	r2, [pc, #532]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b83      	ldr	r3, [pc, #524]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800225e:	4b80      	ldr	r3, [pc, #512]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a7f      	ldr	r2, [pc, #508]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002264:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b7d      	ldr	r3, [pc, #500]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002276:	4b7a      	ldr	r3, [pc, #488]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a79      	ldr	r2, [pc, #484]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 800227c:	f043 0320 	orr.w	r3, r3, #32
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b77      	ldr	r3, [pc, #476]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228e:	4b74      	ldr	r3, [pc, #464]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a73      	ldr	r2, [pc, #460]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 8002294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b71      	ldr	r3, [pc, #452]	@ (8002460 <MX_GPIO_Init+0x2d8>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	2120      	movs	r1, #32
 80022aa:	486e      	ldr	r0, [pc, #440]	@ (8002464 <MX_GPIO_Init+0x2dc>)
 80022ac:	f004 f90c 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80022b0:	2200      	movs	r2, #0
 80022b2:	210c      	movs	r1, #12
 80022b4:	486c      	ldr	r0, [pc, #432]	@ (8002468 <MX_GPIO_Init+0x2e0>)
 80022b6:	f004 f907 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2108      	movs	r1, #8
 80022be:	486b      	ldr	r0, [pc, #428]	@ (800246c <MX_GPIO_Init+0x2e4>)
 80022c0:	f004 f902 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022ca:	4867      	ldr	r0, [pc, #412]	@ (8002468 <MX_GPIO_Init+0x2e0>)
 80022cc:	f004 f8fc 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022d6:	4866      	ldr	r0, [pc, #408]	@ (8002470 <MX_GPIO_Init+0x2e8>)
 80022d8:	f004 f8f6 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	21c8      	movs	r1, #200	@ 0xc8
 80022e0:	4864      	ldr	r0, [pc, #400]	@ (8002474 <MX_GPIO_Init+0x2ec>)
 80022e2:	f004 f8f1 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80022e6:	2308      	movs	r3, #8
 80022e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f6:	4619      	mov	r1, r3
 80022f8:	485f      	ldr	r0, [pc, #380]	@ (8002478 <MX_GPIO_Init+0x2f0>)
 80022fa:	f003 ff21 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80022fe:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002310:	230a      	movs	r3, #10
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002318:	4619      	mov	r1, r3
 800231a:	4858      	ldr	r0, [pc, #352]	@ (800247c <MX_GPIO_Init+0x2f4>)
 800231c:	f003 ff10 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002326:	2300      	movs	r3, #0
 8002328:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002332:	4619      	mov	r1, r3
 8002334:	4852      	ldr	r0, [pc, #328]	@ (8002480 <MX_GPIO_Init+0x2f8>)
 8002336:	f003 ff03 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800233a:	2340      	movs	r3, #64	@ 0x40
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800233e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002342:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234c:	4619      	mov	r1, r3
 800234e:	4845      	ldr	r0, [pc, #276]	@ (8002464 <MX_GPIO_Init+0x2dc>)
 8002350:	f003 fef6 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002354:	2320      	movs	r3, #32
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002368:	4619      	mov	r1, r3
 800236a:	483e      	ldr	r0, [pc, #248]	@ (8002464 <MX_GPIO_Init+0x2dc>)
 800236c:	f003 fee8 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002370:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002386:	4619      	mov	r1, r3
 8002388:	4837      	ldr	r0, [pc, #220]	@ (8002468 <MX_GPIO_Init+0x2e0>)
 800238a:	f003 fed9 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800238e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a0:	4619      	mov	r1, r3
 80023a2:	4838      	ldr	r0, [pc, #224]	@ (8002484 <MX_GPIO_Init+0x2fc>)
 80023a4:	f003 fecc 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80023a8:	2308      	movs	r3, #8
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023bc:	4619      	mov	r1, r3
 80023be:	482b      	ldr	r0, [pc, #172]	@ (800246c <MX_GPIO_Init+0x2e4>)
 80023c0:	f003 febe 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023c4:	2310      	movs	r3, #16
 80023c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023d4:	4619      	mov	r1, r3
 80023d6:	4823      	ldr	r0, [pc, #140]	@ (8002464 <MX_GPIO_Init+0x2dc>)
 80023d8:	f003 feb2 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80023dc:	f248 0304 	movw	r3, #32772	@ 0x8004
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ee:	4619      	mov	r1, r3
 80023f0:	481f      	ldr	r0, [pc, #124]	@ (8002470 <MX_GPIO_Init+0x2e8>)
 80023f2:	f003 fea5 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80023f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fc:	2301      	movs	r3, #1
 80023fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002408:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240c:	4619      	mov	r1, r3
 800240e:	4818      	ldr	r0, [pc, #96]	@ (8002470 <MX_GPIO_Init+0x2e8>)
 8002410:	f003 fe96 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800241a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800241e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	480f      	ldr	r0, [pc, #60]	@ (8002468 <MX_GPIO_Init+0x2e0>)
 800242c:	f003 fe88 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002430:	2310      	movs	r3, #16
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002440:	230a      	movs	r3, #10
 8002442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002444:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002448:	4619      	mov	r1, r3
 800244a:	4809      	ldr	r0, [pc, #36]	@ (8002470 <MX_GPIO_Init+0x2e8>)
 800244c:	f003 fe78 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002450:	23c8      	movs	r3, #200	@ 0xc8
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
 800245c:	e014      	b.n	8002488 <MX_GPIO_Init+0x300>
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40022000 	.word	0x40022000
 800246c:	40022800 	.word	0x40022800
 8002470:	40021c00 	.word	0x40021c00
 8002474:	40021800 	.word	0x40021800
 8002478:	40021000 	.word	0x40021000
 800247c:	40020400 	.word	0x40020400
 8002480:	40022400 	.word	0x40022400
 8002484:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800248c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002490:	4619      	mov	r1, r3
 8002492:	4819      	ldr	r0, [pc, #100]	@ (80024f8 <MX_GPIO_Init+0x370>)
 8002494:	f003 fe54 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002498:	2305      	movs	r3, #5
 800249a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024a8:	230a      	movs	r3, #10
 80024aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b0:	4619      	mov	r1, r3
 80024b2:	4812      	ldr	r0, [pc, #72]	@ (80024fc <MX_GPIO_Init+0x374>)
 80024b4:	f003 fe44 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80024b8:	2304      	movs	r3, #4
 80024ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024c8:	4619      	mov	r1, r3
 80024ca:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <MX_GPIO_Init+0x370>)
 80024cc:	f003 fe38 	bl	8006140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80024d0:	2328      	movs	r3, #40	@ 0x28
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024e0:	230a      	movs	r3, #10
 80024e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e8:	4619      	mov	r1, r3
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <MX_GPIO_Init+0x378>)
 80024ec:	f003 fe28 	bl	8006140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024f0:	bf00      	nop
 80024f2:	3740      	adds	r7, #64	@ 0x40
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020000 	.word	0x40020000

08002504 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800250c:	f00d fa04 	bl	800f918 <MX_LWIP_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002510:	f020 fb6e 	bl	8022bf0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  tcpclient_init();
 8002514:	f001 fa6a 	bl	80039ec <tcpclient_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002518:	2001      	movs	r0, #1
 800251a:	f010 fba1 	bl	8012c60 <osDelay>
 800251e:	e7fb      	b.n	8002518 <StartDefaultTask+0x14>

08002520 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002532:	f001 fc07 	bl	8003d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40001000 	.word	0x40001000

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <Error_Handler+0x8>

08002550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b11      	ldr	r3, [pc, #68]	@ (800259c <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <HAL_MspInit+0x4c>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_MspInit+0x4c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002578:	6453      	str	r3, [r2, #68]	@ 0x44
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	210f      	movs	r1, #15
 800258a:	f06f 0001 	mvn.w	r0, #1
 800258e:	f001 ff75 	bl	800447c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a21      	ldr	r2, [pc, #132]	@ (8002644 <HAL_ADC_MspInit+0xa4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d13c      	bne.n	800263c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025c2:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a20      	ldr	r2, [pc, #128]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025da:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	4a1a      	ldr	r2, [pc, #104]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025e0:	f043 0320 	orr.w	r3, r3, #32
 80025e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e6:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_ADC_MspInit+0xa8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800260a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800260e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002610:	2303      	movs	r3, #3
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	480b      	ldr	r0, [pc, #44]	@ (800264c <HAL_ADC_MspInit+0xac>)
 8002620:	f003 fd8e 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002624:	2301      	movs	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002628:	2303      	movs	r3, #3
 800262a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	@ (8002650 <HAL_ADC_MspInit+0xb0>)
 8002638:	f003 fd82 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	@ 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40012200 	.word	0x40012200
 8002648:	40023800 	.word	0x40023800
 800264c:	40021400 	.word	0x40021400
 8002650:	40020000 	.word	0x40020000

08002654 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <HAL_CRC_MspInit+0x38>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10b      	bne.n	800267e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <HAL_CRC_MspInit+0x3c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a09      	ldr	r2, [pc, #36]	@ (8002690 <HAL_CRC_MspInit+0x3c>)
 800266c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_CRC_MspInit+0x3c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023000 	.word	0x40023000
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	@ 0x38
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a50      	ldr	r2, [pc, #320]	@ (80027f4 <HAL_DCMI_MspInit+0x160>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	f040 809a 	bne.w	80027ec <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80026b8:	4b4f      	ldr	r3, [pc, #316]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026bc:	4a4e      	ldr	r2, [pc, #312]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80026c4:	4b4c      	ldr	r3, [pc, #304]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d0:	4b49      	ldr	r3, [pc, #292]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	4a48      	ldr	r2, [pc, #288]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026d6:	f043 0310 	orr.w	r3, r3, #16
 80026da:	6313      	str	r3, [r2, #48]	@ 0x30
 80026dc:	4b46      	ldr	r3, [pc, #280]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e8:	4b43      	ldr	r3, [pc, #268]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4a42      	ldr	r2, [pc, #264]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f4:	4b40      	ldr	r3, [pc, #256]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002700:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	4a3c      	ldr	r2, [pc, #240]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 8002706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800270a:	6313      	str	r3, [r2, #48]	@ 0x30
 800270c:	4b3a      	ldr	r3, [pc, #232]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002718:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 800271e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002722:	6313      	str	r3, [r2, #48]	@ 0x30
 8002724:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	4a30      	ldr	r2, [pc, #192]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6313      	str	r3, [r2, #48]	@ 0x30
 800273c:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_DCMI_MspInit+0x164>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002748:	2360      	movs	r3, #96	@ 0x60
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002758:	230d      	movs	r3, #13
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800275c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002760:	4619      	mov	r1, r3
 8002762:	4826      	ldr	r0, [pc, #152]	@ (80027fc <HAL_DCMI_MspInit+0x168>)
 8002764:	f003 fcec 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002768:	2308      	movs	r3, #8
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002778:	230d      	movs	r3, #13
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800277c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002780:	4619      	mov	r1, r3
 8002782:	481f      	ldr	r0, [pc, #124]	@ (8002800 <HAL_DCMI_MspInit+0x16c>)
 8002784:	f003 fcdc 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800279a:	230d      	movs	r3, #13
 800279c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800279e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a2:	4619      	mov	r1, r3
 80027a4:	4817      	ldr	r0, [pc, #92]	@ (8002804 <HAL_DCMI_MspInit+0x170>)
 80027a6:	f003 fccb 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80027aa:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027bc:	230d      	movs	r3, #13
 80027be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c4:	4619      	mov	r1, r3
 80027c6:	4810      	ldr	r0, [pc, #64]	@ (8002808 <HAL_DCMI_MspInit+0x174>)
 80027c8:	f003 fcba 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80027cc:	2350      	movs	r3, #80	@ 0x50
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027dc:	230d      	movs	r3, #13
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	4809      	ldr	r0, [pc, #36]	@ (800280c <HAL_DCMI_MspInit+0x178>)
 80027e8:	f003 fcaa 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80027ec:	bf00      	nop
 80027ee:	3738      	adds	r7, #56	@ 0x38
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	50050000 	.word	0x50050000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40021000 	.word	0x40021000
 8002800:	40020c00 	.word	0x40020c00
 8002804:	40021800 	.word	0x40021800
 8002808:	40021c00 	.word	0x40021c00
 800280c:	40020000 	.word	0x40020000

08002810 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <HAL_DMA2D_MspInit+0x44>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <HAL_DMA2D_MspInit+0x48>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a0c      	ldr	r2, [pc, #48]	@ (8002858 <HAL_DMA2D_MspInit+0x48>)
 8002828:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_DMA2D_MspInit+0x48>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2105      	movs	r1, #5
 800283e:	205a      	movs	r0, #90	@ 0x5a
 8002840:	f001 fe1c 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002844:	205a      	movs	r0, #90	@ 0x5a
 8002846:	f001 fe35 	bl	80044b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	4002b000 	.word	0x4002b000
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0ac      	sub	sp, #176	@ 0xb0
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	2284      	movs	r2, #132	@ 0x84
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f020 ffa6 	bl	80237ce <memset>
  if(hi2c->Instance==I2C1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a44      	ldr	r2, [pc, #272]	@ (8002998 <HAL_I2C_MspInit+0x13c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d13d      	bne.n	8002908 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800288c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002890:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002892:	2300      	movs	r3, #0
 8002894:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002896:	f107 0318 	add.w	r3, r7, #24
 800289a:	4618      	mov	r0, r3
 800289c:	f006 fdd8 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028a6:	f7ff fe4d 	bl	8002544 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	4b3c      	ldr	r3, [pc, #240]	@ (800299c <HAL_I2C_MspInit+0x140>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a3b      	ldr	r2, [pc, #236]	@ (800299c <HAL_I2C_MspInit+0x140>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b39      	ldr	r3, [pc, #228]	@ (800299c <HAL_I2C_MspInit+0x140>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80028c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ca:	2312      	movs	r3, #18
 80028cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028dc:	2304      	movs	r3, #4
 80028de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028e6:	4619      	mov	r1, r3
 80028e8:	482d      	ldr	r0, [pc, #180]	@ (80029a0 <HAL_I2C_MspInit+0x144>)
 80028ea:	f003 fc29 	bl	8006140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ee:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_I2C_MspInit+0x140>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a2a      	ldr	r2, [pc, #168]	@ (800299c <HAL_I2C_MspInit+0x140>)
 80028f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fa:	4b28      	ldr	r3, [pc, #160]	@ (800299c <HAL_I2C_MspInit+0x140>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002906:	e042      	b.n	800298e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a25      	ldr	r2, [pc, #148]	@ (80029a4 <HAL_I2C_MspInit+0x148>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d13d      	bne.n	800298e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002912:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002916:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800291e:	f107 0318 	add.w	r3, r7, #24
 8002922:	4618      	mov	r0, r3
 8002924:	f006 fd94 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800292e:	f7ff fe09 	bl	8002544 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_I2C_MspInit+0x140>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_I2C_MspInit+0x140>)
 8002938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b17      	ldr	r3, [pc, #92]	@ (800299c <HAL_I2C_MspInit+0x140>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800294a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800294e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002952:	2312      	movs	r3, #18
 8002954:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002958:	2301      	movs	r3, #1
 800295a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295e:	2303      	movs	r3, #3
 8002960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002964:	2304      	movs	r3, #4
 8002966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800296a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800296e:	4619      	mov	r1, r3
 8002970:	480d      	ldr	r0, [pc, #52]	@ (80029a8 <HAL_I2C_MspInit+0x14c>)
 8002972:	f003 fbe5 	bl	8006140 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_I2C_MspInit+0x140>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <HAL_I2C_MspInit+0x140>)
 800297c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_I2C_MspInit+0x140>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
}
 800298e:	bf00      	nop
 8002990:	37b0      	adds	r7, #176	@ 0xb0
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40005400 	.word	0x40005400
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40005c00 	.word	0x40005c00
 80029a8:	40021c00 	.word	0x40021c00

080029ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	@ 0x38
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a55      	ldr	r2, [pc, #340]	@ (8002b20 <HAL_LTDC_MspInit+0x174>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f040 80a3 	bne.w	8002b16 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029d0:	4b54      	ldr	r3, [pc, #336]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	4a53      	ldr	r2, [pc, #332]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 80029d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029da:	6453      	str	r3, [r2, #68]	@ 0x44
 80029dc:	4b51      	ldr	r3, [pc, #324]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 80029de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 80029ee:	f043 0310 	orr.w	r3, r3, #16
 80029f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a00:	4b48      	ldr	r3, [pc, #288]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	4a47      	ldr	r2, [pc, #284]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0c:	4b45      	ldr	r3, [pc, #276]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a18:	4b42      	ldr	r3, [pc, #264]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	4a41      	ldr	r2, [pc, #260]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a24:	4b3f      	ldr	r3, [pc, #252]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a30:	4b3c      	ldr	r3, [pc, #240]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3c:	4b39      	ldr	r3, [pc, #228]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a48:	4b36      	ldr	r3, [pc, #216]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	4a35      	ldr	r2, [pc, #212]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a54:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <HAL_LTDC_MspInit+0x178>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002a60:	2310      	movs	r3, #16
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a70:	230e      	movs	r3, #14
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a78:	4619      	mov	r1, r3
 8002a7a:	482b      	ldr	r0, [pc, #172]	@ (8002b28 <HAL_LTDC_MspInit+0x17c>)
 8002a7c:	f003 fb60 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002a80:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a92:	230e      	movs	r3, #14
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4823      	ldr	r0, [pc, #140]	@ (8002b2c <HAL_LTDC_MspInit+0x180>)
 8002a9e:	f003 fb4f 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002aa2:	23f7      	movs	r3, #247	@ 0xf7
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ab2:	230e      	movs	r3, #14
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aba:	4619      	mov	r1, r3
 8002abc:	481c      	ldr	r0, [pc, #112]	@ (8002b30 <HAL_LTDC_MspInit+0x184>)
 8002abe:	f003 fb3f 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ad4:	2309      	movs	r3, #9
 8002ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	4815      	ldr	r0, [pc, #84]	@ (8002b34 <HAL_LTDC_MspInit+0x188>)
 8002ae0:	f003 fb2e 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002ae4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002af6:	230e      	movs	r3, #14
 8002af8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	480d      	ldr	r0, [pc, #52]	@ (8002b38 <HAL_LTDC_MspInit+0x18c>)
 8002b02:	f003 fb1d 	bl	8006140 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2105      	movs	r1, #5
 8002b0a:	2058      	movs	r0, #88	@ 0x58
 8002b0c:	f001 fcb6 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b10:	2058      	movs	r0, #88	@ 0x58
 8002b12:	f001 fccf 	bl	80044b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b16:	bf00      	nop
 8002b18:	3738      	adds	r7, #56	@ 0x38
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40016800 	.word	0x40016800
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40022400 	.word	0x40022400
 8002b30:	40022800 	.word	0x40022800
 8002b34:	40021800 	.word	0x40021800
 8002b38:	40022000 	.word	0x40022000

08002b3c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	@ 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a3b      	ldr	r2, [pc, #236]	@ (8002c48 <HAL_QSPI_MspInit+0x10c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d170      	bne.n	8002c40 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b62:	4a3a      	ldr	r2, [pc, #232]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b6a:	4b38      	ldr	r3, [pc, #224]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b76:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a34      	ldr	r2, [pc, #208]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b32      	ldr	r3, [pc, #200]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4a2e      	ldr	r2, [pc, #184]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba6:	4b29      	ldr	r3, [pc, #164]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a28      	ldr	r2, [pc, #160]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <HAL_QSPI_MspInit+0x110>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bce:	2309      	movs	r3, #9
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	481d      	ldr	r0, [pc, #116]	@ (8002c50 <HAL_QSPI_MspInit+0x114>)
 8002bda:	f003 fab1 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002bde:	2340      	movs	r3, #64	@ 0x40
 8002be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002bee:	230a      	movs	r3, #10
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	f107 031c 	add.w	r3, r7, #28
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4816      	ldr	r0, [pc, #88]	@ (8002c54 <HAL_QSPI_MspInit+0x118>)
 8002bfa:	f003 faa1 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c0e:	2309      	movs	r3, #9
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	480e      	ldr	r0, [pc, #56]	@ (8002c54 <HAL_QSPI_MspInit+0x118>)
 8002c1a:	f003 fa91 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002c1e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c30:	2309      	movs	r3, #9
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4807      	ldr	r0, [pc, #28]	@ (8002c58 <HAL_QSPI_MspInit+0x11c>)
 8002c3c:	f003 fa80 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002c40:	bf00      	nop
 8002c42:	3730      	adds	r7, #48	@ 0x30
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	a0001000 	.word	0xa0001000
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020c00 	.word	0x40020c00

08002c5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b0a4      	sub	sp, #144	@ 0x90
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	2284      	movs	r2, #132	@ 0x84
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f020 fdae 	bl	80237ce <memset>
  if(hrtc->Instance==RTC)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb0 <HAL_RTC_MspInit+0x54>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d114      	bne.n	8002ca6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f006 fbe0 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c96:	f7ff fc55 	bl	8002544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RTC_MspInit+0x58>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <HAL_RTC_MspInit+0x58>)
 8002ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	3790      	adds	r7, #144	@ 0x90
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40002800 	.word	0x40002800
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a25      	ldr	r2, [pc, #148]	@ (8002d6c <HAL_SD_MspInit+0xb4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d144      	bne.n	8002d64 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002cda:	4b25      	ldr	r3, [pc, #148]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	4a24      	ldr	r2, [pc, #144]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002ce0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0a:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a18      	ldr	r2, [pc, #96]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <HAL_SD_MspInit+0xb8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002d22:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002d26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d34:	230c      	movs	r3, #12
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480d      	ldr	r0, [pc, #52]	@ (8002d74 <HAL_SD_MspInit+0xbc>)
 8002d40:	f003 f9fe 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002d44:	2304      	movs	r3, #4
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d54:	230c      	movs	r3, #12
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4806      	ldr	r0, [pc, #24]	@ (8002d78 <HAL_SD_MspInit+0xc0>)
 8002d60:	f003 f9ee 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	@ 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020c00 	.word	0x40020c00

08002d7c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0aa      	sub	sp, #168	@ 0xa8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	2284      	movs	r2, #132	@ 0x84
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f020 fd16 	bl	80237ce <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8002daa:	d143      	bne.n	8002e34 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002dac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002db0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002db2:	2364      	movs	r3, #100	@ 0x64
 8002db4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002db6:	2302      	movs	r3, #2
 8002db8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f006 fb40 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002dd6:	f7ff fbb5 	bl	8002544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002dda:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <HAL_SPDIFRX_MspInit+0xc0>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	4a17      	ldr	r2, [pc, #92]	@ (8002e3c <HAL_SPDIFRX_MspInit+0xc0>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de6:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <HAL_SPDIFRX_MspInit+0xc0>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df2:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <HAL_SPDIFRX_MspInit+0xc0>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a11      	ldr	r2, [pc, #68]	@ (8002e3c <HAL_SPDIFRX_MspInit+0xc0>)
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <HAL_SPDIFRX_MspInit+0xc0>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002e22:	2308      	movs	r3, #8
 8002e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002e28:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4804      	ldr	r0, [pc, #16]	@ (8002e40 <HAL_SPDIFRX_MspInit+0xc4>)
 8002e30:	f003 f986 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002e34:	bf00      	nop
 8002e36:	37a8      	adds	r7, #168	@ 0xa8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020c00 	.word	0x40020c00

08002e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	@ 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a25      	ldr	r2, [pc, #148]	@ (8002ef8 <HAL_SPI_MspInit+0xb4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d144      	bne.n	8002ef0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e66:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	4a24      	ldr	r2, [pc, #144]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e72:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	4a1e      	ldr	r2, [pc, #120]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <HAL_SPI_MspInit+0xb8>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480d      	ldr	r0, [pc, #52]	@ (8002f00 <HAL_SPI_MspInit+0xbc>)
 8002eca:	f003 f939 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ece:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ee0:	2305      	movs	r3, #5
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4806      	ldr	r0, [pc, #24]	@ (8002f04 <HAL_SPI_MspInit+0xc0>)
 8002eec:	f003 f928 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3728      	adds	r7, #40	@ 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40003800 	.word	0x40003800
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40020400 	.word	0x40020400

08002f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	@ 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd0 <HAL_TIM_Base_MspInit+0xc8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10c      	bne.n	8002f34 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f26:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f32:	e046      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f3e:	4b25      	ldr	r3, [pc, #148]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	4a24      	ldr	r2, [pc, #144]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4a:	4b22      	ldr	r3, [pc, #136]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	69bb      	ldr	r3, [r7, #24]
}
 8002f56:	e034      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10c      	bne.n	8002f7c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f62:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6e:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
}
 8002f7a:	e022      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a16      	ldr	r2, [pc, #88]	@ (8002fdc <HAL_TIM_Base_MspInit+0xd4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10c      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f86:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
}
 8002f9e:	e010      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xd8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	4a09      	ldr	r2, [pc, #36]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fb6:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <HAL_TIM_Base_MspInit+0xcc>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	bf00      	nop
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000c00 	.word	0x40000c00
 8002fe0:	40010400 	.word	0x40010400

08002fe4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_TIM_PWM_MspInit+0x38>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10b      	bne.n	800300e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003000:	6413      	str	r3, [r2, #64]	@ 0x40
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <HAL_TIM_PWM_MspInit+0x3c>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40001800 	.word	0x40001800
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	@ 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a56      	ldr	r2, [pc, #344]	@ (800319c <HAL_TIM_MspPostInit+0x178>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d11d      	bne.n	8003082 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	4b56      	ldr	r3, [pc, #344]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a55      	ldr	r2, [pc, #340]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800305e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003070:	2301      	movs	r3, #1
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4619      	mov	r1, r3
 800307a:	484a      	ldr	r0, [pc, #296]	@ (80031a4 <HAL_TIM_MspPostInit+0x180>)
 800307c:	f003 f860 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003080:	e087      	b.n	8003192 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308a:	d11d      	bne.n	80030c8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	4b44      	ldr	r3, [pc, #272]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	4a43      	ldr	r2, [pc, #268]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6313      	str	r3, [r2, #48]	@ 0x30
 8003098:	4b41      	ldr	r3, [pc, #260]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80030a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030b6:	2301      	movs	r3, #1
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80030ba:	f107 031c 	add.w	r3, r7, #28
 80030be:	4619      	mov	r1, r3
 80030c0:	4838      	ldr	r0, [pc, #224]	@ (80031a4 <HAL_TIM_MspPostInit+0x180>)
 80030c2:	f003 f83d 	bl	8006140 <HAL_GPIO_Init>
}
 80030c6:	e064      	b.n	8003192 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a36      	ldr	r2, [pc, #216]	@ (80031a8 <HAL_TIM_MspPostInit+0x184>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d11c      	bne.n	800310c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d2:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030de:	4b30      	ldr	r3, [pc, #192]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80030ea:	2310      	movs	r3, #16
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030fa:	2302      	movs	r3, #2
 80030fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	4829      	ldr	r0, [pc, #164]	@ (80031ac <HAL_TIM_MspPostInit+0x188>)
 8003106:	f003 f81b 	bl	8006140 <HAL_GPIO_Init>
}
 800310a:	e042      	b.n	8003192 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_TIM_MspPostInit+0x18c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d11c      	bne.n	8003150 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003116:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	4a21      	ldr	r2, [pc, #132]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003120:	6313      	str	r3, [r2, #48]	@ 0x30
 8003122:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800312e:	2301      	movs	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800313e:	2302      	movs	r3, #2
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	481a      	ldr	r0, [pc, #104]	@ (80031b4 <HAL_TIM_MspPostInit+0x190>)
 800314a:	f002 fff9 	bl	8006140 <HAL_GPIO_Init>
}
 800314e:	e020      	b.n	8003192 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	@ (80031b8 <HAL_TIM_MspPostInit+0x194>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d11b      	bne.n	8003192 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800315a:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4a10      	ldr	r2, [pc, #64]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <HAL_TIM_MspPostInit+0x17c>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003172:	2340      	movs	r3, #64	@ 0x40
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003182:	2309      	movs	r3, #9
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003186:	f107 031c 	add.w	r3, r7, #28
 800318a:	4619      	mov	r1, r3
 800318c:	480b      	ldr	r0, [pc, #44]	@ (80031bc <HAL_TIM_MspPostInit+0x198>)
 800318e:	f002 ffd7 	bl	8006140 <HAL_GPIO_Init>
}
 8003192:	bf00      	nop
 8003194:	3730      	adds	r7, #48	@ 0x30
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40001800 	.word	0x40001800
 80031bc:	40021c00 	.word	0x40021c00

080031c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0ae      	sub	sp, #184	@ 0xb8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	2284      	movs	r2, #132	@ 0x84
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f020 faf4 	bl	80237ce <memset>
  if(huart->Instance==USART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a53      	ldr	r2, [pc, #332]	@ (8003338 <HAL_UART_MspInit+0x178>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d15d      	bne.n	80032ac <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031f0:	2340      	movs	r3, #64	@ 0x40
 80031f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031f4:	2300      	movs	r3, #0
 80031f6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f8:	f107 0320 	add.w	r3, r7, #32
 80031fc:	4618      	mov	r0, r3
 80031fe:	f006 f927 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003208:	f7ff f99c 	bl	8002544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800320c:	4b4b      	ldr	r3, [pc, #300]	@ (800333c <HAL_UART_MspInit+0x17c>)
 800320e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003210:	4a4a      	ldr	r2, [pc, #296]	@ (800333c <HAL_UART_MspInit+0x17c>)
 8003212:	f043 0310 	orr.w	r3, r3, #16
 8003216:	6453      	str	r3, [r2, #68]	@ 0x44
 8003218:	4b48      	ldr	r3, [pc, #288]	@ (800333c <HAL_UART_MspInit+0x17c>)
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003224:	4b45      	ldr	r3, [pc, #276]	@ (800333c <HAL_UART_MspInit+0x17c>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	4a44      	ldr	r2, [pc, #272]	@ (800333c <HAL_UART_MspInit+0x17c>)
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003230:	4b42      	ldr	r3, [pc, #264]	@ (800333c <HAL_UART_MspInit+0x17c>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <HAL_UART_MspInit+0x17c>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	4a3e      	ldr	r2, [pc, #248]	@ (800333c <HAL_UART_MspInit+0x17c>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6313      	str	r3, [r2, #48]	@ 0x30
 8003248:	4b3c      	ldr	r3, [pc, #240]	@ (800333c <HAL_UART_MspInit+0x17c>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800326c:	2307      	movs	r3, #7
 800326e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003272:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003276:	4619      	mov	r1, r3
 8003278:	4831      	ldr	r0, [pc, #196]	@ (8003340 <HAL_UART_MspInit+0x180>)
 800327a:	f002 ff61 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800327e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003298:	2307      	movs	r3, #7
 800329a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800329e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032a2:	4619      	mov	r1, r3
 80032a4:	4827      	ldr	r0, [pc, #156]	@ (8003344 <HAL_UART_MspInit+0x184>)
 80032a6:	f002 ff4b 	bl	8006140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032aa:	e040      	b.n	800332e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a25      	ldr	r2, [pc, #148]	@ (8003348 <HAL_UART_MspInit+0x188>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d13b      	bne.n	800332e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80032b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032ba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80032bc:	2300      	movs	r3, #0
 80032be:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032c0:	f107 0320 	add.w	r3, r7, #32
 80032c4:	4618      	mov	r0, r3
 80032c6:	f006 f8c3 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80032d0:	f7ff f938 	bl	8002544 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_UART_MspInit+0x17c>)
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	4a18      	ldr	r2, [pc, #96]	@ (800333c <HAL_UART_MspInit+0x17c>)
 80032da:	f043 0320 	orr.w	r3, r3, #32
 80032de:	6453      	str	r3, [r2, #68]	@ 0x44
 80032e0:	4b16      	ldr	r3, [pc, #88]	@ (800333c <HAL_UART_MspInit+0x17c>)
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ec:	4b13      	ldr	r3, [pc, #76]	@ (800333c <HAL_UART_MspInit+0x17c>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a12      	ldr	r2, [pc, #72]	@ (800333c <HAL_UART_MspInit+0x17c>)
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f8:	4b10      	ldr	r3, [pc, #64]	@ (800333c <HAL_UART_MspInit+0x17c>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003304:	23c0      	movs	r3, #192	@ 0xc0
 8003306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800331c:	2308      	movs	r3, #8
 800331e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003322:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003326:	4619      	mov	r1, r3
 8003328:	4808      	ldr	r0, [pc, #32]	@ (800334c <HAL_UART_MspInit+0x18c>)
 800332a:	f002 ff09 	bl	8006140 <HAL_GPIO_Init>
}
 800332e:	bf00      	nop
 8003330:	37b8      	adds	r7, #184	@ 0xb8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40011000 	.word	0x40011000
 800333c:	40023800 	.word	0x40023800
 8003340:	40020400 	.word	0x40020400
 8003344:	40020000 	.word	0x40020000
 8003348:	40011400 	.word	0x40011400
 800334c:	40020800 	.word	0x40020800

08003350 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003364:	4b3a      	ldr	r3, [pc, #232]	@ (8003450 <HAL_FMC_MspInit+0x100>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d16d      	bne.n	8003448 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800336c:	4b38      	ldr	r3, [pc, #224]	@ (8003450 <HAL_FMC_MspInit+0x100>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003372:	4b38      	ldr	r3, [pc, #224]	@ (8003454 <HAL_FMC_MspInit+0x104>)
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	4a37      	ldr	r2, [pc, #220]	@ (8003454 <HAL_FMC_MspInit+0x104>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6393      	str	r3, [r2, #56]	@ 0x38
 800337e:	4b35      	ldr	r3, [pc, #212]	@ (8003454 <HAL_FMC_MspInit+0x104>)
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800338a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800338e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	2303      	movs	r3, #3
 800339a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800339c:	230c      	movs	r3, #12
 800339e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	482c      	ldr	r0, [pc, #176]	@ (8003458 <HAL_FMC_MspInit+0x108>)
 80033a6:	f002 fecb 	bl	8006140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80033aa:	f248 1333 	movw	r3, #33075	@ 0x8133
 80033ae:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033bc:	230c      	movs	r3, #12
 80033be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4825      	ldr	r0, [pc, #148]	@ (800345c <HAL_FMC_MspInit+0x10c>)
 80033c6:	f002 febb 	bl	8006140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80033ca:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80033ce:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033dc:	230c      	movs	r3, #12
 80033de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	481e      	ldr	r0, [pc, #120]	@ (8003460 <HAL_FMC_MspInit+0x110>)
 80033e6:	f002 feab 	bl	8006140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80033ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80033ee:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f8:	2303      	movs	r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033fc:	230c      	movs	r3, #12
 80033fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4817      	ldr	r0, [pc, #92]	@ (8003464 <HAL_FMC_MspInit+0x114>)
 8003406:	f002 fe9b 	bl	8006140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800340a:	2328      	movs	r3, #40	@ 0x28
 800340c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2302      	movs	r3, #2
 8003410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003416:	2303      	movs	r3, #3
 8003418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800341a:	230c      	movs	r3, #12
 800341c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4811      	ldr	r0, [pc, #68]	@ (8003468 <HAL_FMC_MspInit+0x118>)
 8003424:	f002 fe8c 	bl	8006140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003428:	2308      	movs	r3, #8
 800342a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003438:	230c      	movs	r3, #12
 800343a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	4619      	mov	r1, r3
 8003440:	480a      	ldr	r0, [pc, #40]	@ (800346c <HAL_FMC_MspInit+0x11c>)
 8003442:	f002 fe7d 	bl	8006140 <HAL_GPIO_Init>
 8003446:	e000      	b.n	800344a <HAL_FMC_MspInit+0xfa>
    return;
 8003448:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000cb0 	.word	0x20000cb0
 8003454:	40023800 	.word	0x40023800
 8003458:	40021000 	.word	0x40021000
 800345c:	40021800 	.word	0x40021800
 8003460:	40020c00 	.word	0x40020c00
 8003464:	40021400 	.word	0x40021400
 8003468:	40021c00 	.word	0x40021c00
 800346c:	40020800 	.word	0x40020800

08003470 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003478:	f7ff ff6a 	bl	8003350 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	@ 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2b      	ldr	r2, [pc, #172]	@ (8003540 <HAL_SAI_MspInit+0xbc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d124      	bne.n	80034e0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003496:	4b2b      	ldr	r3, [pc, #172]	@ (8003544 <HAL_SAI_MspInit+0xc0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800349e:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <HAL_SAI_MspInit+0xc4>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	4a29      	ldr	r2, [pc, #164]	@ (8003548 <HAL_SAI_MspInit+0xc4>)
 80034a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034aa:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_SAI_MspInit+0xc4>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80034b6:	4b23      	ldr	r3, [pc, #140]	@ (8003544 <HAL_SAI_MspInit+0xc0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	4a21      	ldr	r2, [pc, #132]	@ (8003544 <HAL_SAI_MspInit+0xc0>)
 80034be:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034c0:	23f0      	movs	r3, #240	@ 0xf0
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034d0:	230a      	movs	r3, #10
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	481c      	ldr	r0, [pc, #112]	@ (800354c <HAL_SAI_MspInit+0xc8>)
 80034dc:	f002 fe30 	bl	8006140 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <HAL_SAI_MspInit+0xcc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d125      	bne.n	8003536 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80034ea:	4b16      	ldr	r3, [pc, #88]	@ (8003544 <HAL_SAI_MspInit+0xc0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_SAI_MspInit+0xc4>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <HAL_SAI_MspInit+0xc4>)
 80034f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034fe:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_SAI_MspInit+0xc4>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_SAI_MspInit+0xc0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3301      	adds	r3, #1
 8003510:	4a0c      	ldr	r2, [pc, #48]	@ (8003544 <HAL_SAI_MspInit+0xc0>)
 8003512:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003526:	230a      	movs	r3, #10
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	4808      	ldr	r0, [pc, #32]	@ (8003554 <HAL_SAI_MspInit+0xd0>)
 8003532:	f002 fe05 	bl	8006140 <HAL_GPIO_Init>

    }
}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	@ 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40015c04 	.word	0x40015c04
 8003544:	20000cb4 	.word	0x20000cb4
 8003548:	40023800 	.word	0x40023800
 800354c:	40022000 	.word	0x40022000
 8003550:	40015c24 	.word	0x40015c24
 8003554:	40021800 	.word	0x40021800

08003558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	@ 0x38
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003568:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <HAL_InitTick+0xe0>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	4a32      	ldr	r2, [pc, #200]	@ (8003638 <HAL_InitTick+0xe0>)
 800356e:	f043 0310 	orr.w	r3, r3, #16
 8003572:	6413      	str	r3, [r2, #64]	@ 0x40
 8003574:	4b30      	ldr	r3, [pc, #192]	@ (8003638 <HAL_InitTick+0xe0>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003580:	f107 0210 	add.w	r2, r7, #16
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f005 ff2e 	bl	80093ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800359a:	f005 feff 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 800359e:	6378      	str	r0, [r7, #52]	@ 0x34
 80035a0:	e004      	b.n	80035ac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035a2:	f005 fefb 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 80035a6:	4603      	mov	r3, r0
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ae:	4a23      	ldr	r2, [pc, #140]	@ (800363c <HAL_InitTick+0xe4>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	0c9b      	lsrs	r3, r3, #18
 80035b6:	3b01      	subs	r3, #1
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035ba:	4b21      	ldr	r3, [pc, #132]	@ (8003640 <HAL_InitTick+0xe8>)
 80035bc:	4a21      	ldr	r2, [pc, #132]	@ (8003644 <HAL_InitTick+0xec>)
 80035be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80035c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003640 <HAL_InitTick+0xe8>)
 80035c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003640 <HAL_InitTick+0xe8>)
 80035ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003640 <HAL_InitTick+0xe8>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <HAL_InitTick+0xe8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035da:	4b19      	ldr	r3, [pc, #100]	@ (8003640 <HAL_InitTick+0xe8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80035e0:	4817      	ldr	r0, [pc, #92]	@ (8003640 <HAL_InitTick+0xe8>)
 80035e2:	f008 fbce 	bl	800bd82 <HAL_TIM_Base_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80035ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11b      	bne.n	800362c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80035f4:	4812      	ldr	r0, [pc, #72]	@ (8003640 <HAL_InitTick+0xe8>)
 80035f6:	f008 fc1b 	bl	800be30 <HAL_TIM_Base_Start_IT>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003600:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003604:	2b00      	cmp	r3, #0
 8003606:	d111      	bne.n	800362c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003608:	2036      	movs	r0, #54	@ 0x36
 800360a:	f000 ff53 	bl	80044b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b0f      	cmp	r3, #15
 8003612:	d808      	bhi.n	8003626 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003614:	2200      	movs	r2, #0
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	2036      	movs	r0, #54	@ 0x36
 800361a:	f000 ff2f 	bl	800447c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <HAL_InitTick+0xf0>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	e002      	b.n	800362c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800362c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003630:	4618      	mov	r0, r3
 8003632:	3738      	adds	r7, #56	@ 0x38
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	431bde83 	.word	0x431bde83
 8003640:	20000cb8 	.word	0x20000cb8
 8003644:	40001000 	.word	0x40001000
 8003648:	20000004 	.word	0x20000004

0800364c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <NMI_Handler+0x4>

08003654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <HardFault_Handler+0x4>

0800365c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <MemManage_Handler+0x4>

08003664 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <BusFault_Handler+0x4>

0800366c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <UsageFault_Handler+0x4>

08003674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003688:	4802      	ldr	r0, [pc, #8]	@ (8003694 <TIM6_DAC_IRQHandler+0x10>)
 800368a:	f008 fca0 	bl	800bfce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000cb8 	.word	0x20000cb8

08003698 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800369c:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <ETH_IRQHandler+0x10>)
 800369e:	f001 fe7b 	bl	8005398 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20005904 	.word	0x20005904

080036ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80036b0:	4802      	ldr	r0, [pc, #8]	@ (80036bc <OTG_FS_IRQHandler+0x10>)
 80036b2:	f003 f98d 	bl	80069d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20019108 	.word	0x20019108

080036c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80036c4:	4802      	ldr	r0, [pc, #8]	@ (80036d0 <LTDC_IRQHandler+0x10>)
 80036c6:	f004 fe4b 	bl	8008360 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000650 	.word	0x20000650

080036d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80036d8:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <DMA2D_IRQHandler+0x10>)
 80036da:	f001 f941 	bl	8004960 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000568 	.word	0x20000568

080036e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return 1;
 80036ec:	2301      	movs	r3, #1
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <_kill>:

int _kill(int pid, int sig)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003702:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <_kill+0x20>)
 8003704:	2216      	movs	r2, #22
 8003706:	601a      	str	r2, [r3, #0]
  return -1;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	20019550 	.word	0x20019550

0800371c <_exit>:

void _exit (int status)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffe5 	bl	80036f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800372e:	bf00      	nop
 8003730:	e7fd      	b.n	800372e <_exit+0x12>

08003732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e00a      	b.n	800375a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003744:	f3af 8000 	nop.w
 8003748:	4601      	mov	r1, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	60ba      	str	r2, [r7, #8]
 8003750:	b2ca      	uxtb	r2, r1
 8003752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	dbf0      	blt.n	8003744 <_read+0x12>
  }

  return len;
 8003762:	687b      	ldr	r3, [r7, #4]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e009      	b.n	8003792 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	60ba      	str	r2, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	3301      	adds	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	dbf1      	blt.n	800377e <_write+0x12>
  }
  return len;
 800379a:	687b      	ldr	r3, [r7, #4]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_close>:

int _close(int file)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037cc:	605a      	str	r2, [r3, #4]
  return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <_isatty>:

int _isatty(int file)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003814:	4a14      	ldr	r2, [pc, #80]	@ (8003868 <_sbrk+0x5c>)
 8003816:	4b15      	ldr	r3, [pc, #84]	@ (800386c <_sbrk+0x60>)
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003820:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <_sbrk+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <_sbrk+0x64>)
 800382a:	4a12      	ldr	r2, [pc, #72]	@ (8003874 <_sbrk+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d205      	bcs.n	8003848 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800383c:	4b0e      	ldr	r3, [pc, #56]	@ (8003878 <_sbrk+0x6c>)
 800383e:	220c      	movs	r2, #12
 8003840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e009      	b.n	800385c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <_sbrk+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384e:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <_sbrk+0x64>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	4a06      	ldr	r2, [pc, #24]	@ (8003870 <_sbrk+0x64>)
 8003858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	20050000 	.word	0x20050000
 800386c:	00000400 	.word	0x00000400
 8003870:	20000d04 	.word	0x20000d04
 8003874:	20019558 	.word	0x20019558
 8003878:	20019550 	.word	0x20019550

0800387c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <SystemInit+0x20>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003886:	4a05      	ldr	r2, [pc, #20]	@ (800389c <SystemInit+0x20>)
 8003888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800388c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <my_http_cb>:
static unsigned short port, dest_port;
char msg_rest_api[512];


err_t my_http_cb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	70fb      	strb	r3, [r7, #3]
	for(uint16_t i=0;i<p->len;i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	82fb      	strh	r3, [r7, #22]
 80038b2:	e00a      	b.n	80038ca <my_http_cb+0x2a>
	{
		strncpy (msg_rest_api, p->payload, p->len);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	895b      	ldrh	r3, [r3, #10]
 80038bc:	461a      	mov	r2, r3
 80038be:	4808      	ldr	r0, [pc, #32]	@ (80038e0 <my_http_cb+0x40>)
 80038c0:	f01f ff8d 	bl	80237de <strncpy>
	for(uint16_t i=0;i<p->len;i++)
 80038c4:	8afb      	ldrh	r3, [r7, #22]
 80038c6:	3301      	adds	r3, #1
 80038c8:	82fb      	strh	r3, [r7, #22]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	895b      	ldrh	r3, [r3, #10]
 80038ce:	8afa      	ldrh	r2, [r7, #22]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3ef      	bcc.n	80038b4 <my_http_cb+0x14>
	}
	return ERR_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000d14 	.word	0x20000d14

080038e4 <my_httpc_result_fn>:


void my_httpc_result_fn(void *arg, httpc_result_t httpc_result, u32_t rx_content_len, u32_t srv_res, err_t err)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	460b      	mov	r3, r1
 80038f2:	72fb      	strb	r3, [r7, #11]
//	printf("my_httpc_result_fn %d %ld %ld\n", httpc_result, rx_content_len, srv_res);
        // if the download succeeds srv_res should be 200, httpc_result 0 (HTTPC_RESULT_OK) and rx_content_len!=0
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <my_httpc_headers_done_fn>:


err_t my_httpc_headers_done_fn(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	807b      	strh	r3, [r7, #2]
	return ERR_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <tcpinit_thread>:


static void tcpinit_thread(void *arg)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b0b2      	sub	sp, #200	@ 0xc8
 8003920:	af04      	add	r7, sp, #16
 8003922:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;
	httpc_connection_t http_settings;
	httpc_state_t *connection;const char rest_api_uri[150] = "/rooftop_sites/e5cc-f38e-7730-805d/estimated_actuals?api_key=u70RlALYTh-bWi9lDsuRKxWWi3jQApLz&format=json&hours=1";
 8003924:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <tcpinit_thread+0xac>)
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	4611      	mov	r1, r2
 800392c:	2272      	movs	r2, #114	@ 0x72
 800392e:	4618      	mov	r0, r3
 8003930:	f020 f841 	bl	80239b6 <memcpy>
 8003934:	f107 037a 	add.w	r3, r7, #122	@ 0x7a
 8003938:	2224      	movs	r2, #36	@ 0x24
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f01f ff46 	bl	80237ce <memset>


	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8003942:	2200      	movs	r2, #0
 8003944:	2100      	movs	r1, #0
 8003946:	2010      	movs	r0, #16
 8003948:	f012 fb02 	bl	8015f50 <netconn_new_with_proto_and_callback>
 800394c:	4603      	mov	r3, r0
 800394e:	4a1f      	ldr	r2, [pc, #124]	@ (80039cc <tcpinit_thread+0xb0>)
 8003950:	6013      	str	r3, [r2, #0]

	err = netconn_bind(conn, IP_ADDR_ANY, 7 /*62510*/);
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <tcpinit_thread+0xb0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2207      	movs	r2, #7
 8003958:	491d      	ldr	r1, [pc, #116]	@ (80039d0 <tcpinit_thread+0xb4>)
 800395a:	4618      	mov	r0, r3
 800395c:	f012 fbb2 	bl	80160c4 <netconn_bind>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	if (err == ERR_OK)
 8003966:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 800396a:	2b00      	cmp	r3, #0
 800396c:	d122      	bne.n	80039b4 <tcpinit_thread+0x98>
	{
		/* The desination IP adress of the computer */
		IP_ADDR4(&dest_addr, 192, 168, 0, 171);
 800396e:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <tcpinit_thread+0xb8>)
 8003970:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <tcpinit_thread+0xbc>)
 8003972:	601a      	str	r2, [r3, #0]
		dest_port = 10;  // server port
 8003974:	4b19      	ldr	r3, [pc, #100]	@ (80039dc <tcpinit_thread+0xc0>)
 8003976:	220a      	movs	r2, #10
 8003978:	801a      	strh	r2, [r3, #0]

		http_settings.use_proxy =0;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
		http_settings.result_fn = my_httpc_result_fn;
 8003980:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <tcpinit_thread+0xc4>)
 8003982:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		http_settings.headers_done_fn = my_httpc_headers_done_fn;
 8003986:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <tcpinit_thread+0xc8>)
 8003988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		httpc_get_file(&dest_addr, 10, rest_api_uri, &http_settings, my_http_cb, 0, &connection);
 800398c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8003990:	f107 0208 	add.w	r2, r7, #8
 8003994:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	2300      	movs	r3, #0
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	4b12      	ldr	r3, [pc, #72]	@ (80039e8 <tcpinit_thread+0xcc>)
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	460b      	mov	r3, r1
 80039a4:	210a      	movs	r1, #10
 80039a6:	480b      	ldr	r0, [pc, #44]	@ (80039d4 <tcpinit_thread+0xb8>)
 80039a8:	f7fd fae6 	bl	8000f78 <httpc_get_file>

		for(;;)
		{
			osDelay(1);
 80039ac:	2001      	movs	r0, #1
 80039ae:	f00f f957 	bl	8012c60 <osDelay>
 80039b2:	e7fb      	b.n	80039ac <tcpinit_thread+0x90>
		}
	}
	else
	{
		// if the binding wasn't successful, delete the netconn connection
		netconn_delete(conn);
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <tcpinit_thread+0xb0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f012 fb67 	bl	801608c <netconn_delete>
	}
}
 80039be:	bf00      	nop
 80039c0:	37b8      	adds	r7, #184	@ 0xb8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	08024a38 	.word	0x08024a38
 80039cc:	20000d08 	.word	0x20000d08
 80039d0:	0802805c 	.word	0x0802805c
 80039d4:	20000d0c 	.word	0x20000d0c
 80039d8:	ab00a8c0 	.word	0xab00a8c0
 80039dc:	20000d10 	.word	0x20000d10
 80039e0:	080038e5 	.word	0x080038e5
 80039e4:	08003901 	.word	0x08003901
 80039e8:	080038a1 	.word	0x080038a1

080039ec <tcpclient_init>:



void tcpclient_init (void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af02      	add	r7, sp, #8
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80039f2:	2300      	movs	r3, #0
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039fa:	2200      	movs	r2, #0
 80039fc:	4903      	ldr	r1, [pc, #12]	@ (8003a0c <tcpclient_init+0x20>)
 80039fe:	4804      	ldr	r0, [pc, #16]	@ (8003a10 <tcpclient_init+0x24>)
 8003a00:	f01f f8b2 	bl	8022b68 <sys_thread_new>
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	0800391d 	.word	0x0800391d
 8003a10:	08024aac 	.word	0x08024aac

08003a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a18:	480d      	ldr	r0, [pc, #52]	@ (8003a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a1a:	490e      	ldr	r1, [pc, #56]	@ (8003a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a20:	e002      	b.n	8003a28 <LoopCopyDataInit>

08003a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a26:	3304      	adds	r3, #4

08003a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a2c:	d3f9      	bcc.n	8003a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8003a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a30:	4c0b      	ldr	r4, [pc, #44]	@ (8003a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a34:	e001      	b.n	8003a3a <LoopFillZerobss>

08003a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a38:	3204      	adds	r2, #4

08003a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a3c:	d3fb      	bcc.n	8003a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a3e:	f7ff ff1d 	bl	800387c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a42:	f01f ff91 	bl	8023968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a46:	f7fd fb63 	bl	8001110 <main>
  bx  lr    
 8003a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a54:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003a58:	08028268 	.word	0x08028268
  ldr r2, =_sbss
 8003a5c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003a60:	20019558 	.word	0x20019558

08003a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a64:	e7fe      	b.n	8003a64 <ADC_IRQHandler>

08003a66 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <LAN8742_RegisterBusIO+0x28>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <LAN8742_RegisterBusIO+0x28>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <LAN8742_RegisterBusIO+0x28>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	e014      	b.n	8003abe <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d17c      	bne.n	8003be4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e01c      	b.n	8003b3e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f107 0208 	add.w	r2, r7, #8
 8003b0c:	2112      	movs	r1, #18
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	4798      	blx	r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da03      	bge.n	8003b20 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003b18:	f06f 0304 	mvn.w	r3, #4
 8003b1c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003b1e:	e00b      	b.n	8003b38 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d105      	bne.n	8003b38 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
         break;
 8003b36:	e005      	b.n	8003b44 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b1f      	cmp	r3, #31
 8003b42:	d9df      	bls.n	8003b04 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b1f      	cmp	r3, #31
 8003b4a:	d902      	bls.n	8003b52 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003b4c:	f06f 0302 	mvn.w	r3, #2
 8003b50:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d145      	bne.n	8003be4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6810      	ldr	r0, [r2, #0]
 8003b60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003b64:	2100      	movs	r1, #0
 8003b66:	4798      	blx	r3
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db37      	blt.n	8003bde <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6810      	ldr	r0, [r2, #0]
 8003b76:	f107 0208 	add.w	r2, r7, #8
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4798      	blx	r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	db28      	blt.n	8003bd6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	4798      	blx	r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003b8e:	e01c      	b.n	8003bca <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	4798      	blx	r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003ba2:	d80e      	bhi.n	8003bc2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6810      	ldr	r0, [r2, #0]
 8003bac:	f107 0208 	add.w	r2, r7, #8
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4798      	blx	r3
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da07      	bge.n	8003bca <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003bba:	f06f 0304 	mvn.w	r3, #4
 8003bbe:	613b      	str	r3, [r7, #16]
                 break;
 8003bc0:	e010      	b.n	8003be4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003bc2:	f06f 0301 	mvn.w	r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]
               break;
 8003bc8:	e00c      	b.n	8003be4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1dd      	bne.n	8003b90 <LAN8742_Init+0xc6>
 8003bd4:	e006      	b.n	8003be4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003bd6:	f06f 0304 	mvn.w	r3, #4
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e002      	b.n	8003be4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003bde:	f06f 0303 	mvn.w	r3, #3
 8003be2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d112      	bne.n	8003c10 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	4798      	blx	r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003bf4:	bf00      	nop
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4798      	blx	r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003c08:	d9f5      	bls.n	8003bf6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003c10:	693b      	ldr	r3, [r7, #16]
 }
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6810      	ldr	r0, [r2, #0]
 8003c2e:	f107 020c 	add.w	r2, r7, #12
 8003c32:	2101      	movs	r1, #1
 8003c34:	4798      	blx	r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da02      	bge.n	8003c42 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003c3c:	f06f 0304 	mvn.w	r3, #4
 8003c40:	e06e      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6810      	ldr	r0, [r2, #0]
 8003c4a:	f107 020c 	add.w	r2, r7, #12
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4798      	blx	r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	da02      	bge.n	8003c5e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003c58:	f06f 0304 	mvn.w	r3, #4
 8003c5c:	e060      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e059      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6810      	ldr	r0, [r2, #0]
 8003c74:	f107 020c 	add.w	r2, r7, #12
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4798      	blx	r3
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da02      	bge.n	8003c88 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003c82:	f06f 0304 	mvn.w	r3, #4
 8003c86:	e04b      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11b      	bne.n	8003cca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <LAN8742_GetLinkState+0x90>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e03a      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e033      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	e02c      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e02a      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6810      	ldr	r0, [r2, #0]
 8003cd2:	f107 020c 	add.w	r2, r7, #12
 8003cd6:	211f      	movs	r1, #31
 8003cd8:	4798      	blx	r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da02      	bge.n	8003ce6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003ce0:	f06f 0304 	mvn.w	r3, #4
 8003ce4:	e01c      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003cf0:	2306      	movs	r3, #6
 8003cf2:	e015      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 031c 	and.w	r3, r3, #28
 8003cfa:	2b18      	cmp	r3, #24
 8003cfc:	d101      	bne.n	8003d02 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e00e      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 031c 	and.w	r3, r3, #28
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d101      	bne.n	8003d10 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e007      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 031c 	and.w	r3, r3, #28
 8003d16:	2b14      	cmp	r3, #20
 8003d18:	d101      	bne.n	8003d1e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	e000      	b.n	8003d20 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d1e:	2305      	movs	r3, #5
    }				
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d2c:	2003      	movs	r0, #3
 8003d2e:	f000 fb9a 	bl	8004466 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d32:	2000      	movs	r0, #0
 8003d34:	f7ff fc10 	bl	8003558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d38:	f7fe fc0a 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d48:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <HAL_IncTick+0x20>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <HAL_IncTick+0x24>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <HAL_IncTick+0x24>)
 8003d56:	6013      	str	r3, [r2, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000008 	.word	0x20000008
 8003d68:	20000f14 	.word	0x20000f14

08003d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d70:	4b03      	ldr	r3, [pc, #12]	@ (8003d80 <HAL_GetTick+0x14>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000f14 	.word	0x20000f14

08003d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d8c:	f7ff ffee 	bl	8003d6c <HAL_GetTick>
 8003d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d005      	beq.n	8003daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <HAL_Delay+0x44>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003daa:	bf00      	nop
 8003dac:	f7ff ffde 	bl	8003d6c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d8f7      	bhi.n	8003dac <HAL_Delay+0x28>
  {
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000008 	.word	0x20000008

08003dcc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <HAL_GetREVID+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e0042000 	.word	0xe0042000

08003de4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e031      	b.n	8003e5e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fe fbcc 	bl	80025a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e26:	4b10      	ldr	r3, [pc, #64]	@ (8003e68 <HAL_ADC_Init+0x84>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	f043 0202 	orr.w	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f970 	bl	8004118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f023 0303 	bic.w	r3, r3, #3
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e4e:	e001      	b.n	8003e54 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	ffffeefd 	.word	0xffffeefd

08003e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x1c>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e136      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x28a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d93a      	bls.n	8003f0e <HAL_ADC_ConfigChannel+0xa2>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ea0:	d035      	beq.n	8003f0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68d9      	ldr	r1, [r3, #12]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3b1e      	subs	r3, #30
 8003eb8:	2207      	movs	r2, #7
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a8d      	ldr	r2, [pc, #564]	@ (8004104 <HAL_ADC_ConfigChannel+0x298>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68d9      	ldr	r1, [r3, #12]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	061a      	lsls	r2, r3, #24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ee6:	e035      	b.n	8003f54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68d9      	ldr	r1, [r3, #12]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4618      	mov	r0, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4403      	add	r3, r0
 8003f00:	3b1e      	subs	r3, #30
 8003f02:	409a      	lsls	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f0c:	e022      	b.n	8003f54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6919      	ldr	r1, [r3, #16]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	2207      	movs	r2, #7
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	400a      	ands	r2, r1
 8003f30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6919      	ldr	r1, [r3, #16]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4618      	mov	r0, r3
 8003f44:	4603      	mov	r3, r0
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4403      	add	r3, r0
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	d824      	bhi.n	8003fa6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3b05      	subs	r3, #5
 8003f6e:	221f      	movs	r2, #31
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43da      	mvns	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	3b05      	subs	r3, #5
 8003f98:	fa00 f203 	lsl.w	r2, r0, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fa4:	e04c      	b.n	8004040 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d824      	bhi.n	8003ff8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3b23      	subs	r3, #35	@ 0x23
 8003fc0:	221f      	movs	r2, #31
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	400a      	ands	r2, r1
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	4618      	mov	r0, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3b23      	subs	r3, #35	@ 0x23
 8003fea:	fa00 f203 	lsl.w	r2, r0, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ff6:	e023      	b.n	8004040 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	3b41      	subs	r3, #65	@ 0x41
 800400a:	221f      	movs	r2, #31
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43da      	mvns	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	400a      	ands	r2, r1
 8004018:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	4618      	mov	r0, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	3b41      	subs	r3, #65	@ 0x41
 8004034:	fa00 f203 	lsl.w	r2, r0, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a30      	ldr	r2, [pc, #192]	@ (8004108 <HAL_ADC_ConfigChannel+0x29c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10a      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1f4>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004052:	d105      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004054:	4b2d      	ldr	r3, [pc, #180]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 800405a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800405e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a28      	ldr	r2, [pc, #160]	@ (8004108 <HAL_ADC_ConfigChannel+0x29c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10f      	bne.n	800408a <HAL_ADC_ConfigChannel+0x21e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b12      	cmp	r3, #18
 8004070:	d10b      	bne.n	800408a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004072:	4b26      	ldr	r3, [pc, #152]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a25      	ldr	r2, [pc, #148]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004078:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800407c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800407e:	4b23      	ldr	r3, [pc, #140]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a22      	ldr	r2, [pc, #136]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004084:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004088:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <HAL_ADC_ConfigChannel+0x29c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d12b      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x280>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1a      	ldr	r2, [pc, #104]	@ (8004104 <HAL_ADC_ConfigChannel+0x298>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <HAL_ADC_ConfigChannel+0x23a>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b11      	cmp	r3, #17
 80040a4:	d122      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80040a6:	4b19      	ldr	r3, [pc, #100]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4a18      	ldr	r2, [pc, #96]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040ac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80040b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80040b2:	4b16      	ldr	r3, [pc, #88]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <HAL_ADC_ConfigChannel+0x298>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d111      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_ADC_ConfigChannel+0x2a4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <HAL_ADC_ConfigChannel+0x2a8>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	0c9a      	lsrs	r2, r3, #18
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040de:	e002      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f9      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	10000012 	.word	0x10000012
 8004108:	40012000 	.word	0x40012000
 800410c:	40012300 	.word	0x40012300
 8004110:	20000000 	.word	0x20000000
 8004114:	431bde83 	.word	0x431bde83

08004118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004120:	4b78      	ldr	r3, [pc, #480]	@ (8004304 <ADC_Init+0x1ec>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a77      	ldr	r2, [pc, #476]	@ (8004304 <ADC_Init+0x1ec>)
 8004126:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800412a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800412c:	4b75      	ldr	r3, [pc, #468]	@ (8004304 <ADC_Init+0x1ec>)
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4973      	ldr	r1, [pc, #460]	@ (8004304 <ADC_Init+0x1ec>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	021a      	lsls	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800416c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6899      	ldr	r1, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	4a58      	ldr	r2, [pc, #352]	@ (8004308 <ADC_Init+0x1f0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6899      	ldr	r1, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	e00f      	b.n	8004212 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004210:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0202 	bic.w	r2, r2, #2
 8004220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	005a      	lsls	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800424e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800425e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	3b01      	subs	r3, #1
 800426c:	035a      	lsls	r2, r3, #13
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	e007      	b.n	8004288 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004286:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	051a      	lsls	r2, r3, #20
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6899      	ldr	r1, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042ca:	025a      	lsls	r2, r3, #9
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6899      	ldr	r1, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	029a      	lsls	r2, r3, #10
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40012300 	.word	0x40012300
 8004308:	0f000001 	.word	0x0f000001

0800430c <__NVIC_SetPriorityGrouping>:
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <__NVIC_SetPriorityGrouping+0x40>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004328:	4013      	ands	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004334:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <__NVIC_SetPriorityGrouping+0x44>)
 8004336:	4313      	orrs	r3, r2
 8004338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800433a:	4a04      	ldr	r2, [pc, #16]	@ (800434c <__NVIC_SetPriorityGrouping+0x40>)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	60d3      	str	r3, [r2, #12]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00
 8004350:	05fa0000 	.word	0x05fa0000

08004354 <__NVIC_GetPriorityGrouping>:
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004358:	4b04      	ldr	r3, [pc, #16]	@ (800436c <__NVIC_GetPriorityGrouping+0x18>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	f003 0307 	and.w	r3, r3, #7
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <__NVIC_EnableIRQ>:
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	2b00      	cmp	r3, #0
 8004380:	db0b      	blt.n	800439a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	f003 021f 	and.w	r2, r3, #31
 8004388:	4907      	ldr	r1, [pc, #28]	@ (80043a8 <__NVIC_EnableIRQ+0x38>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2001      	movs	r0, #1
 8004392:	fa00 f202 	lsl.w	r2, r0, r2
 8004396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	e000e100 	.word	0xe000e100

080043ac <__NVIC_SetPriority>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db0a      	blt.n	80043d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	490c      	ldr	r1, [pc, #48]	@ (80043f8 <__NVIC_SetPriority+0x4c>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	440b      	add	r3, r1
 80043d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043d4:	e00a      	b.n	80043ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4908      	ldr	r1, [pc, #32]	@ (80043fc <__NVIC_SetPriority+0x50>)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3b04      	subs	r3, #4
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	440b      	add	r3, r1
 80043ea:	761a      	strb	r2, [r3, #24]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	e000e100 	.word	0xe000e100
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <NVIC_EncodePriority>:
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	@ 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f1c3 0307 	rsb	r3, r3, #7
 800441a:	2b04      	cmp	r3, #4
 800441c:	bf28      	it	cs
 800441e:	2304      	movcs	r3, #4
 8004420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3304      	adds	r3, #4
 8004426:	2b06      	cmp	r3, #6
 8004428:	d902      	bls.n	8004430 <NVIC_EncodePriority+0x30>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3b03      	subs	r3, #3
 800442e:	e000      	b.n	8004432 <NVIC_EncodePriority+0x32>
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	401a      	ands	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004448:	f04f 31ff 	mov.w	r1, #4294967295
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	43d9      	mvns	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	4313      	orrs	r3, r2
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	@ 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff4c 	bl	800430c <__NVIC_SetPriorityGrouping>
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800448e:	f7ff ff61 	bl	8004354 <__NVIC_GetPriorityGrouping>
 8004492:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	f7ff ffb1 	bl	8004400 <NVIC_EncodePriority>
 800449e:	4602      	mov	r2, r0
 80044a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff ff80 	bl	80043ac <__NVIC_SetPriority>
}
 80044ac:	bf00      	nop
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ff54 	bl	8004370 <__NVIC_EnableIRQ>
}
 80044c8:	bf00      	nop
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e054      	b.n	800458c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7f5b      	ldrb	r3, [r3, #29]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fe f8ae 	bl	8002654 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a22      	ldr	r2, [pc, #136]	@ (8004594 <HAL_CRC_Init+0xc4>)
 800450c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0218 	bic.w	r2, r2, #24
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	e00c      	b.n	800453a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6899      	ldr	r1, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	461a      	mov	r2, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f834 	bl	8004598 <HAL_CRCEx_Polynomial_Set>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e028      	b.n	800458c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	795b      	ldrb	r3, [r3, #5]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f04f 32ff 	mov.w	r2, #4294967295
 800454a:	611a      	str	r2, [r3, #16]
 800454c:	e004      	b.n	8004558 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6912      	ldr	r2, [r2, #16]
 8004556:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	04c11db7 	.word	0x04c11db7

08004598 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80045a8:	231f      	movs	r3, #31
 80045aa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80045ac:	bf00      	nop
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1e5a      	subs	r2, r3, #1
 80045b2:	613a      	str	r2, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_CRCEx_Polynomial_Set+0x34>
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b18      	cmp	r3, #24
 80045d0:	d846      	bhi.n	8004660 <HAL_CRCEx_Polynomial_Set+0xc8>
 80045d2:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	08004667 	.word	0x08004667
 80045dc:	08004661 	.word	0x08004661
 80045e0:	08004661 	.word	0x08004661
 80045e4:	08004661 	.word	0x08004661
 80045e8:	08004661 	.word	0x08004661
 80045ec:	08004661 	.word	0x08004661
 80045f0:	08004661 	.word	0x08004661
 80045f4:	08004661 	.word	0x08004661
 80045f8:	08004655 	.word	0x08004655
 80045fc:	08004661 	.word	0x08004661
 8004600:	08004661 	.word	0x08004661
 8004604:	08004661 	.word	0x08004661
 8004608:	08004661 	.word	0x08004661
 800460c:	08004661 	.word	0x08004661
 8004610:	08004661 	.word	0x08004661
 8004614:	08004661 	.word	0x08004661
 8004618:	08004649 	.word	0x08004649
 800461c:	08004661 	.word	0x08004661
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
 8004628:	08004661 	.word	0x08004661
 800462c:	08004661 	.word	0x08004661
 8004630:	08004661 	.word	0x08004661
 8004634:	08004661 	.word	0x08004661
 8004638:	0800463d 	.word	0x0800463d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b06      	cmp	r3, #6
 8004640:	d913      	bls.n	800466a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004646:	e010      	b.n	800466a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b07      	cmp	r3, #7
 800464c:	d90f      	bls.n	800466e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004652:	e00c      	b.n	800466e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d90b      	bls.n	8004672 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800465e:	e008      	b.n	8004672 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	75fb      	strb	r3, [r7, #23]
      break;
 8004664:	e006      	b.n	8004674 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004666:	bf00      	nop
 8004668:	e004      	b.n	8004674 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800466a:	bf00      	nop
 800466c:	e002      	b.n	8004674 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004672:	bf00      	nop
  }
  if (status == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 0118 	bic.w	r1, r3, #24
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e069      	b.n	800478a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd ffe6 	bl	8002694 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004794 <HAL_DCMI_Init+0xf0>)
 80046ea:	400b      	ands	r3, r1
 80046ec:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004702:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800470e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800471a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004726:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004732:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b10      	cmp	r3, #16
 8004742:	d112      	bne.n	800476a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7f1b      	ldrb	r3, [r3, #28]
 8004748:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7f5b      	ldrb	r3, [r3, #29]
 800474e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004750:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7f9b      	ldrb	r3, [r3, #30]
 8004756:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004758:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7fdb      	ldrb	r3, [r3, #31]
 8004760:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004766:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004768:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 021e 	orr.w	r2, r2, #30
 8004778:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	ffe0f007 	.word	0xffe0f007

08004798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_DMA_Start_IT+0x26>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e048      	b.n	8004850 <HAL_DMA_Start_IT+0xb8>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d137      	bne.n	8004842 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f842 	bl	8004870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f0:	223f      	movs	r2, #63	@ 0x3f
 80047f2:	409a      	lsls	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0216 	orr.w	r2, r2, #22
 8004806:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004816:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e005      	b.n	800484e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800484a:	2302      	movs	r3, #2
 800484c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800484e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800488c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d108      	bne.n	80048b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048ae:	e007      	b.n	80048c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e039      	b.n	8004952 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd ff8c 	bl	8002810 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491c:	f023 0107 	bic.w	r1, r3, #7
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_DMA2D_Init+0x90>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68d1      	ldr	r1, [r2, #12]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	430b      	orrs	r3, r1
 8004940:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	ffffc000 	.word	0xffffc000

08004960 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d026      	beq.n	80049d0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d021      	beq.n	80049d0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800499a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2201      	movs	r2, #1
 80049ae:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2204      	movs	r2, #4
 80049b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d026      	beq.n	8004a28 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d021      	beq.n	8004a28 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049f2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2220      	movs	r2, #32
 80049fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	f043 0202 	orr.w	r2, r3, #2
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d026      	beq.n	8004a80 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d021      	beq.n	8004a80 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a4a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2208      	movs	r2, #8
 8004a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2204      	movs	r2, #4
 8004a64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d013      	beq.n	8004ab2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f853 	bl	8004b58 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d024      	beq.n	8004b06 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01f      	beq.n	8004b06 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2202      	movs	r2, #2
 8004adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01f      	beq.n	8004b50 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01a      	beq.n	8004b50 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b28:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f80e 	bl	8004b6c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_DMA2D_ConfigLayer+0x20>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e079      	b.n	8004c94 <HAL_DMA2D_ConfigLayer+0x114>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	3318      	adds	r3, #24
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004bca:	4b35      	ldr	r3, [pc, #212]	@ (8004ca0 <HAL_DMA2D_ConfigLayer+0x120>)
 8004bcc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b0a      	cmp	r3, #10
 8004bd4:	d003      	beq.n	8004bde <HAL_DMA2D_ConfigLayer+0x5e>
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b09      	cmp	r3, #9
 8004bdc:	d107      	bne.n	8004bee <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e005      	b.n	8004bfa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	061b      	lsls	r3, r3, #24
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d120      	bne.n	8004c42 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	ea02 0103 	and.w	r1, r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b0a      	cmp	r3, #10
 8004c28:	d003      	beq.n	8004c32 <HAL_DMA2D_ConfigLayer+0xb2>
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d127      	bne.n	8004c82 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004c3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c40:	e01f      	b.n	8004c82 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	ea02 0103 	and.w	r1, r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b0a      	cmp	r3, #10
 8004c6a:	d003      	beq.n	8004c74 <HAL_DMA2D_ConfigLayer+0xf4>
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b09      	cmp	r3, #9
 8004c72:	d106      	bne.n	8004c82 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004c80:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	ff03000f 	.word	0xff03000f

08004ca4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e06a      	b.n	8004d8c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2223      	movs	r2, #35	@ 0x23
 8004cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f00b fa63 	bl	8010194 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cce:	4b31      	ldr	r3, [pc, #196]	@ (8004d94 <HAL_ETH_Init+0xf0>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	4a30      	ldr	r2, [pc, #192]	@ (8004d94 <HAL_ETH_Init+0xf0>)
 8004cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cda:	4b2e      	ldr	r3, [pc, #184]	@ (8004d94 <HAL_ETH_Init+0xf0>)
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d98 <HAL_ETH_Init+0xf4>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a2b      	ldr	r2, [pc, #172]	@ (8004d98 <HAL_ETH_Init+0xf4>)
 8004cec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004cf0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004cf2:	4b29      	ldr	r3, [pc, #164]	@ (8004d98 <HAL_ETH_Init+0xf4>)
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	4927      	ldr	r1, [pc, #156]	@ (8004d98 <HAL_ETH_Init+0xf4>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004d00:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <HAL_ETH_Init+0xf4>)
 8004d02:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004d1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d1c:	f7ff f826 	bl	8003d6c <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004d22:	e011      	b.n	8004d48 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004d24:	f7ff f822 	bl	8003d6c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004d32:	d909      	bls.n	8004d48 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2204      	movs	r2, #4
 8004d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	22e0      	movs	r2, #224	@ 0xe0
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e021      	b.n	8004d8c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e4      	bne.n	8004d24 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 ff4c 	bl	8005bf8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fff3 	bl	8005d4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 f849 	bl	8005dfe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	461a      	mov	r2, r3
 8004d72:	2100      	movs	r1, #0
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 ffb1 	bl	8005cdc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2210      	movs	r2, #16
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40013800 	.word	0x40013800

08004d9c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d17b      	bne.n	8004ea6 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2223      	movs	r2, #35	@ 0x23
 8004db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004dca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b35      	ldr	r3, [pc, #212]	@ (8004eb0 <HAL_ETH_Start_IT+0x114>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004df0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2204      	movs	r2, #4
 8004df8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9fc 	bl	80051f8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0208 	orr.w	r2, r2, #8
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e18:	2001      	movs	r0, #1
 8004e1a:	f7fe ffb3 	bl	8003d84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0204 	orr.w	r2, r2, #4
 8004e34:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f7fe ffa0 	bl	8003d84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fd74 	bl	800593a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e68:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e80:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b08      	ldr	r3, [pc, #32]	@ (8004eb4 <HAL_ETH_Start_IT+0x118>)
 8004e92:	430b      	orrs	r3, r1
 8004e94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e98:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2223      	movs	r2, #35	@ 0x23
 8004e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	00020060 	.word	0x00020060
 8004eb4:	0001a0c1 	.word	0x0001a0c1

08004eb8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec6:	2b23      	cmp	r3, #35	@ 0x23
 8004ec8:	d16e      	bne.n	8004fa8 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2223      	movs	r2, #35	@ 0x23
 8004ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eda:	69d9      	ldr	r1, [r3, #28]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b34      	ldr	r3, [pc, #208]	@ (8004fb4 <HAL_ETH_Stop_IT+0xfc>)
 8004ee2:	400b      	ands	r3, r1
 8004ee4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ee8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004efc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f00:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	f023 0302 	bic.w	r3, r3, #2
 8004f14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f18:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0204 	bic.w	r2, r2, #4
 8004f28:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f32:	2001      	movs	r0, #1
 8004f34:	f7fe ff26 	bl	8003d84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fcfa 	bl	800593a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0208 	bic.w	r2, r2, #8
 8004f54:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f5e:	2001      	movs	r0, #1
 8004f60:	f7fe ff10 	bl	8003d84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e00e      	b.n	8004f90 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	3212      	adds	r2, #18
 8004f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d9ed      	bls.n	8004f72 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2210      	movs	r2, #16
 8004fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	fffe5f3e 	.word	0xfffe5f3e

08004fb8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e045      	b.n	8005068 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe2:	2b23      	cmp	r3, #35	@ 0x23
 8004fe4:	d13f      	bne.n	8005066 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 ff70 	bl	8005ed8 <ETH_Prepare_Tx_Descriptors>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005004:	f043 0202 	orr.w	r2, r3, #2
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e02a      	b.n	8005068 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8005012:	f3bf 8f4f 	dsb	sy
}
 8005016:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	629a      	str	r2, [r3, #40]	@ 0x28
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	2b03      	cmp	r3, #3
 8005028:	d904      	bls.n	8005034 <HAL_ETH_Transmit_IT+0x7c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	1f1a      	subs	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800504e:	461a      	mov	r2, r3
 8005050:	2304      	movs	r3, #4
 8005052:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508e:	f043 0201 	orr.w	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0a8      	b.n	80051ee <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a2:	2b23      	cmp	r3, #35	@ 0x23
 80050a4:	d001      	beq.n	80050aa <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0a1      	b.n	80051ee <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ae:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	3212      	adds	r2, #18
 80050b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ba:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c0:	f1c3 0304 	rsb	r3, r3, #4
 80050c4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80050c6:	e06a      	b.n	800519e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <HAL_ETH_ReadData+0x88>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d040      	beq.n	800517a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	0c1b      	lsrs	r3, r3, #16
 8005128:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800512c:	3b04      	subs	r3, #4
 800512e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005154:	461a      	mov	r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f00b f9c9 	bl	80104f0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	441a      	add	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2200      	movs	r2, #0
 8005178:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3301      	adds	r3, #1
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d902      	bls.n	800518c <HAL_ETH_ReadData+0x11c>
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3b04      	subs	r3, #4
 800518a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	3212      	adds	r2, #18
 8005192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005196:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	3301      	adds	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db06      	blt.n	80051b4 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d202      	bcs.n	80051b4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d089      	beq.n	80050c8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	441a      	add	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f815 	bl	80051f8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d108      	bne.n	80051ec <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e000      	b.n	80051ee <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8005204:	2301      	movs	r3, #1
 8005206:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800520c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	3212      	adds	r2, #18
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800521e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005220:	e040      	b.n	80052a4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d112      	bne.n	8005250 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800522a:	f107 030c 	add.w	r3, r7, #12
 800522e:	4618      	mov	r0, r3
 8005230:	f00b f92e 	bl	8010490 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	74fb      	strb	r3, [r7, #19]
 800523e:	e007      	b.n	8005250 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	461a      	mov	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	461a      	mov	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d026      	beq.n	80052a4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4a1e      	ldr	r2, [pc, #120]	@ (80052dc <ETH_UpdateDescriptor+0xe4>)
 8005262:	605a      	str	r2, [r3, #4]
 8005264:	e003      	b.n	800526e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800526c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800526e:	f3bf 8f5f 	dmb	sy
}
 8005272:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	3301      	adds	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d902      	bls.n	8005292 <ETH_UpdateDescriptor+0x9a>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3b04      	subs	r3, #4
 8005290:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	3212      	adds	r2, #18
 8005298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529c:	617b      	str	r3, [r7, #20]
      desccount--;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <ETH_UpdateDescriptor+0xb8>
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1b8      	bne.n	8005222 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d00c      	beq.n	80052d4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052c2:	461a      	mov	r2, r3
 80052c4:	2300      	movs	r3, #0
 80052c6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80052d4:	bf00      	nop
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	80004600 	.word	0x80004600

080052e0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3318      	adds	r3, #24
 80052ec:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80052fe:	e03f      	b.n	8005380 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8005300:	2301      	movs	r3, #1
 8005302:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3b01      	subs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	3304      	adds	r3, #4
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	3301      	adds	r3, #1
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d028      	beq.n	8005380 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	db1b      	blt.n	800537c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3304      	adds	r3, #4
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	f00b f90f 	bl	8010574 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3304      	adds	r3, #4
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	2200      	movs	r2, #0
 8005362:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3301      	adds	r3, #1
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	62da      	str	r2, [r3, #44]	@ 0x2c
 800537a:	e001      	b.n	8005380 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_ETH_ReleaseTxPacket+0xac>
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1b9      	bne.n	8005300 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ae:	2b40      	cmp	r3, #64	@ 0x40
 80053b0:	d112      	bne.n	80053d8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d109      	bne.n	80053d8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053cc:	461a      	mov	r2, r3
 80053ce:	4b50      	ldr	r3, [pc, #320]	@ (8005510 <HAL_ETH_IRQHandler+0x178>)
 80053d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f00a fc0e 	bl	800fbf4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d113      	bne.n	8005412 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10a      	bne.n	8005412 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005404:	461a      	mov	r2, r3
 8005406:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800540a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f00a fc01 	bl	800fc14 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005424:	d14c      	bne.n	80054c0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005438:	d142      	bne.n	80054c0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f043 0208 	orr.w	r2, r3, #8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545c:	d11a      	bne.n	8005494 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	4b2a      	ldr	r3, [pc, #168]	@ (8005514 <HAL_ETH_IRQHandler+0x17c>)
 800546a:	4013      	ands	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8005484:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005488:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	22e0      	movs	r2, #224	@ 0xe0
 800548e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005492:	e012      	b.n	80054ba <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	f248 6380 	movw	r3, #34432	@ 0x8680
 80054a2:	4013      	ands	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b2:	461a      	mov	r2, r3
 80054b4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80054b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f00a fbba 	bl	800fc34 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d10e      	bne.n	80054ec <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f81c 	bl	800551c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80054ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <HAL_ETH_IRQHandler+0x180>)
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d006      	beq.n	8005506 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80054f8:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <HAL_ETH_IRQHandler+0x180>)
 80054fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80054fe:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f815 	bl	8005530 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	00010040 	.word	0x00010040
 8005514:	007e2000 	.word	0x007e2000
 8005518:	40013c00 	.word	0x40013c00

0800551c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 031c 	and.w	r3, r3, #28
 8005560:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	02db      	lsls	r3, r3, #11
 8005566:	b29b      	uxth	r3, r3
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0302 	bic.w	r3, r3, #2
 8005582:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005594:	f7fe fbea 	bl	8003d6c <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800559a:	e00d      	b.n	80055b8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800559c:	f7fe fbe6 	bl	8003d6c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055aa:	d301      	bcc.n	80055b0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e010      	b.n	80055d2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ec      	bne.n	800559c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 031c 	and.w	r3, r3, #28
 80055f6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	02db      	lsls	r3, r3, #11
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	019b      	lsls	r3, r3, #6
 8005608:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005634:	f7fe fb9a 	bl	8003d6c <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800563a:	e00d      	b.n	8005658 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800563c:	f7fe fb96 	bl	8003d6c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800564a:	d301      	bcc.n	8005650 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e009      	b.n	8005664 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ec      	bne.n	800563c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0d9      	b.n	8005834 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf0c      	ite	eq
 800573e:	2301      	moveq	r3, #1
 8005740:	2300      	movne	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005796:	2b00      	cmp	r3, #0
 8005798:	bf14      	ite	ne
 800579a:	2301      	movne	r3, #1
 800579c:	2300      	moveq	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e00b      	b.n	800586c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800585a:	2b10      	cmp	r3, #16
 800585c:	d105      	bne.n	800586a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f88f 	bl	8005984 <ETH_SetMACConfig>

    return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 031c 	bic.w	r3, r3, #28
 800588a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800588c:	f003 fd7a 	bl	8009384 <HAL_RCC_GetHCLKFreq>
 8005890:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4a1d      	ldr	r2, [pc, #116]	@ (800590c <HAL_ETH_SetMDIOClockRange+0x98>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d908      	bls.n	80058ac <HAL_ETH_SetMDIOClockRange+0x38>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4a1c      	ldr	r2, [pc, #112]	@ (8005910 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d804      	bhi.n	80058ac <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e027      	b.n	80058fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4a18      	ldr	r2, [pc, #96]	@ (8005910 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d908      	bls.n	80058c6 <HAL_ETH_SetMDIOClockRange+0x52>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4a17      	ldr	r2, [pc, #92]	@ (8005914 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d204      	bcs.n	80058c6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f043 030c 	orr.w	r3, r3, #12
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e01a      	b.n	80058fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a12      	ldr	r2, [pc, #72]	@ (8005914 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d303      	bcc.n	80058d6 <HAL_ETH_SetMDIOClockRange+0x62>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4a11      	ldr	r2, [pc, #68]	@ (8005918 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d911      	bls.n	80058fa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005918 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d908      	bls.n	80058f0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a0e      	ldr	r2, [pc, #56]	@ (800591c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d804      	bhi.n	80058f0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e005      	b.n	80058fc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f043 0310 	orr.w	r3, r3, #16
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e000      	b.n	80058fc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80058fa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	611a      	str	r2, [r3, #16]
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	01312cff 	.word	0x01312cff
 8005910:	02160ebf 	.word	0x02160ebf
 8005914:	03938700 	.word	0x03938700
 8005918:	05f5e0ff 	.word	0x05f5e0ff
 800591c:	08f0d17f 	.word	0x08f0d17f

08005920 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005958:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800595c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800596a:	2001      	movs	r0, #1
 800596c:	f7fe fa0a 	bl	8003d84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800597a:	6193      	str	r3, [r2, #24]
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4b51      	ldr	r3, [pc, #324]	@ (8005ae0 <ETH_SetMACConfig+0x15c>)
 800599a:	4013      	ands	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	7c1b      	ldrb	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <ETH_SetMACConfig+0x28>
 80059a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80059aa:	e000      	b.n	80059ae <ETH_SetMACConfig+0x2a>
 80059ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	7c5b      	ldrb	r3, [r3, #17]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <ETH_SetMACConfig+0x38>
 80059b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80059ba:	e000      	b.n	80059be <ETH_SetMACConfig+0x3a>
 80059bc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80059be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80059c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	7fdb      	ldrb	r3, [r3, #31]
 80059ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80059cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80059d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	7f92      	ldrb	r2, [r2, #30]
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d102      	bne.n	80059e2 <ETH_SetMACConfig+0x5e>
 80059dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80059e0:	e000      	b.n	80059e4 <ETH_SetMACConfig+0x60>
 80059e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80059e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	7f1b      	ldrb	r3, [r3, #28]
 80059ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80059ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80059f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	791b      	ldrb	r3, [r3, #4]
 80059f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80059fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	d102      	bne.n	8005a0c <ETH_SetMACConfig+0x88>
 8005a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a0a:	e000      	b.n	8005a0e <ETH_SetMACConfig+0x8a>
 8005a0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005a0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	7bdb      	ldrb	r3, [r3, #15]
 8005a14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005a16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005a1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005a26:	4313      	orrs	r3, r2
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a3e:	2001      	movs	r0, #1
 8005a40:	f7fe f9a0 	bl	8003d84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005a6a:	2a00      	cmp	r2, #0
 8005a6c:	d101      	bne.n	8005a72 <ETH_SetMACConfig+0xee>
 8005a6e:	2280      	movs	r2, #128	@ 0x80
 8005a70:	e000      	b.n	8005a74 <ETH_SetMACConfig+0xf0>
 8005a72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005a74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005a7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005a82:	2a01      	cmp	r2, #1
 8005a84:	d101      	bne.n	8005a8a <ETH_SetMACConfig+0x106>
 8005a86:	2208      	movs	r2, #8
 8005a88:	e000      	b.n	8005a8c <ETH_SetMACConfig+0x108>
 8005a8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005a8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005a94:	2a01      	cmp	r2, #1
 8005a96:	d101      	bne.n	8005a9c <ETH_SetMACConfig+0x118>
 8005a98:	2204      	movs	r2, #4
 8005a9a:	e000      	b.n	8005a9e <ETH_SetMACConfig+0x11a>
 8005a9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005a9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005aa6:	2a01      	cmp	r2, #1
 8005aa8:	d101      	bne.n	8005aae <ETH_SetMACConfig+0x12a>
 8005aaa:	2202      	movs	r2, #2
 8005aac:	e000      	b.n	8005ab0 <ETH_SetMACConfig+0x12c>
 8005aae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ac8:	2001      	movs	r0, #1
 8005aca:	f7fe f95b 	bl	8003d84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	619a      	str	r2, [r3, #24]
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	ff20810f 	.word	0xff20810f

08005ae4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf4 <ETH_SetDMAConfig+0x110>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	7b1b      	ldrb	r3, [r3, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <ETH_SetDMAConfig+0x2c>
 8005b0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005b0e:	e000      	b.n	8005b12 <ETH_SetDMAConfig+0x2e>
 8005b10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	7b5b      	ldrb	r3, [r3, #13]
 8005b16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005b18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	7f52      	ldrb	r2, [r2, #29]
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	d102      	bne.n	8005b28 <ETH_SetDMAConfig+0x44>
 8005b22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b26:	e000      	b.n	8005b2a <ETH_SetDMAConfig+0x46>
 8005b28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005b2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	7b9b      	ldrb	r3, [r3, #14]
 8005b30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005b32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005b38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	7f1b      	ldrb	r3, [r3, #28]
 8005b3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005b40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	7f9b      	ldrb	r3, [r3, #30]
 8005b46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005b48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005b4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	f7fe f902 	bl	8003d84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	791b      	ldrb	r3, [r3, #4]
 8005b92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005b98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005b9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005ba4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005bac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005bae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005bb6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005bbc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f7fe f8d3 	bl	8003d84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be6:	461a      	mov	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	f8de3f23 	.word	0xf8de3f23

08005bf8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b0a6      	sub	sp, #152	@ 0x98
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005c34:	2300      	movs	r3, #0
 8005c36:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005c5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005c60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005c6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff fe86 	bl	8005984 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005c86:	2301      	movs	r3, #1
 8005c88:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005cac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005cae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005cb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005cb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005cc8:	f107 0308 	add.w	r3, r7, #8
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ff08 	bl	8005ae4 <ETH_SetDMAConfig>
}
 8005cd4:	bf00      	nop
 8005cd6:	3798      	adds	r7, #152	@ 0x98
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3305      	adds	r3, #5
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	3204      	adds	r2, #4
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4b11      	ldr	r3, [pc, #68]	@ (8005d44 <ETH_MACAddressConfig+0x68>)
 8005cfe:	4413      	add	r3, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3303      	adds	r3, #3
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	061a      	lsls	r2, r3, #24
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3302      	adds	r3, #2
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	4313      	orrs	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <ETH_MACAddressConfig+0x6c>)
 8005d2e:	4413      	add	r3, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	6013      	str	r3, [r2, #0]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40028040 	.word	0x40028040
 8005d48:	40028044 	.word	0x40028044

08005d4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e03e      	b.n	8005dd8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68d9      	ldr	r1, [r3, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	440b      	add	r3, r1
 8005d6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	3206      	adds	r2, #6
 8005d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d80c      	bhi.n	8005dbc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68d9      	ldr	r1, [r3, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	440b      	add	r3, r1
 8005db4:	461a      	mov	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	e004      	b.n	8005dc6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d9bd      	bls.n	8005d5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005df0:	611a      	str	r2, [r3, #16]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e046      	b.n	8005e9a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6919      	ldr	r1, [r3, #16]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	440b      	add	r3, r1
 8005e1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2200      	movs	r2, #0
 8005e34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8005e50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	3212      	adds	r2, #18
 8005e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d80c      	bhi.n	8005e8a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6919      	ldr	r1, [r3, #16]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	440b      	add	r3, r1
 8005e82:	461a      	mov	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	e004      	b.n	8005e94 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3301      	adds	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d9b5      	bls.n	8005e0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eca:	60da      	str	r2, [r3, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b08d      	sub	sp, #52	@ 0x34
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f1a:	d007      	beq.n	8005f2c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	3304      	adds	r3, #4
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e0ff      	b.n	8006130 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	3301      	adds	r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4b7d      	ldr	r3, [pc, #500]	@ (800613c <ETH_Prepare_Tx_Descriptors+0x264>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	6852      	ldr	r2, [r2, #4]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005fb2:	f3bf 8f5f 	dmb	sy
}
 8005fb6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005fc4:	e082      	b.n	80060cc <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e005      	b.n	8005ff2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d902      	bls.n	8006004 <ETH_Prepare_Tx_Descriptors+0x12c>
 8005ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006000:	3b04      	subs	r3, #4
 8006002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006026:	d007      	beq.n	8006038 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602c:	3304      	adds	r3, #4
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d029      	beq.n	800608c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006046:	2300      	movs	r3, #0
 8006048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800604a:	e019      	b.n	8006080 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800604c:	f3bf 8f5f 	dmb	sy
}
 8006050:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	3301      	adds	r3, #1
 8006062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	2b03      	cmp	r3, #3
 8006068:	d902      	bls.n	8006070 <ETH_Prepare_Tx_Descriptors+0x198>
 800606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606c:	3b04      	subs	r3, #4
 800606e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006078:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	3301      	adds	r3, #1
 800607e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	429a      	cmp	r2, r3
 8006086:	d3e1      	bcc.n	800604c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8006088:	2302      	movs	r3, #2
 800608a:	e051      	b.n	8006130 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	3301      	adds	r3, #1
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	4b25      	ldr	r3, [pc, #148]	@ (800613c <ETH_Prepare_Tx_Descriptors+0x264>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	6852      	ldr	r2, [r2, #4]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80060ba:	f3bf 8f5f 	dmb	sy
}
 80060be:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f47f af78 	bne.w	8005fc6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d006      	beq.n	80060ea <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e005      	b.n	80060f6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	3304      	adds	r3, #4
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006116:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006118:	b672      	cpsid	i
}
 800611a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	4413      	add	r3, r2
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800612a:	b662      	cpsie	i
}
 800612c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3734      	adds	r7, #52	@ 0x34
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	ffffe000 	.word	0xffffe000

08006140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006140:	b480      	push	{r7}
 8006142:	b089      	sub	sp, #36	@ 0x24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e175      	b.n	800644c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006160:	2201      	movs	r2, #1
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	429a      	cmp	r2, r3
 800617a:	f040 8164 	bne.w	8006446 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b01      	cmp	r3, #1
 8006188:	d005      	beq.n	8006196 <HAL_GPIO_Init+0x56>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d130      	bne.n	80061f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	2203      	movs	r2, #3
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4013      	ands	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061cc:	2201      	movs	r2, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	f003 0201 	and.w	r2, r3, #1
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d017      	beq.n	8006234 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	2203      	movs	r2, #3
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d123      	bne.n	8006288 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	08da      	lsrs	r2, r3, #3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3208      	adds	r2, #8
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	220f      	movs	r2, #15
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	08da      	lsrs	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3208      	adds	r2, #8
 8006282:	69b9      	ldr	r1, [r7, #24]
 8006284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	2203      	movs	r2, #3
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 0203 	and.w	r2, r3, #3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80be 	beq.w	8006446 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ca:	4b66      	ldr	r3, [pc, #408]	@ (8006464 <HAL_GPIO_Init+0x324>)
 80062cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ce:	4a65      	ldr	r2, [pc, #404]	@ (8006464 <HAL_GPIO_Init+0x324>)
 80062d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80062d6:	4b63      	ldr	r3, [pc, #396]	@ (8006464 <HAL_GPIO_Init+0x324>)
 80062d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80062e2:	4a61      	ldr	r2, [pc, #388]	@ (8006468 <HAL_GPIO_Init+0x328>)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	3302      	adds	r3, #2
 80062ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	220f      	movs	r2, #15
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a58      	ldr	r2, [pc, #352]	@ (800646c <HAL_GPIO_Init+0x32c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d037      	beq.n	800637e <HAL_GPIO_Init+0x23e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a57      	ldr	r2, [pc, #348]	@ (8006470 <HAL_GPIO_Init+0x330>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d031      	beq.n	800637a <HAL_GPIO_Init+0x23a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a56      	ldr	r2, [pc, #344]	@ (8006474 <HAL_GPIO_Init+0x334>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02b      	beq.n	8006376 <HAL_GPIO_Init+0x236>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a55      	ldr	r2, [pc, #340]	@ (8006478 <HAL_GPIO_Init+0x338>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d025      	beq.n	8006372 <HAL_GPIO_Init+0x232>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a54      	ldr	r2, [pc, #336]	@ (800647c <HAL_GPIO_Init+0x33c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01f      	beq.n	800636e <HAL_GPIO_Init+0x22e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a53      	ldr	r2, [pc, #332]	@ (8006480 <HAL_GPIO_Init+0x340>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d019      	beq.n	800636a <HAL_GPIO_Init+0x22a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a52      	ldr	r2, [pc, #328]	@ (8006484 <HAL_GPIO_Init+0x344>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_GPIO_Init+0x226>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a51      	ldr	r2, [pc, #324]	@ (8006488 <HAL_GPIO_Init+0x348>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00d      	beq.n	8006362 <HAL_GPIO_Init+0x222>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a50      	ldr	r2, [pc, #320]	@ (800648c <HAL_GPIO_Init+0x34c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <HAL_GPIO_Init+0x21e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a4f      	ldr	r2, [pc, #316]	@ (8006490 <HAL_GPIO_Init+0x350>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d101      	bne.n	800635a <HAL_GPIO_Init+0x21a>
 8006356:	2309      	movs	r3, #9
 8006358:	e012      	b.n	8006380 <HAL_GPIO_Init+0x240>
 800635a:	230a      	movs	r3, #10
 800635c:	e010      	b.n	8006380 <HAL_GPIO_Init+0x240>
 800635e:	2308      	movs	r3, #8
 8006360:	e00e      	b.n	8006380 <HAL_GPIO_Init+0x240>
 8006362:	2307      	movs	r3, #7
 8006364:	e00c      	b.n	8006380 <HAL_GPIO_Init+0x240>
 8006366:	2306      	movs	r3, #6
 8006368:	e00a      	b.n	8006380 <HAL_GPIO_Init+0x240>
 800636a:	2305      	movs	r3, #5
 800636c:	e008      	b.n	8006380 <HAL_GPIO_Init+0x240>
 800636e:	2304      	movs	r3, #4
 8006370:	e006      	b.n	8006380 <HAL_GPIO_Init+0x240>
 8006372:	2303      	movs	r3, #3
 8006374:	e004      	b.n	8006380 <HAL_GPIO_Init+0x240>
 8006376:	2302      	movs	r3, #2
 8006378:	e002      	b.n	8006380 <HAL_GPIO_Init+0x240>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <HAL_GPIO_Init+0x240>
 800637e:	2300      	movs	r3, #0
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	f002 0203 	and.w	r2, r2, #3
 8006386:	0092      	lsls	r2, r2, #2
 8006388:	4093      	lsls	r3, r2
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4313      	orrs	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006390:	4935      	ldr	r1, [pc, #212]	@ (8006468 <HAL_GPIO_Init+0x328>)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	089b      	lsrs	r3, r3, #2
 8006396:	3302      	adds	r3, #2
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800639e:	4b3d      	ldr	r3, [pc, #244]	@ (8006494 <HAL_GPIO_Init+0x354>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	43db      	mvns	r3, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4013      	ands	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063c2:	4a34      	ldr	r2, [pc, #208]	@ (8006494 <HAL_GPIO_Init+0x354>)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063c8:	4b32      	ldr	r3, [pc, #200]	@ (8006494 <HAL_GPIO_Init+0x354>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	43db      	mvns	r3, r3
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	4013      	ands	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063ec:	4a29      	ldr	r2, [pc, #164]	@ (8006494 <HAL_GPIO_Init+0x354>)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063f2:	4b28      	ldr	r3, [pc, #160]	@ (8006494 <HAL_GPIO_Init+0x354>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4013      	ands	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006416:	4a1f      	ldr	r2, [pc, #124]	@ (8006494 <HAL_GPIO_Init+0x354>)
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800641c:	4b1d      	ldr	r3, [pc, #116]	@ (8006494 <HAL_GPIO_Init+0x354>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	43db      	mvns	r3, r3
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	4013      	ands	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006440:	4a14      	ldr	r2, [pc, #80]	@ (8006494 <HAL_GPIO_Init+0x354>)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3301      	adds	r3, #1
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b0f      	cmp	r3, #15
 8006450:	f67f ae86 	bls.w	8006160 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3724      	adds	r7, #36	@ 0x24
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40023800 	.word	0x40023800
 8006468:	40013800 	.word	0x40013800
 800646c:	40020000 	.word	0x40020000
 8006470:	40020400 	.word	0x40020400
 8006474:	40020800 	.word	0x40020800
 8006478:	40020c00 	.word	0x40020c00
 800647c:	40021000 	.word	0x40021000
 8006480:	40021400 	.word	0x40021400
 8006484:	40021800 	.word	0x40021800
 8006488:	40021c00 	.word	0x40021c00
 800648c:	40022000 	.word	0x40022000
 8006490:	40022400 	.word	0x40022400
 8006494:	40013c00 	.word	0x40013c00

08006498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
 80064b4:	e001      	b.n	80064ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	807b      	strh	r3, [r7, #2]
 80064d4:	4613      	mov	r3, r2
 80064d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064d8:	787b      	ldrb	r3, [r7, #1]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064de:	887a      	ldrh	r2, [r7, #2]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80064e4:	e003      	b.n	80064ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80064e6:	887b      	ldrh	r3, [r7, #2]
 80064e8:	041a      	lsls	r2, r3, #16
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	619a      	str	r2, [r3, #24]
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80064fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fc:	b08f      	sub	sp, #60	@ 0x3c
 80064fe:	af0a      	add	r7, sp, #40	@ 0x28
 8006500:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e054      	b.n	80065b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f01c fbb6 	bl	8022c98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2203      	movs	r2, #3
 8006530:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f008 f80d 	bl	800e56a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	687e      	ldr	r6, [r7, #4]
 8006558:	466d      	mov	r5, sp
 800655a:	f106 0410 	add.w	r4, r6, #16
 800655e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006566:	e894 0003 	ldmia.w	r4, {r0, r1}
 800656a:	e885 0003 	stmia.w	r5, {r0, r1}
 800656e:	1d33      	adds	r3, r6, #4
 8006570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006572:	6838      	ldr	r0, [r7, #0]
 8006574:	f007 ff90 	bl	800e498 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2101      	movs	r1, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f008 f804 	bl	800e58c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	687e      	ldr	r6, [r7, #4]
 800658c:	466d      	mov	r5, sp
 800658e:	f106 0410 	add.w	r4, r6, #16
 8006592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800659a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800659e:	e885 0003 	stmia.w	r5, {r0, r1}
 80065a2:	1d33      	adds	r3, r6, #4
 80065a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065a6:	6838      	ldr	r0, [r7, #0]
 80065a8:	f008 f9ac 	bl	800e904 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065be <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80065be:	b590      	push	{r4, r7, lr}
 80065c0:	b089      	sub	sp, #36	@ 0x24
 80065c2:	af04      	add	r7, sp, #16
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	4608      	mov	r0, r1
 80065c8:	4611      	mov	r1, r2
 80065ca:	461a      	mov	r2, r3
 80065cc:	4603      	mov	r3, r0
 80065ce:	70fb      	strb	r3, [r7, #3]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70bb      	strb	r3, [r7, #2]
 80065d4:	4613      	mov	r3, r2
 80065d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_HCD_HC_Init+0x28>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e076      	b.n	80066d4 <HAL_HCD_HC_Init+0x116>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	212c      	movs	r1, #44	@ 0x2c
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	4413      	add	r3, r2
 80065fa:	333d      	adds	r3, #61	@ 0x3d
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	212c      	movs	r1, #44	@ 0x2c
 8006606:	fb01 f303 	mul.w	r3, r1, r3
 800660a:	4413      	add	r3, r2
 800660c:	3338      	adds	r3, #56	@ 0x38
 800660e:	787a      	ldrb	r2, [r7, #1]
 8006610:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	212c      	movs	r1, #44	@ 0x2c
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	4413      	add	r3, r2
 800661e:	3340      	adds	r3, #64	@ 0x40
 8006620:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006622:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	212c      	movs	r1, #44	@ 0x2c
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	4413      	add	r3, r2
 8006630:	3339      	adds	r3, #57	@ 0x39
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	212c      	movs	r1, #44	@ 0x2c
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	333f      	adds	r3, #63	@ 0x3f
 8006644:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8006648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	78ba      	ldrb	r2, [r7, #2]
 800664e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006652:	b2d0      	uxtb	r0, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	212c      	movs	r1, #44	@ 0x2c
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	4413      	add	r3, r2
 800665e:	333a      	adds	r3, #58	@ 0x3a
 8006660:	4602      	mov	r2, r0
 8006662:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006664:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006668:	2b00      	cmp	r3, #0
 800666a:	da09      	bge.n	8006680 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	212c      	movs	r1, #44	@ 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	333b      	adds	r3, #59	@ 0x3b
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e008      	b.n	8006692 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	212c      	movs	r1, #44	@ 0x2c
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	4413      	add	r3, r2
 800668c:	333b      	adds	r3, #59	@ 0x3b
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	212c      	movs	r1, #44	@ 0x2c
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	4413      	add	r3, r2
 800669e:	333c      	adds	r3, #60	@ 0x3c
 80066a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80066a4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	787c      	ldrb	r4, [r7, #1]
 80066ac:	78ba      	ldrb	r2, [r7, #2]
 80066ae:	78f9      	ldrb	r1, [r7, #3]
 80066b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066b2:	9302      	str	r3, [sp, #8]
 80066b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4623      	mov	r3, r4
 80066c2:	f008 fa99 	bl	800ebf8 <USB_HC_Init>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd90      	pop	{r4, r7, pc}

080066dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_HCD_HC_Halt+0x1e>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e00f      	b.n	800671a <HAL_HCD_HC_Halt+0x3e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	4611      	mov	r1, r2
 800670a:	4618      	mov	r0, r3
 800670c:	f008 fce9 	bl	800f0e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4603      	mov	r3, r0
 8006734:	70fb      	strb	r3, [r7, #3]
 8006736:	460b      	mov	r3, r1
 8006738:	70bb      	strb	r3, [r7, #2]
 800673a:	4613      	mov	r3, r2
 800673c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	212c      	movs	r1, #44	@ 0x2c
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	333b      	adds	r3, #59	@ 0x3b
 800674c:	78ba      	ldrb	r2, [r7, #2]
 800674e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	212c      	movs	r1, #44	@ 0x2c
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	4413      	add	r3, r2
 800675c:	333f      	adds	r3, #63	@ 0x3f
 800675e:	787a      	ldrb	r2, [r7, #1]
 8006760:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006762:	7c3b      	ldrb	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d112      	bne.n	800678e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	212c      	movs	r1, #44	@ 0x2c
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	4413      	add	r3, r2
 8006774:	3342      	adds	r3, #66	@ 0x42
 8006776:	2203      	movs	r2, #3
 8006778:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	212c      	movs	r1, #44	@ 0x2c
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4413      	add	r3, r2
 8006786:	333d      	adds	r3, #61	@ 0x3d
 8006788:	7f3a      	ldrb	r2, [r7, #28]
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	e008      	b.n	80067a0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	212c      	movs	r1, #44	@ 0x2c
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	4413      	add	r3, r2
 800679a:	3342      	adds	r3, #66	@ 0x42
 800679c:	2202      	movs	r2, #2
 800679e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80067a0:	787b      	ldrb	r3, [r7, #1]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	f200 80c6 	bhi.w	8006934 <HAL_HCD_HC_SubmitRequest+0x210>
 80067a8:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	08006921 	.word	0x08006921
 80067b8:	08006825 	.word	0x08006825
 80067bc:	080068a3 	.word	0x080068a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80067c0:	7c3b      	ldrb	r3, [r7, #16]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	f040 80b8 	bne.w	8006938 <HAL_HCD_HC_SubmitRequest+0x214>
 80067c8:	78bb      	ldrb	r3, [r7, #2]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 80b4 	bne.w	8006938 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80067d0:	8b3b      	ldrh	r3, [r7, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d108      	bne.n	80067e8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	212c      	movs	r1, #44	@ 0x2c
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	4413      	add	r3, r2
 80067e2:	3355      	adds	r3, #85	@ 0x55
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	212c      	movs	r1, #44	@ 0x2c
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	4413      	add	r3, r2
 80067f4:	3355      	adds	r3, #85	@ 0x55
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	212c      	movs	r1, #44	@ 0x2c
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	3342      	adds	r3, #66	@ 0x42
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800680e:	e093      	b.n	8006938 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	212c      	movs	r1, #44	@ 0x2c
 8006816:	fb01 f303 	mul.w	r3, r1, r3
 800681a:	4413      	add	r3, r2
 800681c:	3342      	adds	r3, #66	@ 0x42
 800681e:	2202      	movs	r2, #2
 8006820:	701a      	strb	r2, [r3, #0]
      break;
 8006822:	e089      	b.n	8006938 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006824:	78bb      	ldrb	r3, [r7, #2]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d11d      	bne.n	8006866 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	212c      	movs	r1, #44	@ 0x2c
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	4413      	add	r3, r2
 8006836:	3355      	adds	r3, #85	@ 0x55
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	212c      	movs	r1, #44	@ 0x2c
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	4413      	add	r3, r2
 800684a:	3342      	adds	r3, #66	@ 0x42
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006850:	e073      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	212c      	movs	r1, #44	@ 0x2c
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	4413      	add	r3, r2
 800685e:	3342      	adds	r3, #66	@ 0x42
 8006860:	2202      	movs	r2, #2
 8006862:	701a      	strb	r2, [r3, #0]
      break;
 8006864:	e069      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	212c      	movs	r1, #44	@ 0x2c
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4413      	add	r3, r2
 8006872:	3354      	adds	r3, #84	@ 0x54
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	212c      	movs	r1, #44	@ 0x2c
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	3342      	adds	r3, #66	@ 0x42
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
      break;
 800688c:	e055      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	212c      	movs	r1, #44	@ 0x2c
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	3342      	adds	r3, #66	@ 0x42
 800689c:	2202      	movs	r2, #2
 800689e:	701a      	strb	r2, [r3, #0]
      break;
 80068a0:	e04b      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80068a2:	78bb      	ldrb	r3, [r7, #2]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11d      	bne.n	80068e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	212c      	movs	r1, #44	@ 0x2c
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	3355      	adds	r3, #85	@ 0x55
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	212c      	movs	r1, #44	@ 0x2c
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	3342      	adds	r3, #66	@ 0x42
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80068ce:	e034      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	212c      	movs	r1, #44	@ 0x2c
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	3342      	adds	r3, #66	@ 0x42
 80068de:	2202      	movs	r2, #2
 80068e0:	701a      	strb	r2, [r3, #0]
      break;
 80068e2:	e02a      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	212c      	movs	r1, #44	@ 0x2c
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	3354      	adds	r3, #84	@ 0x54
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	212c      	movs	r1, #44	@ 0x2c
 80068fe:	fb01 f303 	mul.w	r3, r1, r3
 8006902:	4413      	add	r3, r2
 8006904:	3342      	adds	r3, #66	@ 0x42
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
      break;
 800690a:	e016      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	212c      	movs	r1, #44	@ 0x2c
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	4413      	add	r3, r2
 8006918:	3342      	adds	r3, #66	@ 0x42
 800691a:	2202      	movs	r2, #2
 800691c:	701a      	strb	r2, [r3, #0]
      break;
 800691e:	e00c      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	212c      	movs	r1, #44	@ 0x2c
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	4413      	add	r3, r2
 800692c:	3342      	adds	r3, #66	@ 0x42
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
      break;
 8006932:	e002      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006934:	bf00      	nop
 8006936:	e000      	b.n	800693a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006938:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	212c      	movs	r1, #44	@ 0x2c
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	4413      	add	r3, r2
 8006946:	3344      	adds	r3, #68	@ 0x44
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	8b3a      	ldrh	r2, [r7, #24]
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	202c      	movs	r0, #44	@ 0x2c
 8006954:	fb00 f303 	mul.w	r3, r0, r3
 8006958:	440b      	add	r3, r1
 800695a:	334c      	adds	r3, #76	@ 0x4c
 800695c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	212c      	movs	r1, #44	@ 0x2c
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	4413      	add	r3, r2
 800696a:	3360      	adds	r3, #96	@ 0x60
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	212c      	movs	r1, #44	@ 0x2c
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	4413      	add	r3, r2
 800697c:	3350      	adds	r3, #80	@ 0x50
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	212c      	movs	r1, #44	@ 0x2c
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	4413      	add	r3, r2
 800698e:	3339      	adds	r3, #57	@ 0x39
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	212c      	movs	r1, #44	@ 0x2c
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	4413      	add	r3, r2
 80069a0:	3361      	adds	r3, #97	@ 0x61
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	222c      	movs	r2, #44	@ 0x2c
 80069ae:	fb02 f303 	mul.w	r3, r2, r3
 80069b2:	3338      	adds	r3, #56	@ 0x38
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	18d1      	adds	r1, r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	f008 fa3c 	bl	800ee3c <USB_HC_StartXfer>
 80069c4:	4603      	mov	r3, r0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop

080069d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f007 ff4a 	bl	800e880 <USB_GetMode>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	f040 80f6 	bne.w	8006be0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f007 ff0d 	bl	800e818 <USB_ReadInterrupts>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80ec 	beq.w	8006bde <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f007 ff04 	bl	800e818 <USB_ReadInterrupts>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a1a:	d104      	bne.n	8006a26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006a24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f007 fef4 	bl	800e818 <USB_ReadInterrupts>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3a:	d104      	bne.n	8006a46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f007 fee4 	bl	800e818 <USB_ReadInterrupts>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a5a:	d104      	bne.n	8006a66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f007 fed4 	bl	800e818 <USB_ReadInterrupts>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d103      	bne.n	8006a82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f007 fec6 	bl	800e818 <USB_ReadInterrupts>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a96:	d11c      	bne.n	8006ad2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006aa0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10f      	bne.n	8006ad2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ab2:	2110      	movs	r1, #16
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f007 fdb5 	bl	800e624 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006aba:	6938      	ldr	r0, [r7, #16]
 8006abc:	f007 fde6 	bl	800e68c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f007 ffd0 	bl	800ea6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f01c f955 	bl	8022d7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f007 fe9e 	bl	800e818 <USB_ReadInterrupts>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ae2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ae6:	d102      	bne.n	8006aee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 f9ce 	bl	8007e8a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f007 fe90 	bl	800e818 <USB_ReadInterrupts>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d106      	bne.n	8006b10 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f01c f91e 	bl	8022d44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f007 fe7f 	bl	800e818 <USB_ReadInterrupts>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d101      	bne.n	8006b28 <HAL_HCD_IRQHandler+0x158>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <HAL_HCD_IRQHandler+0x15a>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d012      	beq.n	8006b54 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0210 	bic.w	r2, r2, #16
 8006b3c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 f8d1 	bl	8007ce6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0210 	orr.w	r2, r2, #16
 8006b52:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f007 fe5d 	bl	800e818 <USB_ReadInterrupts>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b68:	d13a      	bne.n	8006be0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f008 faa6 	bl	800f0c0 <USB_HC_ReadInterrupt>
 8006b74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e025      	b.n	8006bc8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d018      	beq.n	8006bc2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ba6:	d106      	bne.n	8006bb6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8ab 	bl	8006d0a <HCD_HC_IN_IRQHandler>
 8006bb4:	e005      	b.n	8006bc2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fcc6 	bl	800754e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d3d4      	bcc.n	8006b7c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bda:	615a      	str	r2, [r3, #20]
 8006bdc:	e000      	b.n	8006be0 <HAL_HCD_IRQHandler+0x210>
      return;
 8006bde:	bf00      	nop
    }
  }
}
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_HCD_Start+0x16>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e013      	b.n	8006c24 <HAL_HCD_Start+0x3e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f007 ff92 	bl	800eb34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f007 fc97 	bl	800e548 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_HCD_Stop+0x16>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e00d      	b.n	8006c5e <HAL_HCD_Stop+0x32>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f008 fb80 	bl	800f354 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f007 ff34 	bl	800eae0 <USB_ResetPort>
 8006c78:	4603      	mov	r3, r0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	212c      	movs	r1, #44	@ 0x2c
 8006c94:	fb01 f303 	mul.w	r3, r1, r3
 8006c98:	4413      	add	r3, r2
 8006c9a:	3360      	adds	r3, #96	@ 0x60
 8006c9c:	781b      	ldrb	r3, [r3, #0]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	212c      	movs	r1, #44	@ 0x2c
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3350      	adds	r3, #80	@ 0x50
 8006cc4:	681b      	ldr	r3, [r3, #0]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f007 ff78 	bl	800ebd4 <USB_GetCurrentFrame>
 8006ce4:	4603      	mov	r3, r0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f007 ff53 	bl	800eba6 <USB_GetHostSpeed>
 8006d00:	4603      	mov	r3, r0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f007 fd85 	bl	800e83e <USB_ReadChInterrupts>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d11a      	bne.n	8006d74 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	212c      	movs	r1, #44	@ 0x2c
 8006d56:	fb01 f303 	mul.w	r3, r1, r3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3361      	adds	r3, #97	@ 0x61
 8006d5e:	2207      	movs	r2, #7
 8006d60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f008 f9b8 	bl	800f0e2 <USB_HC_Halt>
 8006d72:	e0a2      	b.n	8006eba <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f007 fd5d 	bl	800e83e <USB_ReadChInterrupts>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d8e:	d11b      	bne.n	8006dc8 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	212c      	movs	r1, #44	@ 0x2c
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3361      	adds	r3, #97	@ 0x61
 8006db2:	2208      	movs	r2, #8
 8006db4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f008 f98e 	bl	800f0e2 <USB_HC_Halt>
 8006dc6:	e078      	b.n	8006eba <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f007 fd33 	bl	800e83e <USB_ReadChInterrupts>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d11a      	bne.n	8006e18 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dee:	461a      	mov	r2, r3
 8006df0:	2308      	movs	r3, #8
 8006df2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	212c      	movs	r1, #44	@ 0x2c
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	3361      	adds	r3, #97	@ 0x61
 8006e02:	2206      	movs	r2, #6
 8006e04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f008 f966 	bl	800f0e2 <USB_HC_Halt>
 8006e16:	e050      	b.n	8006eba <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	4611      	mov	r1, r2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f007 fd0b 	bl	800e83e <USB_ReadChInterrupts>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e32:	d11b      	bne.n	8006e6c <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e40:	461a      	mov	r2, r3
 8006e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	212c      	movs	r1, #44	@ 0x2c
 8006e4e:	fb01 f303 	mul.w	r3, r1, r3
 8006e52:	4413      	add	r3, r2
 8006e54:	3361      	adds	r3, #97	@ 0x61
 8006e56:	2209      	movs	r2, #9
 8006e58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f008 f93c 	bl	800f0e2 <USB_HC_Halt>
 8006e6a:	e026      	b.n	8006eba <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f007 fce1 	bl	800e83e <USB_ReadChInterrupts>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e82:	2b80      	cmp	r3, #128	@ 0x80
 8006e84:	d119      	bne.n	8006eba <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e92:	461a      	mov	r2, r3
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	212c      	movs	r1, #44	@ 0x2c
 8006e9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ea2:	4413      	add	r3, r2
 8006ea4:	3361      	adds	r3, #97	@ 0x61
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f008 f914 	bl	800f0e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f007 fcba 	bl	800e83e <USB_ReadChInterrupts>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ed4:	d112      	bne.n	8006efc <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f008 f8fe 	bl	800f0e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ef8:	6093      	str	r3, [r2, #8]
 8006efa:	e325      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f007 fc99 	bl	800e83e <USB_ReadChInterrupts>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	f040 80e8 	bne.w	80070e8 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f24:	461a      	mov	r2, r3
 8006f26:	2320      	movs	r3, #32
 8006f28:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d019      	beq.n	8006f66 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	212c      	movs	r1, #44	@ 0x2c
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	3348      	adds	r3, #72	@ 0x48
 8006f40:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	0159      	lsls	r1, r3, #5
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	440b      	add	r3, r1
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006f54:	1ad2      	subs	r2, r2, r3
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	202c      	movs	r0, #44	@ 0x2c
 8006f5c:	fb00 f303 	mul.w	r3, r0, r3
 8006f60:	440b      	add	r3, r1
 8006f62:	3350      	adds	r3, #80	@ 0x50
 8006f64:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	212c      	movs	r1, #44	@ 0x2c
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	4413      	add	r3, r2
 8006f72:	3361      	adds	r3, #97	@ 0x61
 8006f74:	2201      	movs	r2, #1
 8006f76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	212c      	movs	r1, #44	@ 0x2c
 8006f7e:	fb01 f303 	mul.w	r3, r1, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	335c      	adds	r3, #92	@ 0x5c
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f96:	461a      	mov	r2, r3
 8006f98:	2301      	movs	r3, #1
 8006f9a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	212c      	movs	r1, #44	@ 0x2c
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	333f      	adds	r3, #63	@ 0x3f
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d009      	beq.n	8006fc4 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	212c      	movs	r1, #44	@ 0x2c
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	333f      	adds	r3, #63	@ 0x3f
 8006fbe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d111      	bne.n	8006fe8 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f008 f887 	bl	800f0e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	6093      	str	r3, [r2, #8]
 8006fe6:	e03a      	b.n	800705e <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	212c      	movs	r1, #44	@ 0x2c
 8006fee:	fb01 f303 	mul.w	r3, r1, r3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	333f      	adds	r3, #63	@ 0x3f
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d009      	beq.n	8007010 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	212c      	movs	r1, #44	@ 0x2c
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	333f      	adds	r3, #63	@ 0x3f
 800700a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800700c:	2b01      	cmp	r3, #1
 800700e:	d126      	bne.n	800705e <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	440a      	add	r2, r1
 8007026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800702a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800702e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	212c      	movs	r1, #44	@ 0x2c
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	4413      	add	r3, r2
 800703c:	3360      	adds	r3, #96	@ 0x60
 800703e:	2201      	movs	r2, #1
 8007040:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	b2d9      	uxtb	r1, r3
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	202c      	movs	r0, #44	@ 0x2c
 800704c:	fb00 f303 	mul.w	r3, r0, r3
 8007050:	4413      	add	r3, r2
 8007052:	3360      	adds	r3, #96	@ 0x60
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f01b fe9d 	bl	8022d98 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d12b      	bne.n	80070be <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	212c      	movs	r1, #44	@ 0x2c
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	4413      	add	r3, r2
 8007072:	3348      	adds	r3, #72	@ 0x48
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	202c      	movs	r0, #44	@ 0x2c
 800707c:	fb00 f202 	mul.w	r2, r0, r2
 8007080:	440a      	add	r2, r1
 8007082:	3240      	adds	r2, #64	@ 0x40
 8007084:	8812      	ldrh	r2, [r2, #0]
 8007086:	fbb3 f3f2 	udiv	r3, r3, r2
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 825a 	beq.w	8007548 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	212c      	movs	r1, #44	@ 0x2c
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	4413      	add	r3, r2
 80070a0:	3354      	adds	r3, #84	@ 0x54
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2d8      	uxtb	r0, r3
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	212c      	movs	r1, #44	@ 0x2c
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	3354      	adds	r3, #84	@ 0x54
 80070b8:	4602      	mov	r2, r0
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	e244      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	212c      	movs	r1, #44	@ 0x2c
 80070c4:	fb01 f303 	mul.w	r3, r1, r3
 80070c8:	4413      	add	r3, r2
 80070ca:	3354      	adds	r3, #84	@ 0x54
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f083 0301 	eor.w	r3, r3, #1
 80070d2:	b2d8      	uxtb	r0, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	212c      	movs	r1, #44	@ 0x2c
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	4413      	add	r3, r2
 80070e0:	3354      	adds	r3, #84	@ 0x54
 80070e2:	4602      	mov	r2, r0
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e22f      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f007 fba3 	bl	800e83e <USB_ReadChInterrupts>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d109      	bne.n	8007116 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	4413      	add	r3, r2
 800710a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710e:	461a      	mov	r2, r3
 8007110:	2320      	movs	r3, #32
 8007112:	6093      	str	r3, [r2, #8]
 8007114:	e218      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	4611      	mov	r1, r2
 8007120:	4618      	mov	r0, r3
 8007122:	f007 fb8c 	bl	800e83e <USB_ReadChInterrupts>
 8007126:	4603      	mov	r3, r0
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	f040 816b 	bne.w	8007408 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713e:	461a      	mov	r2, r3
 8007140:	2302      	movs	r3, #2
 8007142:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	212c      	movs	r1, #44	@ 0x2c
 800714a:	fb01 f303 	mul.w	r3, r1, r3
 800714e:	4413      	add	r3, r2
 8007150:	3361      	adds	r3, #97	@ 0x61
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d112      	bne.n	800717e <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	212c      	movs	r1, #44	@ 0x2c
 800715e:	fb01 f303 	mul.w	r3, r1, r3
 8007162:	4413      	add	r3, r2
 8007164:	3361      	adds	r3, #97	@ 0x61
 8007166:	2202      	movs	r2, #2
 8007168:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	212c      	movs	r1, #44	@ 0x2c
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	4413      	add	r3, r2
 8007176:	3360      	adds	r3, #96	@ 0x60
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e135      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	212c      	movs	r1, #44	@ 0x2c
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	3361      	adds	r3, #97	@ 0x61
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b06      	cmp	r3, #6
 8007190:	d112      	bne.n	80071b8 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	212c      	movs	r1, #44	@ 0x2c
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	3361      	adds	r3, #97	@ 0x61
 80071a0:	2202      	movs	r2, #2
 80071a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	212c      	movs	r1, #44	@ 0x2c
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	3360      	adds	r3, #96	@ 0x60
 80071b2:	2205      	movs	r2, #5
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e118      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	212c      	movs	r1, #44	@ 0x2c
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	4413      	add	r3, r2
 80071c4:	3361      	adds	r3, #97	@ 0x61
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b07      	cmp	r3, #7
 80071ca:	d009      	beq.n	80071e0 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	212c      	movs	r1, #44	@ 0x2c
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	4413      	add	r3, r2
 80071d8:	3361      	adds	r3, #97	@ 0x61
 80071da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80071dc:	2b09      	cmp	r3, #9
 80071de:	d159      	bne.n	8007294 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	212c      	movs	r1, #44	@ 0x2c
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	4413      	add	r3, r2
 80071ec:	3361      	adds	r3, #97	@ 0x61
 80071ee:	2202      	movs	r2, #2
 80071f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	212c      	movs	r1, #44	@ 0x2c
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	335c      	adds	r3, #92	@ 0x5c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	202c      	movs	r0, #44	@ 0x2c
 800720a:	fb00 f303 	mul.w	r3, r0, r3
 800720e:	440b      	add	r3, r1
 8007210:	335c      	adds	r3, #92	@ 0x5c
 8007212:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	212c      	movs	r1, #44	@ 0x2c
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	335c      	adds	r3, #92	@ 0x5c
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d912      	bls.n	800724e <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	212c      	movs	r1, #44	@ 0x2c
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	4413      	add	r3, r2
 8007234:	335c      	adds	r3, #92	@ 0x5c
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	212c      	movs	r1, #44	@ 0x2c
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	4413      	add	r3, r2
 8007246:	3360      	adds	r3, #96	@ 0x60
 8007248:	2204      	movs	r2, #4
 800724a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800724c:	e0cd      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	212c      	movs	r1, #44	@ 0x2c
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	3360      	adds	r3, #96	@ 0x60
 800725c:	2202      	movs	r2, #2
 800725e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	4413      	add	r3, r2
 8007268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007276:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800727e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800728c:	461a      	mov	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007292:	e0aa      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	212c      	movs	r1, #44	@ 0x2c
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	4413      	add	r3, r2
 80072a0:	3361      	adds	r3, #97	@ 0x61
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d109      	bne.n	80072bc <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	212c      	movs	r1, #44	@ 0x2c
 80072ae:	fb01 f303 	mul.w	r3, r1, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	3361      	adds	r3, #97	@ 0x61
 80072b6:	2202      	movs	r2, #2
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	e096      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	212c      	movs	r1, #44	@ 0x2c
 80072c2:	fb01 f303 	mul.w	r3, r1, r3
 80072c6:	4413      	add	r3, r2
 80072c8:	3361      	adds	r3, #97	@ 0x61
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d109      	bne.n	80072e4 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	212c      	movs	r1, #44	@ 0x2c
 80072d6:	fb01 f303 	mul.w	r3, r1, r3
 80072da:	4413      	add	r3, r2
 80072dc:	3361      	adds	r3, #97	@ 0x61
 80072de:	2202      	movs	r2, #2
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	e082      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	212c      	movs	r1, #44	@ 0x2c
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	3361      	adds	r3, #97	@ 0x61
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d13f      	bne.n	8007378 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	212c      	movs	r1, #44	@ 0x2c
 80072fe:	fb01 f303 	mul.w	r3, r1, r3
 8007302:	4413      	add	r3, r2
 8007304:	3361      	adds	r3, #97	@ 0x61
 8007306:	2202      	movs	r2, #2
 8007308:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	212c      	movs	r1, #44	@ 0x2c
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	4413      	add	r3, r2
 8007316:	3360      	adds	r3, #96	@ 0x60
 8007318:	2202      	movs	r2, #2
 800731a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	212c      	movs	r1, #44	@ 0x2c
 8007322:	fb01 f303 	mul.w	r3, r1, r3
 8007326:	4413      	add	r3, r2
 8007328:	333f      	adds	r3, #63	@ 0x3f
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	212c      	movs	r1, #44	@ 0x2c
 8007336:	fb01 f303 	mul.w	r3, r1, r3
 800733a:	4413      	add	r3, r2
 800733c:	333f      	adds	r3, #63	@ 0x3f
 800733e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007340:	2b02      	cmp	r3, #2
 8007342:	d152      	bne.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4413      	add	r3, r2
 800734c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800735a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007362:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007370:	461a      	mov	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e038      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	212c      	movs	r1, #44	@ 0x2c
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	4413      	add	r3, r2
 8007384:	3361      	adds	r3, #97	@ 0x61
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d123      	bne.n	80073d4 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	212c      	movs	r1, #44	@ 0x2c
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	4413      	add	r3, r2
 8007398:	3361      	adds	r3, #97	@ 0x61
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	212c      	movs	r1, #44	@ 0x2c
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	335c      	adds	r3, #92	@ 0x5c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	202c      	movs	r0, #44	@ 0x2c
 80073b6:	fb00 f303 	mul.w	r3, r0, r3
 80073ba:	440b      	add	r3, r1
 80073bc:	335c      	adds	r3, #92	@ 0x5c
 80073be:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	212c      	movs	r1, #44	@ 0x2c
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	3360      	adds	r3, #96	@ 0x60
 80073ce:	2204      	movs	r2, #4
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e00a      	b.n	80073ea <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	212c      	movs	r1, #44	@ 0x2c
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	4413      	add	r3, r2
 80073e0:	3361      	adds	r3, #97	@ 0x61
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	f000 80ae 	beq.w	8007546 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	b2d9      	uxtb	r1, r3
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	202c      	movs	r0, #44	@ 0x2c
 80073f4:	fb00 f303 	mul.w	r3, r0, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	3360      	adds	r3, #96	@ 0x60
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f01b fcc9 	bl	8022d98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007406:	e09f      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	4611      	mov	r1, r2
 8007412:	4618      	mov	r0, r3
 8007414:	f007 fa13 	bl	800e83e <USB_ReadChInterrupts>
 8007418:	4603      	mov	r3, r0
 800741a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741e:	2b40      	cmp	r3, #64	@ 0x40
 8007420:	d123      	bne.n	800746a <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800742e:	461a      	mov	r2, r3
 8007430:	2340      	movs	r3, #64	@ 0x40
 8007432:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	212c      	movs	r1, #44	@ 0x2c
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	4413      	add	r3, r2
 8007440:	3361      	adds	r3, #97	@ 0x61
 8007442:	2205      	movs	r2, #5
 8007444:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	212c      	movs	r1, #44	@ 0x2c
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	335c      	adds	r3, #92	@ 0x5c
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f007 fe3d 	bl	800f0e2 <USB_HC_Halt>
 8007468:	e06e      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f007 f9e2 	bl	800e83e <USB_ReadChInterrupts>
 800747a:	4603      	mov	r3, r0
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b10      	cmp	r3, #16
 8007482:	d161      	bne.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	212c      	movs	r1, #44	@ 0x2c
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	333f      	adds	r3, #63	@ 0x3f
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b03      	cmp	r3, #3
 8007496:	d11a      	bne.n	80074ce <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	212c      	movs	r1, #44	@ 0x2c
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	335c      	adds	r3, #92	@ 0x5c
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	212c      	movs	r1, #44	@ 0x2c
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	3361      	adds	r3, #97	@ 0x61
 80074b8:	2204      	movs	r2, #4
 80074ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f007 fe0b 	bl	800f0e2 <USB_HC_Halt>
 80074cc:	e031      	b.n	8007532 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	212c      	movs	r1, #44	@ 0x2c
 80074d4:	fb01 f303 	mul.w	r3, r1, r3
 80074d8:	4413      	add	r3, r2
 80074da:	333f      	adds	r3, #63	@ 0x3f
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	212c      	movs	r1, #44	@ 0x2c
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	333f      	adds	r3, #63	@ 0x3f
 80074f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d11d      	bne.n	8007532 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	212c      	movs	r1, #44	@ 0x2c
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	4413      	add	r3, r2
 8007502:	335c      	adds	r3, #92	@ 0x5c
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d110      	bne.n	8007532 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	212c      	movs	r1, #44	@ 0x2c
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	3361      	adds	r3, #97	@ 0x61
 800751e:	2204      	movs	r2, #4
 8007520:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f007 fdd8 	bl	800f0e2 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	4413      	add	r3, r2
 800753a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800753e:	461a      	mov	r2, r3
 8007540:	2310      	movs	r3, #16
 8007542:	6093      	str	r3, [r2, #8]
 8007544:	e000      	b.n	8007548 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8007546:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b088      	sub	sp, #32
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f007 f963 	bl	800e83e <USB_ReadChInterrupts>
 8007578:	4603      	mov	r3, r0
 800757a:	f003 0304 	and.w	r3, r3, #4
 800757e:	2b04      	cmp	r3, #4
 8007580:	d11a      	bne.n	80075b8 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	4413      	add	r3, r2
 800758a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758e:	461a      	mov	r2, r3
 8007590:	2304      	movs	r3, #4
 8007592:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	212c      	movs	r1, #44	@ 0x2c
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	4413      	add	r3, r2
 80075a0:	3361      	adds	r3, #97	@ 0x61
 80075a2:	2207      	movs	r2, #7
 80075a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f007 fd96 	bl	800f0e2 <USB_HC_Halt>
 80075b6:	e393      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f007 f93b 	bl	800e83e <USB_ReadChInterrupts>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d137      	bne.n	8007642 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075de:	461a      	mov	r2, r3
 80075e0:	2320      	movs	r3, #32
 80075e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	212c      	movs	r1, #44	@ 0x2c
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	333d      	adds	r3, #61	@ 0x3d
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f040 8373 	bne.w	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	212c      	movs	r1, #44	@ 0x2c
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	4413      	add	r3, r2
 8007606:	333d      	adds	r3, #61	@ 0x3d
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	212c      	movs	r1, #44	@ 0x2c
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	4413      	add	r3, r2
 8007618:	3360      	adds	r3, #96	@ 0x60
 800761a:	2202      	movs	r2, #2
 800761c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	212c      	movs	r1, #44	@ 0x2c
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	4413      	add	r3, r2
 800762a:	3361      	adds	r3, #97	@ 0x61
 800762c:	2203      	movs	r2, #3
 800762e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f007 fd51 	bl	800f0e2 <USB_HC_Halt>
 8007640:	e34e      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f007 f8f6 	bl	800e83e <USB_ReadChInterrupts>
 8007652:	4603      	mov	r3, r0
 8007654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800765c:	d112      	bne.n	8007684 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	4413      	add	r3, r2
 8007666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800766a:	461a      	mov	r2, r3
 800766c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007670:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f007 fd30 	bl	800f0e2 <USB_HC_Halt>
 8007682:	e32d      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f007 f8d5 	bl	800e83e <USB_ReadChInterrupts>
 8007694:	4603      	mov	r3, r0
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b01      	cmp	r3, #1
 800769c:	d142      	bne.n	8007724 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	212c      	movs	r1, #44	@ 0x2c
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	335c      	adds	r3, #92	@ 0x5c
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	4611      	mov	r1, r2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f007 f8bf 	bl	800e83e <USB_ReadChInterrupts>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d111      	bne.n	80076ee <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	212c      	movs	r1, #44	@ 0x2c
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	4413      	add	r3, r2
 80076d6:	333d      	adds	r3, #61	@ 0x3d
 80076d8:	2201      	movs	r2, #1
 80076da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e8:	461a      	mov	r2, r3
 80076ea:	2340      	movs	r3, #64	@ 0x40
 80076ec:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076fa:	461a      	mov	r2, r3
 80076fc:	2301      	movs	r3, #1
 80076fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	212c      	movs	r1, #44	@ 0x2c
 8007706:	fb01 f303 	mul.w	r3, r1, r3
 800770a:	4413      	add	r3, r2
 800770c:	3361      	adds	r3, #97	@ 0x61
 800770e:	2201      	movs	r2, #1
 8007710:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f007 fce0 	bl	800f0e2 <USB_HC_Halt>
 8007722:	e2dd      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f007 f885 	bl	800e83e <USB_ReadChInterrupts>
 8007734:	4603      	mov	r3, r0
 8007736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773a:	2b40      	cmp	r3, #64	@ 0x40
 800773c:	d12c      	bne.n	8007798 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	212c      	movs	r1, #44	@ 0x2c
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	4413      	add	r3, r2
 800774a:	3361      	adds	r3, #97	@ 0x61
 800774c:	2205      	movs	r2, #5
 800774e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	212c      	movs	r1, #44	@ 0x2c
 8007756:	fb01 f303 	mul.w	r3, r1, r3
 800775a:	4413      	add	r3, r2
 800775c:	333d      	adds	r3, #61	@ 0x3d
 800775e:	2201      	movs	r2, #1
 8007760:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	212c      	movs	r1, #44	@ 0x2c
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	335c      	adds	r3, #92	@ 0x5c
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f007 fcaf 	bl	800f0e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	4413      	add	r3, r2
 800778c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007790:	461a      	mov	r2, r3
 8007792:	2340      	movs	r3, #64	@ 0x40
 8007794:	6093      	str	r3, [r2, #8]
 8007796:	e2a3      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f007 f84b 	bl	800e83e <USB_ReadChInterrupts>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d11a      	bne.n	80077e8 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077be:	461a      	mov	r2, r3
 80077c0:	2308      	movs	r3, #8
 80077c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	212c      	movs	r1, #44	@ 0x2c
 80077ca:	fb01 f303 	mul.w	r3, r1, r3
 80077ce:	4413      	add	r3, r2
 80077d0:	3361      	adds	r3, #97	@ 0x61
 80077d2:	2206      	movs	r2, #6
 80077d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	4611      	mov	r1, r2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f007 fc7e 	bl	800f0e2 <USB_HC_Halt>
 80077e6:	e27b      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f007 f823 	bl	800e83e <USB_ReadChInterrupts>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b10      	cmp	r3, #16
 8007800:	d140      	bne.n	8007884 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	212c      	movs	r1, #44	@ 0x2c
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	335c      	adds	r3, #92	@ 0x5c
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	212c      	movs	r1, #44	@ 0x2c
 800781a:	fb01 f303 	mul.w	r3, r1, r3
 800781e:	4413      	add	r3, r2
 8007820:	3361      	adds	r3, #97	@ 0x61
 8007822:	2204      	movs	r2, #4
 8007824:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	212c      	movs	r1, #44	@ 0x2c
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	333d      	adds	r3, #61	@ 0x3d
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d112      	bne.n	8007860 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	212c      	movs	r1, #44	@ 0x2c
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	4413      	add	r3, r2
 8007846:	333c      	adds	r3, #60	@ 0x3c
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	212c      	movs	r1, #44	@ 0x2c
 8007854:	fb01 f303 	mul.w	r3, r1, r3
 8007858:	4413      	add	r3, r2
 800785a:	333d      	adds	r3, #61	@ 0x3d
 800785c:	2201      	movs	r2, #1
 800785e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f007 fc39 	bl	800f0e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	4413      	add	r3, r2
 8007878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800787c:	461a      	mov	r2, r3
 800787e:	2310      	movs	r3, #16
 8007880:	6093      	str	r3, [r2, #8]
 8007882:	e22d      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f006 ffd5 	bl	800e83e <USB_ReadChInterrupts>
 8007894:	4603      	mov	r3, r0
 8007896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800789a:	2b80      	cmp	r3, #128	@ 0x80
 800789c:	d164      	bne.n	8007968 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d111      	bne.n	80078ca <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	212c      	movs	r1, #44	@ 0x2c
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	3361      	adds	r3, #97	@ 0x61
 80078b4:	2207      	movs	r2, #7
 80078b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f007 fc0d 	bl	800f0e2 <USB_HC_Halt>
 80078c8:	e044      	b.n	8007954 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	212c      	movs	r1, #44	@ 0x2c
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	335c      	adds	r3, #92	@ 0x5c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	202c      	movs	r0, #44	@ 0x2c
 80078e2:	fb00 f303 	mul.w	r3, r0, r3
 80078e6:	440b      	add	r3, r1
 80078e8:	335c      	adds	r3, #92	@ 0x5c
 80078ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	212c      	movs	r1, #44	@ 0x2c
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	335c      	adds	r3, #92	@ 0x5c
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d920      	bls.n	8007942 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	212c      	movs	r1, #44	@ 0x2c
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	4413      	add	r3, r2
 800790c:	335c      	adds	r3, #92	@ 0x5c
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	212c      	movs	r1, #44	@ 0x2c
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	4413      	add	r3, r2
 800791e:	3360      	adds	r3, #96	@ 0x60
 8007920:	2204      	movs	r2, #4
 8007922:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	b2d9      	uxtb	r1, r3
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	202c      	movs	r0, #44	@ 0x2c
 800792e:	fb00 f303 	mul.w	r3, r0, r3
 8007932:	4413      	add	r3, r2
 8007934:	3360      	adds	r3, #96	@ 0x60
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f01b fa2c 	bl	8022d98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007940:	e008      	b.n	8007954 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	212c      	movs	r1, #44	@ 0x2c
 8007948:	fb01 f303 	mul.w	r3, r1, r3
 800794c:	4413      	add	r3, r2
 800794e:	3360      	adds	r3, #96	@ 0x60
 8007950:	2202      	movs	r2, #2
 8007952:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007960:	461a      	mov	r2, r3
 8007962:	2380      	movs	r3, #128	@ 0x80
 8007964:	6093      	str	r3, [r2, #8]
 8007966:	e1bb      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f006 ff63 	bl	800e83e <USB_ReadChInterrupts>
 8007978:	4603      	mov	r3, r0
 800797a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007982:	d11b      	bne.n	80079bc <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	212c      	movs	r1, #44	@ 0x2c
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3361      	adds	r3, #97	@ 0x61
 8007992:	2209      	movs	r2, #9
 8007994:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	4611      	mov	r1, r2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f007 fb9e 	bl	800f0e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079b2:	461a      	mov	r2, r3
 80079b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079b8:	6093      	str	r3, [r2, #8]
 80079ba:	e191      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f006 ff39 	bl	800e83e <USB_ReadChInterrupts>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	f040 8184 	bne.w	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e4:	461a      	mov	r2, r3
 80079e6:	2302      	movs	r3, #2
 80079e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	212c      	movs	r1, #44	@ 0x2c
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	4413      	add	r3, r2
 80079f6:	3361      	adds	r3, #97	@ 0x61
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	f040 8087 	bne.w	8007b0e <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	212c      	movs	r1, #44	@ 0x2c
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3361      	adds	r3, #97	@ 0x61
 8007a0e:	2202      	movs	r2, #2
 8007a10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	212c      	movs	r1, #44	@ 0x2c
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3360      	adds	r3, #96	@ 0x60
 8007a20:	2201      	movs	r2, #1
 8007a22:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	212c      	movs	r1, #44	@ 0x2c
 8007a2a:	fb01 f303 	mul.w	r3, r1, r3
 8007a2e:	4413      	add	r3, r2
 8007a30:	333f      	adds	r3, #63	@ 0x3f
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d00a      	beq.n	8007a4e <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	212c      	movs	r1, #44	@ 0x2c
 8007a3e:	fb01 f303 	mul.w	r3, r1, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	333f      	adds	r3, #63	@ 0x3f
 8007a46:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	f040 8139 	bne.w	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d113      	bne.n	8007a7e <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	212c      	movs	r1, #44	@ 0x2c
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	3355      	adds	r3, #85	@ 0x55
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f083 0301 	eor.w	r3, r3, #1
 8007a6a:	b2d8      	uxtb	r0, r3
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	212c      	movs	r1, #44	@ 0x2c
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	4413      	add	r3, r2
 8007a78:	3355      	adds	r3, #85	@ 0x55
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	f040 811c 	bne.w	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	212c      	movs	r1, #44	@ 0x2c
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	4413      	add	r3, r2
 8007a94:	334c      	adds	r3, #76	@ 0x4c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8111 	beq.w	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	212c      	movs	r1, #44	@ 0x2c
 8007aa4:	fb01 f303 	mul.w	r3, r1, r3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	334c      	adds	r3, #76	@ 0x4c
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	202c      	movs	r0, #44	@ 0x2c
 8007ab4:	fb00 f202 	mul.w	r2, r0, r2
 8007ab8:	440a      	add	r2, r1
 8007aba:	3240      	adds	r2, #64	@ 0x40
 8007abc:	8812      	ldrh	r2, [r2, #0]
 8007abe:	4413      	add	r3, r2
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	202c      	movs	r0, #44	@ 0x2c
 8007ac8:	fb00 f202 	mul.w	r2, r0, r2
 8007acc:	440a      	add	r2, r1
 8007ace:	3240      	adds	r2, #64	@ 0x40
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80ee 	beq.w	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	212c      	movs	r1, #44	@ 0x2c
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	4413      	add	r3, r2
 8007af0:	3355      	adds	r3, #85	@ 0x55
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	f083 0301 	eor.w	r3, r3, #1
 8007af8:	b2d8      	uxtb	r0, r3
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	212c      	movs	r1, #44	@ 0x2c
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	4413      	add	r3, r2
 8007b06:	3355      	adds	r3, #85	@ 0x55
 8007b08:	4602      	mov	r2, r0
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e0d8      	b.n	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	212c      	movs	r1, #44	@ 0x2c
 8007b14:	fb01 f303 	mul.w	r3, r1, r3
 8007b18:	4413      	add	r3, r2
 8007b1a:	3361      	adds	r3, #97	@ 0x61
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d109      	bne.n	8007b36 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	212c      	movs	r1, #44	@ 0x2c
 8007b28:	fb01 f303 	mul.w	r3, r1, r3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3361      	adds	r3, #97	@ 0x61
 8007b30:	2202      	movs	r2, #2
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e0c4      	b.n	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	212c      	movs	r1, #44	@ 0x2c
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	4413      	add	r3, r2
 8007b42:	3361      	adds	r3, #97	@ 0x61
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d112      	bne.n	8007b70 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	212c      	movs	r1, #44	@ 0x2c
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	3361      	adds	r3, #97	@ 0x61
 8007b58:	2202      	movs	r2, #2
 8007b5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	212c      	movs	r1, #44	@ 0x2c
 8007b62:	fb01 f303 	mul.w	r3, r1, r3
 8007b66:	4413      	add	r3, r2
 8007b68:	3360      	adds	r3, #96	@ 0x60
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e0a7      	b.n	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	212c      	movs	r1, #44	@ 0x2c
 8007b76:	fb01 f303 	mul.w	r3, r1, r3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3361      	adds	r3, #97	@ 0x61
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b05      	cmp	r3, #5
 8007b82:	d112      	bne.n	8007baa <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	212c      	movs	r1, #44	@ 0x2c
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	4413      	add	r3, r2
 8007b90:	3361      	adds	r3, #97	@ 0x61
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	212c      	movs	r1, #44	@ 0x2c
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	3360      	adds	r3, #96	@ 0x60
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e08a      	b.n	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	212c      	movs	r1, #44	@ 0x2c
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3361      	adds	r3, #97	@ 0x61
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b06      	cmp	r3, #6
 8007bbc:	d112      	bne.n	8007be4 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	212c      	movs	r1, #44	@ 0x2c
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	4413      	add	r3, r2
 8007bca:	3361      	adds	r3, #97	@ 0x61
 8007bcc:	2202      	movs	r2, #2
 8007bce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	212c      	movs	r1, #44	@ 0x2c
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	3360      	adds	r3, #96	@ 0x60
 8007bde:	2205      	movs	r2, #5
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e06d      	b.n	8007cc0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	212c      	movs	r1, #44	@ 0x2c
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	4413      	add	r3, r2
 8007bf0:	3361      	adds	r3, #97	@ 0x61
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b07      	cmp	r3, #7
 8007bf6:	d009      	beq.n	8007c0c <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	212c      	movs	r1, #44	@ 0x2c
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	4413      	add	r3, r2
 8007c04:	3361      	adds	r3, #97	@ 0x61
 8007c06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007c08:	2b09      	cmp	r3, #9
 8007c0a:	d168      	bne.n	8007cde <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	212c      	movs	r1, #44	@ 0x2c
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	4413      	add	r3, r2
 8007c18:	3361      	adds	r3, #97	@ 0x61
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	212c      	movs	r1, #44	@ 0x2c
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	4413      	add	r3, r2
 8007c2a:	335c      	adds	r3, #92	@ 0x5c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	202c      	movs	r0, #44	@ 0x2c
 8007c36:	fb00 f303 	mul.w	r3, r0, r3
 8007c3a:	440b      	add	r3, r1
 8007c3c:	335c      	adds	r3, #92	@ 0x5c
 8007c3e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	212c      	movs	r1, #44	@ 0x2c
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	335c      	adds	r3, #92	@ 0x5c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d912      	bls.n	8007c7a <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	212c      	movs	r1, #44	@ 0x2c
 8007c5a:	fb01 f303 	mul.w	r3, r1, r3
 8007c5e:	4413      	add	r3, r2
 8007c60:	335c      	adds	r3, #92	@ 0x5c
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	212c      	movs	r1, #44	@ 0x2c
 8007c6c:	fb01 f303 	mul.w	r3, r1, r3
 8007c70:	4413      	add	r3, r2
 8007c72:	3360      	adds	r3, #96	@ 0x60
 8007c74:	2204      	movs	r2, #4
 8007c76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007c78:	e021      	b.n	8007cbe <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	212c      	movs	r1, #44	@ 0x2c
 8007c80:	fb01 f303 	mul.w	r3, r1, r3
 8007c84:	4413      	add	r3, r2
 8007c86:	3360      	adds	r3, #96	@ 0x60
 8007c88:	2202      	movs	r2, #2
 8007c8a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ca2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007caa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb8:	461a      	mov	r2, r3
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007cbe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	b2d9      	uxtb	r1, r3
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	202c      	movs	r0, #44	@ 0x2c
 8007cca:	fb00 f303 	mul.w	r3, r0, r3
 8007cce:	4413      	add	r3, r2
 8007cd0:	3360      	adds	r3, #96	@ 0x60
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f01b f85e 	bl	8022d98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007cdc:	e000      	b.n	8007ce0 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8007cde:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007ce0:	3720      	adds	r7, #32
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b08a      	sub	sp, #40	@ 0x28
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	0c5b      	lsrs	r3, r3, #17
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	091b      	lsrs	r3, r3, #4
 8007d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d1a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d004      	beq.n	8007d2c <HCD_RXQLVL_IRQHandler+0x46>
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b05      	cmp	r3, #5
 8007d26:	f000 80a9 	beq.w	8007e7c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007d2a:	e0aa      	b.n	8007e82 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80a6 	beq.w	8007e80 <HCD_RXQLVL_IRQHandler+0x19a>
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	212c      	movs	r1, #44	@ 0x2c
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	4413      	add	r3, r2
 8007d40:	3344      	adds	r3, #68	@ 0x44
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 809b 	beq.w	8007e80 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	212c      	movs	r1, #44	@ 0x2c
 8007d50:	fb01 f303 	mul.w	r3, r1, r3
 8007d54:	4413      	add	r3, r2
 8007d56:	3350      	adds	r3, #80	@ 0x50
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	441a      	add	r2, r3
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	202c      	movs	r0, #44	@ 0x2c
 8007d64:	fb00 f303 	mul.w	r3, r0, r3
 8007d68:	440b      	add	r3, r1
 8007d6a:	334c      	adds	r3, #76	@ 0x4c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d87a      	bhi.n	8007e68 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	212c      	movs	r1, #44	@ 0x2c
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	3344      	adds	r3, #68	@ 0x44
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	b292      	uxth	r2, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	f006 fcec 	bl	800e768 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	212c      	movs	r1, #44	@ 0x2c
 8007d96:	fb01 f303 	mul.w	r3, r1, r3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3344      	adds	r3, #68	@ 0x44
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	441a      	add	r2, r3
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	202c      	movs	r0, #44	@ 0x2c
 8007daa:	fb00 f303 	mul.w	r3, r0, r3
 8007dae:	440b      	add	r3, r1
 8007db0:	3344      	adds	r3, #68	@ 0x44
 8007db2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	212c      	movs	r1, #44	@ 0x2c
 8007dba:	fb01 f303 	mul.w	r3, r1, r3
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3350      	adds	r3, #80	@ 0x50
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	441a      	add	r2, r3
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	202c      	movs	r0, #44	@ 0x2c
 8007dce:	fb00 f303 	mul.w	r3, r0, r3
 8007dd2:	440b      	add	r3, r1
 8007dd4:	3350      	adds	r3, #80	@ 0x50
 8007dd6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	0cdb      	lsrs	r3, r3, #19
 8007de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	212c      	movs	r1, #44	@ 0x2c
 8007df4:	fb01 f303 	mul.w	r3, r1, r3
 8007df8:	4413      	add	r3, r2
 8007dfa:	3340      	adds	r3, #64	@ 0x40
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d13c      	bne.n	8007e80 <HCD_RXQLVL_IRQHandler+0x19a>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d039      	beq.n	8007e80 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e22:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e2a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	212c      	movs	r1, #44	@ 0x2c
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	4413      	add	r3, r2
 8007e4a:	3354      	adds	r3, #84	@ 0x54
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f083 0301 	eor.w	r3, r3, #1
 8007e52:	b2d8      	uxtb	r0, r3
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	212c      	movs	r1, #44	@ 0x2c
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	4413      	add	r3, r2
 8007e60:	3354      	adds	r3, #84	@ 0x54
 8007e62:	4602      	mov	r2, r0
 8007e64:	701a      	strb	r2, [r3, #0]
      break;
 8007e66:	e00b      	b.n	8007e80 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	212c      	movs	r1, #44	@ 0x2c
 8007e6e:	fb01 f303 	mul.w	r3, r1, r3
 8007e72:	4413      	add	r3, r2
 8007e74:	3360      	adds	r3, #96	@ 0x60
 8007e76:	2204      	movs	r2, #4
 8007e78:	701a      	strb	r2, [r3, #0]
      break;
 8007e7a:	e001      	b.n	8007e80 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007e7c:	bf00      	nop
 8007e7e:	e000      	b.n	8007e82 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007e80:	bf00      	nop
  }
}
 8007e82:	bf00      	nop
 8007e84:	3728      	adds	r7, #40	@ 0x28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007eb6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d10b      	bne.n	8007eda <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d102      	bne.n	8007ed2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f01a ff47 	bl	8022d60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f043 0302 	orr.w	r3, r3, #2
 8007ed8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d132      	bne.n	8007f4a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f043 0308 	orr.w	r3, r3, #8
 8007eea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d126      	bne.n	8007f44 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d113      	bne.n	8007f26 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007f04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f08:	d106      	bne.n	8007f18 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f006 fdab 	bl	800ea6c <USB_InitFSLSPClkSel>
 8007f16:	e011      	b.n	8007f3c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f006 fda4 	bl	800ea6c <USB_InitFSLSPClkSel>
 8007f24:	e00a      	b.n	8007f3c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d106      	bne.n	8007f3c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f34:	461a      	mov	r2, r3
 8007f36:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007f3a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f01a ff3d 	bl	8022dbc <HAL_HCD_PortEnabled_Callback>
 8007f42:	e002      	b.n	8007f4a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f01a ff47 	bl	8022dd8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d103      	bne.n	8007f5c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f043 0320 	orr.w	r3, r3, #32
 8007f5a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f62:	461a      	mov	r2, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	6013      	str	r3, [r2, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e07f      	b.n	8008082 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fa fc60 	bl	800285c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2224      	movs	r2, #36	@ 0x24
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d107      	bne.n	8007fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fe6:	609a      	str	r2, [r3, #8]
 8007fe8:	e006      	b.n	8007ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d104      	bne.n	800800a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008008:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6859      	ldr	r1, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	4b1d      	ldr	r3, [pc, #116]	@ (800808c <HAL_I2C_Init+0x11c>)
 8008016:	430b      	orrs	r3, r1
 8008018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691a      	ldr	r2, [r3, #16]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	69d9      	ldr	r1, [r3, #28]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	02008000 	.word	0x02008000

08008090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	d138      	bne.n	8008118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e032      	b.n	800811a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	@ 0x24
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80080e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6819      	ldr	r1, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	e000      	b.n	800811a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008118:	2302      	movs	r3, #2
  }
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b20      	cmp	r3, #32
 800813a:	d139      	bne.n	80081b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008146:	2302      	movs	r3, #2
 8008148:	e033      	b.n	80081b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2224      	movs	r2, #36	@ 0x24
 8008156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0201 	bic.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008178:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0201 	orr.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e000      	b.n	80081b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081b0:	2302      	movs	r3, #2
  }
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
	...

080081c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e0bf      	b.n	8008352 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fa fbe0 	bl	80029ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008202:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6999      	ldr	r1, [r3, #24]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008218:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6899      	ldr	r1, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b4a      	ldr	r3, [pc, #296]	@ (800835c <HAL_LTDC_Init+0x19c>)
 8008234:	400b      	ands	r3, r1
 8008236:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	041b      	lsls	r3, r3, #16
 800823e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6899      	ldr	r1, [r3, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68d9      	ldr	r1, [r3, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4b3e      	ldr	r3, [pc, #248]	@ (800835c <HAL_LTDC_Init+0x19c>)
 8008262:	400b      	ands	r3, r1
 8008264:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68d9      	ldr	r1, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1a      	ldr	r2, [r3, #32]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	431a      	orrs	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6919      	ldr	r1, [r3, #16]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4b33      	ldr	r3, [pc, #204]	@ (800835c <HAL_LTDC_Init+0x19c>)
 8008290:	400b      	ands	r3, r1
 8008292:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6919      	ldr	r1, [r3, #16]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	431a      	orrs	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6959      	ldr	r1, [r3, #20]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	4b27      	ldr	r3, [pc, #156]	@ (800835c <HAL_LTDC_Init+0x19c>)
 80082be:	400b      	ands	r3, r1
 80082c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80082f0:	041b      	lsls	r3, r3, #16
 80082f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008302:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0206 	orr.w	r2, r2, #6
 800832e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	f000f800 	.word	0xf000f800

08008360 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008376:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d023      	beq.n	80083ca <HAL_LTDC_IRQHandler+0x6a>
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01e      	beq.n	80083ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0204 	bic.w	r2, r2, #4
 800839a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2204      	movs	r2, #4
 80083a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083aa:	f043 0201 	orr.w	r2, r3, #1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2204      	movs	r2, #4
 80083b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f86f 	bl	80084a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d023      	beq.n	800841c <HAL_LTDC_IRQHandler+0xbc>
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01e      	beq.n	800841c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0202 	bic.w	r2, r2, #2
 80083ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2202      	movs	r2, #2
 80083f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083fc:	f043 0202 	orr.w	r2, r3, #2
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2204      	movs	r2, #4
 800840a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f846 	bl	80084a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01b      	beq.n	800845e <HAL_LTDC_IRQHandler+0xfe>
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d016      	beq.n	800845e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0201 	bic.w	r2, r2, #1
 800843e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2201      	movs	r2, #1
 8008446:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f82f 	bl	80084bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <HAL_LTDC_IRQHandler+0x140>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d016      	beq.n	80084a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0208 	bic.w	r2, r2, #8
 8008480:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2208      	movs	r2, #8
 8008488:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f818 	bl	80084d0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80084e4:	b5b0      	push	{r4, r5, r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_LTDC_ConfigLayer+0x1a>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e02c      	b.n	8008558 <HAL_LTDC_ConfigLayer+0x74>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2202      	movs	r2, #2
 800850a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2134      	movs	r1, #52	@ 0x34
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	4413      	add	r3, r2
 800851a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	4614      	mov	r4, r2
 8008522:	461d      	mov	r5, r3
 8008524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800852a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800852c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800852e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f811 	bl	8008560 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2201      	movs	r2, #1
 8008544:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bdb0      	pop	{r4, r5, r7, pc}

08008560 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008560:	b480      	push	{r7}
 8008562:	b089      	sub	sp, #36	@ 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	0c1b      	lsrs	r3, r3, #16
 8008578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800857c:	4413      	add	r3, r2
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	01db      	lsls	r3, r3, #7
 800858c:	4413      	add	r3, r2
 800858e:	3384      	adds	r3, #132	@ 0x84
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	4611      	mov	r1, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	01d2      	lsls	r2, r2, #7
 800859c:	440a      	add	r2, r1
 800859e:	3284      	adds	r2, #132	@ 0x84
 80085a0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80085a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4619      	mov	r1, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	01db      	lsls	r3, r3, #7
 80085c4:	440b      	add	r3, r1
 80085c6:	3384      	adds	r3, #132	@ 0x84
 80085c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085de:	4413      	add	r3, r2
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	01db      	lsls	r3, r3, #7
 80085ee:	4413      	add	r3, r2
 80085f0:	3384      	adds	r3, #132	@ 0x84
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	4611      	mov	r1, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	01d2      	lsls	r2, r2, #7
 80085fe:	440a      	add	r2, r1
 8008600:	3284      	adds	r2, #132	@ 0x84
 8008602:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008606:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008616:	4413      	add	r3, r2
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	01db      	lsls	r3, r3, #7
 8008624:	440b      	add	r3, r1
 8008626:	3384      	adds	r3, #132	@ 0x84
 8008628:	4619      	mov	r1, r3
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4313      	orrs	r3, r2
 800862e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	01db      	lsls	r3, r3, #7
 800863a:	4413      	add	r3, r2
 800863c:	3384      	adds	r3, #132	@ 0x84
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	6812      	ldr	r2, [r2, #0]
 8008644:	4611      	mov	r1, r2
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	01d2      	lsls	r2, r2, #7
 800864a:	440a      	add	r2, r1
 800864c:	3284      	adds	r2, #132	@ 0x84
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	01db      	lsls	r3, r3, #7
 800865e:	4413      	add	r3, r2
 8008660:	3384      	adds	r3, #132	@ 0x84
 8008662:	461a      	mov	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	061b      	lsls	r3, r3, #24
 8008684:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	01db      	lsls	r3, r3, #7
 8008690:	4413      	add	r3, r2
 8008692:	3384      	adds	r3, #132	@ 0x84
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	4413      	add	r3, r2
 80086a2:	3384      	adds	r3, #132	@ 0x84
 80086a4:	461a      	mov	r2, r3
 80086a6:	2300      	movs	r3, #0
 80086a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086b0:	461a      	mov	r2, r3
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4619      	mov	r1, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	01db      	lsls	r3, r3, #7
 80086c4:	440b      	add	r3, r1
 80086c6:	3384      	adds	r3, #132	@ 0x84
 80086c8:	4619      	mov	r1, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	01db      	lsls	r3, r3, #7
 80086da:	4413      	add	r3, r2
 80086dc:	3384      	adds	r3, #132	@ 0x84
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	4611      	mov	r1, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	01d2      	lsls	r2, r2, #7
 80086ea:	440a      	add	r2, r1
 80086ec:	3284      	adds	r2, #132	@ 0x84
 80086ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	01db      	lsls	r3, r3, #7
 80086fe:	4413      	add	r3, r2
 8008700:	3384      	adds	r3, #132	@ 0x84
 8008702:	461a      	mov	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	01db      	lsls	r3, r3, #7
 8008714:	4413      	add	r3, r2
 8008716:	3384      	adds	r3, #132	@ 0x84
 8008718:	69da      	ldr	r2, [r3, #28]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	01db      	lsls	r3, r3, #7
 8008724:	440b      	add	r3, r1
 8008726:	3384      	adds	r3, #132	@ 0x84
 8008728:	4619      	mov	r1, r3
 800872a:	4b58      	ldr	r3, [pc, #352]	@ (800888c <LTDC_SetConfig+0x32c>)
 800872c:	4013      	ands	r3, r2
 800872e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	69da      	ldr	r2, [r3, #28]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	6809      	ldr	r1, [r1, #0]
 800873c:	4608      	mov	r0, r1
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	01c9      	lsls	r1, r1, #7
 8008742:	4401      	add	r1, r0
 8008744:	3184      	adds	r1, #132	@ 0x84
 8008746:	4313      	orrs	r3, r2
 8008748:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	01db      	lsls	r3, r3, #7
 8008754:	4413      	add	r3, r2
 8008756:	3384      	adds	r3, #132	@ 0x84
 8008758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	01db      	lsls	r3, r3, #7
 8008764:	4413      	add	r3, r2
 8008766:	3384      	adds	r3, #132	@ 0x84
 8008768:	461a      	mov	r2, r3
 800876a:	2300      	movs	r3, #0
 800876c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	01db      	lsls	r3, r3, #7
 8008778:	4413      	add	r3, r2
 800877a:	3384      	adds	r3, #132	@ 0x84
 800877c:	461a      	mov	r2, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008782:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800878c:	2304      	movs	r3, #4
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e01b      	b.n	80087ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d102      	bne.n	80087a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800879a:	2303      	movs	r3, #3
 800879c:	61fb      	str	r3, [r7, #28]
 800879e:	e014      	b.n	80087ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d00b      	beq.n	80087c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d007      	beq.n	80087c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d003      	beq.n	80087c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087bc:	2b07      	cmp	r3, #7
 80087be:	d102      	bne.n	80087c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80087c0:	2302      	movs	r3, #2
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	e001      	b.n	80087ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80087c6:	2301      	movs	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	01db      	lsls	r3, r3, #7
 80087d4:	4413      	add	r3, r2
 80087d6:	3384      	adds	r3, #132	@ 0x84
 80087d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	4611      	mov	r1, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	01d2      	lsls	r2, r2, #7
 80087e4:	440a      	add	r2, r1
 80087e6:	3284      	adds	r2, #132	@ 0x84
 80087e8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80087ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	fb02 f303 	mul.w	r3, r2, r3
 80087f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6859      	ldr	r1, [r3, #4]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1acb      	subs	r3, r1, r3
 8008804:	69f9      	ldr	r1, [r7, #28]
 8008806:	fb01 f303 	mul.w	r3, r1, r3
 800880a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800880c:	68f9      	ldr	r1, [r7, #12]
 800880e:	6809      	ldr	r1, [r1, #0]
 8008810:	4608      	mov	r0, r1
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	01c9      	lsls	r1, r1, #7
 8008816:	4401      	add	r1, r0
 8008818:	3184      	adds	r1, #132	@ 0x84
 800881a:	4313      	orrs	r3, r2
 800881c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	01db      	lsls	r3, r3, #7
 8008828:	4413      	add	r3, r2
 800882a:	3384      	adds	r3, #132	@ 0x84
 800882c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4619      	mov	r1, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	01db      	lsls	r3, r3, #7
 8008838:	440b      	add	r3, r1
 800883a:	3384      	adds	r3, #132	@ 0x84
 800883c:	4619      	mov	r1, r3
 800883e:	4b14      	ldr	r3, [pc, #80]	@ (8008890 <LTDC_SetConfig+0x330>)
 8008840:	4013      	ands	r3, r2
 8008842:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	01db      	lsls	r3, r3, #7
 800884e:	4413      	add	r3, r2
 8008850:	3384      	adds	r3, #132	@ 0x84
 8008852:	461a      	mov	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	01db      	lsls	r3, r3, #7
 8008864:	4413      	add	r3, r2
 8008866:	3384      	adds	r3, #132	@ 0x84
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	6812      	ldr	r2, [r2, #0]
 800886e:	4611      	mov	r1, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	01d2      	lsls	r2, r2, #7
 8008874:	440a      	add	r2, r1
 8008876:	3284      	adds	r2, #132	@ 0x84
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6013      	str	r3, [r2, #0]
}
 800887e:	bf00      	nop
 8008880:	3724      	adds	r7, #36	@ 0x24
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	fffff8f8 	.word	0xfffff8f8
 8008890:	fffff800 	.word	0xfffff800

08008894 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008898:	4b05      	ldr	r3, [pc, #20]	@ (80088b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a04      	ldr	r2, [pc, #16]	@ (80088b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800889e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088a2:	6013      	str	r3, [r2, #0]
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40007000 	.word	0x40007000

080088b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80088be:	4b23      	ldr	r3, [pc, #140]	@ (800894c <HAL_PWREx_EnableOverDrive+0x98>)
 80088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c2:	4a22      	ldr	r2, [pc, #136]	@ (800894c <HAL_PWREx_EnableOverDrive+0x98>)
 80088c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80088ca:	4b20      	ldr	r3, [pc, #128]	@ (800894c <HAL_PWREx_EnableOverDrive+0x98>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80088d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008950 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1d      	ldr	r2, [pc, #116]	@ (8008950 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088e2:	f7fb fa43 	bl	8003d6c <HAL_GetTick>
 80088e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80088e8:	e009      	b.n	80088fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80088ea:	f7fb fa3f 	bl	8003d6c <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088f8:	d901      	bls.n	80088fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e022      	b.n	8008944 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80088fe:	4b14      	ldr	r3, [pc, #80]	@ (8008950 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800890a:	d1ee      	bne.n	80088ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800890c:	4b10      	ldr	r3, [pc, #64]	@ (8008950 <HAL_PWREx_EnableOverDrive+0x9c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a0f      	ldr	r2, [pc, #60]	@ (8008950 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008916:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008918:	f7fb fa28 	bl	8003d6c <HAL_GetTick>
 800891c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800891e:	e009      	b.n	8008934 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008920:	f7fb fa24 	bl	8003d6c <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800892e:	d901      	bls.n	8008934 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e007      	b.n	8008944 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008934:	4b06      	ldr	r3, [pc, #24]	@ (8008950 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008940:	d1ee      	bne.n	8008920 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40023800 	.word	0x40023800
 8008950:	40007000 	.word	0x40007000

08008954 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af02      	add	r7, sp, #8
 800895a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800895c:	f7fb fa06 	bl	8003d6c <HAL_GetTick>
 8008960:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e067      	b.n	8008a3c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10b      	bne.n	8008990 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7fa f8db 	bl	8002b3c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008986:	f241 3188 	movw	r1, #5000	@ 0x1388
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f85e 	bl	8008a4c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	3b01      	subs	r3, #1
 80089a0:	021a      	lsls	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	2120      	movs	r1, #32
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f856 	bl	8008a68 <QSPI_WaitFlagStateUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d135      	bne.n	8008a32 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <HAL_QSPI_Init+0xf0>)
 80089ce:	4013      	ands	r3, r2
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6852      	ldr	r2, [r2, #4]
 80089d4:	0611      	lsls	r1, r2, #24
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68d2      	ldr	r2, [r2, #12]
 80089da:	4311      	orrs	r1, r2
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	69d2      	ldr	r2, [r2, #28]
 80089e0:	4311      	orrs	r1, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6a12      	ldr	r2, [r2, #32]
 80089e6:	4311      	orrs	r1, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	430b      	orrs	r3, r1
 80089ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	4b14      	ldr	r3, [pc, #80]	@ (8008a48 <HAL_QSPI_Init+0xf4>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6912      	ldr	r2, [r2, #16]
 80089fe:	0411      	lsls	r1, r2, #16
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6952      	ldr	r2, [r2, #20]
 8008a04:	4311      	orrs	r1, r2
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6992      	ldr	r2, [r2, #24]
 8008a0a:	4311      	orrs	r1, r2
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0201 	orr.w	r2, r2, #1
 8008a22:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8008a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	00ffff2f 	.word	0x00ffff2f
 8008a48:	ffe0f8fe 	.word	0xffe0f8fe

08008a4c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	4613      	mov	r3, r2
 8008a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a78:	e01a      	b.n	8008ab0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d016      	beq.n	8008ab0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a82:	f7fb f973 	bl	8003d6c <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d302      	bcc.n	8008a98 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10b      	bne.n	8008ab0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa4:	f043 0201 	orr.w	r2, r3, #1
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e00e      	b.n	8008ace <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bf14      	ite	ne
 8008abe:	2301      	movne	r3, #1
 8008ac0:	2300      	moveq	r3, #0
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d1d6      	bne.n	8008a7a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e291      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 8087 	beq.w	8008c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008afc:	4b96      	ldr	r3, [pc, #600]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 030c 	and.w	r3, r3, #12
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d00c      	beq.n	8008b22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b08:	4b93      	ldr	r3, [pc, #588]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f003 030c 	and.w	r3, r3, #12
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d112      	bne.n	8008b3a <HAL_RCC_OscConfig+0x62>
 8008b14:	4b90      	ldr	r3, [pc, #576]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b20:	d10b      	bne.n	8008b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b22:	4b8d      	ldr	r3, [pc, #564]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d06c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x130>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d168      	bne.n	8008c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e26b      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b42:	d106      	bne.n	8008b52 <HAL_RCC_OscConfig+0x7a>
 8008b44:	4b84      	ldr	r3, [pc, #528]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a83      	ldr	r2, [pc, #524]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e02e      	b.n	8008bb0 <HAL_RCC_OscConfig+0xd8>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCC_OscConfig+0x9c>
 8008b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	4b7c      	ldr	r3, [pc, #496]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a7b      	ldr	r2, [pc, #492]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e01d      	b.n	8008bb0 <HAL_RCC_OscConfig+0xd8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b7c:	d10c      	bne.n	8008b98 <HAL_RCC_OscConfig+0xc0>
 8008b7e:	4b76      	ldr	r3, [pc, #472]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a75      	ldr	r2, [pc, #468]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	4b73      	ldr	r3, [pc, #460]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a72      	ldr	r2, [pc, #456]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	e00b      	b.n	8008bb0 <HAL_RCC_OscConfig+0xd8>
 8008b98:	4b6f      	ldr	r3, [pc, #444]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ba2:	6013      	str	r3, [r2, #0]
 8008ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d013      	beq.n	8008be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb8:	f7fb f8d8 	bl	8003d6c <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc0:	f7fb f8d4 	bl	8003d6c <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b64      	cmp	r3, #100	@ 0x64
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e21f      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bd2:	4b61      	ldr	r3, [pc, #388]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0f0      	beq.n	8008bc0 <HAL_RCC_OscConfig+0xe8>
 8008bde:	e014      	b.n	8008c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be0:	f7fb f8c4 	bl	8003d6c <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008be8:	f7fb f8c0 	bl	8003d6c <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b64      	cmp	r3, #100	@ 0x64
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e20b      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bfa:	4b57      	ldr	r3, [pc, #348]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f0      	bne.n	8008be8 <HAL_RCC_OscConfig+0x110>
 8008c06:	e000      	b.n	8008c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d069      	beq.n	8008cea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c16:	4b50      	ldr	r3, [pc, #320]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f003 030c 	and.w	r3, r3, #12
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c22:	4b4d      	ldr	r3, [pc, #308]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 030c 	and.w	r3, r3, #12
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	d11c      	bne.n	8008c68 <HAL_RCC_OscConfig+0x190>
 8008c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d116      	bne.n	8008c68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c3a:	4b47      	ldr	r3, [pc, #284]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <HAL_RCC_OscConfig+0x17a>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d001      	beq.n	8008c52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e1df      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c52:	4b41      	ldr	r3, [pc, #260]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	493d      	ldr	r1, [pc, #244]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c66:	e040      	b.n	8008cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d023      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c70:	4b39      	ldr	r3, [pc, #228]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a38      	ldr	r2, [pc, #224]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c7c:	f7fb f876 	bl	8003d6c <HAL_GetTick>
 8008c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c84:	f7fb f872 	bl	8003d6c <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e1bd      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c96:	4b30      	ldr	r3, [pc, #192]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4929      	ldr	r1, [pc, #164]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	600b      	str	r3, [r1, #0]
 8008cb6:	e018      	b.n	8008cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cb8:	4b27      	ldr	r3, [pc, #156]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a26      	ldr	r2, [pc, #152]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc4:	f7fb f852 	bl	8003d6c <HAL_GetTick>
 8008cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cca:	e008      	b.n	8008cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ccc:	f7fb f84e 	bl	8003d6c <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e199      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cde:	4b1e      	ldr	r3, [pc, #120]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1f0      	bne.n	8008ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d038      	beq.n	8008d68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d019      	beq.n	8008d32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cfe:	4b16      	ldr	r3, [pc, #88]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d02:	4a15      	ldr	r2, [pc, #84]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d0a:	f7fb f82f 	bl	8003d6c <HAL_GetTick>
 8008d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d10:	e008      	b.n	8008d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d12:	f7fb f82b 	bl	8003d6c <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e176      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d24:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0f0      	beq.n	8008d12 <HAL_RCC_OscConfig+0x23a>
 8008d30:	e01a      	b.n	8008d68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d32:	4b09      	ldr	r3, [pc, #36]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d36:	4a08      	ldr	r2, [pc, #32]	@ (8008d58 <HAL_RCC_OscConfig+0x280>)
 8008d38:	f023 0301 	bic.w	r3, r3, #1
 8008d3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d3e:	f7fb f815 	bl	8003d6c <HAL_GetTick>
 8008d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d44:	e00a      	b.n	8008d5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d46:	f7fb f811 	bl	8003d6c <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d903      	bls.n	8008d5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e15c      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
 8008d58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d5c:	4b91      	ldr	r3, [pc, #580]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1ee      	bne.n	8008d46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 80a4 	beq.w	8008ebe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d76:	4b8b      	ldr	r3, [pc, #556]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10d      	bne.n	8008d9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d82:	4b88      	ldr	r3, [pc, #544]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d86:	4a87      	ldr	r2, [pc, #540]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d8e:	4b85      	ldr	r3, [pc, #532]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d9e:	4b82      	ldr	r3, [pc, #520]	@ (8008fa8 <HAL_RCC_OscConfig+0x4d0>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d118      	bne.n	8008ddc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008daa:	4b7f      	ldr	r3, [pc, #508]	@ (8008fa8 <HAL_RCC_OscConfig+0x4d0>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a7e      	ldr	r2, [pc, #504]	@ (8008fa8 <HAL_RCC_OscConfig+0x4d0>)
 8008db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008db6:	f7fa ffd9 	bl	8003d6c <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dbc:	e008      	b.n	8008dd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dbe:	f7fa ffd5 	bl	8003d6c <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b64      	cmp	r3, #100	@ 0x64
 8008dca:	d901      	bls.n	8008dd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e120      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dd0:	4b75      	ldr	r3, [pc, #468]	@ (8008fa8 <HAL_RCC_OscConfig+0x4d0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f0      	beq.n	8008dbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d106      	bne.n	8008df2 <HAL_RCC_OscConfig+0x31a>
 8008de4:	4b6f      	ldr	r3, [pc, #444]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008de8:	4a6e      	ldr	r2, [pc, #440]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008dea:	f043 0301 	orr.w	r3, r3, #1
 8008dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8008df0:	e02d      	b.n	8008e4e <HAL_RCC_OscConfig+0x376>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10c      	bne.n	8008e14 <HAL_RCC_OscConfig+0x33c>
 8008dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfe:	4a69      	ldr	r2, [pc, #420]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e06:	4b67      	ldr	r3, [pc, #412]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0a:	4a66      	ldr	r2, [pc, #408]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e0c:	f023 0304 	bic.w	r3, r3, #4
 8008e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e12:	e01c      	b.n	8008e4e <HAL_RCC_OscConfig+0x376>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	2b05      	cmp	r3, #5
 8008e1a:	d10c      	bne.n	8008e36 <HAL_RCC_OscConfig+0x35e>
 8008e1c:	4b61      	ldr	r3, [pc, #388]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e20:	4a60      	ldr	r2, [pc, #384]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e22:	f043 0304 	orr.w	r3, r3, #4
 8008e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e28:	4b5e      	ldr	r3, [pc, #376]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e34:	e00b      	b.n	8008e4e <HAL_RCC_OscConfig+0x376>
 8008e36:	4b5b      	ldr	r3, [pc, #364]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e3a:	4a5a      	ldr	r2, [pc, #360]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e3c:	f023 0301 	bic.w	r3, r3, #1
 8008e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e42:	4b58      	ldr	r3, [pc, #352]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e46:	4a57      	ldr	r2, [pc, #348]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e48:	f023 0304 	bic.w	r3, r3, #4
 8008e4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d015      	beq.n	8008e82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e56:	f7fa ff89 	bl	8003d6c <HAL_GetTick>
 8008e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e5c:	e00a      	b.n	8008e74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e5e:	f7fa ff85 	bl	8003d6c <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d901      	bls.n	8008e74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e0ce      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e74:	4b4b      	ldr	r3, [pc, #300]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0ee      	beq.n	8008e5e <HAL_RCC_OscConfig+0x386>
 8008e80:	e014      	b.n	8008eac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e82:	f7fa ff73 	bl	8003d6c <HAL_GetTick>
 8008e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e88:	e00a      	b.n	8008ea0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e8a:	f7fa ff6f 	bl	8003d6c <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d901      	bls.n	8008ea0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e0b8      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ea0:	4b40      	ldr	r3, [pc, #256]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1ee      	bne.n	8008e8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d105      	bne.n	8008ebe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ebc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 80a4 	beq.w	8009010 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ec8:	4b36      	ldr	r3, [pc, #216]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 030c 	and.w	r3, r3, #12
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d06b      	beq.n	8008fac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d149      	bne.n	8008f70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008edc:	4b31      	ldr	r3, [pc, #196]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a30      	ldr	r2, [pc, #192]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee8:	f7fa ff40 	bl	8003d6c <HAL_GetTick>
 8008eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ef0:	f7fa ff3c 	bl	8003d6c <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e087      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f02:	4b28      	ldr	r3, [pc, #160]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f0      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69da      	ldr	r2, [r3, #28]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1c:	019b      	lsls	r3, r3, #6
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f24:	085b      	lsrs	r3, r3, #1
 8008f26:	3b01      	subs	r3, #1
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f30:	061b      	lsls	r3, r3, #24
 8008f32:	4313      	orrs	r3, r2
 8008f34:	4a1b      	ldr	r2, [pc, #108]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f3c:	4b19      	ldr	r3, [pc, #100]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a18      	ldr	r2, [pc, #96]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f48:	f7fa ff10 	bl	8003d6c <HAL_GetTick>
 8008f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f4e:	e008      	b.n	8008f62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f50:	f7fa ff0c 	bl	8003d6c <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d901      	bls.n	8008f62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e057      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f62:	4b10      	ldr	r3, [pc, #64]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0f0      	beq.n	8008f50 <HAL_RCC_OscConfig+0x478>
 8008f6e:	e04f      	b.n	8009010 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f70:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0b      	ldr	r2, [pc, #44]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7c:	f7fa fef6 	bl	8003d6c <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f84:	f7fa fef2 	bl	8003d6c <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e03d      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f96:	4b03      	ldr	r3, [pc, #12]	@ (8008fa4 <HAL_RCC_OscConfig+0x4cc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0x4ac>
 8008fa2:	e035      	b.n	8009010 <HAL_RCC_OscConfig+0x538>
 8008fa4:	40023800 	.word	0x40023800
 8008fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008fac:	4b1b      	ldr	r3, [pc, #108]	@ (800901c <HAL_RCC_OscConfig+0x544>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d028      	beq.n	800900c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d121      	bne.n	800900c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d11a      	bne.n	800900c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fdc:	4013      	ands	r3, r2
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d111      	bne.n	800900c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d107      	bne.n	800900c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009008:	429a      	cmp	r2, r3
 800900a:	d001      	beq.n	8009010 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	40023800 	.word	0x40023800

08009020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e0d0      	b.n	80091da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009038:	4b6a      	ldr	r3, [pc, #424]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	d910      	bls.n	8009068 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009046:	4b67      	ldr	r3, [pc, #412]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f023 020f 	bic.w	r2, r3, #15
 800904e:	4965      	ldr	r1, [pc, #404]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	4313      	orrs	r3, r2
 8009054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009056:	4b63      	ldr	r3, [pc, #396]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0b8      	b.n	80091da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d020      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009080:	4b59      	ldr	r3, [pc, #356]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4a58      	ldr	r2, [pc, #352]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 8009086:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800908a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009098:	4b53      	ldr	r3, [pc, #332]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	4a52      	ldr	r2, [pc, #328]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 800909e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80090a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a4:	4b50      	ldr	r3, [pc, #320]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	494d      	ldr	r1, [pc, #308]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d040      	beq.n	8009144 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d107      	bne.n	80090da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ca:	4b47      	ldr	r3, [pc, #284]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d115      	bne.n	8009102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e07f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d107      	bne.n	80090f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090e2:	4b41      	ldr	r3, [pc, #260]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e073      	b.n	80091da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090f2:	4b3d      	ldr	r3, [pc, #244]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e06b      	b.n	80091da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009102:	4b39      	ldr	r3, [pc, #228]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f023 0203 	bic.w	r2, r3, #3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	4936      	ldr	r1, [pc, #216]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 8009110:	4313      	orrs	r3, r2
 8009112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009114:	f7fa fe2a 	bl	8003d6c <HAL_GetTick>
 8009118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800911a:	e00a      	b.n	8009132 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800911c:	f7fa fe26 	bl	8003d6c <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800912a:	4293      	cmp	r3, r2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e053      	b.n	80091da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009132:	4b2d      	ldr	r3, [pc, #180]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f003 020c 	and.w	r2, r3, #12
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	429a      	cmp	r2, r3
 8009142:	d1eb      	bne.n	800911c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009144:	4b27      	ldr	r3, [pc, #156]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d210      	bcs.n	8009174 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009152:	4b24      	ldr	r3, [pc, #144]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f023 020f 	bic.w	r2, r3, #15
 800915a:	4922      	ldr	r1, [pc, #136]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	4313      	orrs	r3, r2
 8009160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009162:	4b20      	ldr	r3, [pc, #128]	@ (80091e4 <HAL_RCC_ClockConfig+0x1c4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d001      	beq.n	8009174 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e032      	b.n	80091da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d008      	beq.n	8009192 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009180:	4b19      	ldr	r3, [pc, #100]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	4916      	ldr	r1, [pc, #88]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 800918e:	4313      	orrs	r3, r2
 8009190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800919e:	4b12      	ldr	r3, [pc, #72]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	490e      	ldr	r1, [pc, #56]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80091b2:	f000 f821 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 80091b6:	4602      	mov	r2, r0
 80091b8:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <HAL_RCC_ClockConfig+0x1c8>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	091b      	lsrs	r3, r3, #4
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	490a      	ldr	r1, [pc, #40]	@ (80091ec <HAL_RCC_ClockConfig+0x1cc>)
 80091c4:	5ccb      	ldrb	r3, [r1, r3]
 80091c6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ca:	4a09      	ldr	r2, [pc, #36]	@ (80091f0 <HAL_RCC_ClockConfig+0x1d0>)
 80091cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80091ce:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <HAL_RCC_ClockConfig+0x1d4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fa f9c0 	bl	8003558 <HAL_InitTick>

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40023c00 	.word	0x40023c00
 80091e8:	40023800 	.word	0x40023800
 80091ec:	08027f10 	.word	0x08027f10
 80091f0:	20000000 	.word	0x20000000
 80091f4:	20000004 	.word	0x20000004

080091f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091fc:	b090      	sub	sp, #64	@ 0x40
 80091fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	637b      	str	r3, [r7, #52]	@ 0x34
 8009204:	2300      	movs	r3, #0
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009208:	2300      	movs	r3, #0
 800920a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009210:	4b59      	ldr	r3, [pc, #356]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x180>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f003 030c 	and.w	r3, r3, #12
 8009218:	2b08      	cmp	r3, #8
 800921a:	d00d      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x40>
 800921c:	2b08      	cmp	r3, #8
 800921e:	f200 80a1 	bhi.w	8009364 <HAL_RCC_GetSysClockFreq+0x16c>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_RCC_GetSysClockFreq+0x34>
 8009226:	2b04      	cmp	r3, #4
 8009228:	d003      	beq.n	8009232 <HAL_RCC_GetSysClockFreq+0x3a>
 800922a:	e09b      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800922c:	4b53      	ldr	r3, [pc, #332]	@ (800937c <HAL_RCC_GetSysClockFreq+0x184>)
 800922e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009230:	e09b      	b.n	800936a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009232:	4b53      	ldr	r3, [pc, #332]	@ (8009380 <HAL_RCC_GetSysClockFreq+0x188>)
 8009234:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009236:	e098      	b.n	800936a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009238:	4b4f      	ldr	r3, [pc, #316]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x180>)
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009242:	4b4d      	ldr	r3, [pc, #308]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x180>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d028      	beq.n	80092a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800924e:	4b4a      	ldr	r3, [pc, #296]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x180>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	099b      	lsrs	r3, r3, #6
 8009254:	2200      	movs	r2, #0
 8009256:	623b      	str	r3, [r7, #32]
 8009258:	627a      	str	r2, [r7, #36]	@ 0x24
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009260:	2100      	movs	r1, #0
 8009262:	4b47      	ldr	r3, [pc, #284]	@ (8009380 <HAL_RCC_GetSysClockFreq+0x188>)
 8009264:	fb03 f201 	mul.w	r2, r3, r1
 8009268:	2300      	movs	r3, #0
 800926a:	fb00 f303 	mul.w	r3, r0, r3
 800926e:	4413      	add	r3, r2
 8009270:	4a43      	ldr	r2, [pc, #268]	@ (8009380 <HAL_RCC_GetSysClockFreq+0x188>)
 8009272:	fba0 1202 	umull	r1, r2, r0, r2
 8009276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009278:	460a      	mov	r2, r1
 800927a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800927c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800927e:	4413      	add	r3, r2
 8009280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009284:	2200      	movs	r2, #0
 8009286:	61bb      	str	r3, [r7, #24]
 8009288:	61fa      	str	r2, [r7, #28]
 800928a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800928e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009292:	f7f7 f80d 	bl	80002b0 <__aeabi_uldivmod>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4613      	mov	r3, r2
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800929e:	e053      	b.n	8009348 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092a0:	4b35      	ldr	r3, [pc, #212]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x180>)
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	099b      	lsrs	r3, r3, #6
 80092a6:	2200      	movs	r2, #0
 80092a8:	613b      	str	r3, [r7, #16]
 80092aa:	617a      	str	r2, [r7, #20]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80092b2:	f04f 0b00 	mov.w	fp, #0
 80092b6:	4652      	mov	r2, sl
 80092b8:	465b      	mov	r3, fp
 80092ba:	f04f 0000 	mov.w	r0, #0
 80092be:	f04f 0100 	mov.w	r1, #0
 80092c2:	0159      	lsls	r1, r3, #5
 80092c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092c8:	0150      	lsls	r0, r2, #5
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	ebb2 080a 	subs.w	r8, r2, sl
 80092d2:	eb63 090b 	sbc.w	r9, r3, fp
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80092ea:	ebb2 0408 	subs.w	r4, r2, r8
 80092ee:	eb63 0509 	sbc.w	r5, r3, r9
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	00eb      	lsls	r3, r5, #3
 80092fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009300:	00e2      	lsls	r2, r4, #3
 8009302:	4614      	mov	r4, r2
 8009304:	461d      	mov	r5, r3
 8009306:	eb14 030a 	adds.w	r3, r4, sl
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	eb45 030b 	adc.w	r3, r5, fp
 8009310:	607b      	str	r3, [r7, #4]
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	f04f 0300 	mov.w	r3, #0
 800931a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800931e:	4629      	mov	r1, r5
 8009320:	028b      	lsls	r3, r1, #10
 8009322:	4621      	mov	r1, r4
 8009324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009328:	4621      	mov	r1, r4
 800932a:	028a      	lsls	r2, r1, #10
 800932c:	4610      	mov	r0, r2
 800932e:	4619      	mov	r1, r3
 8009330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009332:	2200      	movs	r2, #0
 8009334:	60bb      	str	r3, [r7, #8]
 8009336:	60fa      	str	r2, [r7, #12]
 8009338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800933c:	f7f6 ffb8 	bl	80002b0 <__aeabi_uldivmod>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4613      	mov	r3, r2
 8009346:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009348:	4b0b      	ldr	r3, [pc, #44]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x180>)
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	0c1b      	lsrs	r3, r3, #16
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	3301      	adds	r3, #1
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009358:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009360:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009362:	e002      	b.n	800936a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009364:	4b05      	ldr	r3, [pc, #20]	@ (800937c <HAL_RCC_GetSysClockFreq+0x184>)
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800936a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800936c:	4618      	mov	r0, r3
 800936e:	3740      	adds	r7, #64	@ 0x40
 8009370:	46bd      	mov	sp, r7
 8009372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009376:	bf00      	nop
 8009378:	40023800 	.word	0x40023800
 800937c:	00f42400 	.word	0x00f42400
 8009380:	017d7840 	.word	0x017d7840

08009384 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009388:	4b03      	ldr	r3, [pc, #12]	@ (8009398 <HAL_RCC_GetHCLKFreq+0x14>)
 800938a:	681b      	ldr	r3, [r3, #0]
}
 800938c:	4618      	mov	r0, r3
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20000000 	.word	0x20000000

0800939c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093a0:	f7ff fff0 	bl	8009384 <HAL_RCC_GetHCLKFreq>
 80093a4:	4602      	mov	r2, r0
 80093a6:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	0a9b      	lsrs	r3, r3, #10
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	4903      	ldr	r1, [pc, #12]	@ (80093c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093b2:	5ccb      	ldrb	r3, [r1, r3]
 80093b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40023800 	.word	0x40023800
 80093c0:	08027f20 	.word	0x08027f20

080093c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093c8:	f7ff ffdc 	bl	8009384 <HAL_RCC_GetHCLKFreq>
 80093cc:	4602      	mov	r2, r0
 80093ce:	4b05      	ldr	r3, [pc, #20]	@ (80093e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	0b5b      	lsrs	r3, r3, #13
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	4903      	ldr	r1, [pc, #12]	@ (80093e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093da:	5ccb      	ldrb	r3, [r1, r3]
 80093dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	40023800 	.word	0x40023800
 80093e8:	08027f20 	.word	0x08027f20

080093ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	220f      	movs	r2, #15
 80093fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093fc:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f003 0203 	and.w	r2, r3, #3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009408:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009420:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	08db      	lsrs	r3, r3, #3
 8009426:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800942e:	4b07      	ldr	r3, [pc, #28]	@ (800944c <HAL_RCC_GetClockConfig+0x60>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 020f 	and.w	r2, r3, #15
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	601a      	str	r2, [r3, #0]
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40023800 	.word	0x40023800
 800944c:	40023c00 	.word	0x40023c00

08009450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d012      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009478:	4b69      	ldr	r3, [pc, #420]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	4a68      	ldr	r2, [pc, #416]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009482:	6093      	str	r3, [r2, #8]
 8009484:	4b66      	ldr	r3, [pc, #408]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800948c:	4964      	ldr	r1, [pc, #400]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948e:	4313      	orrs	r3, r2
 8009490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800949a:	2301      	movs	r3, #1
 800949c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d017      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094aa:	4b5d      	ldr	r3, [pc, #372]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b8:	4959      	ldr	r1, [pc, #356]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094c8:	d101      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80094ca:	2301      	movs	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d017      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80094e6:	4b4e      	ldr	r3, [pc, #312]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f4:	494a      	ldr	r1, [pc, #296]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009504:	d101      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009506:	2301      	movs	r3, #1
 8009508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009512:	2301      	movs	r3, #1
 8009514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009522:	2301      	movs	r3, #1
 8009524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 808b 	beq.w	800964a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009534:	4b3a      	ldr	r3, [pc, #232]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009538:	4a39      	ldr	r2, [pc, #228]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800953a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800953e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009540:	4b37      	ldr	r3, [pc, #220]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009548:	60bb      	str	r3, [r7, #8]
 800954a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800954c:	4b35      	ldr	r3, [pc, #212]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a34      	ldr	r2, [pc, #208]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009558:	f7fa fc08 	bl	8003d6c <HAL_GetTick>
 800955c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800955e:	e008      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009560:	f7fa fc04 	bl	8003d6c <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b64      	cmp	r3, #100	@ 0x64
 800956c:	d901      	bls.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e357      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009572:	4b2c      	ldr	r3, [pc, #176]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0f0      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800957e:	4b28      	ldr	r3, [pc, #160]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d035      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	429a      	cmp	r2, r3
 800959a:	d02e      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800959c:	4b20      	ldr	r3, [pc, #128]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800959e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80095a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80095be:	4a18      	ldr	r2, [pc, #96]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095c4:	4b16      	ldr	r3, [pc, #88]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d114      	bne.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d0:	f7fa fbcc 	bl	8003d6c <HAL_GetTick>
 80095d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095d6:	e00a      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095d8:	f7fa fbc8 	bl	8003d6c <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d901      	bls.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e319      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0ee      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009606:	d111      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009608:	4b05      	ldr	r3, [pc, #20]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009616:	400b      	ands	r3, r1
 8009618:	4901      	ldr	r1, [pc, #4]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800961a:	4313      	orrs	r3, r2
 800961c:	608b      	str	r3, [r1, #8]
 800961e:	e00b      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009620:	40023800 	.word	0x40023800
 8009624:	40007000 	.word	0x40007000
 8009628:	0ffffcff 	.word	0x0ffffcff
 800962c:	4baa      	ldr	r3, [pc, #680]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	4aa9      	ldr	r2, [pc, #676]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009632:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009636:	6093      	str	r3, [r2, #8]
 8009638:	4ba7      	ldr	r3, [pc, #668]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009644:	49a4      	ldr	r1, [pc, #656]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009646:	4313      	orrs	r3, r2
 8009648:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b00      	cmp	r3, #0
 8009654:	d010      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009656:	4ba0      	ldr	r3, [pc, #640]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800965c:	4a9e      	ldr	r2, [pc, #632]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009662:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009666:	4b9c      	ldr	r3, [pc, #624]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009668:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009670:	4999      	ldr	r1, [pc, #612]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009672:	4313      	orrs	r3, r2
 8009674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009684:	4b94      	ldr	r3, [pc, #592]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800968a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009692:	4991      	ldr	r1, [pc, #580]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80096a6:	4b8c      	ldr	r3, [pc, #560]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096b4:	4988      	ldr	r1, [pc, #544]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096c8:	4b83      	ldr	r3, [pc, #524]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096d6:	4980      	ldr	r1, [pc, #512]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096ea:	4b7b      	ldr	r3, [pc, #492]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096f8:	4977      	ldr	r1, [pc, #476]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00a      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800970c:	4b72      	ldr	r3, [pc, #456]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800970e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009712:	f023 0203 	bic.w	r2, r3, #3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800971a:	496f      	ldr	r1, [pc, #444]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800972e:	4b6a      	ldr	r3, [pc, #424]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009734:	f023 020c 	bic.w	r2, r3, #12
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800973c:	4966      	ldr	r1, [pc, #408]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009750:	4b61      	ldr	r3, [pc, #388]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009756:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800975e:	495e      	ldr	r1, [pc, #376]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009772:	4b59      	ldr	r3, [pc, #356]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009778:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009780:	4955      	ldr	r1, [pc, #340]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009782:	4313      	orrs	r3, r2
 8009784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00a      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009794:	4b50      	ldr	r3, [pc, #320]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a2:	494d      	ldr	r1, [pc, #308]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00a      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80097b6:	4b48      	ldr	r3, [pc, #288]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c4:	4944      	ldr	r1, [pc, #272]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80097d8:	4b3f      	ldr	r3, [pc, #252]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097e6:	493c      	ldr	r1, [pc, #240]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80097fa:	4b37      	ldr	r3, [pc, #220]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009800:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009808:	4933      	ldr	r1, [pc, #204]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800980a:	4313      	orrs	r3, r2
 800980c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800981c:	4b2e      	ldr	r3, [pc, #184]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009822:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800982a:	492b      	ldr	r1, [pc, #172]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800982c:	4313      	orrs	r3, r2
 800982e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d011      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800983e:	4b26      	ldr	r3, [pc, #152]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009844:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800984c:	4922      	ldr	r1, [pc, #136]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800984e:	4313      	orrs	r3, r2
 8009850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800985c:	d101      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800985e:	2301      	movs	r3, #1
 8009860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0308 	and.w	r3, r3, #8
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800986e:	2301      	movs	r3, #1
 8009870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00a      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800987e:	4b16      	ldr	r3, [pc, #88]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009884:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800988c:	4912      	ldr	r1, [pc, #72]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800988e:	4313      	orrs	r3, r2
 8009890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80098a0:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b0:	4909      	ldr	r1, [pc, #36]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d006      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 80d9 	beq.w	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80098cc:	4b02      	ldr	r3, [pc, #8]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a01      	ldr	r2, [pc, #4]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098d6:	e001      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80098d8:	40023800 	.word	0x40023800
 80098dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098de:	f7fa fa45 	bl	8003d6c <HAL_GetTick>
 80098e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098e4:	e008      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80098e6:	f7fa fa41 	bl	8003d6c <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	2b64      	cmp	r3, #100	@ 0x64
 80098f2:	d901      	bls.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e194      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098f8:	4b6c      	ldr	r3, [pc, #432]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1f0      	bne.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d021      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009914:	2b00      	cmp	r3, #0
 8009916:	d11d      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009918:	4b64      	ldr	r3, [pc, #400]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800991a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800991e:	0c1b      	lsrs	r3, r3, #16
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009926:	4b61      	ldr	r3, [pc, #388]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800992c:	0e1b      	lsrs	r3, r3, #24
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	019a      	lsls	r2, r3, #6
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	041b      	lsls	r3, r3, #16
 800993e:	431a      	orrs	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	061b      	lsls	r3, r3, #24
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	071b      	lsls	r3, r3, #28
 800994c:	4957      	ldr	r1, [pc, #348]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800994e:	4313      	orrs	r3, r2
 8009950:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009968:	d00a      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009972:	2b00      	cmp	r3, #0
 8009974:	d02e      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800997e:	d129      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009980:	4b4a      	ldr	r3, [pc, #296]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800998e:	4b47      	ldr	r3, [pc, #284]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009994:	0f1b      	lsrs	r3, r3, #28
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	019a      	lsls	r2, r3, #6
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	041b      	lsls	r3, r3, #16
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	431a      	orrs	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	071b      	lsls	r3, r3, #28
 80099b4:	493d      	ldr	r1, [pc, #244]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80099bc:	4b3b      	ldr	r3, [pc, #236]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099c2:	f023 021f 	bic.w	r2, r3, #31
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ca:	3b01      	subs	r3, #1
 80099cc:	4937      	ldr	r1, [pc, #220]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01d      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80099e0:	4b32      	ldr	r3, [pc, #200]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099e6:	0e1b      	lsrs	r3, r3, #24
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099ee:	4b2f      	ldr	r3, [pc, #188]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f4:	0f1b      	lsrs	r3, r3, #28
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	019a      	lsls	r2, r3, #6
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	041b      	lsls	r3, r3, #16
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	061b      	lsls	r3, r3, #24
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	071b      	lsls	r3, r3, #28
 8009a14:	4925      	ldr	r1, [pc, #148]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d011      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	019a      	lsls	r2, r3, #6
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	041b      	lsls	r3, r3, #16
 8009a34:	431a      	orrs	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	061b      	lsls	r3, r3, #24
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	071b      	lsls	r3, r3, #28
 8009a44:	4919      	ldr	r1, [pc, #100]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a4c:	4b17      	ldr	r3, [pc, #92]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a16      	ldr	r2, [pc, #88]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a58:	f7fa f988 	bl	8003d6c <HAL_GetTick>
 8009a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a60:	f7fa f984 	bl	8003d6c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b64      	cmp	r3, #100	@ 0x64
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e0d7      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a72:	4b0e      	ldr	r3, [pc, #56]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	f040 80cd 	bne.w	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a86:	4b09      	ldr	r3, [pc, #36]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a08      	ldr	r2, [pc, #32]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a92:	f7fa f96b 	bl	8003d6c <HAL_GetTick>
 8009a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a98:	e00a      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a9a:	f7fa f967 	bl	8003d6c <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b64      	cmp	r3, #100	@ 0x64
 8009aa6:	d903      	bls.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e0ba      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009aac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abc:	d0ed      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d02e      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d12a      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ae6:	4b51      	ldr	r3, [pc, #324]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aec:	0c1b      	lsrs	r3, r3, #16
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009af4:	4b4d      	ldr	r3, [pc, #308]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009afa:	0f1b      	lsrs	r3, r3, #28
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	019a      	lsls	r2, r3, #6
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	041b      	lsls	r3, r3, #16
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	061b      	lsls	r3, r3, #24
 8009b14:	431a      	orrs	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	071b      	lsls	r3, r3, #28
 8009b1a:	4944      	ldr	r1, [pc, #272]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009b22:	4b42      	ldr	r3, [pc, #264]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b28:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b30:	3b01      	subs	r3, #1
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	493d      	ldr	r1, [pc, #244]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d022      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b50:	d11d      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b52:	4b36      	ldr	r3, [pc, #216]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b58:	0e1b      	lsrs	r3, r3, #24
 8009b5a:	f003 030f 	and.w	r3, r3, #15
 8009b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b60:	4b32      	ldr	r3, [pc, #200]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b66:	0f1b      	lsrs	r3, r3, #28
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	019a      	lsls	r2, r3, #6
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	041b      	lsls	r3, r3, #16
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	061b      	lsls	r3, r3, #24
 8009b80:	431a      	orrs	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	071b      	lsls	r3, r3, #28
 8009b86:	4929      	ldr	r1, [pc, #164]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0308 	and.w	r3, r3, #8
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d028      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b9a:	4b24      	ldr	r3, [pc, #144]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ba0:	0e1b      	lsrs	r3, r3, #24
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ba8:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bae:	0c1b      	lsrs	r3, r3, #16
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	019a      	lsls	r2, r3, #6
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	061b      	lsls	r3, r3, #24
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	071b      	lsls	r3, r3, #28
 8009bce:	4917      	ldr	r1, [pc, #92]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009bd6:	4b15      	ldr	r3, [pc, #84]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be4:	4911      	ldr	r1, [pc, #68]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009bec:	4b0f      	ldr	r3, [pc, #60]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bf8:	f7fa f8b8 	bl	8003d6c <HAL_GetTick>
 8009bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009bfe:	e008      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c00:	f7fa f8b4 	bl	8003d6c <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b64      	cmp	r3, #100	@ 0x64
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e007      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c1e:	d1ef      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3720      	adds	r7, #32
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	40023800 	.word	0x40023800

08009c30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009c4e:	f040 808d 	bne.w	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009c52:	4b93      	ldr	r3, [pc, #588]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c58:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009c60:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c68:	d07c      	beq.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c70:	d87b      	bhi.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d004      	beq.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7e:	d039      	beq.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009c80:	e073      	b.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009c82:	4b87      	ldr	r3, [pc, #540]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d108      	bne.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c8e:	4b84      	ldr	r3, [pc, #528]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c96:	4a83      	ldr	r2, [pc, #524]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9c:	613b      	str	r3, [r7, #16]
 8009c9e:	e007      	b.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ca8:	4a7f      	ldr	r2, [pc, #508]	@ (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb6:	0e1b      	lsrs	r3, r3, #24
 8009cb8:	f003 030f 	and.w	r3, r3, #15
 8009cbc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009cbe:	4b78      	ldr	r3, [pc, #480]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc4:	099b      	lsrs	r3, r3, #6
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	fb03 f202 	mul.w	r2, r3, r2
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009cd8:	4b71      	ldr	r3, [pc, #452]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cde:	0a1b      	lsrs	r3, r3, #8
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf0:	617b      	str	r3, [r7, #20]
        break;
 8009cf2:	e03b      	b.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d108      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d00:	4b67      	ldr	r3, [pc, #412]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d08:	4a66      	ldr	r2, [pc, #408]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	e007      	b.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009d12:	4b63      	ldr	r3, [pc, #396]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d1a:	4a63      	ldr	r2, [pc, #396]	@ (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d20:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009d22:	4b5f      	ldr	r3, [pc, #380]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d28:	0e1b      	lsrs	r3, r3, #24
 8009d2a:	f003 030f 	and.w	r3, r3, #15
 8009d2e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009d30:	4b5b      	ldr	r3, [pc, #364]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	fb03 f202 	mul.w	r2, r3, r2
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d48:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009d4a:	4b55      	ldr	r3, [pc, #340]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d50:	f003 031f 	and.w	r3, r3, #31
 8009d54:	3301      	adds	r3, #1
 8009d56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d60:	617b      	str	r3, [r7, #20]
        break;
 8009d62:	e003      	b.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d64:	4b51      	ldr	r3, [pc, #324]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009d66:	617b      	str	r3, [r7, #20]
        break;
 8009d68:	e000      	b.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009d6a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d72:	f040 808d 	bne.w	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009d76:	4b4a      	ldr	r3, [pc, #296]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d7c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009d84:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d8c:	d07c      	beq.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d94:	d87b      	bhi.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d004      	beq.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009da2:	d039      	beq.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009da4:	e073      	b.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009da6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d108      	bne.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009db2:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dba:	4a3a      	ldr	r2, [pc, #232]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc0:	613b      	str	r3, [r7, #16]
 8009dc2:	e007      	b.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009dc4:	4b36      	ldr	r3, [pc, #216]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dcc:	4a36      	ldr	r2, [pc, #216]	@ (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009dd4:	4b32      	ldr	r3, [pc, #200]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dda:	0e1b      	lsrs	r3, r3, #24
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009de2:	4b2f      	ldr	r3, [pc, #188]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de8:	099b      	lsrs	r3, r3, #6
 8009dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	fb03 f202 	mul.w	r2, r3, r2
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009dfc:	4b28      	ldr	r3, [pc, #160]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e02:	0a1b      	lsrs	r3, r3, #8
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	3301      	adds	r3, #1
 8009e0a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e14:	617b      	str	r3, [r7, #20]
        break;
 8009e16:	e03b      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009e18:	4b21      	ldr	r3, [pc, #132]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d108      	bne.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009e24:	4b1e      	ldr	r3, [pc, #120]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e32:	613b      	str	r3, [r7, #16]
 8009e34:	e007      	b.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009e36:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e44:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009e46:	4b16      	ldr	r3, [pc, #88]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e4c:	0e1b      	lsrs	r3, r3, #24
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009e54:	4b12      	ldr	r3, [pc, #72]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e5a:	099b      	lsrs	r3, r3, #6
 8009e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	fb03 f202 	mul.w	r2, r3, r2
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e74:	f003 031f 	and.w	r3, r3, #31
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e84:	617b      	str	r3, [r7, #20]
        break;
 8009e86:	e003      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e88:	4b08      	ldr	r3, [pc, #32]	@ (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009e8a:	617b      	str	r3, [r7, #20]
        break;
 8009e8c:	e000      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8009e8e:	bf00      	nop
      }
    }
  }

  return frequency;
 8009e90:	697b      	ldr	r3, [r7, #20]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	40023800 	.word	0x40023800
 8009ea4:	00f42400 	.word	0x00f42400
 8009ea8:	017d7840 	.word	0x017d7840
 8009eac:	00bb8000 	.word	0x00bb8000

08009eb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e071      	b.n	8009faa <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	7f5b      	ldrb	r3, [r3, #29]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f8 fec0 	bl	8002c5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b10      	cmp	r3, #16
 8009eee:	d053      	beq.n	8009f98 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	22ca      	movs	r2, #202	@ 0xca
 8009ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2253      	movs	r2, #83	@ 0x53
 8009efe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fac9 	bl	800a498 <RTC_EnterInitMode>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d12a      	bne.n	8009f66 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6899      	ldr	r1, [r3, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	4b26      	ldr	r3, [pc, #152]	@ (8009fb4 <HAL_RTC_Init+0x104>)
 8009f1c:	400b      	ands	r3, r1
 8009f1e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6899      	ldr	r1, [r3, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	68d2      	ldr	r2, [r2, #12]
 8009f46:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6919      	ldr	r1, [r3, #16]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	041a      	lsls	r2, r3, #16
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fad2 	bl	800a506 <RTC_ExitInitMode>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d110      	bne.n	8009f8e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f022 0208 	bic.w	r2, r2, #8
 8009f7a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	699a      	ldr	r2, [r3, #24]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	22ff      	movs	r2, #255	@ 0xff
 8009f94:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f96:	e001      	b.n	8009f9c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	ff8fffbf 	.word	0xff8fffbf

08009fb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009fb8:	b590      	push	{r4, r7, lr}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	7f1b      	ldrb	r3, [r3, #28]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d101      	bne.n	8009fd4 <HAL_RTC_SetTime+0x1c>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e085      	b.n	800a0e0 <HAL_RTC_SetTime+0x128>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d126      	bne.n	800a034 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 faa6 	bl	800a550 <RTC_ByteToBcd2>
 800a004:	4603      	mov	r3, r0
 800a006:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fa9f 	bl	800a550 <RTC_ByteToBcd2>
 800a012:	4603      	mov	r3, r0
 800a014:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a016:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	789b      	ldrb	r3, [r3, #2]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fa97 	bl	800a550 <RTC_ByteToBcd2>
 800a022:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a024:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	78db      	ldrb	r3, [r3, #3]
 800a02c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	e018      	b.n	800a066 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2200      	movs	r2, #0
 800a046:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	785b      	ldrb	r3, [r3, #1]
 800a052:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a054:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a05a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	78db      	ldrb	r3, [r3, #3]
 800a060:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a062:	4313      	orrs	r3, r2
 800a064:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	22ca      	movs	r2, #202	@ 0xca
 800a06c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2253      	movs	r2, #83	@ 0x53
 800a074:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fa0e 	bl	800a498 <RTC_EnterInitMode>
 800a07c:	4603      	mov	r3, r0
 800a07e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a080:	7cfb      	ldrb	r3, [r7, #19]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d11e      	bne.n	800a0c4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	6979      	ldr	r1, [r7, #20]
 800a08c:	4b16      	ldr	r3, [pc, #88]	@ (800a0e8 <HAL_RTC_SetTime+0x130>)
 800a08e:	400b      	ands	r3, r1
 800a090:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a0a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6899      	ldr	r1, [r3, #8]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 fa23 	bl	800a506 <RTC_ExitInitMode>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a0c4:	7cfb      	ldrb	r3, [r7, #19]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d102      	bne.n	800a0d0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	22ff      	movs	r2, #255	@ 0xff
 800a0d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	771a      	strb	r2, [r3, #28]

  return status;
 800a0de:	7cfb      	ldrb	r3, [r7, #19]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	371c      	adds	r7, #28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}
 800a0e8:	007f7f7f 	.word	0x007f7f7f

0800a0ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a0ec:	b590      	push	{r4, r7, lr}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	7f1b      	ldrb	r3, [r3, #28]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_RTC_SetDate+0x1c>
 800a104:	2302      	movs	r3, #2
 800a106:	e06f      	b.n	800a1e8 <HAL_RTC_SetDate+0xfc>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2202      	movs	r2, #2
 800a112:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10e      	bne.n	800a138 <HAL_RTC_SetDate+0x4c>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	785b      	ldrb	r3, [r3, #1]
 800a11e:	f003 0310 	and.w	r3, r3, #16
 800a122:	2b00      	cmp	r3, #0
 800a124:	d008      	beq.n	800a138 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	f023 0310 	bic.w	r3, r3, #16
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	330a      	adds	r3, #10
 800a132:	b2da      	uxtb	r2, r3
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d11c      	bne.n	800a178 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	78db      	ldrb	r3, [r3, #3]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 fa04 	bl	800a550 <RTC_ByteToBcd2>
 800a148:	4603      	mov	r3, r0
 800a14a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	785b      	ldrb	r3, [r3, #1]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f9fd 	bl	800a550 <RTC_ByteToBcd2>
 800a156:	4603      	mov	r3, r0
 800a158:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a15a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	789b      	ldrb	r3, [r3, #2]
 800a160:	4618      	mov	r0, r3
 800a162:	f000 f9f5 	bl	800a550 <RTC_ByteToBcd2>
 800a166:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a168:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a172:	4313      	orrs	r3, r2
 800a174:	617b      	str	r3, [r7, #20]
 800a176:	e00e      	b.n	800a196 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	78db      	ldrb	r3, [r3, #3]
 800a17c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a184:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a18a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a192:	4313      	orrs	r3, r2
 800a194:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	22ca      	movs	r2, #202	@ 0xca
 800a19c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2253      	movs	r2, #83	@ 0x53
 800a1a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 f976 	bl	800a498 <RTC_EnterInitMode>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a1b0:	7cfb      	ldrb	r3, [r7, #19]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	6979      	ldr	r1, [r7, #20]
 800a1bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f0 <HAL_RTC_SetDate+0x104>)
 800a1be:	400b      	ands	r3, r1
 800a1c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f99f 	bl	800a506 <RTC_ExitInitMode>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a1cc:	7cfb      	ldrb	r3, [r7, #19]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d102      	bne.n	800a1d8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	22ff      	movs	r2, #255	@ 0xff
 800a1de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	771a      	strb	r2, [r3, #28]

  return status;
 800a1e6:	7cfb      	ldrb	r3, [r7, #19]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	371c      	adds	r7, #28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd90      	pop	{r4, r7, pc}
 800a1f0:	00ffff3f 	.word	0x00ffff3f

0800a1f4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b089      	sub	sp, #36	@ 0x24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	7f1b      	ldrb	r3, [r3, #28]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d101      	bne.n	800a218 <HAL_RTC_SetAlarm+0x24>
 800a214:	2302      	movs	r3, #2
 800a216:	e113      	b.n	800a440 <HAL_RTC_SetAlarm+0x24c>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2201      	movs	r2, #1
 800a21c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2202      	movs	r2, #2
 800a222:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d137      	bne.n	800a29a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2200      	movs	r2, #0
 800a23c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f984 	bl	800a550 <RTC_ByteToBcd2>
 800a248:	4603      	mov	r3, r0
 800a24a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	785b      	ldrb	r3, [r3, #1]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 f97d 	bl	800a550 <RTC_ByteToBcd2>
 800a256:	4603      	mov	r3, r0
 800a258:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a25a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f975 	bl	800a550 <RTC_ByteToBcd2>
 800a266:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a268:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	78db      	ldrb	r3, [r3, #3]
 800a270:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a272:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f967 	bl	800a550 <RTC_ByteToBcd2>
 800a282:	4603      	mov	r3, r0
 800a284:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a286:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a28e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a294:	4313      	orrs	r3, r2
 800a296:	61fb      	str	r3, [r7, #28]
 800a298:	e023      	b.n	800a2e2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d102      	bne.n	800a2ae <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	785b      	ldrb	r3, [r3, #1]
 800a2b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a2ba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a2c0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	78db      	ldrb	r3, [r3, #3]
 800a2c6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a2c8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a2d2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a2d8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	22ca      	movs	r2, #202	@ 0xca
 800a2f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2253      	movs	r2, #83	@ 0x53
 800a2fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a306:	d148      	bne.n	800a39a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a316:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a326:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a338:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a33a:	f7f9 fd17 	bl	8003d6c <HAL_GetTick>
 800a33e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a340:	e013      	b.n	800a36a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a342:	f7f9 fd13 	bl	8003d6c <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a350:	d90b      	bls.n	800a36a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	22ff      	movs	r2, #255	@ 0xff
 800a358:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2203      	movs	r2, #3
 800a35e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e06a      	b.n	800a440 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0e4      	beq.n	800a342 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a396:	609a      	str	r2, [r3, #8]
 800a398:	e047      	b.n	800a42a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a3a8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a3b8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a3ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3cc:	f7f9 fcce 	bl	8003d6c <HAL_GetTick>
 800a3d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3d2:	e013      	b.n	800a3fc <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a3d4:	f7f9 fcca 	bl	8003d6c <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a3e2:	d90b      	bls.n	800a3fc <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	22ff      	movs	r2, #255	@ 0xff
 800a3ea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e021      	b.n	800a440 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0e4      	beq.n	800a3d4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a428:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	22ff      	movs	r2, #255	@ 0xff
 800a430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3724      	adds	r7, #36	@ 0x24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd90      	pop	{r4, r7, pc}

0800a448 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a462:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a464:	f7f9 fc82 	bl	8003d6c <HAL_GetTick>
 800a468:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a46a:	e009      	b.n	800a480 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a46c:	f7f9 fc7e 	bl	8003d6c <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a47a:	d901      	bls.n	800a480 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e007      	b.n	800a490 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0ee      	beq.n	800a46c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d122      	bne.n	800a4fc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a4c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a4c6:	f7f9 fc51 	bl	8003d6c <HAL_GetTick>
 800a4ca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a4cc:	e00c      	b.n	800a4e8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a4ce:	f7f9 fc4d 	bl	8003d6c <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4dc:	d904      	bls.n	800a4e8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2204      	movs	r2, #4
 800a4e2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d102      	bne.n	800a4fc <RTC_EnterInitMode+0x64>
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d1e8      	bne.n	800a4ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68da      	ldr	r2, [r3, #12]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a520:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f003 0320 	and.w	r3, r3, #32
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10a      	bne.n	800a546 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff ff89 	bl	800a448 <HAL_RTC_WaitForSynchro>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2204      	movs	r2, #4
 800a540:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a55e:	e005      	b.n	800a56c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3301      	adds	r3, #1
 800a564:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	3b0a      	subs	r3, #10
 800a56a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b09      	cmp	r3, #9
 800a570:	d8f6      	bhi.n	800a560 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	b2db      	uxtb	r3, r3
 800a576:	011b      	lsls	r3, r3, #4
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	b2db      	uxtb	r3, r3
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	7f1b      	ldrb	r3, [r3, #28]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e050      	b.n	800a64a <HAL_RTCEx_SetTimeStamp+0xbe>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0206 	bic.w	r2, r2, #6
 800a5c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689a      	ldr	r2, [r3, #8]
 800a5da:	4b1f      	ldr	r3, [pc, #124]	@ (800a658 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a5dc:	4013      	ands	r3, r2
 800a5de:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	22ca      	movs	r2, #202	@ 0xca
 800a5ee:	625a      	str	r2, [r3, #36]	@ 0x24
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2253      	movs	r2, #83	@ 0x53
 800a5f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	b2da      	uxtb	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a610:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a622:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a632:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	22ff      	movs	r2, #255	@ 0xff
 800a63a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2201      	movs	r2, #1
 800a640:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	fffff7f7 	.word	0xfffff7f7

0800a65c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e156      	b.n	800a928 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d106      	bne.n	800a694 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7f8 fef8 	bl	8003484 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2202      	movs	r2, #2
 800a698:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f95b 	bl	800a958 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d00c      	beq.n	800a6c4 <HAL_SAI_Init+0x68>
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d80d      	bhi.n	800a6ca <HAL_SAI_Init+0x6e>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <HAL_SAI_Init+0x5c>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d003      	beq.n	800a6be <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a6b6:	e008      	b.n	800a6ca <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	61fb      	str	r3, [r7, #28]
      break;
 800a6bc:	e006      	b.n	800a6cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a6be:	2310      	movs	r3, #16
 800a6c0:	61fb      	str	r3, [r7, #28]
      break;
 800a6c2:	e003      	b.n	800a6cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	61fb      	str	r3, [r7, #28]
      break;
 800a6c8:	e000      	b.n	800a6cc <HAL_SAI_Init+0x70>
      break;
 800a6ca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d81e      	bhi.n	800a712 <HAL_SAI_Init+0xb6>
 800a6d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6dc <HAL_SAI_Init+0x80>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a6ed 	.word	0x0800a6ed
 800a6e0:	0800a6f3 	.word	0x0800a6f3
 800a6e4:	0800a6fb 	.word	0x0800a6fb
 800a6e8:	0800a703 	.word	0x0800a703
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	617b      	str	r3, [r7, #20]
    }
    break;
 800a6f0:	e010      	b.n	800a714 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a6f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6f6:	617b      	str	r3, [r7, #20]
    }
    break;
 800a6f8:	e00c      	b.n	800a714 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a6fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a6fe:	617b      	str	r3, [r7, #20]
    }
    break;
 800a700:	e008      	b.n	800a714 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a702:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a706:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a710:	e000      	b.n	800a714 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a712:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a85      	ldr	r2, [pc, #532]	@ (800a930 <HAL_SAI_Init+0x2d4>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d004      	beq.n	800a728 <HAL_SAI_Init+0xcc>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a84      	ldr	r2, [pc, #528]	@ (800a934 <HAL_SAI_Init+0x2d8>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d103      	bne.n	800a730 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a728:	4a83      	ldr	r2, [pc, #524]	@ (800a938 <HAL_SAI_Init+0x2dc>)
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	e002      	b.n	800a736 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a730:	4a82      	ldr	r2, [pc, #520]	@ (800a93c <HAL_SAI_Init+0x2e0>)
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d04c      	beq.n	800a7d8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a7a      	ldr	r2, [pc, #488]	@ (800a930 <HAL_SAI_Init+0x2d4>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d004      	beq.n	800a756 <HAL_SAI_Init+0xfa>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a78      	ldr	r2, [pc, #480]	@ (800a934 <HAL_SAI_Init+0x2d8>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d104      	bne.n	800a760 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a756:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a75a:	f7ff fa69 	bl	8009c30 <HAL_RCCEx_GetPeriphCLKFreq>
 800a75e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a76      	ldr	r2, [pc, #472]	@ (800a940 <HAL_SAI_Init+0x2e4>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <HAL_SAI_Init+0x118>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a75      	ldr	r2, [pc, #468]	@ (800a944 <HAL_SAI_Init+0x2e8>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d104      	bne.n	800a77e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a774:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a778:	f7ff fa5a 	bl	8009c30 <HAL_RCCEx_GetPeriphCLKFreq>
 800a77c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	025b      	lsls	r3, r3, #9
 800a790:	fbb2 f3f3 	udiv	r3, r2, r3
 800a794:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4a6b      	ldr	r2, [pc, #428]	@ (800a948 <HAL_SAI_Init+0x2ec>)
 800a79a:	fba2 2303 	umull	r2, r3, r2, r3
 800a79e:	08da      	lsrs	r2, r3, #3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	4b68      	ldr	r3, [pc, #416]	@ (800a948 <HAL_SAI_Init+0x2ec>)
 800a7a8:	fba3 2301 	umull	r2, r3, r3, r1
 800a7ac:	08da      	lsrs	r2, r3, #3
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	1aca      	subs	r2, r1, r3
 800a7b8:	2a08      	cmp	r2, #8
 800a7ba:	d904      	bls.n	800a7c6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d104      	bne.n	800a7d8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	085a      	lsrs	r2, r3, #1
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <HAL_SAI_Init+0x18c>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d109      	bne.n	800a7fc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_SAI_Init+0x198>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e001      	b.n	800a7f8 <HAL_SAI_Init+0x19c>
 800a7f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	e008      	b.n	800a80e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a800:	2b01      	cmp	r3, #1
 800a802:	d102      	bne.n	800a80a <HAL_SAI_Init+0x1ae>
 800a804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a808:	e000      	b.n	800a80c <HAL_SAI_Init+0x1b0>
 800a80a:	2300      	movs	r3, #0
 800a80c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6819      	ldr	r1, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b4c      	ldr	r3, [pc, #304]	@ (800a94c <HAL_SAI_Init+0x2f0>)
 800a81a:	400b      	ands	r3, r1
 800a81c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a832:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a838:	431a      	orrs	r2, r3
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800a846:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a852:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a1b      	ldr	r3, [r3, #32]
 800a858:	051b      	lsls	r3, r3, #20
 800a85a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6859      	ldr	r1, [r3, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	4b38      	ldr	r3, [pc, #224]	@ (800a950 <HAL_SAI_Init+0x2f4>)
 800a870:	400b      	ands	r3, r1
 800a872:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6859      	ldr	r1, [r3, #4]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a882:	431a      	orrs	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6899      	ldr	r1, [r3, #8]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	4b2d      	ldr	r3, [pc, #180]	@ (800a954 <HAL_SAI_Init+0x2f8>)
 800a89e:	400b      	ands	r3, r1
 800a8a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6899      	ldr	r1, [r3, #8]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a8b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800a8b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800a8be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a8c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68d9      	ldr	r1, [r3, #12]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a8e0:	400b      	ands	r3, r1
 800a8e2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68d9      	ldr	r1, [r3, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8f8:	041b      	lsls	r3, r3, #16
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a900:	3b01      	subs	r3, #1
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3720      	adds	r7, #32
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	40015804 	.word	0x40015804
 800a934:	40015824 	.word	0x40015824
 800a938:	40015800 	.word	0x40015800
 800a93c:	40015c00 	.word	0x40015c00
 800a940:	40015c04 	.word	0x40015c04
 800a944:	40015c24 	.word	0x40015c24
 800a948:	cccccccd 	.word	0xcccccccd
 800a94c:	ff05c010 	.word	0xff05c010
 800a950:	ffff1ff0 	.word	0xffff1ff0
 800a954:	fff88000 	.word	0xfff88000

0800a958 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a960:	4b17      	ldr	r3, [pc, #92]	@ (800a9c0 <SAI_Disable+0x68>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a17      	ldr	r2, [pc, #92]	@ (800a9c4 <SAI_Disable+0x6c>)
 800a966:	fba2 2303 	umull	r2, r3, r2, r3
 800a96a:	0b1b      	lsrs	r3, r3, #12
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a982:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	60fa      	str	r2, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a994:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	72fb      	strb	r3, [r7, #11]
      break;
 800a9a2:	e006      	b.n	800a9b2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e8      	bne.n	800a984 <SAI_Disable+0x2c>

  return status;
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	20000000 	.word	0x20000000
 800a9c4:	95cbec1b 	.word	0x95cbec1b

0800a9c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e022      	b.n	800aa20 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d105      	bne.n	800a9f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7f8 f963 	bl	8002cb8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2203      	movs	r2, #3
 800a9f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f814 	bl	800aa28 <HAL_SD_InitCard>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e00a      	b.n	800aa20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa28:	b5b0      	push	{r4, r5, r7, lr}
 800aa2a:	b08e      	sub	sp, #56	@ 0x38
 800aa2c:	af04      	add	r7, sp, #16
 800aa2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800aa44:	2376      	movs	r3, #118	@ 0x76
 800aa46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681d      	ldr	r5, [r3, #0]
 800aa4c:	466c      	mov	r4, sp
 800aa4e:	f107 0314 	add.w	r3, r7, #20
 800aa52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa5a:	f107 0308 	add.w	r3, r7, #8
 800aa5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa60:	4628      	mov	r0, r5
 800aa62:	f002 ffb3 	bl	800d9cc <SDMMC_Init>
 800aa66:	4603      	mov	r3, r0
 800aa68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800aa6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e059      	b.n	800ab2c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa86:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f002 ffd6 	bl	800da3e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aaa0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800aaa2:	2002      	movs	r0, #2
 800aaa4:	f7f9 f96e 	bl	8003d84 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fe0f 	bl	800b6cc <SD_PowerON>
 800aaae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00b      	beq.n	800aace <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e02e      	b.n	800ab2c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fd2e 	bl	800b530 <SD_InitCard>
 800aad4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	431a      	orrs	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e01b      	b.n	800ab2c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aafc:	4618      	mov	r0, r3
 800aafe:	f003 f831 	bl	800db64 <SDMMC_CmdBlockLength>
 800ab02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00f      	beq.n	800ab2a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a09      	ldr	r2, [pc, #36]	@ (800ab34 <HAL_SD_InitCard+0x10c>)
 800ab10:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3728      	adds	r7, #40	@ 0x28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bdb0      	pop	{r4, r5, r7, pc}
 800ab34:	004005ff 	.word	0x004005ff

0800ab38 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08c      	sub	sp, #48	@ 0x30
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d107      	bne.n	800ab60 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab54:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e0c3      	b.n	800ace8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	f040 80bc 	bne.w	800ace6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ab74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	441a      	add	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d907      	bls.n	800ab92 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab86:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e0aa      	b.n	800ace8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2203      	movs	r2, #3
 800ab96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800abb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb6:	4a4e      	ldr	r2, [pc, #312]	@ (800acf0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800abb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abbe:	4a4d      	ldr	r2, [pc, #308]	@ (800acf4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800abc0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc6:	2200      	movs	r2, #0
 800abc8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abce:	2200      	movs	r2, #0
 800abd0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	430a      	orrs	r2, r1
 800abec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3380      	adds	r3, #128	@ 0x80
 800abf8:	4619      	mov	r1, r3
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	025b      	lsls	r3, r3, #9
 800ac00:	089b      	lsrs	r3, r3, #2
 800ac02:	f7f9 fdc9 	bl	8004798 <HAL_DMA_Start_IT>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d017      	beq.n	800ac3c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800ac1a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a35      	ldr	r2, [pc, #212]	@ (800acf8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ac22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e055      	b.n	800ace8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f042 0208 	orr.w	r2, r2, #8
 800ac4a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d002      	beq.n	800ac5a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800ac54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac56:	025b      	lsls	r3, r3, #9
 800ac58:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	025b      	lsls	r3, r3, #9
 800ac64:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ac66:	2390      	movs	r3, #144	@ 0x90
 800ac68:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ac72:	2301      	movs	r3, #1
 800ac74:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f107 0210 	add.w	r2, r7, #16
 800ac7e:	4611      	mov	r1, r2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f002 ff43 	bl	800db0c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d90a      	bls.n	800aca2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2282      	movs	r2, #130	@ 0x82
 800ac90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f002 ffa7 	bl	800dbec <SDMMC_CmdReadMultiBlock>
 800ac9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800aca0:	e009      	b.n	800acb6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2281      	movs	r2, #129	@ 0x81
 800aca6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acae:	4618      	mov	r0, r3
 800acb0:	f002 ff7a 	bl	800dba8 <SDMMC_CmdReadSingleBlock>
 800acb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800acb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d012      	beq.n	800ace2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0d      	ldr	r2, [pc, #52]	@ (800acf8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800acc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acca:	431a      	orrs	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e002      	b.n	800ace8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	e000      	b.n	800ace8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800ace6:	2302      	movs	r3, #2
  }
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3730      	adds	r7, #48	@ 0x30
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	0800b41b 	.word	0x0800b41b
 800acf4:	0800b48d 	.word	0x0800b48d
 800acf8:	004005ff 	.word	0x004005ff

0800acfc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08c      	sub	sp, #48	@ 0x30
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d107      	bne.n	800ad24 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e0c6      	b.n	800aeb2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	f040 80bf 	bne.w	800aeb0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	441a      	add	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d907      	bls.n	800ad56 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e0ad      	b.n	800aeb2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2203      	movs	r2, #3
 800ad5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2200      	movs	r2, #0
 800ad64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f042 021a 	orr.w	r2, r2, #26
 800ad74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad7a:	4a50      	ldr	r2, [pc, #320]	@ (800aebc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800ad7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad82:	4a4f      	ldr	r2, [pc, #316]	@ (800aec0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800ad84:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d002      	beq.n	800ad9c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ad96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad98:	025b      	lsls	r3, r3, #9
 800ad9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d90a      	bls.n	800adb8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	22a0      	movs	r2, #160	@ 0xa0
 800ada6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 ff60 	bl	800dc74 <SDMMC_CmdWriteMultiBlock>
 800adb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800adb6:	e009      	b.n	800adcc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2290      	movs	r2, #144	@ 0x90
 800adbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adc4:	4618      	mov	r0, r3
 800adc6:	f002 ff33 	bl	800dc30 <SDMMC_CmdWriteSingleBlock>
 800adca:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800adcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adce:	2b00      	cmp	r3, #0
 800add0:	d012      	beq.n	800adf8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a3b      	ldr	r2, [pc, #236]	@ (800aec4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800add8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade0:	431a      	orrs	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e05c      	b.n	800aeb2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0208 	orr.w	r2, r2, #8
 800ae06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae0c:	2240      	movs	r2, #64	@ 0x40
 800ae0e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae20:	689a      	ldr	r2, [r3, #8]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ae30:	68b9      	ldr	r1, [r7, #8]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3380      	adds	r3, #128	@ 0x80
 800ae38:	461a      	mov	r2, r3
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	025b      	lsls	r3, r3, #9
 800ae3e:	089b      	lsrs	r3, r3, #2
 800ae40:	f7f9 fcaa 	bl	8004798 <HAL_DMA_Start_IT>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d01a      	beq.n	800ae80 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 021a 	bic.w	r2, r2, #26
 800ae58:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a19      	ldr	r2, [pc, #100]	@ (800aec4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ae60:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae66:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e018      	b.n	800aeb2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295
 800ae84:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	025b      	lsls	r3, r3, #9
 800ae8a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ae8c:	2390      	movs	r3, #144	@ 0x90
 800ae8e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ae90:	2300      	movs	r3, #0
 800ae92:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f107 0210 	add.w	r2, r7, #16
 800aea4:	4611      	mov	r1, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f002 fe30 	bl	800db0c <SDMMC_ConfigData>

      return HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e000      	b.n	800aeb2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800aeb0:	2302      	movs	r3, #2
  }
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3730      	adds	r7, #48	@ 0x30
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	0800b3f1 	.word	0x0800b3f1
 800aec0:	0800b48d 	.word	0x0800b48d
 800aec4:	004005ff 	.word	0x004005ff

0800aec8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeea:	0f9b      	lsrs	r3, r3, #30
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aef6:	0e9b      	lsrs	r3, r3, #26
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	f003 030f 	and.w	r3, r3, #15
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af08:	0e1b      	lsrs	r3, r3, #24
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	f003 0303 	and.w	r3, r3, #3
 800af10:	b2da      	uxtb	r2, r3
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af1a:	0c1b      	lsrs	r3, r3, #16
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af26:	0a1b      	lsrs	r3, r3, #8
 800af28:	b2da      	uxtb	r2, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af32:	b2da      	uxtb	r2, r3
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af3c:	0d1b      	lsrs	r3, r3, #20
 800af3e:	b29a      	uxth	r2, r3
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af48:	0c1b      	lsrs	r3, r3, #16
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	f003 030f 	and.w	r3, r3, #15
 800af50:	b2da      	uxtb	r2, r3
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af5a:	0bdb      	lsrs	r3, r3, #15
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	b2da      	uxtb	r2, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af6c:	0b9b      	lsrs	r3, r3, #14
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	b2da      	uxtb	r2, r3
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af7e:	0b5b      	lsrs	r3, r3, #13
 800af80:	b2db      	uxtb	r3, r3
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	b2da      	uxtb	r2, r3
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af90:	0b1b      	lsrs	r3, r3, #12
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2200      	movs	r2, #0
 800afa2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d163      	bne.n	800b074 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afb0:	009a      	lsls	r2, r3, #2
 800afb2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800afb6:	4013      	ands	r3, r2
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800afbc:	0f92      	lsrs	r2, r2, #30
 800afbe:	431a      	orrs	r2, r3
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afc8:	0edb      	lsrs	r3, r3, #27
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afda:	0e1b      	lsrs	r3, r3, #24
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afec:	0d5b      	lsrs	r3, r3, #21
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800affe:	0c9b      	lsrs	r3, r3, #18
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 0307 	and.w	r3, r3, #7
 800b006:	b2da      	uxtb	r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b010:	0bdb      	lsrs	r3, r3, #15
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 0307 	and.w	r3, r3, #7
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	7e1b      	ldrb	r3, [r3, #24]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	f003 0307 	and.w	r3, r3, #7
 800b032:	3302      	adds	r3, #2
 800b034:	2201      	movs	r2, #1
 800b036:	fa02 f303 	lsl.w	r3, r2, r3
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b03e:	fb03 f202 	mul.w	r2, r3, r2
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	7a1b      	ldrb	r3, [r3, #8]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 030f 	and.w	r3, r3, #15
 800b050:	2201      	movs	r2, #1
 800b052:	409a      	lsls	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800b060:	0a52      	lsrs	r2, r2, #9
 800b062:	fb03 f202 	mul.w	r2, r3, r2
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b070:	661a      	str	r2, [r3, #96]	@ 0x60
 800b072:	e031      	b.n	800b0d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d11d      	bne.n	800b0b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b080:	041b      	lsls	r3, r3, #16
 800b082:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b08a:	0c1b      	lsrs	r3, r3, #16
 800b08c:	431a      	orrs	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	3301      	adds	r3, #1
 800b098:	029a      	lsls	r2, r3, #10
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	661a      	str	r2, [r3, #96]	@ 0x60
 800b0b6:	e00f      	b.n	800b0d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a58      	ldr	r2, [pc, #352]	@ (800b220 <HAL_SD_GetCardCSD+0x344>)
 800b0be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e09d      	b.n	800b214 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0dc:	0b9b      	lsrs	r3, r3, #14
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ee:	09db      	lsrs	r3, r3, #7
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b100:	b2db      	uxtb	r3, r3
 800b102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b106:	b2da      	uxtb	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b110:	0fdb      	lsrs	r3, r3, #31
 800b112:	b2da      	uxtb	r2, r3
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b11c:	0f5b      	lsrs	r3, r3, #29
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	f003 0303 	and.w	r3, r3, #3
 800b124:	b2da      	uxtb	r2, r3
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b12e:	0e9b      	lsrs	r3, r3, #26
 800b130:	b2db      	uxtb	r3, r3
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	b2da      	uxtb	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b140:	0d9b      	lsrs	r3, r3, #22
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 030f 	and.w	r3, r3, #15
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b152:	0d5b      	lsrs	r3, r3, #21
 800b154:	b2db      	uxtb	r3, r3
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b16e:	0c1b      	lsrs	r3, r3, #16
 800b170:	b2db      	uxtb	r3, r3
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	b2da      	uxtb	r2, r3
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b182:	0bdb      	lsrs	r3, r3, #15
 800b184:	b2db      	uxtb	r3, r3
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b196:	0b9b      	lsrs	r3, r3, #14
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1aa:	0b5b      	lsrs	r3, r3, #13
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1be:	0b1b      	lsrs	r3, r3, #12
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1d2:	0a9b      	lsrs	r3, r3, #10
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	f003 0303 	and.w	r3, r3, #3
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1e6:	0a1b      	lsrs	r3, r3, #8
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	f003 0303 	and.w	r3, r3, #3
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1fa:	085b      	lsrs	r3, r3, #1
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b202:	b2da      	uxtb	r2, r3
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	004005ff 	.word	0x004005ff

0800b224 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b27c:	b5b0      	push	{r4, r5, r7, lr}
 800b27e:	b08e      	sub	sp, #56	@ 0x38
 800b280:	af04      	add	r7, sp, #16
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2203      	movs	r2, #3
 800b290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d02e      	beq.n	800b2fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2a2:	d106      	bne.n	800b2b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	639a      	str	r2, [r3, #56]	@ 0x38
 800b2b0:	e029      	b.n	800b306 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2b8:	d10a      	bne.n	800b2d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fabc 	bl	800b838 <SD_WideBus_Enable>
 800b2c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	639a      	str	r2, [r3, #56]	@ 0x38
 800b2ce:	e01a      	b.n	800b306 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 faf9 	bl	800b8ce <SD_WideBus_Disable>
 800b2dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	431a      	orrs	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b2ea:	e00c      	b.n	800b306 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	639a      	str	r2, [r3, #56]	@ 0x38
 800b2f8:	e005      	b.n	800b306 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00b      	beq.n	800b326 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a26      	ldr	r2, [pc, #152]	@ (800b3ac <HAL_SD_ConfigWideBusOperation+0x130>)
 800b314:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b324:	e01f      	b.n	800b366 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681d      	ldr	r5, [r3, #0]
 800b34c:	466c      	mov	r4, sp
 800b34e:	f107 0314 	add.w	r3, r7, #20
 800b352:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b356:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b35a:	f107 0308 	add.w	r3, r7, #8
 800b35e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b360:	4628      	mov	r0, r5
 800b362:	f002 fb33 	bl	800d9cc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b36e:	4618      	mov	r0, r3
 800b370:	f002 fbf8 	bl	800db64 <SDMMC_CmdBlockLength>
 800b374:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00c      	beq.n	800b396 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a0a      	ldr	r2, [pc, #40]	@ (800b3ac <HAL_SD_ConfigWideBusOperation+0x130>)
 800b382:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	431a      	orrs	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800b39e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3728      	adds	r7, #40	@ 0x28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	004005ff 	.word	0x004005ff

0800b3b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b3bc:	f107 030c 	add.w	r3, r7, #12
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fa10 	bl	800b7e8 <SD_SendStatus>
 800b3c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d005      	beq.n	800b3dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	0a5b      	lsrs	r3, r3, #9
 800b3e0:	f003 030f 	and.w	r3, r3, #15
 800b3e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b3e6:	693b      	ldr	r3, [r7, #16]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3fc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b40c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b40e:	bf00      	nop
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b426:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42c:	2b82      	cmp	r3, #130	@ 0x82
 800b42e:	d111      	bne.n	800b454 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4618      	mov	r0, r3
 800b436:	f002 fc3f 	bl	800dcb8 <SDMMC_CmdStopTransfer>
 800b43a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d008      	beq.n	800b454 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	431a      	orrs	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7ff fd3a 	bl	800aec8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f022 0208 	bic.w	r2, r2, #8
 800b462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b46c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f004 f885 	bl	800f58c <HAL_SD_RxCpltCallback>
#endif
}
 800b482:	bf00      	nop
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
	...

0800b48c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b498:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7f9 f9dc 	bl	8004858 <HAL_DMA_GetError>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d03e      	beq.n	800b524 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ac:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4b4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d002      	beq.n	800b4c2 <SD_DMAError+0x36>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d12d      	bne.n	800b51e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a19      	ldr	r2, [pc, #100]	@ (800b52c <SD_DMAError+0xa0>)
 800b4c8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800b4d8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b4e6:	6978      	ldr	r0, [r7, #20]
 800b4e8:	f7ff ff62 	bl	800b3b0 <HAL_SD_GetCardState>
 800b4ec:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	2b06      	cmp	r3, #6
 800b4f2:	d002      	beq.n	800b4fa <SD_DMAError+0x6e>
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2b05      	cmp	r3, #5
 800b4f8:	d10a      	bne.n	800b510 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f002 fbda 	bl	800dcb8 <SDMMC_CmdStopTransfer>
 800b504:	4602      	mov	r2, r0
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50a:	431a      	orrs	r2, r3
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	2200      	movs	r2, #0
 800b51c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	f7ff fcd2 	bl	800aec8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b524:	bf00      	nop
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	004005ff 	.word	0x004005ff

0800b530 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b530:	b5b0      	push	{r4, r5, r7, lr}
 800b532:	b094      	sub	sp, #80	@ 0x50
 800b534:	af04      	add	r7, sp, #16
 800b536:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b538:	2301      	movs	r3, #1
 800b53a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f002 fa8a 	bl	800da5a <SDMMC_GetPowerState>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d102      	bne.n	800b552 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b54c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b550:	e0b8      	b.n	800b6c4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b556:	2b03      	cmp	r3, #3
 800b558:	d02f      	beq.n	800b5ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f002 fcb5 	bl	800dece <SDMMC_CmdSendCID>
 800b564:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <SD_InitCard+0x40>
    {
      return errorstate;
 800b56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b56e:	e0a9      	b.n	800b6c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f002 fab5 	bl	800dae6 <SDMMC_GetResponse>
 800b57c:	4602      	mov	r2, r0
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2104      	movs	r1, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f002 faac 	bl	800dae6 <SDMMC_GetResponse>
 800b58e:	4602      	mov	r2, r0
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2108      	movs	r1, #8
 800b59a:	4618      	mov	r0, r3
 800b59c:	f002 faa3 	bl	800dae6 <SDMMC_GetResponse>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	210c      	movs	r1, #12
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f002 fa9a 	bl	800dae6 <SDMMC_GetResponse>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d00d      	beq.n	800b5de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f107 020e 	add.w	r2, r7, #14
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f002 fcbb 	bl	800df48 <SDMMC_CmdSetRelAdd>
 800b5d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <SD_InitCard+0xae>
    {
      return errorstate;
 800b5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5dc:	e072      	b.n	800b6c4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d036      	beq.n	800b654 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b5e6:	89fb      	ldrh	r3, [r7, #14]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5f6:	041b      	lsls	r3, r3, #16
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	f002 fc85 	bl	800df0a <SDMMC_CmdSendCSD>
 800b600:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <SD_InitCard+0xdc>
    {
      return errorstate;
 800b608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60a:	e05b      	b.n	800b6c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2100      	movs	r1, #0
 800b612:	4618      	mov	r0, r3
 800b614:	f002 fa67 	bl	800dae6 <SDMMC_GetResponse>
 800b618:	4602      	mov	r2, r0
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2104      	movs	r1, #4
 800b624:	4618      	mov	r0, r3
 800b626:	f002 fa5e 	bl	800dae6 <SDMMC_GetResponse>
 800b62a:	4602      	mov	r2, r0
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2108      	movs	r1, #8
 800b636:	4618      	mov	r0, r3
 800b638:	f002 fa55 	bl	800dae6 <SDMMC_GetResponse>
 800b63c:	4602      	mov	r2, r0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	210c      	movs	r1, #12
 800b648:	4618      	mov	r0, r3
 800b64a:	f002 fa4c 	bl	800dae6 <SDMMC_GetResponse>
 800b64e:	4602      	mov	r2, r0
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2104      	movs	r1, #4
 800b65a:	4618      	mov	r0, r3
 800b65c:	f002 fa43 	bl	800dae6 <SDMMC_GetResponse>
 800b660:	4603      	mov	r3, r0
 800b662:	0d1a      	lsrs	r2, r3, #20
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b668:	f107 0310 	add.w	r3, r7, #16
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fc34 	bl	800aedc <HAL_SD_GetCardCSD>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d002      	beq.n	800b680 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b67a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b67e:	e021      	b.n	800b6c4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b688:	041b      	lsls	r3, r3, #16
 800b68a:	2200      	movs	r2, #0
 800b68c:	461c      	mov	r4, r3
 800b68e:	4615      	mov	r5, r2
 800b690:	4622      	mov	r2, r4
 800b692:	462b      	mov	r3, r5
 800b694:	4608      	mov	r0, r1
 800b696:	f002 fb31 	bl	800dcfc <SDMMC_CmdSelDesel>
 800b69a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <SD_InitCard+0x176>
  {
    return errorstate;
 800b6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a4:	e00e      	b.n	800b6c4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	466c      	mov	r4, sp
 800b6ae:	f103 0210 	add.w	r2, r3, #16
 800b6b2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b6b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f002 f985 	bl	800d9cc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3740      	adds	r7, #64	@ 0x40
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bdb0      	pop	{r4, r5, r7, pc}

0800b6cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	617b      	str	r3, [r7, #20]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f002 fb2c 	bl	800dd42 <SDMMC_CmdGoIdleState>
 800b6ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	e072      	b.n	800b7dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f002 fb3f 	bl	800dd7e <SDMMC_CmdOperCond>
 800b700:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00d      	beq.n	800b724 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f002 fb15 	bl	800dd42 <SDMMC_CmdGoIdleState>
 800b718:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <SD_PowerON+0x5e>
    {
      return errorstate;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	e05b      	b.n	800b7dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d137      	bne.n	800b7a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2100      	movs	r1, #0
 800b738:	4618      	mov	r0, r3
 800b73a:	f002 fb3f 	bl	800ddbc <SDMMC_CmdAppCommand>
 800b73e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d02d      	beq.n	800b7a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b746:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b74a:	e047      	b.n	800b7dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2100      	movs	r1, #0
 800b752:	4618      	mov	r0, r3
 800b754:	f002 fb32 	bl	800ddbc <SDMMC_CmdAppCommand>
 800b758:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <SD_PowerON+0x98>
    {
      return errorstate;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	e03b      	b.n	800b7dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	491e      	ldr	r1, [pc, #120]	@ (800b7e4 <SD_PowerON+0x118>)
 800b76a:	4618      	mov	r0, r3
 800b76c:	f002 fb48 	bl	800de00 <SDMMC_CmdAppOperCommand>
 800b770:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b778:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b77c:	e02e      	b.n	800b7dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2100      	movs	r1, #0
 800b784:	4618      	mov	r0, r3
 800b786:	f002 f9ae 	bl	800dae6 <SDMMC_GetResponse>
 800b78a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	0fdb      	lsrs	r3, r3, #31
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <SD_PowerON+0xcc>
 800b794:	2301      	movs	r3, #1
 800b796:	e000      	b.n	800b79a <SD_PowerON+0xce>
 800b798:	2300      	movs	r3, #0
 800b79a:	613b      	str	r3, [r7, #16]

    count++;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d802      	bhi.n	800b7b2 <SD_PowerON+0xe6>
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0cc      	beq.n	800b74c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d902      	bls.n	800b7c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b7bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b7c0:	e00c      	b.n	800b7dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	645a      	str	r2, [r3, #68]	@ 0x44
 800b7d2:	e002      	b.n	800b7da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	c1100000 	.word	0xc1100000

0800b7e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b7f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b7fc:	e018      	b.n	800b830 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b806:	041b      	lsls	r3, r3, #16
 800b808:	4619      	mov	r1, r3
 800b80a:	4610      	mov	r0, r2
 800b80c:	f002 fbbd 	bl	800df8a <SDMMC_CmdSendStatus>
 800b810:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	e009      	b.n	800b830 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2100      	movs	r1, #0
 800b822:	4618      	mov	r0, r3
 800b824:	f002 f95f 	bl	800dae6 <SDMMC_GetResponse>
 800b828:	4602      	mov	r2, r0
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]
 800b844:	2300      	movs	r3, #0
 800b846:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2100      	movs	r1, #0
 800b84e:	4618      	mov	r0, r3
 800b850:	f002 f949 	bl	800dae6 <SDMMC_GetResponse>
 800b854:	4603      	mov	r3, r0
 800b856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b85a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b85e:	d102      	bne.n	800b866 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b860:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b864:	e02f      	b.n	800b8c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b866:	f107 030c 	add.w	r3, r7, #12
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f879 	bl	800b964 <SD_FindSCR>
 800b872:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	e023      	b.n	800b8c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01c      	beq.n	800b8c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b890:	041b      	lsls	r3, r3, #16
 800b892:	4619      	mov	r1, r3
 800b894:	4610      	mov	r0, r2
 800b896:	f002 fa91 	bl	800ddbc <SDMMC_CmdAppCommand>
 800b89a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	e00f      	b.n	800b8c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2102      	movs	r1, #2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 facb 	bl	800de48 <SDMMC_CmdBusWidth>
 800b8b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	e003      	b.n	800b8c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	e001      	b.n	800b8c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b8c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b086      	sub	sp, #24
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f002 f8fe 	bl	800dae6 <SDMMC_GetResponse>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8f4:	d102      	bne.n	800b8fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b8f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b8fa:	e02f      	b.n	800b95c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b8fc:	f107 030c 	add.w	r3, r7, #12
 800b900:	4619      	mov	r1, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f82e 	bl	800b964 <SD_FindSCR>
 800b908:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	e023      	b.n	800b95c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d01c      	beq.n	800b958 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f002 fa46 	bl	800ddbc <SDMMC_CmdAppCommand>
 800b930:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	e00f      	b.n	800b95c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f002 fa80 	bl	800de48 <SDMMC_CmdBusWidth>
 800b948:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	e003      	b.n	800b95c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b954:	2300      	movs	r3, #0
 800b956:	e001      	b.n	800b95c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b958:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b964:	b590      	push	{r4, r7, lr}
 800b966:	b08f      	sub	sp, #60	@ 0x3c
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b96e:	f7f8 f9fd 	bl	8003d6c <HAL_GetTick>
 800b972:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b978:	2300      	movs	r3, #0
 800b97a:	60bb      	str	r3, [r7, #8]
 800b97c:	2300      	movs	r3, #0
 800b97e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2108      	movs	r1, #8
 800b98a:	4618      	mov	r0, r3
 800b98c:	f002 f8ea 	bl	800db64 <SDMMC_CmdBlockLength>
 800b990:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99a:	e0b2      	b.n	800bb02 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9a4:	041b      	lsls	r3, r3, #16
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	f002 fa07 	bl	800ddbc <SDMMC_CmdAppCommand>
 800b9ae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800b9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b8:	e0a3      	b.n	800bb02 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b9be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b9c4:	2330      	movs	r3, #48	@ 0x30
 800b9c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f107 0210 	add.w	r2, r7, #16
 800b9dc:	4611      	mov	r1, r2
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f002 f894 	bl	800db0c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f002 fa4f 	bl	800de8c <SDMMC_CmdSendSCR>
 800b9ee:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d02a      	beq.n	800ba4c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f8:	e083      	b.n	800bb02 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00f      	beq.n	800ba28 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6819      	ldr	r1, [r3, #0]
 800ba0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	f107 0208 	add.w	r2, r7, #8
 800ba14:	18d4      	adds	r4, r2, r3
 800ba16:	4608      	mov	r0, r1
 800ba18:	f002 f804 	bl	800da24 <SDMMC_ReadFIFO>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	6023      	str	r3, [r4, #0]
      index++;
 800ba20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba22:	3301      	adds	r3, #1
 800ba24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba26:	e006      	b.n	800ba36 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d012      	beq.n	800ba5c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba36:	f7f8 f999 	bl	8003d6c <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba44:	d102      	bne.n	800ba4c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ba46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba4a:	e05a      	b.n	800bb02 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba52:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0cf      	beq.n	800b9fa <SD_FindSCR+0x96>
 800ba5a:	e000      	b.n	800ba5e <SD_FindSCR+0xfa>
      break;
 800ba5c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba64:	f003 0308 	and.w	r3, r3, #8
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d005      	beq.n	800ba78 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2208      	movs	r2, #8
 800ba72:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ba74:	2308      	movs	r3, #8
 800ba76:	e044      	b.n	800bb02 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	e037      	b.n	800bb02 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba98:	f003 0320 	and.w	r3, r3, #32
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d005      	beq.n	800baac <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2220      	movs	r2, #32
 800baa6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800baa8:	2320      	movs	r3, #32
 800baaa:	e02a      	b.n	800bb02 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800bab4:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	061a      	lsls	r2, r3, #24
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	021b      	lsls	r3, r3, #8
 800babe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bac2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	0a1b      	lsrs	r3, r3, #8
 800bac8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bacc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	0e1b      	lsrs	r3, r3, #24
 800bad2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad6:	601a      	str	r2, [r3, #0]
    scr++;
 800bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bada:	3304      	adds	r3, #4
 800badc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	061a      	lsls	r2, r3, #24
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	021b      	lsls	r3, r3, #8
 800bae6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800baea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	0a1b      	lsrs	r3, r3, #8
 800baf0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800baf4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	0e1b      	lsrs	r3, r3, #24
 800bafa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	373c      	adds	r7, #60	@ 0x3c
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd90      	pop	{r4, r7, pc}

0800bb0a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e025      	b.n	800bb6a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d106      	bne.n	800bb38 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7f7 fc9c 	bl	8003470 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4619      	mov	r1, r3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	f001 fe78 	bl	800d840 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6818      	ldr	r0, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	f001 fecc 	bl	800d8f8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e04c      	b.n	800bc20 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d106      	bne.n	800bba0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7f7 f8ee 	bl	8002d7c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 0203 	bic.w	r2, r2, #3
 800bbb6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	4b19      	ldr	r3, [pc, #100]	@ (800bc28 <HAL_SPDIFRX_Init+0xb4>)
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800bbd0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800bbd6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800bbdc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800bbe2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800bbe8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800bbee:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800bbf4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800bbfa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800bc00:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	fff88407 	.word	0xfff88407

0800bc2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e09d      	b.n	800bd7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d108      	bne.n	800bc58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc4e:	d009      	beq.n	800bc64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	61da      	str	r2, [r3, #28]
 800bc56:	e005      	b.n	800bc64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d106      	bne.n	800bc84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7f7 f8e0 	bl	8002e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2202      	movs	r2, #2
 800bc88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bca4:	d902      	bls.n	800bcac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	e002      	b.n	800bcb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bcac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800bcba:	d007      	beq.n	800bccc <HAL_SPI_Init+0xa0>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bcc4:	d002      	beq.n	800bccc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd04:	431a      	orrs	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd0e:	ea42 0103 	orr.w	r1, r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	0c1b      	lsrs	r3, r3, #16
 800bd28:	f003 0204 	and.w	r2, r3, #4
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd30:	f003 0310 	and.w	r3, r3, #16
 800bd34:	431a      	orrs	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd3a:	f003 0308 	and.w	r3, r3, #8
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bd48:	ea42 0103 	orr.w	r1, r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	69da      	ldr	r2, [r3, #28]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b082      	sub	sp, #8
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e049      	b.n	800be28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7f7 f8ad 	bl	8002f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2202      	movs	r2, #2
 800bdb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	f000 fc29 	bl	800c618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2201      	movs	r2, #1
 800bde2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b01      	cmp	r3, #1
 800be42:	d001      	beq.n	800be48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e054      	b.n	800bef2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2202      	movs	r2, #2
 800be4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f042 0201 	orr.w	r2, r2, #1
 800be5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a26      	ldr	r2, [pc, #152]	@ (800bf00 <HAL_TIM_Base_Start_IT+0xd0>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d022      	beq.n	800beb0 <HAL_TIM_Base_Start_IT+0x80>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be72:	d01d      	beq.n	800beb0 <HAL_TIM_Base_Start_IT+0x80>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a22      	ldr	r2, [pc, #136]	@ (800bf04 <HAL_TIM_Base_Start_IT+0xd4>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d018      	beq.n	800beb0 <HAL_TIM_Base_Start_IT+0x80>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a21      	ldr	r2, [pc, #132]	@ (800bf08 <HAL_TIM_Base_Start_IT+0xd8>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d013      	beq.n	800beb0 <HAL_TIM_Base_Start_IT+0x80>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a1f      	ldr	r2, [pc, #124]	@ (800bf0c <HAL_TIM_Base_Start_IT+0xdc>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00e      	beq.n	800beb0 <HAL_TIM_Base_Start_IT+0x80>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a1e      	ldr	r2, [pc, #120]	@ (800bf10 <HAL_TIM_Base_Start_IT+0xe0>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d009      	beq.n	800beb0 <HAL_TIM_Base_Start_IT+0x80>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a1c      	ldr	r2, [pc, #112]	@ (800bf14 <HAL_TIM_Base_Start_IT+0xe4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d004      	beq.n	800beb0 <HAL_TIM_Base_Start_IT+0x80>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a1b      	ldr	r2, [pc, #108]	@ (800bf18 <HAL_TIM_Base_Start_IT+0xe8>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d115      	bne.n	800bedc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689a      	ldr	r2, [r3, #8]
 800beb6:	4b19      	ldr	r3, [pc, #100]	@ (800bf1c <HAL_TIM_Base_Start_IT+0xec>)
 800beb8:	4013      	ands	r3, r2
 800beba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b06      	cmp	r3, #6
 800bec0:	d015      	beq.n	800beee <HAL_TIM_Base_Start_IT+0xbe>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bec8:	d011      	beq.n	800beee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f042 0201 	orr.w	r2, r2, #1
 800bed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beda:	e008      	b.n	800beee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f042 0201 	orr.w	r2, r2, #1
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	e000      	b.n	800bef0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	40010000 	.word	0x40010000
 800bf04:	40000400 	.word	0x40000400
 800bf08:	40000800 	.word	0x40000800
 800bf0c:	40000c00 	.word	0x40000c00
 800bf10:	40010400 	.word	0x40010400
 800bf14:	40014000 	.word	0x40014000
 800bf18:	40001800 	.word	0x40001800
 800bf1c:	00010007 	.word	0x00010007

0800bf20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e049      	b.n	800bfc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d106      	bne.n	800bf4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7f7 f84c 	bl	8002fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f000 fb5a 	bl	800c618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f003 0302 	and.w	r3, r3, #2
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d122      	bne.n	800c02a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f003 0302 	and.w	r3, r3, #2
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d11b      	bne.n	800c02a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f06f 0202 	mvn.w	r2, #2
 800bffa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f003 0303 	and.w	r3, r3, #3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d003      	beq.n	800c018 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fae3 	bl	800c5dc <HAL_TIM_IC_CaptureCallback>
 800c016:	e005      	b.n	800c024 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fad5 	bl	800c5c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fae6 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	f003 0304 	and.w	r3, r3, #4
 800c034:	2b04      	cmp	r3, #4
 800c036:	d122      	bne.n	800c07e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	f003 0304 	and.w	r3, r3, #4
 800c042:	2b04      	cmp	r3, #4
 800c044:	d11b      	bne.n	800c07e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f06f 0204 	mvn.w	r2, #4
 800c04e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2202      	movs	r2, #2
 800c054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c060:	2b00      	cmp	r3, #0
 800c062:	d003      	beq.n	800c06c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fab9 	bl	800c5dc <HAL_TIM_IC_CaptureCallback>
 800c06a:	e005      	b.n	800c078 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 faab 	bl	800c5c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fabc 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	f003 0308 	and.w	r3, r3, #8
 800c088:	2b08      	cmp	r3, #8
 800c08a:	d122      	bne.n	800c0d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	f003 0308 	and.w	r3, r3, #8
 800c096:	2b08      	cmp	r3, #8
 800c098:	d11b      	bne.n	800c0d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f06f 0208 	mvn.w	r2, #8
 800c0a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2204      	movs	r2, #4
 800c0a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69db      	ldr	r3, [r3, #28]
 800c0b0:	f003 0303 	and.w	r3, r3, #3
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d003      	beq.n	800c0c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fa8f 	bl	800c5dc <HAL_TIM_IC_CaptureCallback>
 800c0be:	e005      	b.n	800c0cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fa81 	bl	800c5c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa92 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	f003 0310 	and.w	r3, r3, #16
 800c0dc:	2b10      	cmp	r3, #16
 800c0de:	d122      	bne.n	800c126 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	f003 0310 	and.w	r3, r3, #16
 800c0ea:	2b10      	cmp	r3, #16
 800c0ec:	d11b      	bne.n	800c126 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f06f 0210 	mvn.w	r2, #16
 800c0f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2208      	movs	r2, #8
 800c0fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fa65 	bl	800c5dc <HAL_TIM_IC_CaptureCallback>
 800c112:	e005      	b.n	800c120 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fa57 	bl	800c5c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa68 	bl	800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b01      	cmp	r3, #1
 800c132:	d10e      	bne.n	800c152 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	f003 0301 	and.w	r3, r3, #1
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d107      	bne.n	800c152 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f06f 0201 	mvn.w	r2, #1
 800c14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7f6 f9e7 	bl	8002520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c15c:	2b80      	cmp	r3, #128	@ 0x80
 800c15e:	d10e      	bne.n	800c17e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c16a:	2b80      	cmp	r3, #128	@ 0x80
 800c16c:	d107      	bne.n	800c17e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fefb 	bl	800cf74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c18c:	d10e      	bne.n	800c1ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c198:	2b80      	cmp	r3, #128	@ 0x80
 800c19a:	d107      	bne.n	800c1ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 feee 	bl	800cf88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1b6:	2b40      	cmp	r3, #64	@ 0x40
 800c1b8:	d10e      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1c4:	2b40      	cmp	r3, #64	@ 0x40
 800c1c6:	d107      	bne.n	800c1d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fa16 	bl	800c604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0320 	and.w	r3, r3, #32
 800c1e2:	2b20      	cmp	r3, #32
 800c1e4:	d10e      	bne.n	800c204 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f003 0320 	and.w	r3, r3, #32
 800c1f0:	2b20      	cmp	r3, #32
 800c1f2:	d107      	bne.n	800c204 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f06f 0220 	mvn.w	r2, #32
 800c1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 feae 	bl	800cf60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c204:	bf00      	nop
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c222:	2b01      	cmp	r3, #1
 800c224:	d101      	bne.n	800c22a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c226:	2302      	movs	r3, #2
 800c228:	e0ff      	b.n	800c42a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b14      	cmp	r3, #20
 800c236:	f200 80f0 	bhi.w	800c41a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c23a:	a201      	add	r2, pc, #4	@ (adr r2, 800c240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c295 	.word	0x0800c295
 800c244:	0800c41b 	.word	0x0800c41b
 800c248:	0800c41b 	.word	0x0800c41b
 800c24c:	0800c41b 	.word	0x0800c41b
 800c250:	0800c2d5 	.word	0x0800c2d5
 800c254:	0800c41b 	.word	0x0800c41b
 800c258:	0800c41b 	.word	0x0800c41b
 800c25c:	0800c41b 	.word	0x0800c41b
 800c260:	0800c317 	.word	0x0800c317
 800c264:	0800c41b 	.word	0x0800c41b
 800c268:	0800c41b 	.word	0x0800c41b
 800c26c:	0800c41b 	.word	0x0800c41b
 800c270:	0800c357 	.word	0x0800c357
 800c274:	0800c41b 	.word	0x0800c41b
 800c278:	0800c41b 	.word	0x0800c41b
 800c27c:	0800c41b 	.word	0x0800c41b
 800c280:	0800c399 	.word	0x0800c399
 800c284:	0800c41b 	.word	0x0800c41b
 800c288:	0800c41b 	.word	0x0800c41b
 800c28c:	0800c41b 	.word	0x0800c41b
 800c290:	0800c3d9 	.word	0x0800c3d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fa5c 	bl	800c758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f042 0208 	orr.w	r2, r2, #8
 800c2ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	699a      	ldr	r2, [r3, #24]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f022 0204 	bic.w	r2, r2, #4
 800c2be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	6999      	ldr	r1, [r3, #24]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	691a      	ldr	r2, [r3, #16]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	430a      	orrs	r2, r1
 800c2d0:	619a      	str	r2, [r3, #24]
      break;
 800c2d2:	e0a5      	b.n	800c420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 faae 	bl	800c83c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	699a      	ldr	r2, [r3, #24]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c2ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699a      	ldr	r2, [r3, #24]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6999      	ldr	r1, [r3, #24]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	021a      	lsls	r2, r3, #8
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	430a      	orrs	r2, r1
 800c312:	619a      	str	r2, [r3, #24]
      break;
 800c314:	e084      	b.n	800c420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	68b9      	ldr	r1, [r7, #8]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fb05 	bl	800c92c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	69da      	ldr	r2, [r3, #28]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f042 0208 	orr.w	r2, r2, #8
 800c330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	69da      	ldr	r2, [r3, #28]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f022 0204 	bic.w	r2, r2, #4
 800c340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69d9      	ldr	r1, [r3, #28]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	691a      	ldr	r2, [r3, #16]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	430a      	orrs	r2, r1
 800c352:	61da      	str	r2, [r3, #28]
      break;
 800c354:	e064      	b.n	800c420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 fb5b 	bl	800ca18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69da      	ldr	r2, [r3, #28]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	69da      	ldr	r2, [r3, #28]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	69d9      	ldr	r1, [r3, #28]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	021a      	lsls	r2, r3, #8
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	430a      	orrs	r2, r1
 800c394:	61da      	str	r2, [r3, #28]
      break;
 800c396:	e043      	b.n	800c420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68b9      	ldr	r1, [r7, #8]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fb92 	bl	800cac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f042 0208 	orr.w	r2, r2, #8
 800c3b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f022 0204 	bic.w	r2, r2, #4
 800c3c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	691a      	ldr	r2, [r3, #16]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c3d6:	e023      	b.n	800c420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68b9      	ldr	r1, [r7, #8]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 fbc4 	bl	800cb6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c402:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	021a      	lsls	r2, r3, #8
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	430a      	orrs	r2, r1
 800c416:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c418:	e002      	b.n	800c420 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	75fb      	strb	r3, [r7, #23]
      break;
 800c41e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop

0800c434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d101      	bne.n	800c450 <HAL_TIM_ConfigClockSource+0x1c>
 800c44c:	2302      	movs	r3, #2
 800c44e:	e0b4      	b.n	800c5ba <HAL_TIM_ConfigClockSource+0x186>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2202      	movs	r2, #2
 800c45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	4b56      	ldr	r3, [pc, #344]	@ (800c5c4 <HAL_TIM_ConfigClockSource+0x190>)
 800c46c:	4013      	ands	r3, r2
 800c46e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c488:	d03e      	beq.n	800c508 <HAL_TIM_ConfigClockSource+0xd4>
 800c48a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c48e:	f200 8087 	bhi.w	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c496:	f000 8086 	beq.w	800c5a6 <HAL_TIM_ConfigClockSource+0x172>
 800c49a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c49e:	d87f      	bhi.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a0:	2b70      	cmp	r3, #112	@ 0x70
 800c4a2:	d01a      	beq.n	800c4da <HAL_TIM_ConfigClockSource+0xa6>
 800c4a4:	2b70      	cmp	r3, #112	@ 0x70
 800c4a6:	d87b      	bhi.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a8:	2b60      	cmp	r3, #96	@ 0x60
 800c4aa:	d050      	beq.n	800c54e <HAL_TIM_ConfigClockSource+0x11a>
 800c4ac:	2b60      	cmp	r3, #96	@ 0x60
 800c4ae:	d877      	bhi.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b0:	2b50      	cmp	r3, #80	@ 0x50
 800c4b2:	d03c      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0xfa>
 800c4b4:	2b50      	cmp	r3, #80	@ 0x50
 800c4b6:	d873      	bhi.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b8:	2b40      	cmp	r3, #64	@ 0x40
 800c4ba:	d058      	beq.n	800c56e <HAL_TIM_ConfigClockSource+0x13a>
 800c4bc:	2b40      	cmp	r3, #64	@ 0x40
 800c4be:	d86f      	bhi.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c4c0:	2b30      	cmp	r3, #48	@ 0x30
 800c4c2:	d064      	beq.n	800c58e <HAL_TIM_ConfigClockSource+0x15a>
 800c4c4:	2b30      	cmp	r3, #48	@ 0x30
 800c4c6:	d86b      	bhi.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c4c8:	2b20      	cmp	r3, #32
 800c4ca:	d060      	beq.n	800c58e <HAL_TIM_ConfigClockSource+0x15a>
 800c4cc:	2b20      	cmp	r3, #32
 800c4ce:	d867      	bhi.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d05c      	beq.n	800c58e <HAL_TIM_ConfigClockSource+0x15a>
 800c4d4:	2b10      	cmp	r3, #16
 800c4d6:	d05a      	beq.n	800c58e <HAL_TIM_ConfigClockSource+0x15a>
 800c4d8:	e062      	b.n	800c5a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4ea:	f000 fc0d 	bl	800cd08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c4fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	609a      	str	r2, [r3, #8]
      break;
 800c506:	e04f      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c518:	f000 fbf6 	bl	800cd08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	689a      	ldr	r2, [r3, #8]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c52a:	609a      	str	r2, [r3, #8]
      break;
 800c52c:	e03c      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c53a:	461a      	mov	r2, r3
 800c53c:	f000 fb6a 	bl	800cc14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2150      	movs	r1, #80	@ 0x50
 800c546:	4618      	mov	r0, r3
 800c548:	f000 fbc3 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c54c:	e02c      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c55a:	461a      	mov	r2, r3
 800c55c:	f000 fb89 	bl	800cc72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2160      	movs	r1, #96	@ 0x60
 800c566:	4618      	mov	r0, r3
 800c568:	f000 fbb3 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c56c:	e01c      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c57a:	461a      	mov	r2, r3
 800c57c:	f000 fb4a 	bl	800cc14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2140      	movs	r1, #64	@ 0x40
 800c586:	4618      	mov	r0, r3
 800c588:	f000 fba3 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c58c:	e00c      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4619      	mov	r1, r3
 800c598:	4610      	mov	r0, r2
 800c59a:	f000 fb9a 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c59e:	e003      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5a4:	e000      	b.n	800c5a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c5a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	fffeff88 	.word	0xfffeff88

0800c5c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a40      	ldr	r2, [pc, #256]	@ (800c72c <TIM_Base_SetConfig+0x114>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d013      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c636:	d00f      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a3d      	ldr	r2, [pc, #244]	@ (800c730 <TIM_Base_SetConfig+0x118>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d00b      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a3c      	ldr	r2, [pc, #240]	@ (800c734 <TIM_Base_SetConfig+0x11c>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d007      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a3b      	ldr	r2, [pc, #236]	@ (800c738 <TIM_Base_SetConfig+0x120>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d003      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a3a      	ldr	r2, [pc, #232]	@ (800c73c <TIM_Base_SetConfig+0x124>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d108      	bne.n	800c66a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c65e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a2f      	ldr	r2, [pc, #188]	@ (800c72c <TIM_Base_SetConfig+0x114>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d02b      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c678:	d027      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a2c      	ldr	r2, [pc, #176]	@ (800c730 <TIM_Base_SetConfig+0x118>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d023      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a2b      	ldr	r2, [pc, #172]	@ (800c734 <TIM_Base_SetConfig+0x11c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d01f      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a2a      	ldr	r2, [pc, #168]	@ (800c738 <TIM_Base_SetConfig+0x120>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d01b      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a29      	ldr	r2, [pc, #164]	@ (800c73c <TIM_Base_SetConfig+0x124>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d017      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a28      	ldr	r2, [pc, #160]	@ (800c740 <TIM_Base_SetConfig+0x128>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d013      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a27      	ldr	r2, [pc, #156]	@ (800c744 <TIM_Base_SetConfig+0x12c>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d00f      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a26      	ldr	r2, [pc, #152]	@ (800c748 <TIM_Base_SetConfig+0x130>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d00b      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a25      	ldr	r2, [pc, #148]	@ (800c74c <TIM_Base_SetConfig+0x134>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d007      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a24      	ldr	r2, [pc, #144]	@ (800c750 <TIM_Base_SetConfig+0x138>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d003      	beq.n	800c6ca <TIM_Base_SetConfig+0xb2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a23      	ldr	r2, [pc, #140]	@ (800c754 <TIM_Base_SetConfig+0x13c>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d108      	bne.n	800c6dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	689a      	ldr	r2, [r3, #8]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a0a      	ldr	r2, [pc, #40]	@ (800c72c <TIM_Base_SetConfig+0x114>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d003      	beq.n	800c710 <TIM_Base_SetConfig+0xf8>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a0c      	ldr	r2, [pc, #48]	@ (800c73c <TIM_Base_SetConfig+0x124>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d103      	bne.n	800c718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	691a      	ldr	r2, [r3, #16]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	615a      	str	r2, [r3, #20]
}
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	40010000 	.word	0x40010000
 800c730:	40000400 	.word	0x40000400
 800c734:	40000800 	.word	0x40000800
 800c738:	40000c00 	.word	0x40000c00
 800c73c:	40010400 	.word	0x40010400
 800c740:	40014000 	.word	0x40014000
 800c744:	40014400 	.word	0x40014400
 800c748:	40014800 	.word	0x40014800
 800c74c:	40001800 	.word	0x40001800
 800c750:	40001c00 	.word	0x40001c00
 800c754:	40002000 	.word	0x40002000

0800c758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	f023 0201 	bic.w	r2, r3, #1
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	4b2b      	ldr	r3, [pc, #172]	@ (800c830 <TIM_OC1_SetConfig+0xd8>)
 800c784:	4013      	ands	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0303 	bic.w	r3, r3, #3
 800c78e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	4313      	orrs	r3, r2
 800c798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f023 0302 	bic.w	r3, r3, #2
 800c7a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4a21      	ldr	r2, [pc, #132]	@ (800c834 <TIM_OC1_SetConfig+0xdc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d003      	beq.n	800c7bc <TIM_OC1_SetConfig+0x64>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a20      	ldr	r2, [pc, #128]	@ (800c838 <TIM_OC1_SetConfig+0xe0>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d10c      	bne.n	800c7d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f023 0308 	bic.w	r3, r3, #8
 800c7c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	697a      	ldr	r2, [r7, #20]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f023 0304 	bic.w	r3, r3, #4
 800c7d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a16      	ldr	r2, [pc, #88]	@ (800c834 <TIM_OC1_SetConfig+0xdc>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d003      	beq.n	800c7e6 <TIM_OC1_SetConfig+0x8e>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a15      	ldr	r2, [pc, #84]	@ (800c838 <TIM_OC1_SetConfig+0xe0>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d111      	bne.n	800c80a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c7f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	4313      	orrs	r3, r2
 800c808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	621a      	str	r2, [r3, #32]
}
 800c824:	bf00      	nop
 800c826:	371c      	adds	r7, #28
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	fffeff8f 	.word	0xfffeff8f
 800c834:	40010000 	.word	0x40010000
 800c838:	40010400 	.word	0x40010400

0800c83c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	f023 0210 	bic.w	r2, r3, #16
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4b2e      	ldr	r3, [pc, #184]	@ (800c920 <TIM_OC2_SetConfig+0xe4>)
 800c868:	4013      	ands	r3, r2
 800c86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	021b      	lsls	r3, r3, #8
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	f023 0320 	bic.w	r3, r3, #32
 800c886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	011b      	lsls	r3, r3, #4
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	4313      	orrs	r3, r2
 800c892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a23      	ldr	r2, [pc, #140]	@ (800c924 <TIM_OC2_SetConfig+0xe8>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d003      	beq.n	800c8a4 <TIM_OC2_SetConfig+0x68>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a22      	ldr	r2, [pc, #136]	@ (800c928 <TIM_OC2_SetConfig+0xec>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d10d      	bne.n	800c8c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	011b      	lsls	r3, r3, #4
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a18      	ldr	r2, [pc, #96]	@ (800c924 <TIM_OC2_SetConfig+0xe8>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d003      	beq.n	800c8d0 <TIM_OC2_SetConfig+0x94>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a17      	ldr	r2, [pc, #92]	@ (800c928 <TIM_OC2_SetConfig+0xec>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d113      	bne.n	800c8f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c8d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c8de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	693a      	ldr	r2, [r7, #16]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	685a      	ldr	r2, [r3, #4]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	621a      	str	r2, [r3, #32]
}
 800c912:	bf00      	nop
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	feff8fff 	.word	0xfeff8fff
 800c924:	40010000 	.word	0x40010000
 800c928:	40010400 	.word	0x40010400

0800c92c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b087      	sub	sp, #28
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	69db      	ldr	r3, [r3, #28]
 800c952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	4b2d      	ldr	r3, [pc, #180]	@ (800ca0c <TIM_OC3_SetConfig+0xe0>)
 800c958:	4013      	ands	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f023 0303 	bic.w	r3, r3, #3
 800c962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	021b      	lsls	r3, r3, #8
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	4313      	orrs	r3, r2
 800c980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a22      	ldr	r2, [pc, #136]	@ (800ca10 <TIM_OC3_SetConfig+0xe4>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d003      	beq.n	800c992 <TIM_OC3_SetConfig+0x66>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a21      	ldr	r2, [pc, #132]	@ (800ca14 <TIM_OC3_SetConfig+0xe8>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d10d      	bne.n	800c9ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	021b      	lsls	r3, r3, #8
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a17      	ldr	r2, [pc, #92]	@ (800ca10 <TIM_OC3_SetConfig+0xe4>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d003      	beq.n	800c9be <TIM_OC3_SetConfig+0x92>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a16      	ldr	r2, [pc, #88]	@ (800ca14 <TIM_OC3_SetConfig+0xe8>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d113      	bne.n	800c9e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	695b      	ldr	r3, [r3, #20]
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	011b      	lsls	r3, r3, #4
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	697a      	ldr	r2, [r7, #20]
 800c9fe:	621a      	str	r2, [r3, #32]
}
 800ca00:	bf00      	nop
 800ca02:	371c      	adds	r7, #28
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	fffeff8f 	.word	0xfffeff8f
 800ca10:	40010000 	.word	0x40010000
 800ca14:	40010400 	.word	0x40010400

0800ca18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b087      	sub	sp, #28
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	4b1e      	ldr	r3, [pc, #120]	@ (800cabc <TIM_OC4_SetConfig+0xa4>)
 800ca44:	4013      	ands	r3, r2
 800ca46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	021b      	lsls	r3, r3, #8
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	031b      	lsls	r3, r3, #12
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a13      	ldr	r2, [pc, #76]	@ (800cac0 <TIM_OC4_SetConfig+0xa8>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d003      	beq.n	800ca80 <TIM_OC4_SetConfig+0x68>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a12      	ldr	r2, [pc, #72]	@ (800cac4 <TIM_OC4_SetConfig+0xac>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d109      	bne.n	800ca94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	019b      	lsls	r3, r3, #6
 800ca8e:	697a      	ldr	r2, [r7, #20]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	697a      	ldr	r2, [r7, #20]
 800ca98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	685a      	ldr	r2, [r3, #4]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	621a      	str	r2, [r3, #32]
}
 800caae:	bf00      	nop
 800cab0:	371c      	adds	r7, #28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	feff8fff 	.word	0xfeff8fff
 800cac0:	40010000 	.word	0x40010000
 800cac4:	40010400 	.word	0x40010400

0800cac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	4b1b      	ldr	r3, [pc, #108]	@ (800cb60 <TIM_OC5_SetConfig+0x98>)
 800caf4:	4013      	ands	r3, r2
 800caf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cb08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	041b      	lsls	r3, r3, #16
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a12      	ldr	r2, [pc, #72]	@ (800cb64 <TIM_OC5_SetConfig+0x9c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d003      	beq.n	800cb26 <TIM_OC5_SetConfig+0x5e>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a11      	ldr	r2, [pc, #68]	@ (800cb68 <TIM_OC5_SetConfig+0xa0>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d109      	bne.n	800cb3a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	695b      	ldr	r3, [r3, #20]
 800cb32:	021b      	lsls	r3, r3, #8
 800cb34:	697a      	ldr	r2, [r7, #20]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	697a      	ldr	r2, [r7, #20]
 800cb3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	621a      	str	r2, [r3, #32]
}
 800cb54:	bf00      	nop
 800cb56:	371c      	adds	r7, #28
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	fffeff8f 	.word	0xfffeff8f
 800cb64:	40010000 	.word	0x40010000
 800cb68:	40010400 	.word	0x40010400

0800cb6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6a1b      	ldr	r3, [r3, #32]
 800cb86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4b1c      	ldr	r3, [pc, #112]	@ (800cc08 <TIM_OC6_SetConfig+0x9c>)
 800cb98:	4013      	ands	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	021b      	lsls	r3, r3, #8
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cbae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	051b      	lsls	r3, r3, #20
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a13      	ldr	r2, [pc, #76]	@ (800cc0c <TIM_OC6_SetConfig+0xa0>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d003      	beq.n	800cbcc <TIM_OC6_SetConfig+0x60>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a12      	ldr	r2, [pc, #72]	@ (800cc10 <TIM_OC6_SetConfig+0xa4>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d109      	bne.n	800cbe0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	029b      	lsls	r3, r3, #10
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	685a      	ldr	r2, [r3, #4]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	621a      	str	r2, [r3, #32]
}
 800cbfa:	bf00      	nop
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	feff8fff 	.word	0xfeff8fff
 800cc0c:	40010000 	.word	0x40010000
 800cc10:	40010400 	.word	0x40010400

0800cc14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6a1b      	ldr	r3, [r3, #32]
 800cc24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	f023 0201 	bic.w	r2, r3, #1
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f023 030a 	bic.w	r3, r3, #10
 800cc50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	621a      	str	r2, [r3, #32]
}
 800cc66:	bf00      	nop
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b087      	sub	sp, #28
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	60b9      	str	r1, [r7, #8]
 800cc7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	f023 0210 	bic.w	r2, r3, #16
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6a1b      	ldr	r3, [r3, #32]
 800cc94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	031b      	lsls	r3, r3, #12
 800cca2:	697a      	ldr	r2, [r7, #20]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ccae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	011b      	lsls	r3, r3, #4
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	621a      	str	r2, [r3, #32]
}
 800ccc6:	bf00      	nop
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b085      	sub	sp, #20
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	f043 0307 	orr.w	r3, r3, #7
 800ccf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	609a      	str	r2, [r3, #8]
}
 800ccfc:	bf00      	nop
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b087      	sub	sp, #28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	021a      	lsls	r2, r3, #8
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	431a      	orrs	r2, r3
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	697a      	ldr	r2, [r7, #20]
 800cd3a:	609a      	str	r2, [r3, #8]
}
 800cd3c:	bf00      	nop
 800cd3e:	371c      	adds	r7, #28
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d101      	bne.n	800cd60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e06d      	b.n	800ce3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a30      	ldr	r2, [pc, #192]	@ (800ce48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d004      	beq.n	800cd94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a2f      	ldr	r2, [pc, #188]	@ (800ce4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d108      	bne.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a20      	ldr	r2, [pc, #128]	@ (800ce48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d022      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdd2:	d01d      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d018      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a1c      	ldr	r2, [pc, #112]	@ (800ce54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d013      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a1a      	ldr	r2, [pc, #104]	@ (800ce58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d00e      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a15      	ldr	r2, [pc, #84]	@ (800ce4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d009      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a16      	ldr	r2, [pc, #88]	@ (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d004      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a15      	ldr	r2, [pc, #84]	@ (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d10c      	bne.n	800ce2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	40010000 	.word	0x40010000
 800ce4c:	40010400 	.word	0x40010400
 800ce50:	40000400 	.word	0x40000400
 800ce54:	40000800 	.word	0x40000800
 800ce58:	40000c00 	.word	0x40000c00
 800ce5c:	40014000 	.word	0x40014000
 800ce60:	40001800 	.word	0x40001800

0800ce64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d101      	bne.n	800ce80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	e065      	b.n	800cf4c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	4313      	orrs	r3, r2
 800cea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	699b      	ldr	r3, [r3, #24]
 800cef4:	041b      	lsls	r3, r3, #16
 800cef6:	4313      	orrs	r3, r2
 800cef8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a16      	ldr	r2, [pc, #88]	@ (800cf58 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d004      	beq.n	800cf0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a14      	ldr	r2, [pc, #80]	@ (800cf5c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d115      	bne.n	800cf3a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf18:	051b      	lsls	r3, r3, #20
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	69db      	ldr	r3, [r3, #28]
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	40010000 	.word	0x40010000
 800cf5c:	40010400 	.word	0x40010400

0800cf60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e040      	b.n	800d030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d106      	bne.n	800cfc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f7f6 f8fe 	bl	80031c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2224      	movs	r2, #36	@ 0x24
 800cfc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f022 0201 	bic.w	r2, r2, #1
 800cfd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f82c 	bl	800d038 <UART_SetConfig>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d101      	bne.n	800cfea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e022      	b.n	800d030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fa84 	bl	800d500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	689a      	ldr	r2, [r3, #8]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f042 0201 	orr.w	r2, r2, #1
 800d026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fb0b 	bl	800d644 <UART_CheckIdleState>
 800d02e:	4603      	mov	r3, r0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d040:	2300      	movs	r3, #0
 800d042:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	689a      	ldr	r2, [r3, #8]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	695b      	ldr	r3, [r3, #20]
 800d052:	431a      	orrs	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	69db      	ldr	r3, [r3, #28]
 800d058:	4313      	orrs	r3, r2
 800d05a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	4ba6      	ldr	r3, [pc, #664]	@ (800d2fc <UART_SetConfig+0x2c4>)
 800d064:	4013      	ands	r3, r2
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6812      	ldr	r2, [r2, #0]
 800d06a:	6979      	ldr	r1, [r7, #20]
 800d06c:	430b      	orrs	r3, r1
 800d06e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	68da      	ldr	r2, [r3, #12]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	430a      	orrs	r2, r1
 800d084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a1b      	ldr	r3, [r3, #32]
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	4313      	orrs	r3, r2
 800d094:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	430a      	orrs	r2, r1
 800d0a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a94      	ldr	r2, [pc, #592]	@ (800d300 <UART_SetConfig+0x2c8>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d120      	bne.n	800d0f6 <UART_SetConfig+0xbe>
 800d0b4:	4b93      	ldr	r3, [pc, #588]	@ (800d304 <UART_SetConfig+0x2cc>)
 800d0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0ba:	f003 0303 	and.w	r3, r3, #3
 800d0be:	2b03      	cmp	r3, #3
 800d0c0:	d816      	bhi.n	800d0f0 <UART_SetConfig+0xb8>
 800d0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c8 <UART_SetConfig+0x90>)
 800d0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c8:	0800d0d9 	.word	0x0800d0d9
 800d0cc:	0800d0e5 	.word	0x0800d0e5
 800d0d0:	0800d0df 	.word	0x0800d0df
 800d0d4:	0800d0eb 	.word	0x0800d0eb
 800d0d8:	2301      	movs	r3, #1
 800d0da:	77fb      	strb	r3, [r7, #31]
 800d0dc:	e150      	b.n	800d380 <UART_SetConfig+0x348>
 800d0de:	2302      	movs	r3, #2
 800d0e0:	77fb      	strb	r3, [r7, #31]
 800d0e2:	e14d      	b.n	800d380 <UART_SetConfig+0x348>
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	77fb      	strb	r3, [r7, #31]
 800d0e8:	e14a      	b.n	800d380 <UART_SetConfig+0x348>
 800d0ea:	2308      	movs	r3, #8
 800d0ec:	77fb      	strb	r3, [r7, #31]
 800d0ee:	e147      	b.n	800d380 <UART_SetConfig+0x348>
 800d0f0:	2310      	movs	r3, #16
 800d0f2:	77fb      	strb	r3, [r7, #31]
 800d0f4:	e144      	b.n	800d380 <UART_SetConfig+0x348>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a83      	ldr	r2, [pc, #524]	@ (800d308 <UART_SetConfig+0x2d0>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d132      	bne.n	800d166 <UART_SetConfig+0x12e>
 800d100:	4b80      	ldr	r3, [pc, #512]	@ (800d304 <UART_SetConfig+0x2cc>)
 800d102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d106:	f003 030c 	and.w	r3, r3, #12
 800d10a:	2b0c      	cmp	r3, #12
 800d10c:	d828      	bhi.n	800d160 <UART_SetConfig+0x128>
 800d10e:	a201      	add	r2, pc, #4	@ (adr r2, 800d114 <UART_SetConfig+0xdc>)
 800d110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d114:	0800d149 	.word	0x0800d149
 800d118:	0800d161 	.word	0x0800d161
 800d11c:	0800d161 	.word	0x0800d161
 800d120:	0800d161 	.word	0x0800d161
 800d124:	0800d155 	.word	0x0800d155
 800d128:	0800d161 	.word	0x0800d161
 800d12c:	0800d161 	.word	0x0800d161
 800d130:	0800d161 	.word	0x0800d161
 800d134:	0800d14f 	.word	0x0800d14f
 800d138:	0800d161 	.word	0x0800d161
 800d13c:	0800d161 	.word	0x0800d161
 800d140:	0800d161 	.word	0x0800d161
 800d144:	0800d15b 	.word	0x0800d15b
 800d148:	2300      	movs	r3, #0
 800d14a:	77fb      	strb	r3, [r7, #31]
 800d14c:	e118      	b.n	800d380 <UART_SetConfig+0x348>
 800d14e:	2302      	movs	r3, #2
 800d150:	77fb      	strb	r3, [r7, #31]
 800d152:	e115      	b.n	800d380 <UART_SetConfig+0x348>
 800d154:	2304      	movs	r3, #4
 800d156:	77fb      	strb	r3, [r7, #31]
 800d158:	e112      	b.n	800d380 <UART_SetConfig+0x348>
 800d15a:	2308      	movs	r3, #8
 800d15c:	77fb      	strb	r3, [r7, #31]
 800d15e:	e10f      	b.n	800d380 <UART_SetConfig+0x348>
 800d160:	2310      	movs	r3, #16
 800d162:	77fb      	strb	r3, [r7, #31]
 800d164:	e10c      	b.n	800d380 <UART_SetConfig+0x348>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a68      	ldr	r2, [pc, #416]	@ (800d30c <UART_SetConfig+0x2d4>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d120      	bne.n	800d1b2 <UART_SetConfig+0x17a>
 800d170:	4b64      	ldr	r3, [pc, #400]	@ (800d304 <UART_SetConfig+0x2cc>)
 800d172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d176:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d17a:	2b30      	cmp	r3, #48	@ 0x30
 800d17c:	d013      	beq.n	800d1a6 <UART_SetConfig+0x16e>
 800d17e:	2b30      	cmp	r3, #48	@ 0x30
 800d180:	d814      	bhi.n	800d1ac <UART_SetConfig+0x174>
 800d182:	2b20      	cmp	r3, #32
 800d184:	d009      	beq.n	800d19a <UART_SetConfig+0x162>
 800d186:	2b20      	cmp	r3, #32
 800d188:	d810      	bhi.n	800d1ac <UART_SetConfig+0x174>
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <UART_SetConfig+0x15c>
 800d18e:	2b10      	cmp	r3, #16
 800d190:	d006      	beq.n	800d1a0 <UART_SetConfig+0x168>
 800d192:	e00b      	b.n	800d1ac <UART_SetConfig+0x174>
 800d194:	2300      	movs	r3, #0
 800d196:	77fb      	strb	r3, [r7, #31]
 800d198:	e0f2      	b.n	800d380 <UART_SetConfig+0x348>
 800d19a:	2302      	movs	r3, #2
 800d19c:	77fb      	strb	r3, [r7, #31]
 800d19e:	e0ef      	b.n	800d380 <UART_SetConfig+0x348>
 800d1a0:	2304      	movs	r3, #4
 800d1a2:	77fb      	strb	r3, [r7, #31]
 800d1a4:	e0ec      	b.n	800d380 <UART_SetConfig+0x348>
 800d1a6:	2308      	movs	r3, #8
 800d1a8:	77fb      	strb	r3, [r7, #31]
 800d1aa:	e0e9      	b.n	800d380 <UART_SetConfig+0x348>
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	77fb      	strb	r3, [r7, #31]
 800d1b0:	e0e6      	b.n	800d380 <UART_SetConfig+0x348>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a56      	ldr	r2, [pc, #344]	@ (800d310 <UART_SetConfig+0x2d8>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d120      	bne.n	800d1fe <UART_SetConfig+0x1c6>
 800d1bc:	4b51      	ldr	r3, [pc, #324]	@ (800d304 <UART_SetConfig+0x2cc>)
 800d1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d1c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d1c8:	d013      	beq.n	800d1f2 <UART_SetConfig+0x1ba>
 800d1ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800d1cc:	d814      	bhi.n	800d1f8 <UART_SetConfig+0x1c0>
 800d1ce:	2b80      	cmp	r3, #128	@ 0x80
 800d1d0:	d009      	beq.n	800d1e6 <UART_SetConfig+0x1ae>
 800d1d2:	2b80      	cmp	r3, #128	@ 0x80
 800d1d4:	d810      	bhi.n	800d1f8 <UART_SetConfig+0x1c0>
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <UART_SetConfig+0x1a8>
 800d1da:	2b40      	cmp	r3, #64	@ 0x40
 800d1dc:	d006      	beq.n	800d1ec <UART_SetConfig+0x1b4>
 800d1de:	e00b      	b.n	800d1f8 <UART_SetConfig+0x1c0>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	77fb      	strb	r3, [r7, #31]
 800d1e4:	e0cc      	b.n	800d380 <UART_SetConfig+0x348>
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	77fb      	strb	r3, [r7, #31]
 800d1ea:	e0c9      	b.n	800d380 <UART_SetConfig+0x348>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	77fb      	strb	r3, [r7, #31]
 800d1f0:	e0c6      	b.n	800d380 <UART_SetConfig+0x348>
 800d1f2:	2308      	movs	r3, #8
 800d1f4:	77fb      	strb	r3, [r7, #31]
 800d1f6:	e0c3      	b.n	800d380 <UART_SetConfig+0x348>
 800d1f8:	2310      	movs	r3, #16
 800d1fa:	77fb      	strb	r3, [r7, #31]
 800d1fc:	e0c0      	b.n	800d380 <UART_SetConfig+0x348>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a44      	ldr	r2, [pc, #272]	@ (800d314 <UART_SetConfig+0x2dc>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d125      	bne.n	800d254 <UART_SetConfig+0x21c>
 800d208:	4b3e      	ldr	r3, [pc, #248]	@ (800d304 <UART_SetConfig+0x2cc>)
 800d20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d20e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d212:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d216:	d017      	beq.n	800d248 <UART_SetConfig+0x210>
 800d218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d21c:	d817      	bhi.n	800d24e <UART_SetConfig+0x216>
 800d21e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d222:	d00b      	beq.n	800d23c <UART_SetConfig+0x204>
 800d224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d228:	d811      	bhi.n	800d24e <UART_SetConfig+0x216>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <UART_SetConfig+0x1fe>
 800d22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d232:	d006      	beq.n	800d242 <UART_SetConfig+0x20a>
 800d234:	e00b      	b.n	800d24e <UART_SetConfig+0x216>
 800d236:	2300      	movs	r3, #0
 800d238:	77fb      	strb	r3, [r7, #31]
 800d23a:	e0a1      	b.n	800d380 <UART_SetConfig+0x348>
 800d23c:	2302      	movs	r3, #2
 800d23e:	77fb      	strb	r3, [r7, #31]
 800d240:	e09e      	b.n	800d380 <UART_SetConfig+0x348>
 800d242:	2304      	movs	r3, #4
 800d244:	77fb      	strb	r3, [r7, #31]
 800d246:	e09b      	b.n	800d380 <UART_SetConfig+0x348>
 800d248:	2308      	movs	r3, #8
 800d24a:	77fb      	strb	r3, [r7, #31]
 800d24c:	e098      	b.n	800d380 <UART_SetConfig+0x348>
 800d24e:	2310      	movs	r3, #16
 800d250:	77fb      	strb	r3, [r7, #31]
 800d252:	e095      	b.n	800d380 <UART_SetConfig+0x348>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a2f      	ldr	r2, [pc, #188]	@ (800d318 <UART_SetConfig+0x2e0>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d125      	bne.n	800d2aa <UART_SetConfig+0x272>
 800d25e:	4b29      	ldr	r3, [pc, #164]	@ (800d304 <UART_SetConfig+0x2cc>)
 800d260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d26c:	d017      	beq.n	800d29e <UART_SetConfig+0x266>
 800d26e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d272:	d817      	bhi.n	800d2a4 <UART_SetConfig+0x26c>
 800d274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d278:	d00b      	beq.n	800d292 <UART_SetConfig+0x25a>
 800d27a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d27e:	d811      	bhi.n	800d2a4 <UART_SetConfig+0x26c>
 800d280:	2b00      	cmp	r3, #0
 800d282:	d003      	beq.n	800d28c <UART_SetConfig+0x254>
 800d284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d288:	d006      	beq.n	800d298 <UART_SetConfig+0x260>
 800d28a:	e00b      	b.n	800d2a4 <UART_SetConfig+0x26c>
 800d28c:	2301      	movs	r3, #1
 800d28e:	77fb      	strb	r3, [r7, #31]
 800d290:	e076      	b.n	800d380 <UART_SetConfig+0x348>
 800d292:	2302      	movs	r3, #2
 800d294:	77fb      	strb	r3, [r7, #31]
 800d296:	e073      	b.n	800d380 <UART_SetConfig+0x348>
 800d298:	2304      	movs	r3, #4
 800d29a:	77fb      	strb	r3, [r7, #31]
 800d29c:	e070      	b.n	800d380 <UART_SetConfig+0x348>
 800d29e:	2308      	movs	r3, #8
 800d2a0:	77fb      	strb	r3, [r7, #31]
 800d2a2:	e06d      	b.n	800d380 <UART_SetConfig+0x348>
 800d2a4:	2310      	movs	r3, #16
 800d2a6:	77fb      	strb	r3, [r7, #31]
 800d2a8:	e06a      	b.n	800d380 <UART_SetConfig+0x348>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a1b      	ldr	r2, [pc, #108]	@ (800d31c <UART_SetConfig+0x2e4>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d138      	bne.n	800d326 <UART_SetConfig+0x2ee>
 800d2b4:	4b13      	ldr	r3, [pc, #76]	@ (800d304 <UART_SetConfig+0x2cc>)
 800d2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d2be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d2c2:	d017      	beq.n	800d2f4 <UART_SetConfig+0x2bc>
 800d2c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d2c8:	d82a      	bhi.n	800d320 <UART_SetConfig+0x2e8>
 800d2ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2ce:	d00b      	beq.n	800d2e8 <UART_SetConfig+0x2b0>
 800d2d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2d4:	d824      	bhi.n	800d320 <UART_SetConfig+0x2e8>
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d003      	beq.n	800d2e2 <UART_SetConfig+0x2aa>
 800d2da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2de:	d006      	beq.n	800d2ee <UART_SetConfig+0x2b6>
 800d2e0:	e01e      	b.n	800d320 <UART_SetConfig+0x2e8>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	77fb      	strb	r3, [r7, #31]
 800d2e6:	e04b      	b.n	800d380 <UART_SetConfig+0x348>
 800d2e8:	2302      	movs	r3, #2
 800d2ea:	77fb      	strb	r3, [r7, #31]
 800d2ec:	e048      	b.n	800d380 <UART_SetConfig+0x348>
 800d2ee:	2304      	movs	r3, #4
 800d2f0:	77fb      	strb	r3, [r7, #31]
 800d2f2:	e045      	b.n	800d380 <UART_SetConfig+0x348>
 800d2f4:	2308      	movs	r3, #8
 800d2f6:	77fb      	strb	r3, [r7, #31]
 800d2f8:	e042      	b.n	800d380 <UART_SetConfig+0x348>
 800d2fa:	bf00      	nop
 800d2fc:	efff69f3 	.word	0xefff69f3
 800d300:	40011000 	.word	0x40011000
 800d304:	40023800 	.word	0x40023800
 800d308:	40004400 	.word	0x40004400
 800d30c:	40004800 	.word	0x40004800
 800d310:	40004c00 	.word	0x40004c00
 800d314:	40005000 	.word	0x40005000
 800d318:	40011400 	.word	0x40011400
 800d31c:	40007800 	.word	0x40007800
 800d320:	2310      	movs	r3, #16
 800d322:	77fb      	strb	r3, [r7, #31]
 800d324:	e02c      	b.n	800d380 <UART_SetConfig+0x348>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a72      	ldr	r2, [pc, #456]	@ (800d4f4 <UART_SetConfig+0x4bc>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d125      	bne.n	800d37c <UART_SetConfig+0x344>
 800d330:	4b71      	ldr	r3, [pc, #452]	@ (800d4f8 <UART_SetConfig+0x4c0>)
 800d332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d336:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d33a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d33e:	d017      	beq.n	800d370 <UART_SetConfig+0x338>
 800d340:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d344:	d817      	bhi.n	800d376 <UART_SetConfig+0x33e>
 800d346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d34a:	d00b      	beq.n	800d364 <UART_SetConfig+0x32c>
 800d34c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d350:	d811      	bhi.n	800d376 <UART_SetConfig+0x33e>
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <UART_SetConfig+0x326>
 800d356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d35a:	d006      	beq.n	800d36a <UART_SetConfig+0x332>
 800d35c:	e00b      	b.n	800d376 <UART_SetConfig+0x33e>
 800d35e:	2300      	movs	r3, #0
 800d360:	77fb      	strb	r3, [r7, #31]
 800d362:	e00d      	b.n	800d380 <UART_SetConfig+0x348>
 800d364:	2302      	movs	r3, #2
 800d366:	77fb      	strb	r3, [r7, #31]
 800d368:	e00a      	b.n	800d380 <UART_SetConfig+0x348>
 800d36a:	2304      	movs	r3, #4
 800d36c:	77fb      	strb	r3, [r7, #31]
 800d36e:	e007      	b.n	800d380 <UART_SetConfig+0x348>
 800d370:	2308      	movs	r3, #8
 800d372:	77fb      	strb	r3, [r7, #31]
 800d374:	e004      	b.n	800d380 <UART_SetConfig+0x348>
 800d376:	2310      	movs	r3, #16
 800d378:	77fb      	strb	r3, [r7, #31]
 800d37a:	e001      	b.n	800d380 <UART_SetConfig+0x348>
 800d37c:	2310      	movs	r3, #16
 800d37e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	69db      	ldr	r3, [r3, #28]
 800d384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d388:	d15b      	bne.n	800d442 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d38a:	7ffb      	ldrb	r3, [r7, #31]
 800d38c:	2b08      	cmp	r3, #8
 800d38e:	d828      	bhi.n	800d3e2 <UART_SetConfig+0x3aa>
 800d390:	a201      	add	r2, pc, #4	@ (adr r2, 800d398 <UART_SetConfig+0x360>)
 800d392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d396:	bf00      	nop
 800d398:	0800d3bd 	.word	0x0800d3bd
 800d39c:	0800d3c5 	.word	0x0800d3c5
 800d3a0:	0800d3cd 	.word	0x0800d3cd
 800d3a4:	0800d3e3 	.word	0x0800d3e3
 800d3a8:	0800d3d3 	.word	0x0800d3d3
 800d3ac:	0800d3e3 	.word	0x0800d3e3
 800d3b0:	0800d3e3 	.word	0x0800d3e3
 800d3b4:	0800d3e3 	.word	0x0800d3e3
 800d3b8:	0800d3db 	.word	0x0800d3db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3bc:	f7fb ffee 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 800d3c0:	61b8      	str	r0, [r7, #24]
        break;
 800d3c2:	e013      	b.n	800d3ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3c4:	f7fb fffe 	bl	80093c4 <HAL_RCC_GetPCLK2Freq>
 800d3c8:	61b8      	str	r0, [r7, #24]
        break;
 800d3ca:	e00f      	b.n	800d3ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3cc:	4b4b      	ldr	r3, [pc, #300]	@ (800d4fc <UART_SetConfig+0x4c4>)
 800d3ce:	61bb      	str	r3, [r7, #24]
        break;
 800d3d0:	e00c      	b.n	800d3ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3d2:	f7fb ff11 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 800d3d6:	61b8      	str	r0, [r7, #24]
        break;
 800d3d8:	e008      	b.n	800d3ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3de:	61bb      	str	r3, [r7, #24]
        break;
 800d3e0:	e004      	b.n	800d3ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	77bb      	strb	r3, [r7, #30]
        break;
 800d3ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d074      	beq.n	800d4dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	005a      	lsls	r2, r3, #1
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	085b      	lsrs	r3, r3, #1
 800d3fc:	441a      	add	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	fbb2 f3f3 	udiv	r3, r2, r3
 800d406:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	2b0f      	cmp	r3, #15
 800d40c:	d916      	bls.n	800d43c <UART_SetConfig+0x404>
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d414:	d212      	bcs.n	800d43c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f023 030f 	bic.w	r3, r3, #15
 800d41e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	085b      	lsrs	r3, r3, #1
 800d424:	b29b      	uxth	r3, r3
 800d426:	f003 0307 	and.w	r3, r3, #7
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	89fb      	ldrh	r3, [r7, #14]
 800d42e:	4313      	orrs	r3, r2
 800d430:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	89fa      	ldrh	r2, [r7, #14]
 800d438:	60da      	str	r2, [r3, #12]
 800d43a:	e04f      	b.n	800d4dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	77bb      	strb	r3, [r7, #30]
 800d440:	e04c      	b.n	800d4dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d442:	7ffb      	ldrb	r3, [r7, #31]
 800d444:	2b08      	cmp	r3, #8
 800d446:	d828      	bhi.n	800d49a <UART_SetConfig+0x462>
 800d448:	a201      	add	r2, pc, #4	@ (adr r2, 800d450 <UART_SetConfig+0x418>)
 800d44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44e:	bf00      	nop
 800d450:	0800d475 	.word	0x0800d475
 800d454:	0800d47d 	.word	0x0800d47d
 800d458:	0800d485 	.word	0x0800d485
 800d45c:	0800d49b 	.word	0x0800d49b
 800d460:	0800d48b 	.word	0x0800d48b
 800d464:	0800d49b 	.word	0x0800d49b
 800d468:	0800d49b 	.word	0x0800d49b
 800d46c:	0800d49b 	.word	0x0800d49b
 800d470:	0800d493 	.word	0x0800d493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d474:	f7fb ff92 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 800d478:	61b8      	str	r0, [r7, #24]
        break;
 800d47a:	e013      	b.n	800d4a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d47c:	f7fb ffa2 	bl	80093c4 <HAL_RCC_GetPCLK2Freq>
 800d480:	61b8      	str	r0, [r7, #24]
        break;
 800d482:	e00f      	b.n	800d4a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d484:	4b1d      	ldr	r3, [pc, #116]	@ (800d4fc <UART_SetConfig+0x4c4>)
 800d486:	61bb      	str	r3, [r7, #24]
        break;
 800d488:	e00c      	b.n	800d4a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d48a:	f7fb feb5 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 800d48e:	61b8      	str	r0, [r7, #24]
        break;
 800d490:	e008      	b.n	800d4a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d496:	61bb      	str	r3, [r7, #24]
        break;
 800d498:	e004      	b.n	800d4a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d49a:	2300      	movs	r3, #0
 800d49c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	77bb      	strb	r3, [r7, #30]
        break;
 800d4a2:	bf00      	nop
    }

    if (pclk != 0U)
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d018      	beq.n	800d4dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	085a      	lsrs	r2, r3, #1
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	441a      	add	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b0f      	cmp	r3, #15
 800d4c2:	d909      	bls.n	800d4d8 <UART_SetConfig+0x4a0>
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4ca:	d205      	bcs.n	800d4d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	60da      	str	r2, [r3, #12]
 800d4d6:	e001      	b.n	800d4dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d4e8:	7fbb      	ldrb	r3, [r7, #30]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3720      	adds	r7, #32
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	40007c00 	.word	0x40007c00
 800d4f8:	40023800 	.word	0x40023800
 800d4fc:	00f42400 	.word	0x00f42400

0800d500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00a      	beq.n	800d52a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	430a      	orrs	r2, r1
 800d528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d52e:	f003 0302 	and.w	r3, r3, #2
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	430a      	orrs	r2, r1
 800d54a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d550:	f003 0304 	and.w	r3, r3, #4
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00a      	beq.n	800d56e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d572:	f003 0308 	and.w	r3, r3, #8
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	430a      	orrs	r2, r1
 800d58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d594:	f003 0310 	and.w	r3, r3, #16
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00a      	beq.n	800d5b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	430a      	orrs	r2, r1
 800d5b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b6:	f003 0320 	and.w	r3, r3, #32
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00a      	beq.n	800d5d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	430a      	orrs	r2, r1
 800d5d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d01a      	beq.n	800d616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5fe:	d10a      	bne.n	800d616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	430a      	orrs	r2, r1
 800d614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00a      	beq.n	800d638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	430a      	orrs	r2, r1
 800d636:	605a      	str	r2, [r3, #4]
  }
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af02      	add	r7, sp, #8
 800d64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d654:	f7f6 fb8a 	bl	8003d6c <HAL_GetTick>
 800d658:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f003 0308 	and.w	r3, r3, #8
 800d664:	2b08      	cmp	r3, #8
 800d666:	d10e      	bne.n	800d686 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2200      	movs	r2, #0
 800d672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f81b 	bl	800d6b2 <UART_WaitOnFlagUntilTimeout>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d001      	beq.n	800d686 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d682:	2303      	movs	r3, #3
 800d684:	e011      	b.n	800d6aa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2220      	movs	r2, #32
 800d68a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2220      	movs	r2, #32
 800d690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b09c      	sub	sp, #112	@ 0x70
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	60f8      	str	r0, [r7, #12]
 800d6ba:	60b9      	str	r1, [r7, #8]
 800d6bc:	603b      	str	r3, [r7, #0]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6c2:	e0a7      	b.n	800d814 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ca:	f000 80a3 	beq.w	800d814 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6ce:	f7f6 fb4d 	bl	8003d6c <HAL_GetTick>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d302      	bcc.n	800d6e4 <UART_WaitOnFlagUntilTimeout+0x32>
 800d6de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d13f      	bne.n	800d764 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d6f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6f4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d6f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d702:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d704:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d706:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d708:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d70a:	e841 2300 	strex	r3, r2, [r1]
 800d70e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d712:	2b00      	cmp	r3, #0
 800d714:	d1e6      	bne.n	800d6e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3308      	adds	r3, #8
 800d71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d720:	e853 3f00 	ldrex	r3, [r3]
 800d724:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d728:	f023 0301 	bic.w	r3, r3, #1
 800d72c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3308      	adds	r3, #8
 800d734:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d736:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d738:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d73a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d73c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d73e:	e841 2300 	strex	r3, r2, [r1]
 800d742:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1e5      	bne.n	800d716 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2220      	movs	r2, #32
 800d74e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2220      	movs	r2, #32
 800d754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800d760:	2303      	movs	r3, #3
 800d762:	e068      	b.n	800d836 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f003 0304 	and.w	r3, r3, #4
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d050      	beq.n	800d814 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	69db      	ldr	r3, [r3, #28]
 800d778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d77c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d780:	d148      	bne.n	800d814 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d78a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	e853 3f00 	ldrex	r3, [r3]
 800d798:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d7a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d7b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7b2:	e841 2300 	strex	r3, r2, [r1]
 800d7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1e6      	bne.n	800d78c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	e853 3f00 	ldrex	r3, [r3]
 800d7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	f023 0301 	bic.w	r3, r3, #1
 800d7d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3308      	adds	r3, #8
 800d7dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d7de:	623a      	str	r2, [r7, #32]
 800d7e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e2:	69f9      	ldr	r1, [r7, #28]
 800d7e4:	6a3a      	ldr	r2, [r7, #32]
 800d7e6:	e841 2300 	strex	r3, r2, [r1]
 800d7ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1e5      	bne.n	800d7be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2220      	movs	r2, #32
 800d7f6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2220      	movs	r2, #32
 800d7fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2220      	movs	r2, #32
 800d804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d810:	2303      	movs	r3, #3
 800d812:	e010      	b.n	800d836 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	69da      	ldr	r2, [r3, #28]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	4013      	ands	r3, r2
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	429a      	cmp	r2, r3
 800d822:	bf0c      	ite	eq
 800d824:	2301      	moveq	r3, #1
 800d826:	2300      	movne	r3, #0
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	461a      	mov	r2, r3
 800d82c:	79fb      	ldrb	r3, [r7, #7]
 800d82e:	429a      	cmp	r2, r3
 800d830:	f43f af48 	beq.w	800d6c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3770      	adds	r7, #112	@ 0x70
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d121      	bne.n	800d896 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	4b27      	ldr	r3, [pc, #156]	@ (800d8f4 <FMC_SDRAM_Init+0xb4>)
 800d858:	4013      	ands	r3, r2
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	6851      	ldr	r1, [r2, #4]
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	6892      	ldr	r2, [r2, #8]
 800d862:	4311      	orrs	r1, r2
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	68d2      	ldr	r2, [r2, #12]
 800d868:	4311      	orrs	r1, r2
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	6912      	ldr	r2, [r2, #16]
 800d86e:	4311      	orrs	r1, r2
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	6952      	ldr	r2, [r2, #20]
 800d874:	4311      	orrs	r1, r2
 800d876:	683a      	ldr	r2, [r7, #0]
 800d878:	6992      	ldr	r2, [r2, #24]
 800d87a:	4311      	orrs	r1, r2
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	69d2      	ldr	r2, [r2, #28]
 800d880:	4311      	orrs	r1, r2
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	6a12      	ldr	r2, [r2, #32]
 800d886:	4311      	orrs	r1, r2
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d88c:	430a      	orrs	r2, r1
 800d88e:	431a      	orrs	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	e026      	b.n	800d8e4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	69d9      	ldr	r1, [r3, #28]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	6a1b      	ldr	r3, [r3, #32]
 800d8a6:	4319      	orrs	r1, r3
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ac:	430b      	orrs	r3, r1
 800d8ae:	431a      	orrs	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d8f4 <FMC_SDRAM_Init+0xb4>)
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	683a      	ldr	r2, [r7, #0]
 800d8be:	6851      	ldr	r1, [r2, #4]
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	6892      	ldr	r2, [r2, #8]
 800d8c4:	4311      	orrs	r1, r2
 800d8c6:	683a      	ldr	r2, [r7, #0]
 800d8c8:	68d2      	ldr	r2, [r2, #12]
 800d8ca:	4311      	orrs	r1, r2
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	6912      	ldr	r2, [r2, #16]
 800d8d0:	4311      	orrs	r1, r2
 800d8d2:	683a      	ldr	r2, [r7, #0]
 800d8d4:	6952      	ldr	r2, [r2, #20]
 800d8d6:	4311      	orrs	r1, r2
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	6992      	ldr	r2, [r2, #24]
 800d8dc:	430a      	orrs	r2, r1
 800d8de:	431a      	orrs	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	370c      	adds	r7, #12
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	ffff8000 	.word	0xffff8000

0800d8f8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d128      	bne.n	800d95c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	1e59      	subs	r1, r3, #1
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	011b      	lsls	r3, r3, #4
 800d920:	4319      	orrs	r1, r3
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	3b01      	subs	r3, #1
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	4319      	orrs	r1, r3
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	3b01      	subs	r3, #1
 800d932:	031b      	lsls	r3, r3, #12
 800d934:	4319      	orrs	r1, r3
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	3b01      	subs	r3, #1
 800d93c:	041b      	lsls	r3, r3, #16
 800d93e:	4319      	orrs	r1, r3
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	695b      	ldr	r3, [r3, #20]
 800d944:	3b01      	subs	r3, #1
 800d946:	051b      	lsls	r3, r3, #20
 800d948:	4319      	orrs	r1, r3
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	699b      	ldr	r3, [r3, #24]
 800d94e:	3b01      	subs	r3, #1
 800d950:	061b      	lsls	r3, r3, #24
 800d952:	430b      	orrs	r3, r1
 800d954:	431a      	orrs	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	609a      	str	r2, [r3, #8]
 800d95a:	e02d      	b.n	800d9b8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	689a      	ldr	r2, [r3, #8]
 800d960:	4b19      	ldr	r3, [pc, #100]	@ (800d9c8 <FMC_SDRAM_Timing_Init+0xd0>)
 800d962:	4013      	ands	r3, r2
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	68d2      	ldr	r2, [r2, #12]
 800d968:	3a01      	subs	r2, #1
 800d96a:	0311      	lsls	r1, r2, #12
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	6952      	ldr	r2, [r2, #20]
 800d970:	3a01      	subs	r2, #1
 800d972:	0512      	lsls	r2, r2, #20
 800d974:	430a      	orrs	r2, r1
 800d976:	431a      	orrs	r2, r3
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	1e59      	subs	r1, r3, #1
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	3b01      	subs	r3, #1
 800d990:	011b      	lsls	r3, r3, #4
 800d992:	4319      	orrs	r1, r3
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	3b01      	subs	r3, #1
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	4319      	orrs	r1, r3
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	041b      	lsls	r3, r3, #16
 800d9a6:	4319      	orrs	r1, r3
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	061b      	lsls	r3, r3, #24
 800d9b0:	430b      	orrs	r3, r1
 800d9b2:	431a      	orrs	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	ff0f0fff 	.word	0xff0f0fff

0800d9cc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d9cc:	b084      	sub	sp, #16
 800d9ce:	b480      	push	{r7}
 800d9d0:	b085      	sub	sp, #20
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	f107 001c 	add.w	r0, r7, #28
 800d9da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d9e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d9e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d9e6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d9ea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d9ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d9f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d9f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685a      	ldr	r2, [r3, #4]
 800da02:	4b07      	ldr	r3, [pc, #28]	@ (800da20 <SDMMC_Init+0x54>)
 800da04:	4013      	ands	r3, r2
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	431a      	orrs	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	b004      	add	sp, #16
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	ffff8100 	.word	0xffff8100

0800da24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800da32:	4618      	mov	r0, r3
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800da3e:	b480      	push	{r7}
 800da40:	b083      	sub	sp, #12
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2203      	movs	r2, #3
 800da4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	370c      	adds	r7, #12
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800da5a:	b480      	push	{r7}
 800da5c:	b083      	sub	sp, #12
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 0303 	and.w	r3, r3, #3
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	370c      	adds	r7, #12
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
	...

0800da78 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da96:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800da9c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800daa2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	4313      	orrs	r3, r2
 800daa8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68da      	ldr	r2, [r3, #12]
 800daae:	4b06      	ldr	r3, [pc, #24]	@ (800dac8 <SDMMC_SendCommand+0x50>)
 800dab0:	4013      	ands	r3, r2
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	431a      	orrs	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	fffff000 	.word	0xfffff000

0800dacc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	691b      	ldr	r3, [r3, #16]
 800dad8:	b2db      	uxtb	r3, r3
}
 800dada:	4618      	mov	r0, r3
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dae6:	b480      	push	{r7}
 800dae8:	b085      	sub	sp, #20
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	3314      	adds	r3, #20
 800daf4:	461a      	mov	r2, r3
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	4413      	add	r3, r2
 800dafa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
}  
 800db00:	4618      	mov	r0, r3
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db32:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800db38:	431a      	orrs	r2, r3
                       Data->DPSM);
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800db3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	4313      	orrs	r3, r2
 800db44:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	431a      	orrs	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800db56:	2300      	movs	r3, #0

}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db72:	2310      	movs	r3, #16
 800db74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db76:	2340      	movs	r3, #64	@ 0x40
 800db78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db7a:	2300      	movs	r3, #0
 800db7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db84:	f107 0308 	add.w	r3, r7, #8
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff ff74 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800db90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db94:	2110      	movs	r1, #16
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fa1a 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800db9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db9e:	69fb      	ldr	r3, [r7, #28]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3720      	adds	r7, #32
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dbb6:	2311      	movs	r3, #17
 800dbb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbba:	2340      	movs	r3, #64	@ 0x40
 800dbbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbc8:	f107 0308 	add.w	r3, r7, #8
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff ff52 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dbd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbd8:	2111      	movs	r1, #17
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f9f8 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dbe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbe2:	69fb      	ldr	r3, [r7, #28]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3720      	adds	r7, #32
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dbfa:	2312      	movs	r3, #18
 800dbfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbfe:	2340      	movs	r3, #64	@ 0x40
 800dc00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc02:	2300      	movs	r3, #0
 800dc04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc0c:	f107 0308 	add.w	r3, r7, #8
 800dc10:	4619      	mov	r1, r3
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff ff30 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dc18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc1c:	2112      	movs	r1, #18
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f9d6 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dc24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc26:	69fb      	ldr	r3, [r7, #28]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3720      	adds	r7, #32
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b088      	sub	sp, #32
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dc3e:	2318      	movs	r3, #24
 800dc40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc42:	2340      	movs	r3, #64	@ 0x40
 800dc44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc50:	f107 0308 	add.w	r3, r7, #8
 800dc54:	4619      	mov	r1, r3
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff ff0e 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dc5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc60:	2118      	movs	r1, #24
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f9b4 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dc68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3720      	adds	r7, #32
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dc82:	2319      	movs	r3, #25
 800dc84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc86:	2340      	movs	r3, #64	@ 0x40
 800dc88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc94:	f107 0308 	add.w	r3, r7, #8
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff feec 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dca4:	2119      	movs	r1, #25
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f992 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dcac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcae:	69fb      	ldr	r3, [r7, #28]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3720      	adds	r7, #32
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dcc4:	230c      	movs	r3, #12
 800dcc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcc8:	2340      	movs	r3, #64	@ 0x40
 800dcca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcd6:	f107 0308 	add.w	r3, r7, #8
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7ff fecb 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dce2:	4a05      	ldr	r2, [pc, #20]	@ (800dcf8 <SDMMC_CmdStopTransfer+0x40>)
 800dce4:	210c      	movs	r1, #12
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f972 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dcec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcee:	69fb      	ldr	r3, [r7, #28]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3720      	adds	r7, #32
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	05f5e100 	.word	0x05f5e100

0800dcfc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08a      	sub	sp, #40	@ 0x28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dd0c:	2307      	movs	r3, #7
 800dd0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd10:	2340      	movs	r3, #64	@ 0x40
 800dd12:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd14:	2300      	movs	r3, #0
 800dd16:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd1c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd1e:	f107 0310 	add.w	r3, r7, #16
 800dd22:	4619      	mov	r1, r3
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f7ff fea7 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dd2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd2e:	2107      	movs	r1, #7
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 f94d 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dd36:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800dd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3728      	adds	r7, #40	@ 0x28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b088      	sub	sp, #32
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dd52:	2300      	movs	r3, #0
 800dd54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd56:	2300      	movs	r3, #0
 800dd58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd60:	f107 0308 	add.w	r3, r7, #8
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7ff fe86 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fb67 	bl	800e440 <SDMMC_GetCmdError>
 800dd72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd74:	69fb      	ldr	r3, [r7, #28]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3720      	adds	r7, #32
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b088      	sub	sp, #32
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dd86:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800dd8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dd8c:	2308      	movs	r3, #8
 800dd8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd90:	2340      	movs	r3, #64	@ 0x40
 800dd92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd94:	2300      	movs	r3, #0
 800dd96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd9e:	f107 0308 	add.w	r3, r7, #8
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff fe67 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 fafa 	bl	800e3a4 <SDMMC_GetCmdResp7>
 800ddb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddb2:	69fb      	ldr	r3, [r7, #28]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3720      	adds	r7, #32
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ddca:	2337      	movs	r3, #55	@ 0x37
 800ddcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddce:	2340      	movs	r3, #64	@ 0x40
 800ddd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dddc:	f107 0308 	add.w	r3, r7, #8
 800dde0:	4619      	mov	r1, r3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fe48 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dde8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddec:	2137      	movs	r1, #55	@ 0x37
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f8ee 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800ddf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddf6:	69fb      	ldr	r3, [r7, #28]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3720      	adds	r7, #32
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	4b0d      	ldr	r3, [pc, #52]	@ (800de44 <SDMMC_CmdAppOperCommand+0x44>)
 800de0e:	4313      	orrs	r3, r2
 800de10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800de12:	2329      	movs	r3, #41	@ 0x29
 800de14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de16:	2340      	movs	r3, #64	@ 0x40
 800de18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de1a:	2300      	movs	r3, #0
 800de1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de24:	f107 0308 	add.w	r3, r7, #8
 800de28:	4619      	mov	r1, r3
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7ff fe24 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 fa03 	bl	800e23c <SDMMC_GetCmdResp3>
 800de36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de38:	69fb      	ldr	r3, [r7, #28]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3720      	adds	r7, #32
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	80100000 	.word	0x80100000

0800de48 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b088      	sub	sp, #32
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800de56:	2306      	movs	r3, #6
 800de58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de5a:	2340      	movs	r3, #64	@ 0x40
 800de5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de68:	f107 0308 	add.w	r3, r7, #8
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff fe02 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800de74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de78:	2106      	movs	r1, #6
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 f8a8 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800de80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de82:	69fb      	ldr	r3, [r7, #28]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3720      	adds	r7, #32
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b088      	sub	sp, #32
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800de94:	2300      	movs	r3, #0
 800de96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800de98:	2333      	movs	r3, #51	@ 0x33
 800de9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de9c:	2340      	movs	r3, #64	@ 0x40
 800de9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dea0:	2300      	movs	r3, #0
 800dea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800deaa:	f107 0308 	add.w	r3, r7, #8
 800deae:	4619      	mov	r1, r3
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7ff fde1 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800deb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800deba:	2133      	movs	r1, #51	@ 0x33
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 f887 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dec4:	69fb      	ldr	r3, [r7, #28]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3720      	adds	r7, #32
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b088      	sub	sp, #32
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ded6:	2300      	movs	r3, #0
 800ded8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800deda:	2302      	movs	r3, #2
 800dedc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dede:	23c0      	movs	r3, #192	@ 0xc0
 800dee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dee2:	2300      	movs	r3, #0
 800dee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800deea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800deec:	f107 0308 	add.w	r3, r7, #8
 800def0:	4619      	mov	r1, r3
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7ff fdc0 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f957 	bl	800e1ac <SDMMC_GetCmdResp2>
 800defe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df00:	69fb      	ldr	r3, [r7, #28]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3720      	adds	r7, #32
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b088      	sub	sp, #32
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800df18:	2309      	movs	r3, #9
 800df1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800df1c:	23c0      	movs	r3, #192	@ 0xc0
 800df1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df20:	2300      	movs	r3, #0
 800df22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df2a:	f107 0308 	add.w	r3, r7, #8
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff fda1 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 f938 	bl	800e1ac <SDMMC_GetCmdResp2>
 800df3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df3e:	69fb      	ldr	r3, [r7, #28]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3720      	adds	r7, #32
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b088      	sub	sp, #32
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800df52:	2300      	movs	r3, #0
 800df54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800df56:	2303      	movs	r3, #3
 800df58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df5a:	2340      	movs	r3, #64	@ 0x40
 800df5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df68:	f107 0308 	add.w	r3, r7, #8
 800df6c:	4619      	mov	r1, r3
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7ff fd82 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	2103      	movs	r1, #3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f99d 	bl	800e2b8 <SDMMC_GetCmdResp6>
 800df7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df80:	69fb      	ldr	r3, [r7, #28]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3720      	adds	r7, #32
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}

0800df8a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b088      	sub	sp, #32
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
 800df92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800df98:	230d      	movs	r3, #13
 800df9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df9c:	2340      	movs	r3, #64	@ 0x40
 800df9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfaa:	f107 0308 	add.w	r3, r7, #8
 800dfae:	4619      	mov	r1, r3
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7ff fd61 	bl	800da78 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dfb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dfba:	210d      	movs	r1, #13
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f807 	bl	800dfd0 <SDMMC_GetCmdResp1>
 800dfc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfc4:	69fb      	ldr	r3, [r7, #28]
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3720      	adds	r7, #32
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b088      	sub	sp, #32
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfde:	4b70      	ldr	r3, [pc, #448]	@ (800e1a0 <SDMMC_GetCmdResp1+0x1d0>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a70      	ldr	r2, [pc, #448]	@ (800e1a4 <SDMMC_GetCmdResp1+0x1d4>)
 800dfe4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfe8:	0a5a      	lsrs	r2, r3, #9
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	fb02 f303 	mul.w	r3, r2, r3
 800dff0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	1e5a      	subs	r2, r3, #1
 800dff6:	61fa      	str	r2, [r7, #28]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d102      	bne.n	800e002 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dffc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e000:	e0c9      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e006:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0ef      	beq.n	800dff2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1ea      	bne.n	800dff2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e020:	f003 0304 	and.w	r3, r3, #4
 800e024:	2b00      	cmp	r3, #0
 800e026:	d004      	beq.n	800e032 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2204      	movs	r2, #4
 800e02c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e02e:	2304      	movs	r3, #4
 800e030:	e0b1      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d004      	beq.n	800e048 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2201      	movs	r2, #1
 800e042:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e044:	2301      	movs	r3, #1
 800e046:	e0a6      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	22c5      	movs	r2, #197	@ 0xc5
 800e04c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f7ff fd3c 	bl	800dacc <SDMMC_GetCommandResponse>
 800e054:	4603      	mov	r3, r0
 800e056:	461a      	mov	r2, r3
 800e058:	7afb      	ldrb	r3, [r7, #11]
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d001      	beq.n	800e062 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e05e:	2301      	movs	r3, #1
 800e060:	e099      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e062:	2100      	movs	r1, #0
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f7ff fd3e 	bl	800dae6 <SDMMC_GetResponse>
 800e06a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	4b4e      	ldr	r3, [pc, #312]	@ (800e1a8 <SDMMC_GetCmdResp1+0x1d8>)
 800e070:	4013      	ands	r3, r2
 800e072:	2b00      	cmp	r3, #0
 800e074:	d101      	bne.n	800e07a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e076:	2300      	movs	r3, #0
 800e078:	e08d      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	da02      	bge.n	800e086 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e080:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e084:	e087      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e090:	2340      	movs	r3, #64	@ 0x40
 800e092:	e080      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e09e:	2380      	movs	r3, #128	@ 0x80
 800e0a0:	e079      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e0ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e0b0:	e071      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e0bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e0c0:	e069      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e0cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0d0:	e061      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e0dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e0e0:	e059      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e0f0:	e051      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e0fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e100:	e049      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d002      	beq.n	800e112 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e10c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e110:	e041      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e11c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e120:	e039      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e12c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e130:	e031      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e13c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e140:	e029      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e14c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e150:	e021      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e15c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e160:	e019      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e16c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e170:	e011      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e17c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e180:	e009      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f003 0308 	and.w	r3, r3, #8
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e18c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e190:	e001      	b.n	800e196 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e192:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e196:	4618      	mov	r0, r3
 800e198:	3720      	adds	r7, #32
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20000000 	.word	0x20000000
 800e1a4:	10624dd3 	.word	0x10624dd3
 800e1a8:	fdffe008 	.word	0xfdffe008

0800e1ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1b4:	4b1f      	ldr	r3, [pc, #124]	@ (800e234 <SDMMC_GetCmdResp2+0x88>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a1f      	ldr	r2, [pc, #124]	@ (800e238 <SDMMC_GetCmdResp2+0x8c>)
 800e1ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e1be:	0a5b      	lsrs	r3, r3, #9
 800e1c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1c4:	fb02 f303 	mul.w	r3, r2, r3
 800e1c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	1e5a      	subs	r2, r3, #1
 800e1ce:	60fa      	str	r2, [r7, #12]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d102      	bne.n	800e1da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e1d8:	e026      	b.n	800e228 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0ef      	beq.n	800e1ca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1ea      	bne.n	800e1ca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1f8:	f003 0304 	and.w	r3, r3, #4
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d004      	beq.n	800e20a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2204      	movs	r2, #4
 800e204:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e206:	2304      	movs	r3, #4
 800e208:	e00e      	b.n	800e228 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e20e:	f003 0301 	and.w	r3, r3, #1
 800e212:	2b00      	cmp	r3, #0
 800e214:	d004      	beq.n	800e220 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e21c:	2301      	movs	r3, #1
 800e21e:	e003      	b.n	800e228 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	22c5      	movs	r2, #197	@ 0xc5
 800e224:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	20000000 	.word	0x20000000
 800e238:	10624dd3 	.word	0x10624dd3

0800e23c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e244:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b0 <SDMMC_GetCmdResp3+0x74>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a1a      	ldr	r2, [pc, #104]	@ (800e2b4 <SDMMC_GetCmdResp3+0x78>)
 800e24a:	fba2 2303 	umull	r2, r3, r2, r3
 800e24e:	0a5b      	lsrs	r3, r3, #9
 800e250:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e254:	fb02 f303 	mul.w	r3, r2, r3
 800e258:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	1e5a      	subs	r2, r3, #1
 800e25e:	60fa      	str	r2, [r7, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d102      	bne.n	800e26a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e264:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e268:	e01b      	b.n	800e2a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e26e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e276:	2b00      	cmp	r3, #0
 800e278:	d0ef      	beq.n	800e25a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1ea      	bne.n	800e25a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e288:	f003 0304 	and.w	r3, r3, #4
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d004      	beq.n	800e29a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2204      	movs	r2, #4
 800e294:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e296:	2304      	movs	r3, #4
 800e298:	e003      	b.n	800e2a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	22c5      	movs	r2, #197	@ 0xc5
 800e29e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3714      	adds	r7, #20
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr
 800e2ae:	bf00      	nop
 800e2b0:	20000000 	.word	0x20000000
 800e2b4:	10624dd3 	.word	0x10624dd3

0800e2b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b088      	sub	sp, #32
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2c6:	4b35      	ldr	r3, [pc, #212]	@ (800e39c <SDMMC_GetCmdResp6+0xe4>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a35      	ldr	r2, [pc, #212]	@ (800e3a0 <SDMMC_GetCmdResp6+0xe8>)
 800e2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d0:	0a5b      	lsrs	r3, r3, #9
 800e2d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2d6:	fb02 f303 	mul.w	r3, r2, r3
 800e2da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	1e5a      	subs	r2, r3, #1
 800e2e0:	61fa      	str	r2, [r7, #28]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d102      	bne.n	800e2ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e2ea:	e052      	b.n	800e392 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d0ef      	beq.n	800e2dc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1ea      	bne.n	800e2dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e30a:	f003 0304 	and.w	r3, r3, #4
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d004      	beq.n	800e31c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2204      	movs	r2, #4
 800e316:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e318:	2304      	movs	r3, #4
 800e31a:	e03a      	b.n	800e392 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e320:	f003 0301 	and.w	r3, r3, #1
 800e324:	2b00      	cmp	r3, #0
 800e326:	d004      	beq.n	800e332 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2201      	movs	r2, #1
 800e32c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e32e:	2301      	movs	r3, #1
 800e330:	e02f      	b.n	800e392 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f7ff fbca 	bl	800dacc <SDMMC_GetCommandResponse>
 800e338:	4603      	mov	r3, r0
 800e33a:	461a      	mov	r2, r3
 800e33c:	7afb      	ldrb	r3, [r7, #11]
 800e33e:	4293      	cmp	r3, r2
 800e340:	d001      	beq.n	800e346 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e342:	2301      	movs	r3, #1
 800e344:	e025      	b.n	800e392 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	22c5      	movs	r2, #197	@ 0xc5
 800e34a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e34c:	2100      	movs	r1, #0
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f7ff fbc9 	bl	800dae6 <SDMMC_GetResponse>
 800e354:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	0c1b      	lsrs	r3, r3, #16
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e36a:	2300      	movs	r3, #0
 800e36c:	e011      	b.n	800e392 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e37c:	e009      	b.n	800e392 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e38c:	e001      	b.n	800e392 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e38e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e392:	4618      	mov	r0, r3
 800e394:	3720      	adds	r7, #32
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	20000000 	.word	0x20000000
 800e3a0:	10624dd3 	.word	0x10624dd3

0800e3a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e3ac:	4b22      	ldr	r3, [pc, #136]	@ (800e438 <SDMMC_GetCmdResp7+0x94>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a22      	ldr	r2, [pc, #136]	@ (800e43c <SDMMC_GetCmdResp7+0x98>)
 800e3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3b6:	0a5b      	lsrs	r3, r3, #9
 800e3b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3bc:	fb02 f303 	mul.w	r3, r2, r3
 800e3c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	1e5a      	subs	r2, r3, #1
 800e3c6:	60fa      	str	r2, [r7, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d102      	bne.n	800e3d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e3d0:	e02c      	b.n	800e42c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0ef      	beq.n	800e3c2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1ea      	bne.n	800e3c2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3f0:	f003 0304 	and.w	r3, r3, #4
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d004      	beq.n	800e402 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2204      	movs	r2, #4
 800e3fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3fe:	2304      	movs	r3, #4
 800e400:	e014      	b.n	800e42c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d004      	beq.n	800e418 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e414:	2301      	movs	r3, #1
 800e416:	e009      	b.n	800e42c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2240      	movs	r2, #64	@ 0x40
 800e428:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e42a:	2300      	movs	r3, #0
  
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3714      	adds	r7, #20
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr
 800e438:	20000000 	.word	0x20000000
 800e43c:	10624dd3 	.word	0x10624dd3

0800e440 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e448:	4b11      	ldr	r3, [pc, #68]	@ (800e490 <SDMMC_GetCmdError+0x50>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a11      	ldr	r2, [pc, #68]	@ (800e494 <SDMMC_GetCmdError+0x54>)
 800e44e:	fba2 2303 	umull	r2, r3, r2, r3
 800e452:	0a5b      	lsrs	r3, r3, #9
 800e454:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e458:	fb02 f303 	mul.w	r3, r2, r3
 800e45c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	1e5a      	subs	r2, r3, #1
 800e462:	60fa      	str	r2, [r7, #12]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e468:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e46c:	e009      	b.n	800e482 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0f1      	beq.n	800e45e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	22c5      	movs	r2, #197	@ 0xc5
 800e47e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	20000000 	.word	0x20000000
 800e494:	10624dd3 	.word	0x10624dd3

0800e498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e498:	b084      	sub	sp, #16
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b084      	sub	sp, #16
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	f107 001c 	add.w	r0, r7, #28
 800e4a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d120      	bne.n	800e4f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	68da      	ldr	r2, [r3, #12]
 800e4c0:	4b20      	ldr	r3, [pc, #128]	@ (800e544 <USB_CoreInit+0xac>)
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d105      	bne.n	800e4e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f9d8 	bl	800e89c <USB_CoreReset>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	73fb      	strb	r3, [r7, #15]
 800e4f0:	e010      	b.n	800e514 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f9cc 	bl	800e89c <USB_CoreReset>
 800e504:	4603      	mov	r3, r0
 800e506:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e50c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800e514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e516:	2b01      	cmp	r3, #1
 800e518:	d10b      	bne.n	800e532 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	f043 0206 	orr.w	r2, r3, #6
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	f043 0220 	orr.w	r2, r3, #32
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e532:	7bfb      	ldrb	r3, [r7, #15]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e53e:	b004      	add	sp, #16
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	ffbdffbf 	.word	0xffbdffbf

0800e548 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	f043 0201 	orr.w	r2, r3, #1
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e55c:	2300      	movs	r3, #0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	370c      	adds	r7, #12
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr

0800e56a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e56a:	b480      	push	{r7}
 800e56c:	b083      	sub	sp, #12
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	f023 0201 	bic.w	r2, r3, #1
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	460b      	mov	r3, r1
 800e596:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e598:	2300      	movs	r3, #0
 800e59a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e5a8:	78fb      	ldrb	r3, [r7, #3]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d115      	bne.n	800e5da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e5ba:	2001      	movs	r0, #1
 800e5bc:	f7f5 fbe2 	bl	8003d84 <HAL_Delay>
      ms++;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f95a 	bl	800e880 <USB_GetMode>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d01e      	beq.n	800e610 <USB_SetCurrentMode+0x84>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2b31      	cmp	r3, #49	@ 0x31
 800e5d6:	d9f0      	bls.n	800e5ba <USB_SetCurrentMode+0x2e>
 800e5d8:	e01a      	b.n	800e610 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e5da:	78fb      	ldrb	r3, [r7, #3]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d115      	bne.n	800e60c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e5ec:	2001      	movs	r0, #1
 800e5ee:	f7f5 fbc9 	bl	8003d84 <HAL_Delay>
      ms++;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 f941 	bl	800e880 <USB_GetMode>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d005      	beq.n	800e610 <USB_SetCurrentMode+0x84>
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b31      	cmp	r3, #49	@ 0x31
 800e608:	d9f0      	bls.n	800e5ec <USB_SetCurrentMode+0x60>
 800e60a:	e001      	b.n	800e610 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e60c:	2301      	movs	r3, #1
 800e60e:	e005      	b.n	800e61c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b32      	cmp	r3, #50	@ 0x32
 800e614:	d101      	bne.n	800e61a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	e000      	b.n	800e61c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e62e:	2300      	movs	r3, #0
 800e630:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	3301      	adds	r3, #1
 800e636:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	4a13      	ldr	r2, [pc, #76]	@ (800e688 <USB_FlushTxFifo+0x64>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d901      	bls.n	800e644 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e640:	2303      	movs	r3, #3
 800e642:	e01b      	b.n	800e67c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	691b      	ldr	r3, [r3, #16]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	daf2      	bge.n	800e632 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e64c:	2300      	movs	r3, #0
 800e64e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	019b      	lsls	r3, r3, #6
 800e654:	f043 0220 	orr.w	r2, r3, #32
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	3301      	adds	r3, #1
 800e660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	4a08      	ldr	r2, [pc, #32]	@ (800e688 <USB_FlushTxFifo+0x64>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d901      	bls.n	800e66e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e66a:	2303      	movs	r3, #3
 800e66c:	e006      	b.n	800e67c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	691b      	ldr	r3, [r3, #16]
 800e672:	f003 0320 	and.w	r3, r3, #32
 800e676:	2b20      	cmp	r3, #32
 800e678:	d0f0      	beq.n	800e65c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3714      	adds	r7, #20
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr
 800e688:	00030d40 	.word	0x00030d40

0800e68c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b085      	sub	sp, #20
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e694:	2300      	movs	r3, #0
 800e696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3301      	adds	r3, #1
 800e69c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	4a11      	ldr	r2, [pc, #68]	@ (800e6e8 <USB_FlushRxFifo+0x5c>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d901      	bls.n	800e6aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e018      	b.n	800e6dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	daf2      	bge.n	800e698 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2210      	movs	r2, #16
 800e6ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	4a08      	ldr	r2, [pc, #32]	@ (800e6e8 <USB_FlushRxFifo+0x5c>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d901      	bls.n	800e6ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e6ca:	2303      	movs	r3, #3
 800e6cc:	e006      	b.n	800e6dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	691b      	ldr	r3, [r3, #16]
 800e6d2:	f003 0310 	and.w	r3, r3, #16
 800e6d6:	2b10      	cmp	r3, #16
 800e6d8:	d0f0      	beq.n	800e6bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e6da:	2300      	movs	r3, #0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3714      	adds	r7, #20
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	00030d40 	.word	0x00030d40

0800e6ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b089      	sub	sp, #36	@ 0x24
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	71fb      	strb	r3, [r7, #7]
 800e6fe:	4613      	mov	r3, r2
 800e700:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e70a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d123      	bne.n	800e75a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e712:	88bb      	ldrh	r3, [r7, #4]
 800e714:	3303      	adds	r3, #3
 800e716:	089b      	lsrs	r3, r3, #2
 800e718:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e71a:	2300      	movs	r3, #0
 800e71c:	61bb      	str	r3, [r7, #24]
 800e71e:	e018      	b.n	800e752 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e720:	79fb      	ldrb	r3, [r7, #7]
 800e722:	031a      	lsls	r2, r3, #12
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	4413      	add	r3, r2
 800e728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e72c:	461a      	mov	r2, r3
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	3301      	adds	r3, #1
 800e738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	3301      	adds	r3, #1
 800e73e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	3301      	adds	r3, #1
 800e744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	3301      	adds	r3, #1
 800e74a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	3301      	adds	r3, #1
 800e750:	61bb      	str	r3, [r7, #24]
 800e752:	69ba      	ldr	r2, [r7, #24]
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	429a      	cmp	r2, r3
 800e758:	d3e2      	bcc.n	800e720 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3724      	adds	r7, #36	@ 0x24
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e768:	b480      	push	{r7}
 800e76a:	b08b      	sub	sp, #44	@ 0x2c
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	4613      	mov	r3, r2
 800e774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e77e:	88fb      	ldrh	r3, [r7, #6]
 800e780:	089b      	lsrs	r3, r3, #2
 800e782:	b29b      	uxth	r3, r3
 800e784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e786:	88fb      	ldrh	r3, [r7, #6]
 800e788:	f003 0303 	and.w	r3, r3, #3
 800e78c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e78e:	2300      	movs	r3, #0
 800e790:	623b      	str	r3, [r7, #32]
 800e792:	e014      	b.n	800e7be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e7b8:	6a3b      	ldr	r3, [r7, #32]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	623b      	str	r3, [r7, #32]
 800e7be:	6a3a      	ldr	r2, [r7, #32]
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d3e6      	bcc.n	800e794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e7c6:	8bfb      	ldrh	r3, [r7, #30]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d01e      	beq.n	800e80a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f107 0310 	add.w	r3, r7, #16
 800e7dc:	6812      	ldr	r2, [r2, #0]
 800e7de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f0:	701a      	strb	r2, [r3, #0]
      i++;
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	623b      	str	r3, [r7, #32]
      pDest++;
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e7fe:	8bfb      	ldrh	r3, [r7, #30]
 800e800:	3b01      	subs	r3, #1
 800e802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e804:	8bfb      	ldrh	r3, [r7, #30]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1ea      	bne.n	800e7e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	372c      	adds	r7, #44	@ 0x2c
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	4013      	ands	r3, r2
 800e82e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e830:	68fb      	ldr	r3, [r7, #12]
}
 800e832:	4618      	mov	r0, r3
 800e834:	3714      	adds	r7, #20
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e83e:	b480      	push	{r7}
 800e840:	b085      	sub	sp, #20
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	460b      	mov	r3, r1
 800e848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e84e:	78fb      	ldrb	r3, [r7, #3]
 800e850:	015a      	lsls	r2, r3, #5
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	4413      	add	r3, r2
 800e856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e85e:	78fb      	ldrb	r3, [r7, #3]
 800e860:	015a      	lsls	r2, r3, #5
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	4413      	add	r3, r2
 800e866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	4013      	ands	r3, r2
 800e870:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e872:	68bb      	ldr	r3, [r7, #8]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e880:	b480      	push	{r7}
 800e882:	b083      	sub	sp, #12
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	f003 0301 	and.w	r3, r3, #1
}
 800e890:	4618      	mov	r0, r3
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b085      	sub	sp, #20
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	4a13      	ldr	r2, [pc, #76]	@ (800e900 <USB_CoreReset+0x64>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d901      	bls.n	800e8ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e8b6:	2303      	movs	r3, #3
 800e8b8:	e01b      	b.n	800e8f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	daf2      	bge.n	800e8a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	f043 0201 	orr.w	r2, r3, #1
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	4a09      	ldr	r2, [pc, #36]	@ (800e900 <USB_CoreReset+0x64>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d901      	bls.n	800e8e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e8e0:	2303      	movs	r3, #3
 800e8e2:	e006      	b.n	800e8f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	f003 0301 	and.w	r3, r3, #1
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d0f0      	beq.n	800e8d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	00030d40 	.word	0x00030d40

0800e904 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e904:	b084      	sub	sp, #16
 800e906:	b580      	push	{r7, lr}
 800e908:	b086      	sub	sp, #24
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e916:	2300      	movs	r3, #0
 800e918:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e924:	461a      	mov	r2, r3
 800e926:	2300      	movs	r3, #0
 800e928:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e92e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e93a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d018      	beq.n	800e974 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e944:	2b01      	cmp	r3, #1
 800e946:	d10a      	bne.n	800e95e <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68fa      	ldr	r2, [r7, #12]
 800e952:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e956:	f043 0304 	orr.w	r3, r3, #4
 800e95a:	6013      	str	r3, [r2, #0]
 800e95c:	e014      	b.n	800e988 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e96c:	f023 0304 	bic.w	r3, r3, #4
 800e970:	6013      	str	r3, [r2, #0]
 800e972:	e009      	b.n	800e988 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e982:	f023 0304 	bic.w	r3, r3, #4
 800e986:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e988:	2110      	movs	r1, #16
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f7ff fe4a 	bl	800e624 <USB_FlushTxFifo>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7ff fe76 	bl	800e68c <USB_FlushRxFifo>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	613b      	str	r3, [r7, #16]
 800e9ae:	e015      	b.n	800e9dc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	015a      	lsls	r2, r3, #5
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9bc:	461a      	mov	r2, r3
 800e9be:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	015a      	lsls	r2, r3, #5
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	613b      	str	r3, [r7, #16]
 800e9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9de:	693a      	ldr	r2, [r7, #16]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d3e5      	bcc.n	800e9b0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00b      	beq.n	800ea16 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea04:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4a13      	ldr	r2, [pc, #76]	@ (800ea58 <USB_HostInit+0x154>)
 800ea0a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	4a13      	ldr	r2, [pc, #76]	@ (800ea5c <USB_HostInit+0x158>)
 800ea10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ea14:	e009      	b.n	800ea2a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2280      	movs	r2, #128	@ 0x80
 800ea1a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4a10      	ldr	r2, [pc, #64]	@ (800ea60 <USB_HostInit+0x15c>)
 800ea20:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a0f      	ldr	r2, [pc, #60]	@ (800ea64 <USB_HostInit+0x160>)
 800ea26:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d105      	bne.n	800ea3c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	699b      	ldr	r3, [r3, #24]
 800ea34:	f043 0210 	orr.w	r2, r3, #16
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	699a      	ldr	r2, [r3, #24]
 800ea40:	4b09      	ldr	r3, [pc, #36]	@ (800ea68 <USB_HostInit+0x164>)
 800ea42:	4313      	orrs	r3, r2
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ea48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3718      	adds	r7, #24
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ea54:	b004      	add	sp, #16
 800ea56:	4770      	bx	lr
 800ea58:	01000200 	.word	0x01000200
 800ea5c:	00e00300 	.word	0x00e00300
 800ea60:	00600080 	.word	0x00600080
 800ea64:	004000e0 	.word	0x004000e0
 800ea68:	a3200008 	.word	0xa3200008

0800ea6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ea8a:	f023 0303 	bic.w	r3, r3, #3
 800ea8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	f003 0303 	and.w	r3, r3, #3
 800ea9e:	68f9      	ldr	r1, [r7, #12]
 800eaa0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800eaa8:	78fb      	ldrb	r3, [r7, #3]
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d107      	bne.n	800eabe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eab4:	461a      	mov	r2, r3
 800eab6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800eaba:	6053      	str	r3, [r2, #4]
 800eabc:	e009      	b.n	800ead2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800eabe:	78fb      	ldrb	r3, [r7, #3]
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	d106      	bne.n	800ead2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eaca:	461a      	mov	r2, r3
 800eacc:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ead0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3714      	adds	r7, #20
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800eaec:	2300      	movs	r3, #0
 800eaee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800eb00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800eb0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800eb10:	2064      	movs	r0, #100	@ 0x64
 800eb12:	f7f5 f937 	bl	8003d84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800eb1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800eb24:	200a      	movs	r0, #10
 800eb26:	f7f5 f92d 	bl	8003d84 <HAL_Delay>

  return HAL_OK;
 800eb2a:	2300      	movs	r3, #0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800eb44:	2300      	movs	r3, #0
 800eb46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800eb58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d109      	bne.n	800eb78 <USB_DriveVbus+0x44>
 800eb64:	78fb      	ldrb	r3, [r7, #3]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d106      	bne.n	800eb78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800eb72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eb76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800eb7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb82:	d109      	bne.n	800eb98 <USB_DriveVbus+0x64>
 800eb84:	78fb      	ldrb	r3, [r7, #3]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800eb92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr

0800eba6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b085      	sub	sp, #20
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	0c5b      	lsrs	r3, r3, #17
 800ebc4:	f003 0303 	and.w	r3, r3, #3
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3714      	adds	r7, #20
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	b29b      	uxth	r3, r3
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3714      	adds	r7, #20
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr
	...

0800ebf8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b088      	sub	sp, #32
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	4608      	mov	r0, r1
 800ec02:	4611      	mov	r1, r2
 800ec04:	461a      	mov	r2, r3
 800ec06:	4603      	mov	r3, r0
 800ec08:	70fb      	strb	r3, [r7, #3]
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	70bb      	strb	r3, [r7, #2]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ec1a:	78fb      	ldrb	r3, [r7, #3]
 800ec1c:	015a      	lsls	r2, r3, #5
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	4413      	add	r3, r2
 800ec22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec26:	461a      	mov	r2, r3
 800ec28:	f04f 33ff 	mov.w	r3, #4294967295
 800ec2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ec2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d87e      	bhi.n	800ed34 <USB_HC_Init+0x13c>
 800ec36:	a201      	add	r2, pc, #4	@ (adr r2, 800ec3c <USB_HC_Init+0x44>)
 800ec38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3c:	0800ec4d 	.word	0x0800ec4d
 800ec40:	0800ecf7 	.word	0x0800ecf7
 800ec44:	0800ec4d 	.word	0x0800ec4d
 800ec48:	0800ecb9 	.word	0x0800ecb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ec4c:	78fb      	ldrb	r3, [r7, #3]
 800ec4e:	015a      	lsls	r2, r3, #5
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	4413      	add	r3, r2
 800ec54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec58:	461a      	mov	r2, r3
 800ec5a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800ec5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ec60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	da10      	bge.n	800ec8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ec68:	78fb      	ldrb	r3, [r7, #3]
 800ec6a:	015a      	lsls	r2, r3, #5
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	78fa      	ldrb	r2, [r7, #3]
 800ec78:	0151      	lsls	r1, r2, #5
 800ec7a:	693a      	ldr	r2, [r7, #16]
 800ec7c:	440a      	add	r2, r1
 800ec7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec86:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ec88:	e057      	b.n	800ed3a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d051      	beq.n	800ed3a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ec96:	78fb      	ldrb	r3, [r7, #3]
 800ec98:	015a      	lsls	r2, r3, #5
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	78fa      	ldrb	r2, [r7, #3]
 800eca6:	0151      	lsls	r1, r2, #5
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	440a      	add	r2, r1
 800ecac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ecb0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ecb4:	60d3      	str	r3, [r2, #12]
      break;
 800ecb6:	e040      	b.n	800ed3a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	015a      	lsls	r2, r3, #5
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800ecca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800eccc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	da34      	bge.n	800ed3e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ecd4:	78fb      	ldrb	r3, [r7, #3]
 800ecd6:	015a      	lsls	r2, r3, #5
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	4413      	add	r3, r2
 800ecdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	78fa      	ldrb	r2, [r7, #3]
 800ece4:	0151      	lsls	r1, r2, #5
 800ece6:	693a      	ldr	r2, [r7, #16]
 800ece8:	440a      	add	r2, r1
 800ecea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ecee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ecf2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ecf4:	e023      	b.n	800ed3e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ecf6:	78fb      	ldrb	r3, [r7, #3]
 800ecf8:	015a      	lsls	r2, r3, #5
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed02:	461a      	mov	r2, r3
 800ed04:	f240 2325 	movw	r3, #549	@ 0x225
 800ed08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ed0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	da17      	bge.n	800ed42 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ed12:	78fb      	ldrb	r3, [r7, #3]
 800ed14:	015a      	lsls	r2, r3, #5
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	4413      	add	r3, r2
 800ed1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	78fa      	ldrb	r2, [r7, #3]
 800ed22:	0151      	lsls	r1, r2, #5
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	440a      	add	r2, r1
 800ed28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed2c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ed30:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ed32:	e006      	b.n	800ed42 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ed34:	2301      	movs	r3, #1
 800ed36:	77fb      	strb	r3, [r7, #31]
      break;
 800ed38:	e004      	b.n	800ed44 <USB_HC_Init+0x14c>
      break;
 800ed3a:	bf00      	nop
 800ed3c:	e002      	b.n	800ed44 <USB_HC_Init+0x14c>
      break;
 800ed3e:	bf00      	nop
 800ed40:	e000      	b.n	800ed44 <USB_HC_Init+0x14c>
      break;
 800ed42:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ed44:	78fb      	ldrb	r3, [r7, #3]
 800ed46:	015a      	lsls	r2, r3, #5
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	78fa      	ldrb	r2, [r7, #3]
 800ed54:	0151      	lsls	r1, r2, #5
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	440a      	add	r2, r1
 800ed5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed5e:	f043 0302 	orr.w	r3, r3, #2
 800ed62:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ed6a:	699a      	ldr	r2, [r3, #24]
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	f003 030f 	and.w	r3, r3, #15
 800ed72:	2101      	movs	r1, #1
 800ed74:	fa01 f303 	lsl.w	r3, r1, r3
 800ed78:	6939      	ldr	r1, [r7, #16]
 800ed7a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	699b      	ldr	r3, [r3, #24]
 800ed86:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ed8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	da03      	bge.n	800ed9e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ed96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed9a:	61bb      	str	r3, [r7, #24]
 800ed9c:	e001      	b.n	800eda2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7ff feff 	bl	800eba6 <USB_GetHostSpeed>
 800eda8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800edaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d106      	bne.n	800edc0 <USB_HC_Init+0x1c8>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2b02      	cmp	r3, #2
 800edb6:	d003      	beq.n	800edc0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800edb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800edbc:	617b      	str	r3, [r7, #20]
 800edbe:	e001      	b.n	800edc4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800edc0:	2300      	movs	r3, #0
 800edc2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800edc4:	787b      	ldrb	r3, [r7, #1]
 800edc6:	059b      	lsls	r3, r3, #22
 800edc8:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800edcc:	78bb      	ldrb	r3, [r7, #2]
 800edce:	02db      	lsls	r3, r3, #11
 800edd0:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800edd4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800edd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800edda:	049b      	lsls	r3, r3, #18
 800eddc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ede0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ede2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ede4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ede8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800edee:	78fb      	ldrb	r3, [r7, #3]
 800edf0:	0159      	lsls	r1, r3, #5
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	440b      	add	r3, r1
 800edf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edfa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ee00:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ee02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d003      	beq.n	800ee12 <USB_HC_Init+0x21a>
 800ee0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d10f      	bne.n	800ee32 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ee12:	78fb      	ldrb	r3, [r7, #3]
 800ee14:	015a      	lsls	r2, r3, #5
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	4413      	add	r3, r2
 800ee1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	78fa      	ldrb	r2, [r7, #3]
 800ee22:	0151      	lsls	r1, r2, #5
 800ee24:	693a      	ldr	r2, [r7, #16]
 800ee26:	440a      	add	r2, r1
 800ee28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ee30:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ee32:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3720      	adds	r7, #32
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b08c      	sub	sp, #48	@ 0x30
 800ee40:	af02      	add	r7, sp, #8
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	4613      	mov	r3, r2
 800ee48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	785b      	ldrb	r3, [r3, #1]
 800ee52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ee54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee58:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d02d      	beq.n	800eec2 <USB_HC_StartXfer+0x86>
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	791b      	ldrb	r3, [r3, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d129      	bne.n	800eec2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ee6e:	79fb      	ldrb	r3, [r7, #7]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d117      	bne.n	800eea4 <USB_HC_StartXfer+0x68>
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	79db      	ldrb	r3, [r3, #7]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d003      	beq.n	800ee84 <USB_HC_StartXfer+0x48>
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	79db      	ldrb	r3, [r3, #7]
 800ee80:	2b02      	cmp	r3, #2
 800ee82:	d10f      	bne.n	800eea4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	015a      	lsls	r2, r3, #5
 800ee88:	6a3b      	ldr	r3, [r7, #32]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	69fa      	ldr	r2, [r7, #28]
 800ee94:	0151      	lsls	r1, r2, #5
 800ee96:	6a3a      	ldr	r2, [r7, #32]
 800ee98:	440a      	add	r2, r1
 800ee9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eea2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10b      	bne.n	800eec2 <USB_HC_StartXfer+0x86>
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	795b      	ldrb	r3, [r3, #5]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d107      	bne.n	800eec2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	785b      	ldrb	r3, [r3, #1]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f000 fa0f 	bl	800f2dc <USB_DoPing>
      return HAL_OK;
 800eebe:	2300      	movs	r3, #0
 800eec0:	e0f8      	b.n	800f0b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	695b      	ldr	r3, [r3, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d018      	beq.n	800eefc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	695b      	ldr	r3, [r3, #20]
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	8912      	ldrh	r2, [r2, #8]
 800eed2:	4413      	add	r3, r2
 800eed4:	3b01      	subs	r3, #1
 800eed6:	68ba      	ldr	r2, [r7, #8]
 800eed8:	8912      	ldrh	r2, [r2, #8]
 800eeda:	fbb3 f3f2 	udiv	r3, r3, r2
 800eede:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 800eee0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800eee2:	8b7b      	ldrh	r3, [r7, #26]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d90b      	bls.n	800ef00 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800eee8:	8b7b      	ldrh	r3, [r7, #26]
 800eeea:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800eeec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eeee:	68ba      	ldr	r2, [r7, #8]
 800eef0:	8912      	ldrh	r2, [r2, #8]
 800eef2:	fb03 f202 	mul.w	r2, r3, r2
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	611a      	str	r2, [r3, #16]
 800eefa:	e001      	b.n	800ef00 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800eefc:	2301      	movs	r3, #1
 800eefe:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	78db      	ldrb	r3, [r3, #3]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d007      	beq.n	800ef18 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ef08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	8912      	ldrh	r2, [r2, #8]
 800ef0e:	fb03 f202 	mul.w	r2, r3, r2
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	611a      	str	r2, [r3, #16]
 800ef16:	e003      	b.n	800ef20 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	695a      	ldr	r2, [r3, #20]
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ef28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ef2a:	04d9      	lsls	r1, r3, #19
 800ef2c:	4b63      	ldr	r3, [pc, #396]	@ (800f0bc <USB_HC_StartXfer+0x280>)
 800ef2e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ef30:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	7a9b      	ldrb	r3, [r3, #10]
 800ef36:	075b      	lsls	r3, r3, #29
 800ef38:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ef3c:	69f9      	ldr	r1, [r7, #28]
 800ef3e:	0148      	lsls	r0, r1, #5
 800ef40:	6a39      	ldr	r1, [r7, #32]
 800ef42:	4401      	add	r1, r0
 800ef44:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ef48:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ef4a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ef4c:	79fb      	ldrb	r3, [r7, #7]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d009      	beq.n	800ef66 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	68d9      	ldr	r1, [r3, #12]
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	015a      	lsls	r2, r3, #5
 800ef5a:	6a3b      	ldr	r3, [r7, #32]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef62:	460a      	mov	r2, r1
 800ef64:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	bf0c      	ite	eq
 800ef76:	2301      	moveq	r3, #1
 800ef78:	2300      	movne	r3, #0
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	015a      	lsls	r2, r3, #5
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	4413      	add	r3, r2
 800ef86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	69fa      	ldr	r2, [r7, #28]
 800ef8e:	0151      	lsls	r1, r2, #5
 800ef90:	6a3a      	ldr	r2, [r7, #32]
 800ef92:	440a      	add	r2, r1
 800ef94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ef9c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	6a3b      	ldr	r3, [r7, #32]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	7e7b      	ldrb	r3, [r7, #25]
 800efae:	075b      	lsls	r3, r3, #29
 800efb0:	69f9      	ldr	r1, [r7, #28]
 800efb2:	0148      	lsls	r0, r1, #5
 800efb4:	6a39      	ldr	r1, [r7, #32]
 800efb6:	4401      	add	r1, r0
 800efb8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800efbc:	4313      	orrs	r3, r2
 800efbe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	015a      	lsls	r2, r3, #5
 800efc4:	6a3b      	ldr	r3, [r7, #32]
 800efc6:	4413      	add	r3, r2
 800efc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800efd6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	78db      	ldrb	r3, [r3, #3]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d004      	beq.n	800efea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800efe6:	613b      	str	r3, [r7, #16]
 800efe8:	e003      	b.n	800eff2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eff0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eff8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	015a      	lsls	r2, r3, #5
 800effe:	6a3b      	ldr	r3, [r7, #32]
 800f000:	4413      	add	r3, r2
 800f002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f006:	461a      	mov	r2, r3
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d001      	beq.n	800f016 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	e04e      	b.n	800f0b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	78db      	ldrb	r3, [r3, #3]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d149      	bne.n	800f0b2 <USB_HC_StartXfer+0x276>
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d045      	beq.n	800f0b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	79db      	ldrb	r3, [r3, #7]
 800f02a:	2b03      	cmp	r3, #3
 800f02c:	d830      	bhi.n	800f090 <USB_HC_StartXfer+0x254>
 800f02e:	a201      	add	r2, pc, #4	@ (adr r2, 800f034 <USB_HC_StartXfer+0x1f8>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f045 	.word	0x0800f045
 800f038:	0800f069 	.word	0x0800f069
 800f03c:	0800f045 	.word	0x0800f045
 800f040:	0800f069 	.word	0x0800f069
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	695b      	ldr	r3, [r3, #20]
 800f048:	3303      	adds	r3, #3
 800f04a:	089b      	lsrs	r3, r3, #2
 800f04c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f04e:	8afa      	ldrh	r2, [r7, #22]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f054:	b29b      	uxth	r3, r3
 800f056:	429a      	cmp	r2, r3
 800f058:	d91c      	bls.n	800f094 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	f043 0220 	orr.w	r2, r3, #32
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	619a      	str	r2, [r3, #24]
        }
        break;
 800f066:	e015      	b.n	800f094 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	695b      	ldr	r3, [r3, #20]
 800f06c:	3303      	adds	r3, #3
 800f06e:	089b      	lsrs	r3, r3, #2
 800f070:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f072:	8afa      	ldrh	r2, [r7, #22]
 800f074:	6a3b      	ldr	r3, [r7, #32]
 800f076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f07a:	691b      	ldr	r3, [r3, #16]
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	429a      	cmp	r2, r3
 800f080:	d90a      	bls.n	800f098 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	619a      	str	r2, [r3, #24]
        }
        break;
 800f08e:	e003      	b.n	800f098 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800f090:	bf00      	nop
 800f092:	e002      	b.n	800f09a <USB_HC_StartXfer+0x25e>
        break;
 800f094:	bf00      	nop
 800f096:	e000      	b.n	800f09a <USB_HC_StartXfer+0x25e>
        break;
 800f098:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	68d9      	ldr	r1, [r3, #12]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	785a      	ldrb	r2, [r3, #1]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	9000      	str	r0, [sp, #0]
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f7ff fb1d 	bl	800e6ec <USB_WritePacket>
  }

  return HAL_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3728      	adds	r7, #40	@ 0x28
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	1ff80000 	.word	0x1ff80000

0800f0c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f0d2:	695b      	ldr	r3, [r3, #20]
 800f0d4:	b29b      	uxth	r3, r3
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3714      	adds	r7, #20
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f0e2:	b480      	push	{r7}
 800f0e4:	b089      	sub	sp, #36	@ 0x24
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800f0f2:	78fb      	ldrb	r3, [r7, #3]
 800f0f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	4413      	add	r3, r2
 800f102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	0c9b      	lsrs	r3, r3, #18
 800f10a:	f003 0303 	and.w	r3, r3, #3
 800f10e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	015a      	lsls	r2, r3, #5
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	4413      	add	r3, r2
 800f118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	0fdb      	lsrs	r3, r3, #31
 800f120:	f003 0301 	and.w	r3, r3, #1
 800f124:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b20      	cmp	r3, #32
 800f130:	d104      	bne.n	800f13c <USB_HC_Halt+0x5a>
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d101      	bne.n	800f13c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	e0c8      	b.n	800f2ce <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <USB_HC_Halt+0x66>
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	2b02      	cmp	r3, #2
 800f146:	d163      	bne.n	800f210 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	015a      	lsls	r2, r3, #5
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	4413      	add	r3, r2
 800f150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	69ba      	ldr	r2, [r7, #24]
 800f158:	0151      	lsls	r1, r2, #5
 800f15a:	69fa      	ldr	r2, [r7, #28]
 800f15c:	440a      	add	r2, r1
 800f15e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f162:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f166:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	f003 0320 	and.w	r3, r3, #32
 800f170:	2b00      	cmp	r3, #0
 800f172:	f040 80ab 	bne.w	800f2cc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f17a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d133      	bne.n	800f1ea <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f182:	69bb      	ldr	r3, [r7, #24]
 800f184:	015a      	lsls	r2, r3, #5
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	4413      	add	r3, r2
 800f18a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	69ba      	ldr	r2, [r7, #24]
 800f192:	0151      	lsls	r1, r2, #5
 800f194:	69fa      	ldr	r2, [r7, #28]
 800f196:	440a      	add	r2, r1
 800f198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f19c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	015a      	lsls	r2, r3, #5
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	69ba      	ldr	r2, [r7, #24]
 800f1b2:	0151      	lsls	r1, r2, #5
 800f1b4:	69fa      	ldr	r2, [r7, #28]
 800f1b6:	440a      	add	r2, r1
 800f1b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f1bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f1c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f1ce:	d81d      	bhi.n	800f20c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f1e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f1e6:	d0ec      	beq.n	800f1c2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f1e8:	e070      	b.n	800f2cc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	015a      	lsls	r2, r3, #5
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	0151      	lsls	r1, r2, #5
 800f1fc:	69fa      	ldr	r2, [r7, #28]
 800f1fe:	440a      	add	r2, r1
 800f200:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f204:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f208:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f20a:	e05f      	b.n	800f2cc <USB_HC_Halt+0x1ea>
            break;
 800f20c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f20e:	e05d      	b.n	800f2cc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	015a      	lsls	r2, r3, #5
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	4413      	add	r3, r2
 800f218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	69ba      	ldr	r2, [r7, #24]
 800f220:	0151      	lsls	r1, r2, #5
 800f222:	69fa      	ldr	r2, [r7, #28]
 800f224:	440a      	add	r2, r1
 800f226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f22a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f22e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d133      	bne.n	800f2a8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	015a      	lsls	r2, r3, #5
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	4413      	add	r3, r2
 800f248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69ba      	ldr	r2, [r7, #24]
 800f250:	0151      	lsls	r1, r2, #5
 800f252:	69fa      	ldr	r2, [r7, #28]
 800f254:	440a      	add	r2, r1
 800f256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f25a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f25e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	015a      	lsls	r2, r3, #5
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	4413      	add	r3, r2
 800f268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	69ba      	ldr	r2, [r7, #24]
 800f270:	0151      	lsls	r1, r2, #5
 800f272:	69fa      	ldr	r2, [r7, #28]
 800f274:	440a      	add	r2, r1
 800f276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f27a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f27e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	3301      	adds	r3, #1
 800f284:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f28c:	d81d      	bhi.n	800f2ca <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	015a      	lsls	r2, r3, #5
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	4413      	add	r3, r2
 800f296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f2a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f2a4:	d0ec      	beq.n	800f280 <USB_HC_Halt+0x19e>
 800f2a6:	e011      	b.n	800f2cc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	015a      	lsls	r2, r3, #5
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	69ba      	ldr	r2, [r7, #24]
 800f2b8:	0151      	lsls	r1, r2, #5
 800f2ba:	69fa      	ldr	r2, [r7, #28]
 800f2bc:	440a      	add	r2, r1
 800f2be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f2c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	e000      	b.n	800f2cc <USB_HC_Halt+0x1ea>
          break;
 800f2ca:	bf00      	nop
    }
  }

  return HAL_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3724      	adds	r7, #36	@ 0x24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
	...

0800f2dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b087      	sub	sp, #28
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f2ec:	78fb      	ldrb	r3, [r7, #3]
 800f2ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	04da      	lsls	r2, r3, #19
 800f2f8:	4b15      	ldr	r3, [pc, #84]	@ (800f350 <USB_DoPing+0x74>)
 800f2fa:	4013      	ands	r3, r2
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	0151      	lsls	r1, r2, #5
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	440a      	add	r2, r1
 800f304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f308:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f30c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	015a      	lsls	r2, r3, #5
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	4413      	add	r3, r2
 800f316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f324:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f32c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	015a      	lsls	r2, r3, #5
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	4413      	add	r3, r2
 800f336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f33a:	461a      	mov	r2, r3
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	371c      	adds	r7, #28
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	1ff80000 	.word	0x1ff80000

0800f354 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b088      	sub	sp, #32
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800f35c:	2300      	movs	r3, #0
 800f35e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800f364:	2300      	movs	r3, #0
 800f366:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff f8fe 	bl	800e56a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f36e:	2110      	movs	r1, #16
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7ff f957 	bl	800e624 <USB_FlushTxFifo>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7ff f983 	bl	800e68c <USB_FlushRxFifo>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d001      	beq.n	800f390 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f390:	2300      	movs	r3, #0
 800f392:	61bb      	str	r3, [r7, #24]
 800f394:	e01f      	b.n	800f3d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	015a      	lsls	r2, r3, #5
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	4413      	add	r3, r2
 800f39e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f3ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f3b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f3bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	015a      	lsls	r2, r3, #5
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	2b0f      	cmp	r3, #15
 800f3da:	d9dc      	bls.n	800f396 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f3dc:	2300      	movs	r3, #0
 800f3de:	61bb      	str	r3, [r7, #24]
 800f3e0:	e034      	b.n	800f44c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	015a      	lsls	r2, r3, #5
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f3f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f400:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f408:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	015a      	lsls	r2, r3, #5
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	4413      	add	r3, r2
 800f412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f416:	461a      	mov	r2, r3
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3301      	adds	r3, #1
 800f420:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f428:	d80c      	bhi.n	800f444 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	015a      	lsls	r2, r3, #5
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	4413      	add	r3, r2
 800f432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f43c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f440:	d0ec      	beq.n	800f41c <USB_StopHost+0xc8>
 800f442:	e000      	b.n	800f446 <USB_StopHost+0xf2>
        break;
 800f444:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	3301      	adds	r3, #1
 800f44a:	61bb      	str	r3, [r7, #24]
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	2b0f      	cmp	r3, #15
 800f450:	d9c7      	bls.n	800f3e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f458:	461a      	mov	r2, r3
 800f45a:	f04f 33ff 	mov.w	r3, #4294967295
 800f45e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f04f 32ff 	mov.w	r2, #4294967295
 800f466:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff f86d 	bl	800e548 <USB_EnableGlobalInt>

  return ret;
 800f46e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3720      	adds	r7, #32
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f47c:	4904      	ldr	r1, [pc, #16]	@ (800f490 <MX_FATFS_Init+0x18>)
 800f47e:	4805      	ldr	r0, [pc, #20]	@ (800f494 <MX_FATFS_Init+0x1c>)
 800f480:	f003 fb3a 	bl	8012af8 <FATFS_LinkDriver>
 800f484:	4603      	mov	r3, r0
 800f486:	461a      	mov	r2, r3
 800f488:	4b03      	ldr	r3, [pc, #12]	@ (800f498 <MX_FATFS_Init+0x20>)
 800f48a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f48c:	bf00      	nop
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	20000f1c 	.word	0x20000f1c
 800f494:	08027f28 	.word	0x08027f28
 800f498:	20000f18 	.word	0x20000f18

0800f49c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f4a6:	f000 f87b 	bl	800f5a0 <BSP_SD_IsDetected>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d001      	beq.n	800f4b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	e012      	b.n	800f4da <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f4b4:	480b      	ldr	r0, [pc, #44]	@ (800f4e4 <BSP_SD_Init+0x48>)
 800f4b6:	f7fb fa87 	bl	800a9c8 <HAL_SD_Init>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d109      	bne.n	800f4d8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f4c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f4c8:	4806      	ldr	r0, [pc, #24]	@ (800f4e4 <BSP_SD_Init+0x48>)
 800f4ca:	f7fb fed7 	bl	800b27c <HAL_SD_ConfigWideBusOperation>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f4d8:	79fb      	ldrb	r3, [r7, #7]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	2000086c 	.word	0x2000086c

0800f4e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	68f9      	ldr	r1, [r7, #12]
 800f4fe:	4806      	ldr	r0, [pc, #24]	@ (800f518 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f500:	f7fb fb1a 	bl	800ab38 <HAL_SD_ReadBlocks_DMA>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3718      	adds	r7, #24
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	2000086c 	.word	0x2000086c

0800f51c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	68ba      	ldr	r2, [r7, #8]
 800f530:	68f9      	ldr	r1, [r7, #12]
 800f532:	4806      	ldr	r0, [pc, #24]	@ (800f54c <BSP_SD_WriteBlocks_DMA+0x30>)
 800f534:	f7fb fbe2 	bl	800acfc <HAL_SD_WriteBlocks_DMA>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f542:	7dfb      	ldrb	r3, [r7, #23]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3718      	adds	r7, #24
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	2000086c 	.word	0x2000086c

0800f550 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f554:	4805      	ldr	r0, [pc, #20]	@ (800f56c <BSP_SD_GetCardState+0x1c>)
 800f556:	f7fb ff2b 	bl	800b3b0 <HAL_SD_GetCardState>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b04      	cmp	r3, #4
 800f55e:	bf14      	ite	ne
 800f560:	2301      	movne	r3, #1
 800f562:	2300      	moveq	r3, #0
 800f564:	b2db      	uxtb	r3, r3
}
 800f566:	4618      	mov	r0, r3
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	2000086c 	.word	0x2000086c

0800f570 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f578:	6879      	ldr	r1, [r7, #4]
 800f57a:	4803      	ldr	r0, [pc, #12]	@ (800f588 <BSP_SD_GetCardInfo+0x18>)
 800f57c:	f7fb fe52 	bl	800b224 <HAL_SD_GetCardInfo>
}
 800f580:	bf00      	nop
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	2000086c 	.word	0x2000086c

0800f58c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f594:	f000 f9b2 	bl	800f8fc <BSP_SD_ReadCpltCallback>
}
 800f598:	bf00      	nop
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f5aa:	f000 f80b 	bl	800f5c4 <BSP_PlatformIsDetected>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
 800f5ba:	b2db      	uxtb	r3, r3
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f5ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f5d2:	4806      	ldr	r0, [pc, #24]	@ (800f5ec <BSP_PlatformIsDetected+0x28>)
 800f5d4:	f7f6 ff60 	bl	8006498 <HAL_GPIO_ReadPin>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d001      	beq.n	800f5e2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	40020800 	.word	0x40020800

0800f5f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800f5f8:	f003 faca 	bl	8012b90 <osKernelSysTick>
 800f5fc:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800f5fe:	e006      	b.n	800f60e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f600:	f7ff ffa6 	bl	800f550 <BSP_SD_GetCardState>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	e009      	b.n	800f622 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800f60e:	f003 fabf 	bl	8012b90 <osKernelSysTick>
 800f612:	4602      	mov	r2, r0
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	1ad3      	subs	r3, r2, r3
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d8f0      	bhi.n	800f600 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f61e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	4603      	mov	r3, r0
 800f634:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f636:	4b0b      	ldr	r3, [pc, #44]	@ (800f664 <SD_CheckStatus+0x38>)
 800f638:	2201      	movs	r2, #1
 800f63a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f63c:	f7ff ff88 	bl	800f550 <BSP_SD_GetCardState>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d107      	bne.n	800f656 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f646:	4b07      	ldr	r3, [pc, #28]	@ (800f664 <SD_CheckStatus+0x38>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	f023 0301 	bic.w	r3, r3, #1
 800f650:	b2da      	uxtb	r2, r3
 800f652:	4b04      	ldr	r3, [pc, #16]	@ (800f664 <SD_CheckStatus+0x38>)
 800f654:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f656:	4b03      	ldr	r3, [pc, #12]	@ (800f664 <SD_CheckStatus+0x38>)
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	b2db      	uxtb	r3, r3
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	20000009 	.word	0x20000009

0800f668 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f668:	b590      	push	{r4, r7, lr}
 800f66a:	b087      	sub	sp, #28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f672:	4b20      	ldr	r3, [pc, #128]	@ (800f6f4 <SD_initialize+0x8c>)
 800f674:	2201      	movs	r2, #1
 800f676:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800f678:	f003 fa7e 	bl	8012b78 <osKernelRunning>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d030      	beq.n	800f6e4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f682:	f7ff ff0b 	bl	800f49c <BSP_SD_Init>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d107      	bne.n	800f69c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f68c:	79fb      	ldrb	r3, [r7, #7]
 800f68e:	4618      	mov	r0, r3
 800f690:	f7ff ffcc 	bl	800f62c <SD_CheckStatus>
 800f694:	4603      	mov	r3, r0
 800f696:	461a      	mov	r2, r3
 800f698:	4b16      	ldr	r3, [pc, #88]	@ (800f6f4 <SD_initialize+0x8c>)
 800f69a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f69c:	4b15      	ldr	r3, [pc, #84]	@ (800f6f4 <SD_initialize+0x8c>)
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d01e      	beq.n	800f6e4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800f6a6:	4b14      	ldr	r3, [pc, #80]	@ (800f6f8 <SD_initialize+0x90>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d10e      	bne.n	800f6cc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800f6ae:	4b13      	ldr	r3, [pc, #76]	@ (800f6fc <SD_initialize+0x94>)
 800f6b0:	f107 0408 	add.w	r4, r7, #8
 800f6b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800f6ba:	f107 0308 	add.w	r3, r7, #8
 800f6be:	2100      	movs	r1, #0
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f003 fc54 	bl	8012f6e <osMessageCreate>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	4a0b      	ldr	r2, [pc, #44]	@ (800f6f8 <SD_initialize+0x90>)
 800f6ca:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800f6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f6f8 <SD_initialize+0x90>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d107      	bne.n	800f6e4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800f6d4:	4b07      	ldr	r3, [pc, #28]	@ (800f6f4 <SD_initialize+0x8c>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	f043 0301 	orr.w	r3, r3, #1
 800f6de:	b2da      	uxtb	r2, r3
 800f6e0:	4b04      	ldr	r3, [pc, #16]	@ (800f6f4 <SD_initialize+0x8c>)
 800f6e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f6e4:	4b03      	ldr	r3, [pc, #12]	@ (800f6f4 <SD_initialize+0x8c>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	b2db      	uxtb	r3, r3
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	371c      	adds	r7, #28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd90      	pop	{r4, r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20000009 	.word	0x20000009
 800f6f8:	20000f20 	.word	0x20000f20
 800f6fc:	08024abc 	.word	0x08024abc

0800f700 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f70a:	79fb      	ldrb	r3, [r7, #7]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff ff8d 	bl	800f62c <SD_CheckStatus>
 800f712:	4603      	mov	r3, r0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b08a      	sub	sp, #40	@ 0x28
 800f720:	af00      	add	r7, sp, #0
 800f722:	60b9      	str	r1, [r7, #8]
 800f724:	607a      	str	r2, [r7, #4]
 800f726:	603b      	str	r3, [r7, #0]
 800f728:	4603      	mov	r3, r0
 800f72a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f72c:	2301      	movs	r3, #1
 800f72e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f732:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f736:	f7ff ff5b 	bl	800f5f0 <SD_CheckStatusWithTimeout>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	da02      	bge.n	800f746 <SD_read+0x2a>
  {
    return res;
 800f740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f744:	e032      	b.n	800f7ac <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	6879      	ldr	r1, [r7, #4]
 800f74a:	68b8      	ldr	r0, [r7, #8]
 800f74c:	f7ff fecc 	bl	800f4e8 <BSP_SD_ReadBlocks_DMA>
 800f750:	4603      	mov	r3, r0
 800f752:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800f756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d124      	bne.n	800f7a8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f75e:	4b15      	ldr	r3, [pc, #84]	@ (800f7b4 <SD_read+0x98>)
 800f760:	6819      	ldr	r1, [r3, #0]
 800f762:	f107 0314 	add.w	r3, r7, #20
 800f766:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f76a:	4618      	mov	r0, r3
 800f76c:	f003 fc68 	bl	8013040 <osMessageGet>

    if (event.status == osEventMessage)
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	2b10      	cmp	r3, #16
 800f774:	d118      	bne.n	800f7a8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d115      	bne.n	800f7a8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800f77c:	f003 fa08 	bl	8012b90 <osKernelSysTick>
 800f780:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f782:	e008      	b.n	800f796 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f784:	f7ff fee4 	bl	800f550 <BSP_SD_GetCardState>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d103      	bne.n	800f796 <SD_read+0x7a>
              {
                res = RES_OK;
 800f78e:	2300      	movs	r3, #0
 800f790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f794:	e008      	b.n	800f7a8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f796:	f003 f9fb 	bl	8012b90 <osKernelSysTick>
 800f79a:	4602      	mov	r2, r0
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d9ed      	bls.n	800f784 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3728      	adds	r7, #40	@ 0x28
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	20000f20 	.word	0x20000f20

0800f7b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08a      	sub	sp, #40	@ 0x28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60b9      	str	r1, [r7, #8]
 800f7c0:	607a      	str	r2, [r7, #4]
 800f7c2:	603b      	str	r3, [r7, #0]
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f7ce:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f7d2:	f7ff ff0d 	bl	800f5f0 <SD_CheckStatusWithTimeout>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	da02      	bge.n	800f7e2 <SD_write+0x2a>
  {
    return res;
 800f7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f7e0:	e02e      	b.n	800f840 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f7e2:	683a      	ldr	r2, [r7, #0]
 800f7e4:	6879      	ldr	r1, [r7, #4]
 800f7e6:	68b8      	ldr	r0, [r7, #8]
 800f7e8:	f7ff fe98 	bl	800f51c <BSP_SD_WriteBlocks_DMA>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d124      	bne.n	800f83c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f7f2:	4b15      	ldr	r3, [pc, #84]	@ (800f848 <SD_write+0x90>)
 800f7f4:	6819      	ldr	r1, [r3, #0]
 800f7f6:	f107 0314 	add.w	r3, r7, #20
 800f7fa:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f7fe:	4618      	mov	r0, r3
 800f800:	f003 fc1e 	bl	8013040 <osMessageGet>

    if (event.status == osEventMessage)
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	2b10      	cmp	r3, #16
 800f808:	d118      	bne.n	800f83c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	2b02      	cmp	r3, #2
 800f80e:	d115      	bne.n	800f83c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800f810:	f003 f9be 	bl	8012b90 <osKernelSysTick>
 800f814:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f816:	e008      	b.n	800f82a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f818:	f7ff fe9a 	bl	800f550 <BSP_SD_GetCardState>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d103      	bne.n	800f82a <SD_write+0x72>
          {
            res = RES_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f828:	e008      	b.n	800f83c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f82a:	f003 f9b1 	bl	8012b90 <osKernelSysTick>
 800f82e:	4602      	mov	r2, r0
 800f830:	6a3b      	ldr	r3, [r7, #32]
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f838:	4293      	cmp	r3, r2
 800f83a:	d9ed      	bls.n	800f818 <SD_write+0x60>
    }

  }
#endif

  return res;
 800f83c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f840:	4618      	mov	r0, r3
 800f842:	3728      	adds	r7, #40	@ 0x28
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	20000f20 	.word	0x20000f20

0800f84c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b08c      	sub	sp, #48	@ 0x30
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	603a      	str	r2, [r7, #0]
 800f856:	71fb      	strb	r3, [r7, #7]
 800f858:	460b      	mov	r3, r1
 800f85a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f85c:	2301      	movs	r3, #1
 800f85e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f862:	4b25      	ldr	r3, [pc, #148]	@ (800f8f8 <SD_ioctl+0xac>)
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	f003 0301 	and.w	r3, r3, #1
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d001      	beq.n	800f874 <SD_ioctl+0x28>
 800f870:	2303      	movs	r3, #3
 800f872:	e03c      	b.n	800f8ee <SD_ioctl+0xa2>

  switch (cmd)
 800f874:	79bb      	ldrb	r3, [r7, #6]
 800f876:	2b03      	cmp	r3, #3
 800f878:	d834      	bhi.n	800f8e4 <SD_ioctl+0x98>
 800f87a:	a201      	add	r2, pc, #4	@ (adr r2, 800f880 <SD_ioctl+0x34>)
 800f87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f880:	0800f891 	.word	0x0800f891
 800f884:	0800f899 	.word	0x0800f899
 800f888:	0800f8b1 	.word	0x0800f8b1
 800f88c:	0800f8cb 	.word	0x0800f8cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f890:	2300      	movs	r3, #0
 800f892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f896:	e028      	b.n	800f8ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f898:	f107 030c 	add.w	r3, r7, #12
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7ff fe67 	bl	800f570 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f8a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f8ae:	e01c      	b.n	800f8ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8b0:	f107 030c 	add.w	r3, r7, #12
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff fe5b 	bl	800f570 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f8c8:	e00f      	b.n	800f8ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8ca:	f107 030c 	add.w	r3, r7, #12
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7ff fe4e 	bl	800f570 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d6:	0a5a      	lsrs	r2, r3, #9
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f8e2:	e002      	b.n	800f8ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f8e4:	2304      	movs	r3, #4
 800f8e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3730      	adds	r7, #48	@ 0x30
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	20000009 	.word	0x20000009

0800f8fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800f900:	4b04      	ldr	r3, [pc, #16]	@ (800f914 <BSP_SD_ReadCpltCallback+0x18>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2200      	movs	r2, #0
 800f906:	2101      	movs	r1, #1
 800f908:	4618      	mov	r0, r3
 800f90a:	f003 fb59 	bl	8012fc0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800f90e:	bf00      	nop
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	20000f20 	.word	0x20000f20

0800f918 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f918:	b5b0      	push	{r4, r5, r7, lr}
 800f91a:	b08c      	sub	sp, #48	@ 0x30
 800f91c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f91e:	4b8f      	ldr	r3, [pc, #572]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f920:	22c0      	movs	r2, #192	@ 0xc0
 800f922:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f924:	4b8d      	ldr	r3, [pc, #564]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f926:	22a8      	movs	r2, #168	@ 0xa8
 800f928:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800f92a:	4b8c      	ldr	r3, [pc, #560]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f930:	4b8a      	ldr	r3, [pc, #552]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f932:	220a      	movs	r2, #10
 800f934:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f936:	4b8a      	ldr	r3, [pc, #552]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800f938:	22ff      	movs	r2, #255	@ 0xff
 800f93a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f93c:	4b88      	ldr	r3, [pc, #544]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800f93e:	22ff      	movs	r2, #255	@ 0xff
 800f940:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800f942:	4b87      	ldr	r3, [pc, #540]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800f944:	22ff      	movs	r2, #255	@ 0xff
 800f946:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f948:	4b85      	ldr	r3, [pc, #532]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f94e:	4b85      	ldr	r3, [pc, #532]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800f950:	22c0      	movs	r2, #192	@ 0xc0
 800f952:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f954:	4b83      	ldr	r3, [pc, #524]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800f956:	22a8      	movs	r2, #168	@ 0xa8
 800f958:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800f95a:	4b82      	ldr	r3, [pc, #520]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f960:	4b80      	ldr	r3, [pc, #512]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800f962:	2201      	movs	r2, #1
 800f964:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f966:	2100      	movs	r1, #0
 800f968:	2000      	movs	r0, #0
 800f96a:	f007 feab 	bl	80176c4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f96e:	4b7b      	ldr	r3, [pc, #492]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	061a      	lsls	r2, r3, #24
 800f974:	4b79      	ldr	r3, [pc, #484]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f976:	785b      	ldrb	r3, [r3, #1]
 800f978:	041b      	lsls	r3, r3, #16
 800f97a:	431a      	orrs	r2, r3
 800f97c:	4b77      	ldr	r3, [pc, #476]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f97e:	789b      	ldrb	r3, [r3, #2]
 800f980:	021b      	lsls	r3, r3, #8
 800f982:	4313      	orrs	r3, r2
 800f984:	4a75      	ldr	r2, [pc, #468]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f986:	78d2      	ldrb	r2, [r2, #3]
 800f988:	4313      	orrs	r3, r2
 800f98a:	061a      	lsls	r2, r3, #24
 800f98c:	4b73      	ldr	r3, [pc, #460]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	0619      	lsls	r1, r3, #24
 800f992:	4b72      	ldr	r3, [pc, #456]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f994:	785b      	ldrb	r3, [r3, #1]
 800f996:	041b      	lsls	r3, r3, #16
 800f998:	4319      	orrs	r1, r3
 800f99a:	4b70      	ldr	r3, [pc, #448]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f99c:	789b      	ldrb	r3, [r3, #2]
 800f99e:	021b      	lsls	r3, r3, #8
 800f9a0:	430b      	orrs	r3, r1
 800f9a2:	496e      	ldr	r1, [pc, #440]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9a4:	78c9      	ldrb	r1, [r1, #3]
 800f9a6:	430b      	orrs	r3, r1
 800f9a8:	021b      	lsls	r3, r3, #8
 800f9aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f9ae:	431a      	orrs	r2, r3
 800f9b0:	4b6a      	ldr	r3, [pc, #424]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	0619      	lsls	r1, r3, #24
 800f9b6:	4b69      	ldr	r3, [pc, #420]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9b8:	785b      	ldrb	r3, [r3, #1]
 800f9ba:	041b      	lsls	r3, r3, #16
 800f9bc:	4319      	orrs	r1, r3
 800f9be:	4b67      	ldr	r3, [pc, #412]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9c0:	789b      	ldrb	r3, [r3, #2]
 800f9c2:	021b      	lsls	r3, r3, #8
 800f9c4:	430b      	orrs	r3, r1
 800f9c6:	4965      	ldr	r1, [pc, #404]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9c8:	78c9      	ldrb	r1, [r1, #3]
 800f9ca:	430b      	orrs	r3, r1
 800f9cc:	0a1b      	lsrs	r3, r3, #8
 800f9ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f9d2:	431a      	orrs	r2, r3
 800f9d4:	4b61      	ldr	r3, [pc, #388]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	0619      	lsls	r1, r3, #24
 800f9da:	4b60      	ldr	r3, [pc, #384]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9dc:	785b      	ldrb	r3, [r3, #1]
 800f9de:	041b      	lsls	r3, r3, #16
 800f9e0:	4319      	orrs	r1, r3
 800f9e2:	4b5e      	ldr	r3, [pc, #376]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9e4:	789b      	ldrb	r3, [r3, #2]
 800f9e6:	021b      	lsls	r3, r3, #8
 800f9e8:	430b      	orrs	r3, r1
 800f9ea:	495c      	ldr	r1, [pc, #368]	@ (800fb5c <MX_LWIP_Init+0x244>)
 800f9ec:	78c9      	ldrb	r1, [r1, #3]
 800f9ee:	430b      	orrs	r3, r1
 800f9f0:	0e1b      	lsrs	r3, r3, #24
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	4a5c      	ldr	r2, [pc, #368]	@ (800fb68 <MX_LWIP_Init+0x250>)
 800f9f6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f9f8:	4b59      	ldr	r3, [pc, #356]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	061a      	lsls	r2, r3, #24
 800f9fe:	4b58      	ldr	r3, [pc, #352]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa00:	785b      	ldrb	r3, [r3, #1]
 800fa02:	041b      	lsls	r3, r3, #16
 800fa04:	431a      	orrs	r2, r3
 800fa06:	4b56      	ldr	r3, [pc, #344]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa08:	789b      	ldrb	r3, [r3, #2]
 800fa0a:	021b      	lsls	r3, r3, #8
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	4a54      	ldr	r2, [pc, #336]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa10:	78d2      	ldrb	r2, [r2, #3]
 800fa12:	4313      	orrs	r3, r2
 800fa14:	061a      	lsls	r2, r3, #24
 800fa16:	4b52      	ldr	r3, [pc, #328]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	0619      	lsls	r1, r3, #24
 800fa1c:	4b50      	ldr	r3, [pc, #320]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa1e:	785b      	ldrb	r3, [r3, #1]
 800fa20:	041b      	lsls	r3, r3, #16
 800fa22:	4319      	orrs	r1, r3
 800fa24:	4b4e      	ldr	r3, [pc, #312]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa26:	789b      	ldrb	r3, [r3, #2]
 800fa28:	021b      	lsls	r3, r3, #8
 800fa2a:	430b      	orrs	r3, r1
 800fa2c:	494c      	ldr	r1, [pc, #304]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa2e:	78c9      	ldrb	r1, [r1, #3]
 800fa30:	430b      	orrs	r3, r1
 800fa32:	021b      	lsls	r3, r3, #8
 800fa34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fa38:	431a      	orrs	r2, r3
 800fa3a:	4b49      	ldr	r3, [pc, #292]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	0619      	lsls	r1, r3, #24
 800fa40:	4b47      	ldr	r3, [pc, #284]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa42:	785b      	ldrb	r3, [r3, #1]
 800fa44:	041b      	lsls	r3, r3, #16
 800fa46:	4319      	orrs	r1, r3
 800fa48:	4b45      	ldr	r3, [pc, #276]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa4a:	789b      	ldrb	r3, [r3, #2]
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	430b      	orrs	r3, r1
 800fa50:	4943      	ldr	r1, [pc, #268]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa52:	78c9      	ldrb	r1, [r1, #3]
 800fa54:	430b      	orrs	r3, r1
 800fa56:	0a1b      	lsrs	r3, r3, #8
 800fa58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fa5c:	431a      	orrs	r2, r3
 800fa5e:	4b40      	ldr	r3, [pc, #256]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	0619      	lsls	r1, r3, #24
 800fa64:	4b3e      	ldr	r3, [pc, #248]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa66:	785b      	ldrb	r3, [r3, #1]
 800fa68:	041b      	lsls	r3, r3, #16
 800fa6a:	4319      	orrs	r1, r3
 800fa6c:	4b3c      	ldr	r3, [pc, #240]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa6e:	789b      	ldrb	r3, [r3, #2]
 800fa70:	021b      	lsls	r3, r3, #8
 800fa72:	430b      	orrs	r3, r1
 800fa74:	493a      	ldr	r1, [pc, #232]	@ (800fb60 <MX_LWIP_Init+0x248>)
 800fa76:	78c9      	ldrb	r1, [r1, #3]
 800fa78:	430b      	orrs	r3, r1
 800fa7a:	0e1b      	lsrs	r3, r3, #24
 800fa7c:	4313      	orrs	r3, r2
 800fa7e:	4a3b      	ldr	r2, [pc, #236]	@ (800fb6c <MX_LWIP_Init+0x254>)
 800fa80:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800fa82:	4b38      	ldr	r3, [pc, #224]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	061a      	lsls	r2, r3, #24
 800fa88:	4b36      	ldr	r3, [pc, #216]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fa8a:	785b      	ldrb	r3, [r3, #1]
 800fa8c:	041b      	lsls	r3, r3, #16
 800fa8e:	431a      	orrs	r2, r3
 800fa90:	4b34      	ldr	r3, [pc, #208]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fa92:	789b      	ldrb	r3, [r3, #2]
 800fa94:	021b      	lsls	r3, r3, #8
 800fa96:	4313      	orrs	r3, r2
 800fa98:	4a32      	ldr	r2, [pc, #200]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fa9a:	78d2      	ldrb	r2, [r2, #3]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	061a      	lsls	r2, r3, #24
 800faa0:	4b30      	ldr	r3, [pc, #192]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	0619      	lsls	r1, r3, #24
 800faa6:	4b2f      	ldr	r3, [pc, #188]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800faa8:	785b      	ldrb	r3, [r3, #1]
 800faaa:	041b      	lsls	r3, r3, #16
 800faac:	4319      	orrs	r1, r3
 800faae:	4b2d      	ldr	r3, [pc, #180]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fab0:	789b      	ldrb	r3, [r3, #2]
 800fab2:	021b      	lsls	r3, r3, #8
 800fab4:	430b      	orrs	r3, r1
 800fab6:	492b      	ldr	r1, [pc, #172]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fab8:	78c9      	ldrb	r1, [r1, #3]
 800faba:	430b      	orrs	r3, r1
 800fabc:	021b      	lsls	r3, r3, #8
 800fabe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fac2:	431a      	orrs	r2, r3
 800fac4:	4b27      	ldr	r3, [pc, #156]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	0619      	lsls	r1, r3, #24
 800faca:	4b26      	ldr	r3, [pc, #152]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800facc:	785b      	ldrb	r3, [r3, #1]
 800face:	041b      	lsls	r3, r3, #16
 800fad0:	4319      	orrs	r1, r3
 800fad2:	4b24      	ldr	r3, [pc, #144]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fad4:	789b      	ldrb	r3, [r3, #2]
 800fad6:	021b      	lsls	r3, r3, #8
 800fad8:	430b      	orrs	r3, r1
 800fada:	4922      	ldr	r1, [pc, #136]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fadc:	78c9      	ldrb	r1, [r1, #3]
 800fade:	430b      	orrs	r3, r1
 800fae0:	0a1b      	lsrs	r3, r3, #8
 800fae2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fae6:	431a      	orrs	r2, r3
 800fae8:	4b1e      	ldr	r3, [pc, #120]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	0619      	lsls	r1, r3, #24
 800faee:	4b1d      	ldr	r3, [pc, #116]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800faf0:	785b      	ldrb	r3, [r3, #1]
 800faf2:	041b      	lsls	r3, r3, #16
 800faf4:	4319      	orrs	r1, r3
 800faf6:	4b1b      	ldr	r3, [pc, #108]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800faf8:	789b      	ldrb	r3, [r3, #2]
 800fafa:	021b      	lsls	r3, r3, #8
 800fafc:	430b      	orrs	r3, r1
 800fafe:	4919      	ldr	r1, [pc, #100]	@ (800fb64 <MX_LWIP_Init+0x24c>)
 800fb00:	78c9      	ldrb	r1, [r1, #3]
 800fb02:	430b      	orrs	r3, r1
 800fb04:	0e1b      	lsrs	r3, r3, #24
 800fb06:	4313      	orrs	r3, r2
 800fb08:	4a19      	ldr	r2, [pc, #100]	@ (800fb70 <MX_LWIP_Init+0x258>)
 800fb0a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fb0c:	4b19      	ldr	r3, [pc, #100]	@ (800fb74 <MX_LWIP_Init+0x25c>)
 800fb0e:	9302      	str	r3, [sp, #8]
 800fb10:	4b19      	ldr	r3, [pc, #100]	@ (800fb78 <MX_LWIP_Init+0x260>)
 800fb12:	9301      	str	r3, [sp, #4]
 800fb14:	2300      	movs	r3, #0
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	4b15      	ldr	r3, [pc, #84]	@ (800fb70 <MX_LWIP_Init+0x258>)
 800fb1a:	4a14      	ldr	r2, [pc, #80]	@ (800fb6c <MX_LWIP_Init+0x254>)
 800fb1c:	4912      	ldr	r1, [pc, #72]	@ (800fb68 <MX_LWIP_Init+0x250>)
 800fb1e:	4817      	ldr	r0, [pc, #92]	@ (800fb7c <MX_LWIP_Init+0x264>)
 800fb20:	f008 fbaa 	bl	8018278 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800fb24:	4815      	ldr	r0, [pc, #84]	@ (800fb7c <MX_LWIP_Init+0x264>)
 800fb26:	f008 fd59 	bl	80185dc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800fb2a:	4814      	ldr	r0, [pc, #80]	@ (800fb7c <MX_LWIP_Init+0x264>)
 800fb2c:	f008 fd66 	bl	80185fc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800fb30:	4913      	ldr	r1, [pc, #76]	@ (800fb80 <MX_LWIP_Init+0x268>)
 800fb32:	4812      	ldr	r0, [pc, #72]	@ (800fb7c <MX_LWIP_Init+0x264>)
 800fb34:	f008 fe64 	bl	8018800 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800fb38:	4b12      	ldr	r3, [pc, #72]	@ (800fb84 <MX_LWIP_Init+0x26c>)
 800fb3a:	1d3c      	adds	r4, r7, #4
 800fb3c:	461d      	mov	r5, r3
 800fb3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800fb4a:	1d3b      	adds	r3, r7, #4
 800fb4c:	490b      	ldr	r1, [pc, #44]	@ (800fb7c <MX_LWIP_Init+0x264>)
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f003 f82e 	bl	8012bb0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800fb54:	bf00      	nop
 800fb56:	3720      	adds	r7, #32
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb5c:	20000f64 	.word	0x20000f64
 800fb60:	20000f68 	.word	0x20000f68
 800fb64:	20000f6c 	.word	0x20000f6c
 800fb68:	20000f58 	.word	0x20000f58
 800fb6c:	20000f5c 	.word	0x20000f5c
 800fb70:	20000f60 	.word	0x20000f60
 800fb74:	080175d5 	.word	0x080175d5
 800fb78:	080100e9 	.word	0x080100e9
 800fb7c:	20000f24 	.word	0x20000f24
 800fb80:	0800fb89 	.word	0x0800fb89
 800fb84:	08024ad4 	.word	0x08024ad4

0800fb88 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b087      	sub	sp, #28
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800fbae:	2320      	movs	r3, #32
 800fbb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fbb2:	f3bf 8f4f 	dsb	sy
}
 800fbb6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800fbb8:	e00b      	b.n	800fbd2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800fbba:	4a0d      	ldr	r2, [pc, #52]	@ (800fbf0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	693a      	ldr	r2, [r7, #16]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800fbca:	697a      	ldr	r2, [r7, #20]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	dcf0      	bgt.n	800fbba <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800fbd8:	f3bf 8f4f 	dsb	sy
}
 800fbdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fbde:	f3bf 8f6f 	isb	sy
}
 800fbe2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800fbe4:	bf00      	nop
 800fbe6:	371c      	adds	r7, #28
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr
 800fbf0:	e000ed00 	.word	0xe000ed00

0800fbf4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800fbfc:	4b04      	ldr	r3, [pc, #16]	@ (800fc10 <HAL_ETH_RxCpltCallback+0x1c>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f003 f96b 	bl	8012edc <osSemaphoreRelease>
}
 800fc06:	bf00      	nop
 800fc08:	3708      	adds	r7, #8
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	200058fc 	.word	0x200058fc

0800fc14 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800fc1c:	4b04      	ldr	r3, [pc, #16]	@ (800fc30 <HAL_ETH_TxCpltCallback+0x1c>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f003 f95b 	bl	8012edc <osSemaphoreRelease>
}
 800fc26:	bf00      	nop
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	20005900 	.word	0x20005900

0800fc34 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7f5 fe6f 	bl	8005920 <HAL_ETH_GetDMAError>
 800fc42:	4603      	mov	r3, r0
 800fc44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc48:	2b80      	cmp	r3, #128	@ 0x80
 800fc4a:	d104      	bne.n	800fc56 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800fc4c:	4b04      	ldr	r3, [pc, #16]	@ (800fc60 <HAL_ETH_ErrorCallback+0x2c>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4618      	mov	r0, r3
 800fc52:	f003 f943 	bl	8012edc <osSemaphoreRelease>
  }
}
 800fc56:	bf00      	nop
 800fc58:	3708      	adds	r7, #8
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	200058fc 	.word	0x200058fc

0800fc64 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800fc64:	b5b0      	push	{r4, r5, r7, lr}
 800fc66:	b0b4      	sub	sp, #208	@ 0xd0
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 800fc72:	2300      	movs	r3, #0
 800fc74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 800fc7e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fc82:	2264      	movs	r2, #100	@ 0x64
 800fc84:	2100      	movs	r1, #0
 800fc86:	4618      	mov	r0, r3
 800fc88:	f013 fda1 	bl	80237ce <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800fc8c:	4b9b      	ldr	r3, [pc, #620]	@ (800fefc <low_level_init+0x298>)
 800fc8e:	4a9c      	ldr	r2, [pc, #624]	@ (800ff00 <low_level_init+0x29c>)
 800fc90:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800fc92:	2300      	movs	r3, #0
 800fc94:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 800fc98:	2380      	movs	r3, #128	@ 0x80
 800fc9a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 800fc9e:	23e1      	movs	r3, #225	@ 0xe1
 800fca0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 800fca4:	2300      	movs	r3, #0
 800fca6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800fcb6:	4a91      	ldr	r2, [pc, #580]	@ (800fefc <low_level_init+0x298>)
 800fcb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800fcbc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800fcbe:	4b8f      	ldr	r3, [pc, #572]	@ (800fefc <low_level_init+0x298>)
 800fcc0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800fcc4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800fcc6:	4b8d      	ldr	r3, [pc, #564]	@ (800fefc <low_level_init+0x298>)
 800fcc8:	4a8e      	ldr	r2, [pc, #568]	@ (800ff04 <low_level_init+0x2a0>)
 800fcca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800fccc:	4b8b      	ldr	r3, [pc, #556]	@ (800fefc <low_level_init+0x298>)
 800fcce:	4a8e      	ldr	r2, [pc, #568]	@ (800ff08 <low_level_init+0x2a4>)
 800fcd0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800fcd2:	4b8a      	ldr	r3, [pc, #552]	@ (800fefc <low_level_init+0x298>)
 800fcd4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800fcd8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800fcda:	4888      	ldr	r0, [pc, #544]	@ (800fefc <low_level_init+0x298>)
 800fcdc:	f7f4 ffe2 	bl	8004ca4 <HAL_ETH_Init>
 800fce0:	4603      	mov	r3, r0
 800fce2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800fce6:	2238      	movs	r2, #56	@ 0x38
 800fce8:	2100      	movs	r1, #0
 800fcea:	4888      	ldr	r0, [pc, #544]	@ (800ff0c <low_level_init+0x2a8>)
 800fcec:	f013 fd6f 	bl	80237ce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800fcf0:	4b86      	ldr	r3, [pc, #536]	@ (800ff0c <low_level_init+0x2a8>)
 800fcf2:	2221      	movs	r2, #33	@ 0x21
 800fcf4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800fcf6:	4b85      	ldr	r3, [pc, #532]	@ (800ff0c <low_level_init+0x2a8>)
 800fcf8:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800fcfc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800fcfe:	4b83      	ldr	r3, [pc, #524]	@ (800ff0c <low_level_init+0x2a8>)
 800fd00:	2200      	movs	r2, #0
 800fd02:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800fd04:	4882      	ldr	r0, [pc, #520]	@ (800ff10 <low_level_init+0x2ac>)
 800fd06:	f008 f971 	bl	8017fec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2206      	movs	r2, #6
 800fd0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800fd12:	4b7a      	ldr	r3, [pc, #488]	@ (800fefc <low_level_init+0x298>)
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	781a      	ldrb	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800fd1e:	4b77      	ldr	r3, [pc, #476]	@ (800fefc <low_level_init+0x298>)
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	785a      	ldrb	r2, [r3, #1]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800fd2a:	4b74      	ldr	r3, [pc, #464]	@ (800fefc <low_level_init+0x298>)
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	789a      	ldrb	r2, [r3, #2]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800fd36:	4b71      	ldr	r3, [pc, #452]	@ (800fefc <low_level_init+0x298>)
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	78da      	ldrb	r2, [r3, #3]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800fd42:	4b6e      	ldr	r3, [pc, #440]	@ (800fefc <low_level_init+0x298>)
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	791a      	ldrb	r2, [r3, #4]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800fd4e:	4b6b      	ldr	r3, [pc, #428]	@ (800fefc <low_level_init+0x298>)
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	795a      	ldrb	r2, [r3, #5]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800fd60:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd68:	f043 030a 	orr.w	r3, r3, #10
 800fd6c:	b2da      	uxtb	r2, r3
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800fd74:	2300      	movs	r3, #0
 800fd76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fd78:	2300      	movs	r3, #0
 800fd7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800fd7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800fd80:	2101      	movs	r1, #1
 800fd82:	4618      	mov	r0, r3
 800fd84:	f003 f81c 	bl	8012dc0 <osSemaphoreCreate>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	4a62      	ldr	r2, [pc, #392]	@ (800ff14 <low_level_init+0x2b0>)
 800fd8c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800fd8e:	2300      	movs	r3, #0
 800fd90:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd92:	2300      	movs	r3, #0
 800fd94:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800fd96:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800fd9a:	2101      	movs	r1, #1
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f003 f80f 	bl	8012dc0 <osSemaphoreCreate>
 800fda2:	4603      	mov	r3, r0
 800fda4:	4a5c      	ldr	r2, [pc, #368]	@ (800ff18 <low_level_init+0x2b4>)
 800fda6:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800fda8:	4b5a      	ldr	r3, [pc, #360]	@ (800ff14 <low_level_init+0x2b0>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2100      	movs	r1, #0
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f003 f846 	bl	8012e40 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800fdb4:	4b58      	ldr	r3, [pc, #352]	@ (800ff18 <low_level_init+0x2b4>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2100      	movs	r1, #0
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f003 f840 	bl	8012e40 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800fdc0:	4b56      	ldr	r3, [pc, #344]	@ (800ff1c <low_level_init+0x2b8>)
 800fdc2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800fdc6:	461d      	mov	r5, r3
 800fdc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fdd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800fdd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	4618      	mov	r0, r3
 800fddc:	f002 fee8 	bl	8012bb0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800fde0:	494f      	ldr	r1, [pc, #316]	@ (800ff20 <low_level_init+0x2bc>)
 800fde2:	4850      	ldr	r0, [pc, #320]	@ (800ff24 <low_level_init+0x2c0>)
 800fde4:	f7f3 fe3f 	bl	8003a66 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800fde8:	484e      	ldr	r0, [pc, #312]	@ (800ff24 <low_level_init+0x2c0>)
 800fdea:	f7f3 fe6e 	bl	8003aca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800fdee:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d165      	bne.n	800fec2 <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fdf6:	484b      	ldr	r0, [pc, #300]	@ (800ff24 <low_level_init+0x2c0>)
 800fdf8:	f7f3 ff0f 	bl	8003c1a <LAN8742_GetLinkState>
 800fdfc:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800fe00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	dc06      	bgt.n	800fe16 <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f008 fcc9 	bl	80187a0 <netif_set_link_down>
      netif_set_down(netif);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f008 fc60 	bl	80186d4 <netif_set_down>
 800fe14:	e057      	b.n	800fec6 <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 800fe16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fe1a:	3b02      	subs	r3, #2
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	d82b      	bhi.n	800fe78 <low_level_init+0x214>
 800fe20:	a201      	add	r2, pc, #4	@ (adr r2, 800fe28 <low_level_init+0x1c4>)
 800fe22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe26:	bf00      	nop
 800fe28:	0800fe39 	.word	0x0800fe39
 800fe2c:	0800fe4b 	.word	0x0800fe4b
 800fe30:	0800fe5b 	.word	0x0800fe5b
 800fe34:	0800fe6b 	.word	0x0800fe6b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800fe38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800fe40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fe44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fe48:	e01f      	b.n	800fe8a <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800fe50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fe54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fe58:	e017      	b.n	800fe8a <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800fe5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800fe62:	2300      	movs	r3, #0
 800fe64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fe68:	e00f      	b.n	800fe8a <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800fe70:	2300      	movs	r3, #0
 800fe72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fe76:	e008      	b.n	800fe8a <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800fe78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800fe80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fe84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fe88:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fe8a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fe8e:	4619      	mov	r1, r3
 800fe90:	481a      	ldr	r0, [pc, #104]	@ (800fefc <low_level_init+0x298>)
 800fe92:	f7f5 fbeb 	bl	800566c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800fe96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800fe9a:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 800fe9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fea0:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fea2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fea6:	4619      	mov	r1, r3
 800fea8:	4814      	ldr	r0, [pc, #80]	@ (800fefc <low_level_init+0x298>)
 800feaa:	f7f5 fcc9 	bl	8005840 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800feae:	4813      	ldr	r0, [pc, #76]	@ (800fefc <low_level_init+0x298>)
 800feb0:	f7f4 ff74 	bl	8004d9c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f008 fba1 	bl	80185fc <netif_set_up>
    netif_set_link_up(netif);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f008 fc3c 	bl	8018738 <netif_set_link_up>
 800fec0:	e001      	b.n	800fec6 <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 800fec2:	f7f2 fb3f 	bl	8002544 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 800fec6:	f7f3 ff81 	bl	8003dcc <HAL_GetREVID>
 800feca:	4603      	mov	r3, r0
 800fecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fed0:	d10f      	bne.n	800fef2 <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800fed2:	4b15      	ldr	r3, [pc, #84]	@ (800ff28 <low_level_init+0x2c4>)
 800fed4:	f107 040c 	add.w	r4, r7, #12
 800fed8:	461d      	mov	r5, r3
 800feda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fedc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800fee6:	f107 030c 	add.w	r3, r7, #12
 800feea:	2100      	movs	r1, #0
 800feec:	4618      	mov	r0, r3
 800feee:	f002 fe5f 	bl	8012bb0 <osThreadCreate>
  }
}
 800fef2:	bf00      	nop
 800fef4:	37d0      	adds	r7, #208	@ 0xd0
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bdb0      	pop	{r4, r5, r7, pc}
 800fefa:	bf00      	nop
 800fefc:	20005904 	.word	0x20005904
 800ff00:	40028000 	.word	0x40028000
 800ff04:	2000014c 	.word	0x2000014c
 800ff08:	200000ac 	.word	0x200000ac
 800ff0c:	200059b4 	.word	0x200059b4
 800ff10:	08027f3c 	.word	0x08027f3c
 800ff14:	200058fc 	.word	0x200058fc
 800ff18:	20005900 	.word	0x20005900
 800ff1c:	08024af8 	.word	0x08024af8
 800ff20:	2000000c 	.word	0x2000000c
 800ff24:	200059ec 	.word	0x200059ec
 800ff28:	08024b24 	.word	0x08024b24

0800ff2c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b092      	sub	sp, #72	@ 0x48
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ff36:	2300      	movs	r3, #0
 800ff38:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ff44:	f107 030c 	add.w	r3, r7, #12
 800ff48:	2230      	movs	r2, #48	@ 0x30
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f013 fc3e 	bl	80237ce <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ff52:	f107 030c 	add.w	r3, r7, #12
 800ff56:	2230      	movs	r2, #48	@ 0x30
 800ff58:	2100      	movs	r1, #0
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f013 fc37 	bl	80237ce <memset>

  for(q = p; q != NULL; q = q->next)
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff64:	e045      	b.n	800fff2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ff66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff68:	2b03      	cmp	r3, #3
 800ff6a:	d902      	bls.n	800ff72 <low_level_output+0x46>
      return ERR_IF;
 800ff6c:	f06f 030b 	mvn.w	r3, #11
 800ff70:	e06c      	b.n	801004c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800ff72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff74:	6859      	ldr	r1, [r3, #4]
 800ff76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff78:	4613      	mov	r3, r2
 800ff7a:	005b      	lsls	r3, r3, #1
 800ff7c:	4413      	add	r3, r2
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	3348      	adds	r3, #72	@ 0x48
 800ff82:	443b      	add	r3, r7
 800ff84:	3b3c      	subs	r3, #60	@ 0x3c
 800ff86:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ff88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff8a:	895b      	ldrh	r3, [r3, #10]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff90:	4613      	mov	r3, r2
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	4413      	add	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	3348      	adds	r3, #72	@ 0x48
 800ff9a:	443b      	add	r3, r7
 800ff9c:	3b38      	subs	r3, #56	@ 0x38
 800ff9e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ffa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d011      	beq.n	800ffca <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ffa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffa8:	1e5a      	subs	r2, r3, #1
 800ffaa:	f107 000c 	add.w	r0, r7, #12
 800ffae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	005b      	lsls	r3, r3, #1
 800ffb4:	440b      	add	r3, r1
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	18c1      	adds	r1, r0, r3
 800ffba:	4613      	mov	r3, r2
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	4413      	add	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	3348      	adds	r3, #72	@ 0x48
 800ffc4:	443b      	add	r3, r7
 800ffc6:	3b34      	subs	r3, #52	@ 0x34
 800ffc8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ffca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d109      	bne.n	800ffe6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ffd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	005b      	lsls	r3, r3, #1
 800ffd8:	4413      	add	r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	3348      	adds	r3, #72	@ 0x48
 800ffde:	443b      	add	r3, r7
 800ffe0:	3b34      	subs	r3, #52	@ 0x34
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ffe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffe8:	3301      	adds	r3, #1
 800ffea:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ffec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	643b      	str	r3, [r7, #64]	@ 0x40
 800fff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1b6      	bne.n	800ff66 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	891b      	ldrh	r3, [r3, #8]
 800fffc:	461a      	mov	r2, r3
 800fffe:	4b15      	ldr	r3, [pc, #84]	@ (8010054 <low_level_output+0x128>)
 8010000:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8010002:	4a14      	ldr	r2, [pc, #80]	@ (8010054 <low_level_output+0x128>)
 8010004:	f107 030c 	add.w	r3, r7, #12
 8010008:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801000a:	4a12      	ldr	r2, [pc, #72]	@ (8010054 <low_level_output+0x128>)
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8010010:	6838      	ldr	r0, [r7, #0]
 8010012:	f009 f87b 	bl	801910c <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8010016:	490f      	ldr	r1, [pc, #60]	@ (8010054 <low_level_output+0x128>)
 8010018:	480f      	ldr	r0, [pc, #60]	@ (8010058 <low_level_output+0x12c>)
 801001a:	f7f4 ffcd 	bl	8004fb8 <HAL_ETH_Transmit_IT>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10e      	bne.n	8010042 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8010024:	bf00      	nop
 8010026:	4b0d      	ldr	r3, [pc, #52]	@ (801005c <low_level_output+0x130>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f04f 31ff 	mov.w	r1, #4294967295
 801002e:	4618      	mov	r0, r3
 8010030:	f002 ff06 	bl	8012e40 <osSemaphoreWait>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d1f5      	bne.n	8010026 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 801003a:	4807      	ldr	r0, [pc, #28]	@ (8010058 <low_level_output+0x12c>)
 801003c:	f7f5 f950 	bl	80052e0 <HAL_ETH_ReleaseTxPacket>
 8010040:	e002      	b.n	8010048 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8010042:	6838      	ldr	r0, [r7, #0]
 8010044:	f008 ffbc 	bl	8018fc0 <pbuf_free>
  }

  return errval;
 8010048:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801004c:	4618      	mov	r0, r3
 801004e:	3748      	adds	r7, #72	@ 0x48
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	200059b4 	.word	0x200059b4
 8010058:	20005904 	.word	0x20005904
 801005c:	20005900 	.word	0x20005900

08010060 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8010068:	2300      	movs	r3, #0
 801006a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801006c:	4b07      	ldr	r3, [pc, #28]	@ (801008c <low_level_input+0x2c>)
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d105      	bne.n	8010080 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8010074:	f107 030c 	add.w	r3, r7, #12
 8010078:	4619      	mov	r1, r3
 801007a:	4805      	ldr	r0, [pc, #20]	@ (8010090 <low_level_input+0x30>)
 801007c:	f7f4 fff8 	bl	8005070 <HAL_ETH_ReadData>
  }

  return p;
 8010080:	68fb      	ldr	r3, [r7, #12]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	200058f8 	.word	0x200058f8
 8010090:	20005904 	.word	0x20005904

08010094 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801009c:	2300      	movs	r3, #0
 801009e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80100a4:	4b0f      	ldr	r3, [pc, #60]	@ (80100e4 <ethernetif_input+0x50>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f04f 31ff 	mov.w	r1, #4294967295
 80100ac:	4618      	mov	r0, r3
 80100ae:	f002 fec7 	bl	8012e40 <osSemaphoreWait>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d1f5      	bne.n	80100a4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80100b8:	68b8      	ldr	r0, [r7, #8]
 80100ba:	f7ff ffd1 	bl	8010060 <low_level_input>
 80100be:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00a      	beq.n	80100dc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	691b      	ldr	r3, [r3, #16]
 80100ca:	68b9      	ldr	r1, [r7, #8]
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	4798      	blx	r3
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f008 ff72 	bl	8018fc0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1ea      	bne.n	80100b8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80100e2:	e7df      	b.n	80100a4 <ethernetif_input+0x10>
 80100e4:	200058fc 	.word	0x200058fc

080100e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d106      	bne.n	8010104 <ethernetif_init+0x1c>
 80100f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010130 <ethernetif_init+0x48>)
 80100f8:	f240 2202 	movw	r2, #514	@ 0x202
 80100fc:	490d      	ldr	r1, [pc, #52]	@ (8010134 <ethernetif_init+0x4c>)
 80100fe:	480e      	ldr	r0, [pc, #56]	@ (8010138 <ethernetif_init+0x50>)
 8010100:	f013 fab2 	bl	8023668 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2273      	movs	r2, #115	@ 0x73
 8010108:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2274      	movs	r2, #116	@ 0x74
 8010110:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4a09      	ldr	r2, [pc, #36]	@ (801013c <ethernetif_init+0x54>)
 8010118:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4a08      	ldr	r2, [pc, #32]	@ (8010140 <ethernetif_init+0x58>)
 801011e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f7ff fd9f 	bl	800fc64 <low_level_init>

  return ERR_OK;
 8010126:	2300      	movs	r3, #0
}
 8010128:	4618      	mov	r0, r3
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	08024b40 	.word	0x08024b40
 8010134:	08024b5c 	.word	0x08024b5c
 8010138:	08024b6c 	.word	0x08024b6c
 801013c:	08020a19 	.word	0x08020a19
 8010140:	0800ff2d 	.word	0x0800ff2d

08010144 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8010150:	68f9      	ldr	r1, [r7, #12]
 8010152:	4809      	ldr	r0, [pc, #36]	@ (8010178 <pbuf_free_custom+0x34>)
 8010154:	f008 f83a 	bl	80181cc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8010158:	4b08      	ldr	r3, [pc, #32]	@ (801017c <pbuf_free_custom+0x38>)
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d107      	bne.n	8010170 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8010160:	4b06      	ldr	r3, [pc, #24]	@ (801017c <pbuf_free_custom+0x38>)
 8010162:	2200      	movs	r2, #0
 8010164:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8010166:	4b06      	ldr	r3, [pc, #24]	@ (8010180 <pbuf_free_custom+0x3c>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4618      	mov	r0, r3
 801016c:	f002 feb6 	bl	8012edc <osSemaphoreRelease>
  }
}
 8010170:	bf00      	nop
 8010172:	3710      	adds	r7, #16
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	08027f3c 	.word	0x08027f3c
 801017c:	200058f8 	.word	0x200058f8
 8010180:	200058fc 	.word	0x200058fc

08010184 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010188:	f7f3 fdf0 	bl	8003d6c <HAL_GetTick>
 801018c:	4603      	mov	r3, r0
}
 801018e:	4618      	mov	r0, r3
 8010190:	bd80      	pop	{r7, pc}
	...

08010194 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b08e      	sub	sp, #56	@ 0x38
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801019c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101a0:	2200      	movs	r2, #0
 80101a2:	601a      	str	r2, [r3, #0]
 80101a4:	605a      	str	r2, [r3, #4]
 80101a6:	609a      	str	r2, [r3, #8]
 80101a8:	60da      	str	r2, [r3, #12]
 80101aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a44      	ldr	r2, [pc, #272]	@ (80102c4 <HAL_ETH_MspInit+0x130>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	f040 8081 	bne.w	80102ba <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80101b8:	4b43      	ldr	r3, [pc, #268]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101bc:	4a42      	ldr	r2, [pc, #264]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80101c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80101c4:	4b40      	ldr	r3, [pc, #256]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80101cc:	623b      	str	r3, [r7, #32]
 80101ce:	6a3b      	ldr	r3, [r7, #32]
 80101d0:	4b3d      	ldr	r3, [pc, #244]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101d4:	4a3c      	ldr	r2, [pc, #240]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80101da:	6313      	str	r3, [r2, #48]	@ 0x30
 80101dc:	4b3a      	ldr	r3, [pc, #232]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80101e4:	61fb      	str	r3, [r7, #28]
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	4b37      	ldr	r3, [pc, #220]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101ec:	4a36      	ldr	r2, [pc, #216]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80101f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80101f4:	4b34      	ldr	r3, [pc, #208]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 80101f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101fc:	61bb      	str	r3, [r7, #24]
 80101fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010200:	4b31      	ldr	r3, [pc, #196]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 8010202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010204:	4a30      	ldr	r2, [pc, #192]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 8010206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801020a:	6313      	str	r3, [r2, #48]	@ 0x30
 801020c:	4b2e      	ldr	r3, [pc, #184]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 801020e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010214:	617b      	str	r3, [r7, #20]
 8010216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010218:	4b2b      	ldr	r3, [pc, #172]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 801021a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801021c:	4a2a      	ldr	r2, [pc, #168]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 801021e:	f043 0304 	orr.w	r3, r3, #4
 8010222:	6313      	str	r3, [r2, #48]	@ 0x30
 8010224:	4b28      	ldr	r3, [pc, #160]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 8010226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010228:	f003 0304 	and.w	r3, r3, #4
 801022c:	613b      	str	r3, [r7, #16]
 801022e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010230:	4b25      	ldr	r3, [pc, #148]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 8010232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010234:	4a24      	ldr	r2, [pc, #144]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 8010236:	f043 0301 	orr.w	r3, r3, #1
 801023a:	6313      	str	r3, [r2, #48]	@ 0x30
 801023c:	4b22      	ldr	r3, [pc, #136]	@ (80102c8 <HAL_ETH_MspInit+0x134>)
 801023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010240:	f003 0301 	and.w	r3, r3, #1
 8010244:	60fb      	str	r3, [r7, #12]
 8010246:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8010248:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 801024c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801024e:	2302      	movs	r3, #2
 8010250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010252:	2300      	movs	r3, #0
 8010254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010256:	2303      	movs	r3, #3
 8010258:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801025a:	230b      	movs	r3, #11
 801025c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801025e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010262:	4619      	mov	r1, r3
 8010264:	4819      	ldr	r0, [pc, #100]	@ (80102cc <HAL_ETH_MspInit+0x138>)
 8010266:	f7f5 ff6b 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801026a:	2332      	movs	r3, #50	@ 0x32
 801026c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801026e:	2302      	movs	r3, #2
 8010270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010272:	2300      	movs	r3, #0
 8010274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010276:	2303      	movs	r3, #3
 8010278:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801027a:	230b      	movs	r3, #11
 801027c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801027e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010282:	4619      	mov	r1, r3
 8010284:	4812      	ldr	r0, [pc, #72]	@ (80102d0 <HAL_ETH_MspInit+0x13c>)
 8010286:	f7f5 ff5b 	bl	8006140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801028a:	2386      	movs	r3, #134	@ 0x86
 801028c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801028e:	2302      	movs	r3, #2
 8010290:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010292:	2300      	movs	r3, #0
 8010294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010296:	2303      	movs	r3, #3
 8010298:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801029a:	230b      	movs	r3, #11
 801029c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801029e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80102a2:	4619      	mov	r1, r3
 80102a4:	480b      	ldr	r0, [pc, #44]	@ (80102d4 <HAL_ETH_MspInit+0x140>)
 80102a6:	f7f5 ff4b 	bl	8006140 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80102aa:	2200      	movs	r2, #0
 80102ac:	2105      	movs	r1, #5
 80102ae:	203d      	movs	r0, #61	@ 0x3d
 80102b0:	f7f4 f8e4 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80102b4:	203d      	movs	r0, #61	@ 0x3d
 80102b6:	f7f4 f8fd 	bl	80044b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80102ba:	bf00      	nop
 80102bc:	3738      	adds	r7, #56	@ 0x38
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	40028000 	.word	0x40028000
 80102c8:	40023800 	.word	0x40023800
 80102cc:	40021800 	.word	0x40021800
 80102d0:	40020800 	.word	0x40020800
 80102d4:	40020000 	.word	0x40020000

080102d8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80102dc:	4802      	ldr	r0, [pc, #8]	@ (80102e8 <ETH_PHY_IO_Init+0x10>)
 80102de:	f7f5 fac9 	bl	8005874 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80102e2:	2300      	movs	r3, #0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	20005904 	.word	0x20005904

080102ec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80102ec:	b480      	push	{r7}
 80102ee:	af00      	add	r7, sp, #0
  return 0;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	68ba      	ldr	r2, [r7, #8]
 801030c:	68f9      	ldr	r1, [r7, #12]
 801030e:	4807      	ldr	r0, [pc, #28]	@ (801032c <ETH_PHY_IO_ReadReg+0x30>)
 8010310:	f7f5 f918 	bl	8005544 <HAL_ETH_ReadPHYRegister>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801031a:	f04f 33ff 	mov.w	r3, #4294967295
 801031e:	e000      	b.n	8010322 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	20005904 	.word	0x20005904

08010330 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	68f9      	ldr	r1, [r7, #12]
 8010342:	4807      	ldr	r0, [pc, #28]	@ (8010360 <ETH_PHY_IO_WriteReg+0x30>)
 8010344:	f7f5 f949 	bl	80055da <HAL_ETH_WritePHYRegister>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801034e:	f04f 33ff 	mov.w	r3, #4294967295
 8010352:	e000      	b.n	8010356 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	20005904 	.word	0x20005904

08010364 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010368:	f7f3 fd00 	bl	8003d6c <HAL_GetTick>
 801036c:	4603      	mov	r3, r0
}
 801036e:	4618      	mov	r0, r3
 8010370:	bd80      	pop	{r7, pc}
	...

08010374 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b0a0      	sub	sp, #128	@ 0x80
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801037c:	f107 0308 	add.w	r3, r7, #8
 8010380:	2264      	movs	r2, #100	@ 0x64
 8010382:	2100      	movs	r1, #0
 8010384:	4618      	mov	r0, r3
 8010386:	f013 fa22 	bl	80237ce <memset>
  int32_t PHYLinkState = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801038e:	2300      	movs	r3, #0
 8010390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010392:	2300      	movs	r3, #0
 8010394:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010396:	2300      	movs	r3, #0
 8010398:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 801039e:	483a      	ldr	r0, [pc, #232]	@ (8010488 <ethernet_link_thread+0x114>)
 80103a0:	f7f3 fc3b 	bl	8003c1a <LAN8742_GetLinkState>
 80103a4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80103a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80103ac:	089b      	lsrs	r3, r3, #2
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00c      	beq.n	80103d2 <ethernet_link_thread+0x5e>
 80103b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	dc09      	bgt.n	80103d2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80103be:	4833      	ldr	r0, [pc, #204]	@ (801048c <ethernet_link_thread+0x118>)
 80103c0:	f7f4 fd7a 	bl	8004eb8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80103c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80103c6:	f008 f985 	bl	80186d4 <netif_set_down>
    netif_set_link_down(netif);
 80103ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80103cc:	f008 f9e8 	bl	80187a0 <netif_set_link_down>
 80103d0:	e055      	b.n	801047e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80103d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80103d8:	f003 0304 	and.w	r3, r3, #4
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d14e      	bne.n	801047e <ethernet_link_thread+0x10a>
 80103e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	dd4b      	ble.n	801047e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80103e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103e8:	3b02      	subs	r3, #2
 80103ea:	2b03      	cmp	r3, #3
 80103ec:	d82a      	bhi.n	8010444 <ethernet_link_thread+0xd0>
 80103ee:	a201      	add	r2, pc, #4	@ (adr r2, 80103f4 <ethernet_link_thread+0x80>)
 80103f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f4:	08010405 	.word	0x08010405
 80103f8:	08010417 	.word	0x08010417
 80103fc:	08010427 	.word	0x08010427
 8010400:	08010437 	.word	0x08010437
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8010404:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010408:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801040a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801040e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8010410:	2301      	movs	r3, #1
 8010412:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8010414:	e017      	b.n	8010446 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8010416:	2300      	movs	r3, #0
 8010418:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801041a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801041e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8010420:	2301      	movs	r3, #1
 8010422:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8010424:	e00f      	b.n	8010446 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8010426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801042a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 801042c:	2300      	movs	r3, #0
 801042e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8010430:	2301      	movs	r3, #1
 8010432:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8010434:	e007      	b.n	8010446 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8010436:	2300      	movs	r3, #0
 8010438:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 801043a:	2300      	movs	r3, #0
 801043c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 801043e:	2301      	movs	r3, #1
 8010440:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8010442:	e000      	b.n	8010446 <ethernet_link_thread+0xd2>
    default:
      break;
 8010444:	bf00      	nop
    }

    if(linkchanged)
 8010446:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010448:	2b00      	cmp	r3, #0
 801044a:	d018      	beq.n	801047e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801044c:	f107 0308 	add.w	r3, r7, #8
 8010450:	4619      	mov	r1, r3
 8010452:	480e      	ldr	r0, [pc, #56]	@ (801048c <ethernet_link_thread+0x118>)
 8010454:	f7f5 f90a 	bl	800566c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8010458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801045a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 801045c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801045e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8010460:	f107 0308 	add.w	r3, r7, #8
 8010464:	4619      	mov	r1, r3
 8010466:	4809      	ldr	r0, [pc, #36]	@ (801048c <ethernet_link_thread+0x118>)
 8010468:	f7f5 f9ea 	bl	8005840 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 801046c:	4807      	ldr	r0, [pc, #28]	@ (801048c <ethernet_link_thread+0x118>)
 801046e:	f7f4 fc95 	bl	8004d9c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8010472:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010474:	f008 f8c2 	bl	80185fc <netif_set_up>
      netif_set_link_up(netif);
 8010478:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801047a:	f008 f95d 	bl	8018738 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 801047e:	2064      	movs	r0, #100	@ 0x64
 8010480:	f002 fbee 	bl	8012c60 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8010484:	e78b      	b.n	801039e <ethernet_link_thread+0x2a>
 8010486:	bf00      	nop
 8010488:	200059ec 	.word	0x200059ec
 801048c:	20005904 	.word	0x20005904

08010490 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af02      	add	r7, sp, #8
 8010496:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8010498:	4812      	ldr	r0, [pc, #72]	@ (80104e4 <HAL_ETH_RxAllocateCallback+0x54>)
 801049a:	f007 fe23 	bl	80180e4 <memp_malloc_pool>
 801049e:	60f8      	str	r0, [r7, #12]
  if (p)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d014      	beq.n	80104d0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	f103 0220 	add.w	r2, r3, #32
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	4a0d      	ldr	r2, [pc, #52]	@ (80104e8 <HAL_ETH_RxAllocateCallback+0x58>)
 80104b4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80104be:	9201      	str	r2, [sp, #4]
 80104c0:	9300      	str	r3, [sp, #0]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2241      	movs	r2, #65	@ 0x41
 80104c6:	2100      	movs	r1, #0
 80104c8:	2000      	movs	r0, #0
 80104ca:	f008 fb8d 	bl	8018be8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80104ce:	e005      	b.n	80104dc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80104d0:	4b06      	ldr	r3, [pc, #24]	@ (80104ec <HAL_ETH_RxAllocateCallback+0x5c>)
 80104d2:	2201      	movs	r2, #1
 80104d4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2200      	movs	r2, #0
 80104da:	601a      	str	r2, [r3, #0]
}
 80104dc:	bf00      	nop
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	08027f3c 	.word	0x08027f3c
 80104e8:	08010145 	.word	0x08010145
 80104ec:	200058f8 	.word	0x200058f8

080104f0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b088      	sub	sp, #32
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
 80104fc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010506:	2300      	movs	r3, #0
 8010508:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	3b20      	subs	r3, #32
 801050e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	2200      	movs	r2, #0
 8010514:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	2200      	movs	r2, #0
 801051a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 801051c:	69fb      	ldr	r3, [r7, #28]
 801051e:	887a      	ldrh	r2, [r7, #2]
 8010520:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d103      	bne.n	8010532 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	69fa      	ldr	r2, [r7, #28]
 801052e:	601a      	str	r2, [r3, #0]
 8010530:	e003      	b.n	801053a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	69fa      	ldr	r2, [r7, #28]
 8010538:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	69fa      	ldr	r2, [r7, #28]
 801053e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	61fb      	str	r3, [r7, #28]
 8010546:	e009      	b.n	801055c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	891a      	ldrh	r2, [r3, #8]
 801054c:	887b      	ldrh	r3, [r7, #2]
 801054e:	4413      	add	r3, r2
 8010550:	b29a      	uxth	r2, r3
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	61fb      	str	r3, [r7, #28]
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1f2      	bne.n	8010548 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8010562:	887b      	ldrh	r3, [r7, #2]
 8010564:	4619      	mov	r1, r3
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f7ff fb18 	bl	800fb9c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801056c:	bf00      	nop
 801056e:	3720      	adds	r7, #32
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f008 fd1f 	bl	8018fc0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8010582:	bf00      	nop
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
	...

0801058c <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8010594:	4b15      	ldr	r3, [pc, #84]	@ (80105ec <RMII_Thread+0x60>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801059c:	2b00      	cmp	r3, #0
 801059e:	d003      	beq.n	80105a8 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80105a0:	2000      	movs	r0, #0
 80105a2:	f002 fb51 	bl	8012c48 <osThreadTerminate>
 80105a6:	e7f5      	b.n	8010594 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80105a8:	4b10      	ldr	r3, [pc, #64]	@ (80105ec <RMII_Thread+0x60>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80105b0:	2b0a      	cmp	r3, #10
 80105b2:	d916      	bls.n	80105e2 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80105b4:	4b0e      	ldr	r3, [pc, #56]	@ (80105f0 <RMII_Thread+0x64>)
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	4a0d      	ldr	r2, [pc, #52]	@ (80105f0 <RMII_Thread+0x64>)
 80105ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80105be:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80105c0:	4b0b      	ldr	r3, [pc, #44]	@ (80105f0 <RMII_Thread+0x64>)
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	4a0a      	ldr	r2, [pc, #40]	@ (80105f0 <RMII_Thread+0x64>)
 80105c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80105ca:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80105cc:	4b07      	ldr	r3, [pc, #28]	@ (80105ec <RMII_Thread+0x60>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80105d4:	4b05      	ldr	r3, [pc, #20]	@ (80105ec <RMII_Thread+0x60>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f042 0201 	orr.w	r2, r2, #1
 80105dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80105e0:	e7d8      	b.n	8010594 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80105e2:	20c8      	movs	r0, #200	@ 0xc8
 80105e4:	f002 fb3c 	bl	8012c60 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80105e8:	e7d4      	b.n	8010594 <RMII_Thread+0x8>
 80105ea:	bf00      	nop
 80105ec:	20005904 	.word	0x20005904
 80105f0:	40013800 	.word	0x40013800

080105f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80105f4:	b590      	push	{r4, r7, lr}
 80105f6:	b089      	sub	sp, #36	@ 0x24
 80105f8:	af04      	add	r7, sp, #16
 80105fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80105fc:	2301      	movs	r3, #1
 80105fe:	2202      	movs	r2, #2
 8010600:	2102      	movs	r1, #2
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 fcd7 	bl	8010fb6 <USBH_FindInterface>
 8010608:	4603      	mov	r3, r0
 801060a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801060c:	7bfb      	ldrb	r3, [r7, #15]
 801060e:	2bff      	cmp	r3, #255	@ 0xff
 8010610:	d002      	beq.n	8010618 <USBH_CDC_InterfaceInit+0x24>
 8010612:	7bfb      	ldrb	r3, [r7, #15]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d901      	bls.n	801061c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010618:	2302      	movs	r3, #2
 801061a:	e13d      	b.n	8010898 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 801061c:	7bfb      	ldrb	r3, [r7, #15]
 801061e:	4619      	mov	r1, r3
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 fcac 	bl	8010f7e <USBH_SelectInterface>
 8010626:	4603      	mov	r3, r0
 8010628:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801062a:	7bbb      	ldrb	r3, [r7, #14]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d001      	beq.n	8010634 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8010630:	2302      	movs	r3, #2
 8010632:	e131      	b.n	8010898 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 801063a:	2050      	movs	r0, #80	@ 0x50
 801063c:	f012 fdd2 	bl	80231e4 <malloc>
 8010640:	4603      	mov	r3, r0
 8010642:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801064a:	69db      	ldr	r3, [r3, #28]
 801064c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d101      	bne.n	8010658 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8010654:	2302      	movs	r3, #2
 8010656:	e11f      	b.n	8010898 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8010658:	2250      	movs	r2, #80	@ 0x50
 801065a:	2100      	movs	r1, #0
 801065c:	68b8      	ldr	r0, [r7, #8]
 801065e:	f013 f8b6 	bl	80237ce <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8010662:	7bfb      	ldrb	r3, [r7, #15]
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	211a      	movs	r1, #26
 8010668:	fb01 f303 	mul.w	r3, r1, r3
 801066c:	4413      	add	r3, r2
 801066e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	b25b      	sxtb	r3, r3
 8010676:	2b00      	cmp	r3, #0
 8010678:	da15      	bge.n	80106a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801067a:	7bfb      	ldrb	r3, [r7, #15]
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	211a      	movs	r1, #26
 8010680:	fb01 f303 	mul.w	r3, r1, r3
 8010684:	4413      	add	r3, r2
 8010686:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801068a:	781a      	ldrb	r2, [r3, #0]
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010690:	7bfb      	ldrb	r3, [r7, #15]
 8010692:	687a      	ldr	r2, [r7, #4]
 8010694:	211a      	movs	r1, #26
 8010696:	fb01 f303 	mul.w	r3, r1, r3
 801069a:	4413      	add	r3, r2
 801069c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80106a0:	881a      	ldrh	r2, [r3, #0]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	785b      	ldrb	r3, [r3, #1]
 80106aa:	4619      	mov	r1, r3
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f002 f974 	bl	801299a <USBH_AllocPipe>
 80106b2:	4603      	mov	r3, r0
 80106b4:	461a      	mov	r2, r3
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	7819      	ldrb	r1, [r3, #0]
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	7858      	ldrb	r0, [r3, #1]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	8952      	ldrh	r2, [r2, #10]
 80106d2:	9202      	str	r2, [sp, #8]
 80106d4:	2203      	movs	r2, #3
 80106d6:	9201      	str	r2, [sp, #4]
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	4623      	mov	r3, r4
 80106dc:	4602      	mov	r2, r0
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f002 f92c 	bl	801293c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2200      	movs	r2, #0
 80106ea:	4619      	mov	r1, r3
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f012 fcf1 	bl	80230d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80106f2:	2300      	movs	r3, #0
 80106f4:	2200      	movs	r2, #0
 80106f6:	210a      	movs	r1, #10
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 fc5c 	bl	8010fb6 <USBH_FindInterface>
 80106fe:	4603      	mov	r3, r0
 8010700:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010702:	7bfb      	ldrb	r3, [r7, #15]
 8010704:	2bff      	cmp	r3, #255	@ 0xff
 8010706:	d002      	beq.n	801070e <USBH_CDC_InterfaceInit+0x11a>
 8010708:	7bfb      	ldrb	r3, [r7, #15]
 801070a:	2b01      	cmp	r3, #1
 801070c:	d901      	bls.n	8010712 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801070e:	2302      	movs	r3, #2
 8010710:	e0c2      	b.n	8010898 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8010712:	7bfb      	ldrb	r3, [r7, #15]
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	211a      	movs	r1, #26
 8010718:	fb01 f303 	mul.w	r3, r1, r3
 801071c:	4413      	add	r3, r2
 801071e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	b25b      	sxtb	r3, r3
 8010726:	2b00      	cmp	r3, #0
 8010728:	da16      	bge.n	8010758 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	211a      	movs	r1, #26
 8010730:	fb01 f303 	mul.w	r3, r1, r3
 8010734:	4413      	add	r3, r2
 8010736:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801073a:	781a      	ldrb	r2, [r3, #0]
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	211a      	movs	r1, #26
 8010746:	fb01 f303 	mul.w	r3, r1, r3
 801074a:	4413      	add	r3, r2
 801074c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8010750:	881a      	ldrh	r2, [r3, #0]
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	835a      	strh	r2, [r3, #26]
 8010756:	e015      	b.n	8010784 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010758:	7bfb      	ldrb	r3, [r7, #15]
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	211a      	movs	r1, #26
 801075e:	fb01 f303 	mul.w	r3, r1, r3
 8010762:	4413      	add	r3, r2
 8010764:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010768:	781a      	ldrb	r2, [r3, #0]
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801076e:	7bfb      	ldrb	r3, [r7, #15]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	211a      	movs	r1, #26
 8010774:	fb01 f303 	mul.w	r3, r1, r3
 8010778:	4413      	add	r3, r2
 801077a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 801077e:	881a      	ldrh	r2, [r3, #0]
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8010784:	7bfb      	ldrb	r3, [r7, #15]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	211a      	movs	r1, #26
 801078a:	fb01 f303 	mul.w	r3, r1, r3
 801078e:	4413      	add	r3, r2
 8010790:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	b25b      	sxtb	r3, r3
 8010798:	2b00      	cmp	r3, #0
 801079a:	da16      	bge.n	80107ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801079c:	7bfb      	ldrb	r3, [r7, #15]
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	211a      	movs	r1, #26
 80107a2:	fb01 f303 	mul.w	r3, r1, r3
 80107a6:	4413      	add	r3, r2
 80107a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80107ac:	781a      	ldrb	r2, [r3, #0]
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80107b2:	7bfb      	ldrb	r3, [r7, #15]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	211a      	movs	r1, #26
 80107b8:	fb01 f303 	mul.w	r3, r1, r3
 80107bc:	4413      	add	r3, r2
 80107be:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80107c2:	881a      	ldrh	r2, [r3, #0]
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	835a      	strh	r2, [r3, #26]
 80107c8:	e015      	b.n	80107f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80107ca:	7bfb      	ldrb	r3, [r7, #15]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	211a      	movs	r1, #26
 80107d0:	fb01 f303 	mul.w	r3, r1, r3
 80107d4:	4413      	add	r3, r2
 80107d6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80107da:	781a      	ldrb	r2, [r3, #0]
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80107e0:	7bfb      	ldrb	r3, [r7, #15]
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	211a      	movs	r1, #26
 80107e6:	fb01 f303 	mul.w	r3, r1, r3
 80107ea:	4413      	add	r3, r2
 80107ec:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80107f0:	881a      	ldrh	r2, [r3, #0]
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	7b9b      	ldrb	r3, [r3, #14]
 80107fa:	4619      	mov	r1, r3
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f002 f8cc 	bl	801299a <USBH_AllocPipe>
 8010802:	4603      	mov	r3, r0
 8010804:	461a      	mov	r2, r3
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	7bdb      	ldrb	r3, [r3, #15]
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f002 f8c2 	bl	801299a <USBH_AllocPipe>
 8010816:	4603      	mov	r3, r0
 8010818:	461a      	mov	r2, r3
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	7b59      	ldrb	r1, [r3, #13]
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	7b98      	ldrb	r0, [r3, #14]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010832:	68ba      	ldr	r2, [r7, #8]
 8010834:	8b12      	ldrh	r2, [r2, #24]
 8010836:	9202      	str	r2, [sp, #8]
 8010838:	2202      	movs	r2, #2
 801083a:	9201      	str	r2, [sp, #4]
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	4623      	mov	r3, r4
 8010840:	4602      	mov	r2, r0
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f002 f87a 	bl	801293c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	7b19      	ldrb	r1, [r3, #12]
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	7bd8      	ldrb	r0, [r3, #15]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	8b52      	ldrh	r2, [r2, #26]
 8010860:	9202      	str	r2, [sp, #8]
 8010862:	2202      	movs	r2, #2
 8010864:	9201      	str	r2, [sp, #4]
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	4623      	mov	r3, r4
 801086a:	4602      	mov	r2, r0
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f002 f865 	bl	801293c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	2200      	movs	r2, #0
 8010876:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	7b5b      	ldrb	r3, [r3, #13]
 801087e:	2200      	movs	r2, #0
 8010880:	4619      	mov	r1, r3
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f012 fc26 	bl	80230d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	7b1b      	ldrb	r3, [r3, #12]
 801088c:	2200      	movs	r2, #0
 801088e:	4619      	mov	r1, r3
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f012 fc1f 	bl	80230d4 <USBH_LL_SetToggle>

  return USBH_OK;
 8010896:	2300      	movs	r3, #0
}
 8010898:	4618      	mov	r0, r3
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	bd90      	pop	{r4, r7, pc}

080108a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80108ae:	69db      	ldr	r3, [r3, #28]
 80108b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d00e      	beq.n	80108d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	4619      	mov	r1, r3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f002 f85a 	bl	801297a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	4619      	mov	r1, r3
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f002 f885 	bl	80129dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2200      	movs	r2, #0
 80108d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	7b1b      	ldrb	r3, [r3, #12]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d00e      	beq.n	80108fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	7b1b      	ldrb	r3, [r3, #12]
 80108e4:	4619      	mov	r1, r3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f002 f847 	bl	801297a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	7b1b      	ldrb	r3, [r3, #12]
 80108f0:	4619      	mov	r1, r3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f002 f872 	bl	80129dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	7b5b      	ldrb	r3, [r3, #13]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00e      	beq.n	8010924 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	7b5b      	ldrb	r3, [r3, #13]
 801090a:	4619      	mov	r1, r3
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f002 f834 	bl	801297a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	7b5b      	ldrb	r3, [r3, #13]
 8010916:	4619      	mov	r1, r3
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f002 f85f 	bl	80129dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2200      	movs	r2, #0
 8010922:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801092a:	69db      	ldr	r3, [r3, #28]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d00b      	beq.n	8010948 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010936:	69db      	ldr	r3, [r3, #28]
 8010938:	4618      	mov	r0, r3
 801093a:	f012 fc5b 	bl	80231f4 <free>
    phost->pActiveClass->pData = 0U;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010944:	2200      	movs	r2, #0
 8010946:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b084      	sub	sp, #16
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010960:	69db      	ldr	r3, [r3, #28]
 8010962:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	3340      	adds	r3, #64	@ 0x40
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 f8b1 	bl	8010ad2 <GetLineCoding>
 8010970:	4603      	mov	r3, r0
 8010972:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8010974:	7afb      	ldrb	r3, [r7, #11]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d105      	bne.n	8010986 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010980:	2102      	movs	r1, #2
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8010986:	7afb      	ldrb	r3, [r7, #11]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010998:	2301      	movs	r3, #1
 801099a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 801099c:	2300      	movs	r3, #0
 801099e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80109a6:	69db      	ldr	r3, [r3, #28]
 80109a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80109b0:	2b04      	cmp	r3, #4
 80109b2:	d877      	bhi.n	8010aa4 <USBH_CDC_Process+0x114>
 80109b4:	a201      	add	r2, pc, #4	@ (adr r2, 80109bc <USBH_CDC_Process+0x2c>)
 80109b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ba:	bf00      	nop
 80109bc:	080109d1 	.word	0x080109d1
 80109c0:	080109d7 	.word	0x080109d7
 80109c4:	08010a07 	.word	0x08010a07
 80109c8:	08010a7b 	.word	0x08010a7b
 80109cc:	08010a89 	.word	0x08010a89
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	73fb      	strb	r3, [r7, #15]
      break;
 80109d4:	e06d      	b.n	8010ab2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 f897 	bl	8010b10 <SetLineCoding>
 80109e2:	4603      	mov	r3, r0
 80109e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80109e6:	7bbb      	ldrb	r3, [r7, #14]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d104      	bne.n	80109f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2202      	movs	r2, #2
 80109f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80109f4:	e058      	b.n	8010aa8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80109f6:	7bbb      	ldrb	r3, [r7, #14]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d055      	beq.n	8010aa8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	2204      	movs	r2, #4
 8010a00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8010a04:	e050      	b.n	8010aa8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	3340      	adds	r3, #64	@ 0x40
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f000 f860 	bl	8010ad2 <GetLineCoding>
 8010a12:	4603      	mov	r3, r0
 8010a14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010a16:	7bbb      	ldrb	r3, [r7, #14]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d126      	bne.n	8010a6a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a2e:	791b      	ldrb	r3, [r3, #4]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d13b      	bne.n	8010aac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a3e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d133      	bne.n	8010aac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a4e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d12b      	bne.n	8010aac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a5c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d124      	bne.n	8010aac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 f982 	bl	8010d6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010a68:	e020      	b.n	8010aac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010a6a:	7bbb      	ldrb	r3, [r7, #14]
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	d01d      	beq.n	8010aac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	2204      	movs	r2, #4
 8010a74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8010a78:	e018      	b.n	8010aac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 f867 	bl	8010b4e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 f8f6 	bl	8010c72 <CDC_ProcessReception>
      break;
 8010a86:	e014      	b.n	8010ab2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010a88:	2100      	movs	r1, #0
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f001 f975 	bl	8011d7a <USBH_ClrFeature>
 8010a90:	4603      	mov	r3, r0
 8010a92:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010a94:	7bbb      	ldrb	r3, [r7, #14]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d10a      	bne.n	8010ab0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8010aa2:	e005      	b.n	8010ab0 <USBH_CDC_Process+0x120>

    default:
      break;
 8010aa4:	bf00      	nop
 8010aa6:	e004      	b.n	8010ab2 <USBH_CDC_Process+0x122>
      break;
 8010aa8:	bf00      	nop
 8010aaa:	e002      	b.n	8010ab2 <USBH_CDC_Process+0x122>
      break;
 8010aac:	bf00      	nop
 8010aae:	e000      	b.n	8010ab2 <USBH_CDC_Process+0x122>
      break;
 8010ab0:	bf00      	nop

  }

  return status;
 8010ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3710      	adds	r7, #16
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010ac4:	2300      	movs	r3, #0
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	370c      	adds	r7, #12
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr

08010ad2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b082      	sub	sp, #8
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
 8010ada:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	22a1      	movs	r2, #161	@ 0xa1
 8010ae0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2221      	movs	r2, #33	@ 0x21
 8010ae6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2200      	movs	r2, #0
 8010aec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2207      	movs	r2, #7
 8010af8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	2207      	movs	r2, #7
 8010afe:	4619      	mov	r1, r3
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f001 fbda 	bl	80122ba <USBH_CtlReq>
 8010b06:	4603      	mov	r3, r0
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2221      	movs	r2, #33	@ 0x21
 8010b1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2220      	movs	r2, #32
 8010b24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2207      	movs	r2, #7
 8010b36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	2207      	movs	r2, #7
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f001 fbbb 	bl	80122ba <USBH_CtlReq>
 8010b44:	4603      	mov	r3, r0
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3708      	adds	r7, #8
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b086      	sub	sp, #24
 8010b52:	af02      	add	r7, sp, #8
 8010b54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010b5c:	69db      	ldr	r3, [r3, #28]
 8010b5e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010b60:	2300      	movs	r3, #0
 8010b62:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d002      	beq.n	8010b74 <CDC_ProcessTransmission+0x26>
 8010b6e:	2b02      	cmp	r3, #2
 8010b70:	d023      	beq.n	8010bba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8010b72:	e07a      	b.n	8010c6a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	8b12      	ldrh	r2, [r2, #24]
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d90b      	bls.n	8010b98 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	69d9      	ldr	r1, [r3, #28]
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	8b1a      	ldrh	r2, [r3, #24]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	7b5b      	ldrb	r3, [r3, #13]
 8010b8c:	2001      	movs	r0, #1
 8010b8e:	9000      	str	r0, [sp, #0]
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 fe90 	bl	80128b6 <USBH_BulkSendData>
 8010b96:	e00b      	b.n	8010bb0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	7b5b      	ldrb	r3, [r3, #13]
 8010ba6:	2001      	movs	r0, #1
 8010ba8:	9000      	str	r0, [sp, #0]
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f001 fe83 	bl	80128b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2202      	movs	r2, #2
 8010bb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8010bb8:	e057      	b.n	8010c6a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	7b5b      	ldrb	r3, [r3, #13]
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f012 fa5d 	bl	8023080 <USBH_LL_GetURBState>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8010bca:	7afb      	ldrb	r3, [r7, #11]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d136      	bne.n	8010c3e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	8b12      	ldrh	r2, [r2, #24]
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d90e      	bls.n	8010bfa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	8b12      	ldrh	r2, [r2, #24]
 8010be4:	1a9a      	subs	r2, r3, r2
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	69db      	ldr	r3, [r3, #28]
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	8b12      	ldrh	r2, [r2, #24]
 8010bf2:	441a      	add	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	61da      	str	r2, [r3, #28]
 8010bf8:	e002      	b.n	8010c00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d004      	beq.n	8010c12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8010c10:	e006      	b.n	8010c20 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2200      	movs	r2, #0
 8010c16:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 f892 	bl	8010d44 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2204      	movs	r2, #4
 8010c24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010c34:	2200      	movs	r2, #0
 8010c36:	4619      	mov	r1, r3
 8010c38:	f002 f9c2 	bl	8012fc0 <osMessagePut>
      break;
 8010c3c:	e014      	b.n	8010c68 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8010c3e:	7afb      	ldrb	r3, [r7, #11]
 8010c40:	2b02      	cmp	r3, #2
 8010c42:	d111      	bne.n	8010c68 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2201      	movs	r2, #1
 8010c48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2204      	movs	r2, #4
 8010c50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010c60:	2200      	movs	r2, #0
 8010c62:	4619      	mov	r1, r3
 8010c64:	f002 f9ac 	bl	8012fc0 <osMessagePut>
      break;
 8010c68:	bf00      	nop
  }
}
 8010c6a:	bf00      	nop
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b086      	sub	sp, #24
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010c80:	69db      	ldr	r3, [r3, #28]
 8010c82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010c84:	2300      	movs	r3, #0
 8010c86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8010c8e:	2b03      	cmp	r3, #3
 8010c90:	d002      	beq.n	8010c98 <CDC_ProcessReception+0x26>
 8010c92:	2b04      	cmp	r3, #4
 8010c94:	d00e      	beq.n	8010cb4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8010c96:	e051      	b.n	8010d3c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	6a19      	ldr	r1, [r3, #32]
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	8b5a      	ldrh	r2, [r3, #26]
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	7b1b      	ldrb	r3, [r3, #12]
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f001 fe2b 	bl	8012900 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	2204      	movs	r2, #4
 8010cae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8010cb2:	e043      	b.n	8010d3c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	7b1b      	ldrb	r3, [r3, #12]
 8010cb8:	4619      	mov	r1, r3
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f012 f9e0 	bl	8023080 <USBH_LL_GetURBState>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010cc4:	7cfb      	ldrb	r3, [r7, #19]
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d137      	bne.n	8010d3a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	7b1b      	ldrb	r3, [r3, #12]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f012 f943 	bl	8022f5c <USBH_LL_GetLastXferSize>
 8010cd6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cdc:	68fa      	ldr	r2, [r7, #12]
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d016      	beq.n	8010d10 <CDC_ProcessReception+0x9e>
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	8b5b      	ldrh	r3, [r3, #26]
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d910      	bls.n	8010d10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	1ad2      	subs	r2, r2, r3
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	6a1a      	ldr	r2, [r3, #32]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	441a      	add	r2, r3
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2203      	movs	r2, #3
 8010d0a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8010d0e:	e006      	b.n	8010d1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f81d 	bl	8010d58 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2204      	movs	r2, #4
 8010d22:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010d32:	2200      	movs	r2, #0
 8010d34:	4619      	mov	r1, r3
 8010d36:	f002 f943 	bl	8012fc0 <osMessagePut>
      break;
 8010d3a:	bf00      	nop
  }
}
 8010d3c:	bf00      	nop
 8010d3e:	3718      	adds	r7, #24
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010d4c:	bf00      	nop
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010d60:	bf00      	nop
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010d74:	bf00      	nop
 8010d76:	370c      	adds	r7, #12
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010d80:	b5b0      	push	{r4, r5, r7, lr}
 8010d82:	b090      	sub	sp, #64	@ 0x40
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010d94:	2302      	movs	r3, #2
 8010d96:	e04d      	b.n	8010e34 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	79fa      	ldrb	r2, [r7, #7]
 8010d9c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2200      	movs	r2, #0
 8010da4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2200      	movs	r2, #0
 8010dac:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010db0:	68f8      	ldr	r0, [r7, #12]
 8010db2:	f000 f847 	bl	8010e44 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2200      	movs	r2, #0
 8010dba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d003      	beq.n	8010de4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	68ba      	ldr	r2, [r7, #8]
 8010de0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8010de4:	4b15      	ldr	r3, [pc, #84]	@ (8010e3c <USBH_Init+0xbc>)
 8010de6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8010dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8010df0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010df4:	2100      	movs	r1, #0
 8010df6:	4618      	mov	r0, r3
 8010df8:	f002 f8b9 	bl	8012f6e <osMessageCreate>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8010e04:	4b0e      	ldr	r3, [pc, #56]	@ (8010e40 <USBH_Init+0xc0>)
 8010e06:	f107 0414 	add.w	r4, r7, #20
 8010e0a:	461d      	mov	r5, r3
 8010e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010e14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8010e18:	f107 0314 	add.w	r3, r7, #20
 8010e1c:	68f9      	ldr	r1, [r7, #12]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f001 fec6 	bl	8012bb0 <osThreadCreate>
 8010e24:	4602      	mov	r2, r0
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010e2c:	68f8      	ldr	r0, [r7, #12]
 8010e2e:	f011 ffe1 	bl	8022df4 <USBH_LL_Init>

  return USBH_OK;
 8010e32:	2300      	movs	r3, #0
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3740      	adds	r7, #64	@ 0x40
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8010e3c:	08024b98 	.word	0x08024b98
 8010e40:	08024bb4 	.word	0x08024bb4

08010e44 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010e50:	2300      	movs	r3, #0
 8010e52:	60fb      	str	r3, [r7, #12]
 8010e54:	e009      	b.n	8010e6a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	33e0      	adds	r3, #224	@ 0xe0
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	4413      	add	r3, r2
 8010e60:	2200      	movs	r2, #0
 8010e62:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	3301      	adds	r3, #1
 8010e68:	60fb      	str	r3, [r7, #12]
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2b0f      	cmp	r3, #15
 8010e6e:	d9f2      	bls.n	8010e56 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010e70:	2300      	movs	r3, #0
 8010e72:	60fb      	str	r3, [r7, #12]
 8010e74:	e009      	b.n	8010e8a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010e80:	2200      	movs	r2, #0
 8010e82:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	3301      	adds	r3, #1
 8010e88:	60fb      	str	r3, [r7, #12]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e90:	d3f1      	bcc.n	8010e76 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2240      	movs	r2, #64	@ 0x40
 8010eb6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2201      	movs	r2, #1
 8010eca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	331c      	adds	r3, #28
 8010ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f012 fc70 	bl	80237ce <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ef8:	2100      	movs	r1, #0
 8010efa:	4618      	mov	r0, r3
 8010efc:	f012 fc67 	bl	80237ce <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010f06:	2212      	movs	r2, #18
 8010f08:	2100      	movs	r1, #0
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f012 fc5f 	bl	80237ce <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010f16:	223e      	movs	r2, #62	@ 0x3e
 8010f18:	2100      	movs	r1, #0
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f012 fc57 	bl	80237ce <memset>

  return USBH_OK;
 8010f20:	2300      	movs	r3, #0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010f2a:	b480      	push	{r7}
 8010f2c:	b085      	sub	sp, #20
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
 8010f32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010f34:	2300      	movs	r3, #0
 8010f36:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d016      	beq.n	8010f6c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d10e      	bne.n	8010f66 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010f4e:	1c59      	adds	r1, r3, #1
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	33de      	adds	r3, #222	@ 0xde
 8010f5a:	6839      	ldr	r1, [r7, #0]
 8010f5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010f60:	2300      	movs	r3, #0
 8010f62:	73fb      	strb	r3, [r7, #15]
 8010f64:	e004      	b.n	8010f70 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010f66:	2302      	movs	r3, #2
 8010f68:	73fb      	strb	r3, [r7, #15]
 8010f6a:	e001      	b.n	8010f70 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3714      	adds	r7, #20
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr

08010f7e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010f7e:	b480      	push	{r7}
 8010f80:	b085      	sub	sp, #20
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
 8010f86:	460b      	mov	r3, r1
 8010f88:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8010f94:	78fa      	ldrb	r2, [r7, #3]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d204      	bcs.n	8010fa4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	78fa      	ldrb	r2, [r7, #3]
 8010f9e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8010fa2:	e001      	b.n	8010fa8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3714      	adds	r7, #20
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb4:	4770      	bx	lr

08010fb6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010fb6:	b480      	push	{r7}
 8010fb8:	b087      	sub	sp, #28
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
 8010fbe:	4608      	mov	r0, r1
 8010fc0:	4611      	mov	r1, r2
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	70fb      	strb	r3, [r7, #3]
 8010fc8:	460b      	mov	r3, r1
 8010fca:	70bb      	strb	r3, [r7, #2]
 8010fcc:	4613      	mov	r3, r2
 8010fce:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010fde:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010fe0:	e025      	b.n	801102e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010fe2:	7dfb      	ldrb	r3, [r7, #23]
 8010fe4:	221a      	movs	r2, #26
 8010fe6:	fb02 f303 	mul.w	r3, r2, r3
 8010fea:	3308      	adds	r3, #8
 8010fec:	68fa      	ldr	r2, [r7, #12]
 8010fee:	4413      	add	r3, r2
 8010ff0:	3302      	adds	r3, #2
 8010ff2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	795b      	ldrb	r3, [r3, #5]
 8010ff8:	78fa      	ldrb	r2, [r7, #3]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d002      	beq.n	8011004 <USBH_FindInterface+0x4e>
 8010ffe:	78fb      	ldrb	r3, [r7, #3]
 8011000:	2bff      	cmp	r3, #255	@ 0xff
 8011002:	d111      	bne.n	8011028 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011008:	78ba      	ldrb	r2, [r7, #2]
 801100a:	429a      	cmp	r2, r3
 801100c:	d002      	beq.n	8011014 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801100e:	78bb      	ldrb	r3, [r7, #2]
 8011010:	2bff      	cmp	r3, #255	@ 0xff
 8011012:	d109      	bne.n	8011028 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011018:	787a      	ldrb	r2, [r7, #1]
 801101a:	429a      	cmp	r2, r3
 801101c:	d002      	beq.n	8011024 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801101e:	787b      	ldrb	r3, [r7, #1]
 8011020:	2bff      	cmp	r3, #255	@ 0xff
 8011022:	d101      	bne.n	8011028 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8011024:	7dfb      	ldrb	r3, [r7, #23]
 8011026:	e006      	b.n	8011036 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8011028:	7dfb      	ldrb	r3, [r7, #23]
 801102a:	3301      	adds	r3, #1
 801102c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801102e:	7dfb      	ldrb	r3, [r7, #23]
 8011030:	2b01      	cmp	r3, #1
 8011032:	d9d6      	bls.n	8010fe2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8011034:	23ff      	movs	r3, #255	@ 0xff
}
 8011036:	4618      	mov	r0, r3
 8011038:	371c      	adds	r7, #28
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr

08011042 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8011042:	b580      	push	{r7, lr}
 8011044:	b082      	sub	sp, #8
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f011 ff0e 	bl	8022e6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8011050:	2101      	movs	r1, #1
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f012 f827 	bl	80230a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8011058:	2300      	movs	r3, #0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3708      	adds	r7, #8
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
	...

08011064 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b088      	sub	sp, #32
 8011068:	af04      	add	r7, sp, #16
 801106a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801106c:	2302      	movs	r3, #2
 801106e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8011070:	2300      	movs	r3, #0
 8011072:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 801107a:	b2db      	uxtb	r3, r3
 801107c:	2b01      	cmp	r3, #1
 801107e:	d102      	bne.n	8011086 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2203      	movs	r2, #3
 8011084:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	b2db      	uxtb	r3, r3
 801108c:	2b0b      	cmp	r3, #11
 801108e:	f200 8244 	bhi.w	801151a <USBH_Process+0x4b6>
 8011092:	a201      	add	r2, pc, #4	@ (adr r2, 8011098 <USBH_Process+0x34>)
 8011094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011098:	080110c9 	.word	0x080110c9
 801109c:	08011117 	.word	0x08011117
 80110a0:	0801119b 	.word	0x0801119b
 80110a4:	08011499 	.word	0x08011499
 80110a8:	0801151b 	.word	0x0801151b
 80110ac:	08011257 	.word	0x08011257
 80110b0:	08011423 	.word	0x08011423
 80110b4:	080112a9 	.word	0x080112a9
 80110b8:	080112e5 	.word	0x080112e5
 80110bc:	0801131d 	.word	0x0801131d
 80110c0:	0801137b 	.word	0x0801137b
 80110c4:	08011481 	.word	0x08011481
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	f000 8224 	beq.w	801151e <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2201      	movs	r2, #1
 80110da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80110dc:	20c8      	movs	r0, #200	@ 0xc8
 80110de:	f012 f829 	bl	8023134 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f011 ff1f 	bl	8022f26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2200      	movs	r2, #0
 80110f4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2201      	movs	r2, #1
 80110fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801110c:	2200      	movs	r2, #0
 801110e:	4619      	mov	r1, r3
 8011110:	f001 ff56 	bl	8012fc0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011114:	e203      	b.n	801151e <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 801111c:	2b01      	cmp	r3, #1
 801111e:	d107      	bne.n	8011130 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2202      	movs	r2, #2
 801112c:	701a      	strb	r2, [r3, #0]
 801112e:	e025      	b.n	801117c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8011136:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801113a:	d914      	bls.n	8011166 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8011142:	3301      	adds	r3, #1
 8011144:	b2da      	uxtb	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8011152:	2b03      	cmp	r3, #3
 8011154:	d903      	bls.n	801115e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	220d      	movs	r2, #13
 801115a:	701a      	strb	r2, [r3, #0]
 801115c:	e00e      	b.n	801117c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2200      	movs	r2, #0
 8011162:	701a      	strb	r2, [r3, #0]
 8011164:	e00a      	b.n	801117c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 801116c:	f103 020a 	add.w	r2, r3, #10
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8011176:	200a      	movs	r0, #10
 8011178:	f011 ffdc 	bl	8023134 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2201      	movs	r2, #1
 8011180:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011190:	2200      	movs	r2, #0
 8011192:	4619      	mov	r1, r3
 8011194:	f001 ff14 	bl	8012fc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011198:	e1c8      	b.n	801152c <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d005      	beq.n	80111b0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80111aa:	2104      	movs	r1, #4
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80111b0:	2064      	movs	r0, #100	@ 0x64
 80111b2:	f011 ffbf 	bl	8023134 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f011 fe8e 	bl	8022ed8 <USBH_LL_GetSpeed>
 80111bc:	4603      	mov	r3, r0
 80111be:	461a      	mov	r2, r3
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2205      	movs	r2, #5
 80111ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80111cc:	2100      	movs	r1, #0
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f001 fbe3 	bl	801299a <USBH_AllocPipe>
 80111d4:	4603      	mov	r3, r0
 80111d6:	461a      	mov	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80111dc:	2180      	movs	r1, #128	@ 0x80
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f001 fbdb 	bl	801299a <USBH_AllocPipe>
 80111e4:	4603      	mov	r3, r0
 80111e6:	461a      	mov	r2, r3
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	7919      	ldrb	r1, [r3, #4]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011200:	9202      	str	r2, [sp, #8]
 8011202:	2200      	movs	r2, #0
 8011204:	9201      	str	r2, [sp, #4]
 8011206:	9300      	str	r3, [sp, #0]
 8011208:	4603      	mov	r3, r0
 801120a:	2280      	movs	r2, #128	@ 0x80
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f001 fb95 	bl	801293c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	7959      	ldrb	r1, [r3, #5]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8011226:	9202      	str	r2, [sp, #8]
 8011228:	2200      	movs	r2, #0
 801122a:	9201      	str	r2, [sp, #4]
 801122c:	9300      	str	r3, [sp, #0]
 801122e:	4603      	mov	r3, r0
 8011230:	2200      	movs	r2, #0
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f001 fb82 	bl	801293c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2201      	movs	r2, #1
 801123c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801124c:	2200      	movs	r2, #0
 801124e:	4619      	mov	r1, r3
 8011250:	f001 feb6 	bl	8012fc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011254:	e16a      	b.n	801152c <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 f96e 	bl	8011538 <USBH_HandleEnum>
 801125c:	4603      	mov	r3, r0
 801125e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8011260:	7bbb      	ldrb	r3, [r7, #14]
 8011262:	b2db      	uxtb	r3, r3
 8011264:	2b00      	cmp	r3, #0
 8011266:	f040 815c 	bne.w	8011522 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8011278:	2b01      	cmp	r3, #1
 801127a:	d103      	bne.n	8011284 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2208      	movs	r2, #8
 8011280:	701a      	strb	r2, [r3, #0]
 8011282:	e002      	b.n	801128a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2207      	movs	r2, #7
 8011288:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2205      	movs	r2, #5
 801128e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801129e:	2200      	movs	r2, #0
 80112a0:	4619      	mov	r1, r3
 80112a2:	f001 fe8d 	bl	8012fc0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80112a6:	e13c      	b.n	8011522 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f000 8139 	beq.w	8011526 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80112ba:	2101      	movs	r1, #1
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2208      	movs	r2, #8
 80112c4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2205      	movs	r2, #5
 80112ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80112da:	2200      	movs	r2, #0
 80112dc:	4619      	mov	r1, r3
 80112de:	f001 fe6f 	bl	8012fc0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80112e2:	e120      	b.n	8011526 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80112ea:	4619      	mov	r1, r3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fcfd 	bl	8011cec <USBH_SetCfg>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d102      	bne.n	80112fe <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2209      	movs	r2, #9
 80112fc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2201      	movs	r2, #1
 8011302:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011312:	2200      	movs	r2, #0
 8011314:	4619      	mov	r1, r3
 8011316:	f001 fe53 	bl	8012fc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801131a:	e107      	b.n	801152c <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8011322:	f003 0320 	and.w	r3, r3, #32
 8011326:	2b00      	cmp	r3, #0
 8011328:	d015      	beq.n	8011356 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801132a:	2101      	movs	r1, #1
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f000 fd00 	bl	8011d32 <USBH_SetFeature>
 8011332:	4603      	mov	r3, r0
 8011334:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8011336:	7bbb      	ldrb	r3, [r7, #14]
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d103      	bne.n	8011346 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	220a      	movs	r2, #10
 8011342:	701a      	strb	r2, [r3, #0]
 8011344:	e00a      	b.n	801135c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8011346:	7bbb      	ldrb	r3, [r7, #14]
 8011348:	b2db      	uxtb	r3, r3
 801134a:	2b03      	cmp	r3, #3
 801134c:	d106      	bne.n	801135c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	220a      	movs	r2, #10
 8011352:	701a      	strb	r2, [r3, #0]
 8011354:	e002      	b.n	801135c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	220a      	movs	r2, #10
 801135a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2201      	movs	r2, #1
 8011360:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011370:	2200      	movs	r2, #0
 8011372:	4619      	mov	r1, r3
 8011374:	f001 fe24 	bl	8012fc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011378:	e0d8      	b.n	801152c <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8011380:	2b00      	cmp	r3, #0
 8011382:	d03f      	beq.n	8011404 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801138c:	2300      	movs	r3, #0
 801138e:	73fb      	strb	r3, [r7, #15]
 8011390:	e016      	b.n	80113c0 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8011392:	7bfa      	ldrb	r2, [r7, #15]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	32de      	adds	r2, #222	@ 0xde
 8011398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801139c:	791a      	ldrb	r2, [r3, #4]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d108      	bne.n	80113ba <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80113a8:	7bfa      	ldrb	r2, [r7, #15]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	32de      	adds	r2, #222	@ 0xde
 80113ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80113b8:	e005      	b.n	80113c6 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80113ba:	7bfb      	ldrb	r3, [r7, #15]
 80113bc:	3301      	adds	r3, #1
 80113be:	73fb      	strb	r3, [r7, #15]
 80113c0:	7bfb      	ldrb	r3, [r7, #15]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0e5      	beq.n	8011392 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d016      	beq.n	80113fe <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	4798      	blx	r3
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d109      	bne.n	80113f6 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2206      	movs	r2, #6
 80113e6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80113ee:	2103      	movs	r1, #3
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	4798      	blx	r3
 80113f4:	e006      	b.n	8011404 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	220d      	movs	r2, #13
 80113fa:	701a      	strb	r2, [r3, #0]
 80113fc:	e002      	b.n	8011404 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	220d      	movs	r2, #13
 8011402:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2205      	movs	r2, #5
 8011408:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011418:	2200      	movs	r2, #0
 801141a:	4619      	mov	r1, r3
 801141c:	f001 fdd0 	bl	8012fc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011420:	e084      	b.n	801152c <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011428:	2b00      	cmp	r3, #0
 801142a:	d017      	beq.n	801145c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011432:	691b      	ldr	r3, [r3, #16]
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	4798      	blx	r3
 8011438:	4603      	mov	r3, r0
 801143a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801143c:	7bbb      	ldrb	r3, [r7, #14]
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	d103      	bne.n	801144c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	220b      	movs	r2, #11
 8011448:	701a      	strb	r2, [r3, #0]
 801144a:	e00a      	b.n	8011462 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 801144c:	7bbb      	ldrb	r3, [r7, #14]
 801144e:	b2db      	uxtb	r3, r3
 8011450:	2b02      	cmp	r3, #2
 8011452:	d106      	bne.n	8011462 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	220d      	movs	r2, #13
 8011458:	701a      	strb	r2, [r3, #0]
 801145a:	e002      	b.n	8011462 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	220d      	movs	r2, #13
 8011460:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2205      	movs	r2, #5
 8011466:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011476:	2200      	movs	r2, #0
 8011478:	4619      	mov	r1, r3
 801147a:	f001 fda1 	bl	8012fc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801147e:	e055      	b.n	801152c <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011486:	2b00      	cmp	r3, #0
 8011488:	d04f      	beq.n	801152a <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011490:	695b      	ldr	r3, [r3, #20]
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	4798      	blx	r3
      }
      break;
 8011496:	e048      	b.n	801152a <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7ff fccf 	bl	8010e44 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d009      	beq.n	80114c4 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d005      	beq.n	80114da <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80114d4:	2105      	movs	r1, #5
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d107      	bne.n	80114f6 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2200      	movs	r2, #0
 80114ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7ff fda7 	bl	8011042 <USBH_Start>
 80114f4:	e002      	b.n	80114fc <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f011 fcb8 	bl	8022e6c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2201      	movs	r2, #1
 8011500:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011510:	2200      	movs	r2, #0
 8011512:	4619      	mov	r1, r3
 8011514:	f001 fd54 	bl	8012fc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011518:	e008      	b.n	801152c <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 801151a:	bf00      	nop
 801151c:	e006      	b.n	801152c <USBH_Process+0x4c8>
      break;
 801151e:	bf00      	nop
 8011520:	e004      	b.n	801152c <USBH_Process+0x4c8>
      break;
 8011522:	bf00      	nop
 8011524:	e002      	b.n	801152c <USBH_Process+0x4c8>
    break;
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <USBH_Process+0x4c8>
      break;
 801152a:	bf00      	nop
  }
  return USBH_OK;
 801152c:	2300      	movs	r3, #0
}
 801152e:	4618      	mov	r0, r3
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop

08011538 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b088      	sub	sp, #32
 801153c:	af04      	add	r7, sp, #16
 801153e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8011540:	2301      	movs	r3, #1
 8011542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8011544:	2301      	movs	r3, #1
 8011546:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	785b      	ldrb	r3, [r3, #1]
 801154c:	2b07      	cmp	r3, #7
 801154e:	f200 8204 	bhi.w	801195a <USBH_HandleEnum+0x422>
 8011552:	a201      	add	r2, pc, #4	@ (adr r2, 8011558 <USBH_HandleEnum+0x20>)
 8011554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011558:	08011579 	.word	0x08011579
 801155c:	08011633 	.word	0x08011633
 8011560:	0801169d 	.word	0x0801169d
 8011564:	08011727 	.word	0x08011727
 8011568:	08011791 	.word	0x08011791
 801156c:	08011801 	.word	0x08011801
 8011570:	0801189d 	.word	0x0801189d
 8011574:	0801191b 	.word	0x0801191b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8011578:	2108      	movs	r1, #8
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f000 fae6 	bl	8011b4c <USBH_Get_DevDesc>
 8011580:	4603      	mov	r3, r0
 8011582:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011584:	7bbb      	ldrb	r3, [r7, #14]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d12e      	bne.n	80115e8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2201      	movs	r2, #1
 8011598:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	7919      	ldrb	r1, [r3, #4]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80115ae:	9202      	str	r2, [sp, #8]
 80115b0:	2200      	movs	r2, #0
 80115b2:	9201      	str	r2, [sp, #4]
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	4603      	mov	r3, r0
 80115b8:	2280      	movs	r2, #128	@ 0x80
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f001 f9be 	bl	801293c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	7959      	ldrb	r1, [r3, #5]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80115d4:	9202      	str	r2, [sp, #8]
 80115d6:	2200      	movs	r2, #0
 80115d8:	9201      	str	r2, [sp, #4]
 80115da:	9300      	str	r3, [sp, #0]
 80115dc:	4603      	mov	r3, r0
 80115de:	2200      	movs	r2, #0
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f001 f9ab 	bl	801293c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80115e6:	e1ba      	b.n	801195e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115e8:	7bbb      	ldrb	r3, [r7, #14]
 80115ea:	2b03      	cmp	r3, #3
 80115ec:	f040 81b7 	bne.w	801195e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80115f6:	3301      	adds	r3, #1
 80115f8:	b2da      	uxtb	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011606:	2b03      	cmp	r3, #3
 8011608:	d903      	bls.n	8011612 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	220d      	movs	r2, #13
 801160e:	701a      	strb	r2, [r3, #0]
      break;
 8011610:	e1a5      	b.n	801195e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	795b      	ldrb	r3, [r3, #5]
 8011616:	4619      	mov	r1, r3
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f001 f9df 	bl	80129dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	791b      	ldrb	r3, [r3, #4]
 8011622:	4619      	mov	r1, r3
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f001 f9d9 	bl	80129dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	701a      	strb	r2, [r3, #0]
      break;
 8011630:	e195      	b.n	801195e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8011632:	2112      	movs	r1, #18
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 fa89 	bl	8011b4c <USBH_Get_DevDesc>
 801163a:	4603      	mov	r3, r0
 801163c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801163e:	7bbb      	ldrb	r3, [r7, #14]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d103      	bne.n	801164c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2202      	movs	r2, #2
 8011648:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801164a:	e18a      	b.n	8011962 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801164c:	7bbb      	ldrb	r3, [r7, #14]
 801164e:	2b03      	cmp	r3, #3
 8011650:	f040 8187 	bne.w	8011962 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801165a:	3301      	adds	r3, #1
 801165c:	b2da      	uxtb	r2, r3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801166a:	2b03      	cmp	r3, #3
 801166c:	d903      	bls.n	8011676 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	220d      	movs	r2, #13
 8011672:	701a      	strb	r2, [r3, #0]
      break;
 8011674:	e175      	b.n	8011962 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	795b      	ldrb	r3, [r3, #5]
 801167a:	4619      	mov	r1, r3
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f001 f9ad 	bl	80129dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	791b      	ldrb	r3, [r3, #4]
 8011686:	4619      	mov	r1, r3
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f001 f9a7 	bl	80129dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	701a      	strb	r2, [r3, #0]
      break;
 801169a:	e162      	b.n	8011962 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 801169c:	2101      	movs	r1, #1
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 fb00 	bl	8011ca4 <USBH_SetAddress>
 80116a4:	4603      	mov	r3, r0
 80116a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80116a8:	7bbb      	ldrb	r3, [r7, #14]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d130      	bne.n	8011710 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80116ae:	2002      	movs	r0, #2
 80116b0:	f011 fd40 	bl	8023134 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2201      	movs	r2, #1
 80116b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2203      	movs	r2, #3
 80116c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	7919      	ldrb	r1, [r3, #4]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80116d6:	9202      	str	r2, [sp, #8]
 80116d8:	2200      	movs	r2, #0
 80116da:	9201      	str	r2, [sp, #4]
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	4603      	mov	r3, r0
 80116e0:	2280      	movs	r2, #128	@ 0x80
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f001 f92a 	bl	801293c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	7959      	ldrb	r1, [r3, #5]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80116fc:	9202      	str	r2, [sp, #8]
 80116fe:	2200      	movs	r2, #0
 8011700:	9201      	str	r2, [sp, #4]
 8011702:	9300      	str	r3, [sp, #0]
 8011704:	4603      	mov	r3, r0
 8011706:	2200      	movs	r2, #0
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f001 f917 	bl	801293c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801170e:	e12a      	b.n	8011966 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011710:	7bbb      	ldrb	r3, [r7, #14]
 8011712:	2b03      	cmp	r3, #3
 8011714:	f040 8127 	bne.w	8011966 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	220d      	movs	r2, #13
 801171c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	705a      	strb	r2, [r3, #1]
      break;
 8011724:	e11f      	b.n	8011966 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8011726:	2109      	movs	r1, #9
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f000 fa37 	bl	8011b9c <USBH_Get_CfgDesc>
 801172e:	4603      	mov	r3, r0
 8011730:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011732:	7bbb      	ldrb	r3, [r7, #14]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d103      	bne.n	8011740 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2204      	movs	r2, #4
 801173c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801173e:	e114      	b.n	801196a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011740:	7bbb      	ldrb	r3, [r7, #14]
 8011742:	2b03      	cmp	r3, #3
 8011744:	f040 8111 	bne.w	801196a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801174e:	3301      	adds	r3, #1
 8011750:	b2da      	uxtb	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801175e:	2b03      	cmp	r3, #3
 8011760:	d903      	bls.n	801176a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	220d      	movs	r2, #13
 8011766:	701a      	strb	r2, [r3, #0]
      break;
 8011768:	e0ff      	b.n	801196a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	795b      	ldrb	r3, [r3, #5]
 801176e:	4619      	mov	r1, r3
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f001 f933 	bl	80129dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	791b      	ldrb	r3, [r3, #4]
 801177a:	4619      	mov	r1, r3
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f001 f92d 	bl	80129dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	701a      	strb	r2, [r3, #0]
      break;
 801178e:	e0ec      	b.n	801196a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8011796:	4619      	mov	r1, r3
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f9ff 	bl	8011b9c <USBH_Get_CfgDesc>
 801179e:	4603      	mov	r3, r0
 80117a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80117a2:	7bbb      	ldrb	r3, [r7, #14]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d103      	bne.n	80117b0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2205      	movs	r2, #5
 80117ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80117ae:	e0de      	b.n	801196e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80117b0:	7bbb      	ldrb	r3, [r7, #14]
 80117b2:	2b03      	cmp	r3, #3
 80117b4:	f040 80db 	bne.w	801196e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80117be:	3301      	adds	r3, #1
 80117c0:	b2da      	uxtb	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80117ce:	2b03      	cmp	r3, #3
 80117d0:	d903      	bls.n	80117da <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	220d      	movs	r2, #13
 80117d6:	701a      	strb	r2, [r3, #0]
      break;
 80117d8:	e0c9      	b.n	801196e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	795b      	ldrb	r3, [r3, #5]
 80117de:	4619      	mov	r1, r3
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f001 f8fb 	bl	80129dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	791b      	ldrb	r3, [r3, #4]
 80117ea:	4619      	mov	r1, r3
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f001 f8f5 	bl	80129dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	701a      	strb	r2, [r3, #0]
      break;
 80117fe:	e0b6      	b.n	801196e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8011806:	2b00      	cmp	r3, #0
 8011808:	d036      	beq.n	8011878 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011816:	23ff      	movs	r3, #255	@ 0xff
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f000 f9e3 	bl	8011be4 <USBH_Get_StringDesc>
 801181e:	4603      	mov	r3, r0
 8011820:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011822:	7bbb      	ldrb	r3, [r7, #14]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d111      	bne.n	801184c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2206      	movs	r2, #6
 801182c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2205      	movs	r2, #5
 8011832:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011842:	2200      	movs	r2, #0
 8011844:	4619      	mov	r1, r3
 8011846:	f001 fbbb 	bl	8012fc0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801184a:	e092      	b.n	8011972 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801184c:	7bbb      	ldrb	r3, [r7, #14]
 801184e:	2b03      	cmp	r3, #3
 8011850:	f040 808f 	bne.w	8011972 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2206      	movs	r2, #6
 8011858:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2205      	movs	r2, #5
 801185e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801186e:	2200      	movs	r2, #0
 8011870:	4619      	mov	r1, r3
 8011872:	f001 fba5 	bl	8012fc0 <osMessagePut>
      break;
 8011876:	e07c      	b.n	8011972 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2206      	movs	r2, #6
 801187c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2205      	movs	r2, #5
 8011882:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011892:	2200      	movs	r2, #0
 8011894:	4619      	mov	r1, r3
 8011896:	f001 fb93 	bl	8012fc0 <osMessagePut>
      break;
 801189a:	e06a      	b.n	8011972 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d027      	beq.n	80118f6 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80118b2:	23ff      	movs	r3, #255	@ 0xff
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 f995 	bl	8011be4 <USBH_Get_StringDesc>
 80118ba:	4603      	mov	r3, r0
 80118bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80118be:	7bbb      	ldrb	r3, [r7, #14]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d103      	bne.n	80118cc <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2207      	movs	r2, #7
 80118c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80118ca:	e054      	b.n	8011976 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80118cc:	7bbb      	ldrb	r3, [r7, #14]
 80118ce:	2b03      	cmp	r3, #3
 80118d0:	d151      	bne.n	8011976 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2207      	movs	r2, #7
 80118d6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2205      	movs	r2, #5
 80118dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80118ec:	2200      	movs	r2, #0
 80118ee:	4619      	mov	r1, r3
 80118f0:	f001 fb66 	bl	8012fc0 <osMessagePut>
      break;
 80118f4:	e03f      	b.n	8011976 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2207      	movs	r2, #7
 80118fa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2205      	movs	r2, #5
 8011900:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011910:	2200      	movs	r2, #0
 8011912:	4619      	mov	r1, r3
 8011914:	f001 fb54 	bl	8012fc0 <osMessagePut>
      break;
 8011918:	e02d      	b.n	8011976 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8011920:	2b00      	cmp	r3, #0
 8011922:	d017      	beq.n	8011954 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8011930:	23ff      	movs	r3, #255	@ 0xff
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f000 f956 	bl	8011be4 <USBH_Get_StringDesc>
 8011938:	4603      	mov	r3, r0
 801193a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801193c:	7bbb      	ldrb	r3, [r7, #14]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d102      	bne.n	8011948 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8011942:	2300      	movs	r3, #0
 8011944:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8011946:	e018      	b.n	801197a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011948:	7bbb      	ldrb	r3, [r7, #14]
 801194a:	2b03      	cmp	r3, #3
 801194c:	d115      	bne.n	801197a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 801194e:	2300      	movs	r3, #0
 8011950:	73fb      	strb	r3, [r7, #15]
      break;
 8011952:	e012      	b.n	801197a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8011954:	2300      	movs	r3, #0
 8011956:	73fb      	strb	r3, [r7, #15]
      break;
 8011958:	e00f      	b.n	801197a <USBH_HandleEnum+0x442>

    default:
      break;
 801195a:	bf00      	nop
 801195c:	e00e      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 801195e:	bf00      	nop
 8011960:	e00c      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 8011962:	bf00      	nop
 8011964:	e00a      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 8011966:	bf00      	nop
 8011968:	e008      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 801196a:	bf00      	nop
 801196c:	e006      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 801196e:	bf00      	nop
 8011970:	e004      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 8011972:	bf00      	nop
 8011974:	e002      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 8011976:	bf00      	nop
 8011978:	e000      	b.n	801197c <USBH_HandleEnum+0x444>
      break;
 801197a:	bf00      	nop
  }
  return Status;
 801197c:	7bfb      	ldrb	r3, [r7, #15]
}
 801197e:	4618      	mov	r0, r3
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop

08011988 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	683a      	ldr	r2, [r7, #0]
 8011996:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 801199a:	bf00      	nop
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr

080119a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b082      	sub	sp, #8
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80119b4:	1c5a      	adds	r2, r3, #1
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 f804 	bl	80119ca <USBH_HandleSof>
}
 80119c2:	bf00      	nop
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b082      	sub	sp, #8
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	2b0b      	cmp	r3, #11
 80119da:	d10a      	bne.n	80119f2 <USBH_HandleSof+0x28>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d005      	beq.n	80119f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80119ec:	699b      	ldr	r3, [r3, #24]
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	4798      	blx	r3
  }
}
 80119f2:	bf00      	nop
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}

080119fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2201      	movs	r2, #1
 8011a06:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011a1e:	2200      	movs	r2, #0
 8011a20:	4619      	mov	r1, r3
 8011a22:	f001 facd 	bl	8012fc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8011a26:	bf00      	nop
}
 8011a28:	3708      	adds	r7, #8
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}

08011a2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b083      	sub	sp, #12
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8011a3e:	bf00      	nop
}
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8011a4a:	b580      	push	{r7, lr}
 8011a4c:	b082      	sub	sp, #8
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2201      	movs	r2, #1
 8011a56:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2200      	movs	r2, #0
 8011a66:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011a7e:	2200      	movs	r2, #0
 8011a80:	4619      	mov	r1, r3
 8011a82:	f001 fa9d 	bl	8012fc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011a86:	2300      	movs	r3, #0
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f011 f9f6 	bl	8022ea2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	791b      	ldrb	r3, [r3, #4]
 8011aba:	4619      	mov	r1, r3
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f000 ff8d 	bl	80129dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	795b      	ldrb	r3, [r3, #5]
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 ff87 	bl	80129dc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	f001 fa6b 	bl	8012fc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011aea:	2300      	movs	r3, #0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8011b02:	f107 030c 	add.w	r3, r7, #12
 8011b06:	f04f 32ff 	mov.w	r2, #4294967295
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f001 fa98 	bl	8013040 <osMessageGet>
    if (event.status == osEventMessage)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2b10      	cmp	r3, #16
 8011b14:	d1f2      	bne.n	8011afc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7ff faa4 	bl	8011064 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8011b1c:	e7ee      	b.n	8011afc <USBH_Process_OS+0x8>

08011b1e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b082      	sub	sp, #8
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	f001 fa3f 	bl	8012fc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8011b42:	2300      	movs	r3, #0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af02      	add	r7, sp, #8
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	460b      	mov	r3, r1
 8011b56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011b5e:	78fb      	ldrb	r3, [r7, #3]
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	9300      	str	r3, [sp, #0]
 8011b64:	4613      	mov	r3, r2
 8011b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f000 f864 	bl	8011c3a <USBH_GetDescriptor>
 8011b72:	4603      	mov	r3, r0
 8011b74:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d10a      	bne.n	8011b92 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f203 3026 	addw	r0, r3, #806	@ 0x326
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011b88:	78fa      	ldrb	r2, [r7, #3]
 8011b8a:	b292      	uxth	r2, r2
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	f000 f919 	bl	8011dc4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8011b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3710      	adds	r7, #16
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b086      	sub	sp, #24
 8011ba0:	af02      	add	r7, sp, #8
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	460b      	mov	r3, r1
 8011ba6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	331c      	adds	r3, #28
 8011bac:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8011bae:	887b      	ldrh	r3, [r7, #2]
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011bb8:	2100      	movs	r1, #0
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 f83d 	bl	8011c3a <USBH_GetDescriptor>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8011bc4:	7bfb      	ldrb	r3, [r7, #15]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d107      	bne.n	8011bda <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8011bca:	887b      	ldrh	r3, [r7, #2]
 8011bcc:	461a      	mov	r2, r3
 8011bce:	68b9      	ldr	r1, [r7, #8]
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f000 f985 	bl	8011ee0 <USBH_ParseCfgDesc>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3710      	adds	r7, #16
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b088      	sub	sp, #32
 8011be8:	af02      	add	r7, sp, #8
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	607a      	str	r2, [r7, #4]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	72fb      	strb	r3, [r7, #11]
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8011bf8:	7afb      	ldrb	r3, [r7, #11]
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8011c00:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011c08:	893b      	ldrh	r3, [r7, #8]
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	2100      	movs	r1, #0
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f000 f812 	bl	8011c3a <USBH_GetDescriptor>
 8011c16:	4603      	mov	r3, r0
 8011c18:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8011c1a:	7dfb      	ldrb	r3, [r7, #23]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d107      	bne.n	8011c30 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011c26:	893a      	ldrh	r2, [r7, #8]
 8011c28:	6879      	ldr	r1, [r7, #4]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 faf8 	bl	8012220 <USBH_ParseStringDesc>
  }

  return status;
 8011c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3718      	adds	r7, #24
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b084      	sub	sp, #16
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	60f8      	str	r0, [r7, #12]
 8011c42:	607b      	str	r3, [r7, #4]
 8011c44:	460b      	mov	r3, r1
 8011c46:	72fb      	strb	r3, [r7, #11]
 8011c48:	4613      	mov	r3, r2
 8011c4a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	789b      	ldrb	r3, [r3, #2]
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d11c      	bne.n	8011c8e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011c54:	7afb      	ldrb	r3, [r7, #11]
 8011c56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011c5a:	b2da      	uxtb	r2, r3
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2206      	movs	r2, #6
 8011c64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	893a      	ldrh	r2, [r7, #8]
 8011c6a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8011c6c:	893b      	ldrh	r3, [r7, #8]
 8011c6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011c76:	d104      	bne.n	8011c82 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f240 4209 	movw	r2, #1033	@ 0x409
 8011c7e:	829a      	strh	r2, [r3, #20]
 8011c80:	e002      	b.n	8011c88 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2200      	movs	r2, #0
 8011c86:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	8b3a      	ldrh	r2, [r7, #24]
 8011c8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011c8e:	8b3b      	ldrh	r3, [r7, #24]
 8011c90:	461a      	mov	r2, r3
 8011c92:	6879      	ldr	r1, [r7, #4]
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f000 fb10 	bl	80122ba <USBH_CtlReq>
 8011c9a:	4603      	mov	r3, r0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	460b      	mov	r3, r1
 8011cae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	789b      	ldrb	r3, [r3, #2]
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d10f      	bne.n	8011cd8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2205      	movs	r2, #5
 8011cc2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011cc4:	78fb      	ldrb	r3, [r7, #3]
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2100      	movs	r1, #0
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f000 faec 	bl	80122ba <USBH_CtlReq>
 8011ce2:	4603      	mov	r3, r0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3708      	adds	r7, #8
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	789b      	ldrb	r3, [r3, #2]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d10e      	bne.n	8011d1e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2209      	movs	r2, #9
 8011d0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	887a      	ldrh	r2, [r7, #2]
 8011d10:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011d1e:	2200      	movs	r2, #0
 8011d20:	2100      	movs	r1, #0
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 fac9 	bl	80122ba <USBH_CtlReq>
 8011d28:	4603      	mov	r3, r0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3708      	adds	r7, #8
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b082      	sub	sp, #8
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	789b      	ldrb	r3, [r3, #2]
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d10f      	bne.n	8011d66 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2203      	movs	r2, #3
 8011d50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011d52:	78fb      	ldrb	r3, [r7, #3]
 8011d54:	b29a      	uxth	r2, r3
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2200      	movs	r2, #0
 8011d64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011d66:	2200      	movs	r2, #0
 8011d68:	2100      	movs	r1, #0
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 faa5 	bl	80122ba <USBH_CtlReq>
 8011d70:	4603      	mov	r3, r0
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3708      	adds	r7, #8
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}

08011d7a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011d7a:	b580      	push	{r7, lr}
 8011d7c:	b082      	sub	sp, #8
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
 8011d82:	460b      	mov	r3, r1
 8011d84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	789b      	ldrb	r3, [r3, #2]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d10f      	bne.n	8011dae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2202      	movs	r2, #2
 8011d92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2201      	movs	r2, #1
 8011d98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011da0:	78fb      	ldrb	r3, [r7, #3]
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2200      	movs	r2, #0
 8011dac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8011dae:	2200      	movs	r2, #0
 8011db0:	2100      	movs	r1, #0
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fa81 	bl	80122ba <USBH_CtlReq>
 8011db8:	4603      	mov	r3, r0
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3708      	adds	r7, #8
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
	...

08011dc4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b085      	sub	sp, #20
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	4613      	mov	r3, r2
 8011dd0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	781a      	ldrb	r2, [r3, #0]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	785a      	ldrb	r2, [r3, #1]
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	3302      	adds	r3, #2
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	461a      	mov	r2, r3
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	3303      	adds	r3, #3
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	021b      	lsls	r3, r3, #8
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	4313      	orrs	r3, r2
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	791a      	ldrb	r2, [r3, #4]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	795a      	ldrb	r2, [r3, #5]
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	799a      	ldrb	r2, [r3, #6]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	79da      	ldrb	r2, [r3, #7]
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	79db      	ldrb	r3, [r3, #7]
 8011e20:	2b20      	cmp	r3, #32
 8011e22:	dc0f      	bgt.n	8011e44 <USBH_ParseDevDesc+0x80>
 8011e24:	2b08      	cmp	r3, #8
 8011e26:	db14      	blt.n	8011e52 <USBH_ParseDevDesc+0x8e>
 8011e28:	3b08      	subs	r3, #8
 8011e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8011edc <USBH_ParseDevDesc+0x118>)
 8011e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8011e30:	f003 0301 	and.w	r3, r3, #1
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	bf14      	ite	ne
 8011e38:	2301      	movne	r3, #1
 8011e3a:	2300      	moveq	r3, #0
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d102      	bne.n	8011e48 <USBH_ParseDevDesc+0x84>
 8011e42:	e006      	b.n	8011e52 <USBH_ParseDevDesc+0x8e>
 8011e44:	2b40      	cmp	r3, #64	@ 0x40
 8011e46:	d104      	bne.n	8011e52 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	79da      	ldrb	r2, [r3, #7]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	71da      	strb	r2, [r3, #7]
      break;
 8011e50:	e003      	b.n	8011e5a <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2240      	movs	r2, #64	@ 0x40
 8011e56:	71da      	strb	r2, [r3, #7]
      break;
 8011e58:	bf00      	nop
  }

  if (length > 8U)
 8011e5a:	88fb      	ldrh	r3, [r7, #6]
 8011e5c:	2b08      	cmp	r3, #8
 8011e5e:	d936      	bls.n	8011ece <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	3308      	adds	r3, #8
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	461a      	mov	r2, r3
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	3309      	adds	r3, #9
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	021b      	lsls	r3, r3, #8
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	4313      	orrs	r3, r2
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	330a      	adds	r3, #10
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	461a      	mov	r2, r3
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	330b      	adds	r3, #11
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	021b      	lsls	r3, r3, #8
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	4313      	orrs	r3, r2
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	330c      	adds	r3, #12
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	330d      	adds	r3, #13
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	021b      	lsls	r3, r3, #8
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	7b9a      	ldrb	r2, [r3, #14]
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	7bda      	ldrb	r2, [r3, #15]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	7c1a      	ldrb	r2, [r3, #16]
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	7c5a      	ldrb	r2, [r3, #17]
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	745a      	strb	r2, [r3, #17]
  }
}
 8011ece:	bf00      	nop
 8011ed0:	3714      	adds	r7, #20
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	01000101 	.word	0x01000101

08011ee0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08c      	sub	sp, #48	@ 0x30
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	4613      	mov	r3, r2
 8011eec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011ef4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011f00:	2300      	movs	r3, #0
 8011f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8011f06:	2300      	movs	r3, #0
 8011f08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	781a      	ldrb	r2, [r3, #0]
 8011f14:	6a3b      	ldr	r3, [r7, #32]
 8011f16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	785a      	ldrb	r2, [r3, #1]
 8011f1c:	6a3b      	ldr	r3, [r7, #32]
 8011f1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	3302      	adds	r3, #2
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	3303      	adds	r3, #3
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	021b      	lsls	r3, r3, #8
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	4313      	orrs	r3, r2
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011f3a:	bf28      	it	cs
 8011f3c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8011f40:	b29a      	uxth	r2, r3
 8011f42:	6a3b      	ldr	r3, [r7, #32]
 8011f44:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	791a      	ldrb	r2, [r3, #4]
 8011f4a:	6a3b      	ldr	r3, [r7, #32]
 8011f4c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	795a      	ldrb	r2, [r3, #5]
 8011f52:	6a3b      	ldr	r3, [r7, #32]
 8011f54:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	799a      	ldrb	r2, [r3, #6]
 8011f5a:	6a3b      	ldr	r3, [r7, #32]
 8011f5c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	79da      	ldrb	r2, [r3, #7]
 8011f62:	6a3b      	ldr	r3, [r7, #32]
 8011f64:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	7a1a      	ldrb	r2, [r3, #8]
 8011f6a:	6a3b      	ldr	r3, [r7, #32]
 8011f6c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8011f6e:	6a3b      	ldr	r3, [r7, #32]
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	2b09      	cmp	r3, #9
 8011f74:	d002      	beq.n	8011f7c <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011f76:	6a3b      	ldr	r3, [r7, #32]
 8011f78:	2209      	movs	r2, #9
 8011f7a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011f7c:	88fb      	ldrh	r3, [r7, #6]
 8011f7e:	2b09      	cmp	r3, #9
 8011f80:	f240 8099 	bls.w	80120b6 <USBH_ParseCfgDesc+0x1d6>
  {
    ptr = USB_LEN_CFG_DESC;
 8011f84:	2309      	movs	r3, #9
 8011f86:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011f8c:	e07d      	b.n	801208a <USBH_ParseCfgDesc+0x1aa>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011f8e:	f107 0316 	add.w	r3, r7, #22
 8011f92:	4619      	mov	r1, r3
 8011f94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f96:	f000 f976 	bl	8012286 <USBH_GetNextDesc>
 8011f9a:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f9e:	785b      	ldrb	r3, [r3, #1]
 8011fa0:	2b04      	cmp	r3, #4
 8011fa2:	d172      	bne.n	801208a <USBH_ParseCfgDesc+0x1aa>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	2b09      	cmp	r3, #9
 8011faa:	d002      	beq.n	8011fb2 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fae:	2209      	movs	r2, #9
 8011fb0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fb6:	221a      	movs	r2, #26
 8011fb8:	fb02 f303 	mul.w	r3, r2, r3
 8011fbc:	3308      	adds	r3, #8
 8011fbe:	6a3a      	ldr	r2, [r7, #32]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	3302      	adds	r3, #2
 8011fc4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011fc8:	69f8      	ldr	r0, [r7, #28]
 8011fca:	f000 f87a 	bl	80120c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011fd8:	e03f      	b.n	801205a <USBH_ParseCfgDesc+0x17a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011fda:	f107 0316 	add.w	r3, r7, #22
 8011fde:	4619      	mov	r1, r3
 8011fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fe2:	f000 f950 	bl	8012286 <USBH_GetNextDesc>
 8011fe6:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fea:	785b      	ldrb	r3, [r3, #1]
 8011fec:	2b05      	cmp	r3, #5
 8011fee:	d134      	bne.n	801205a <USBH_ParseCfgDesc+0x17a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	795b      	ldrb	r3, [r3, #5]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d10f      	bne.n	8012018 <USBH_ParseCfgDesc+0x138>
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	799b      	ldrb	r3, [r3, #6]
 8011ffc:	2b02      	cmp	r3, #2
 8011ffe:	d10b      	bne.n	8012018 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	79db      	ldrb	r3, [r3, #7]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d10b      	bne.n	8012020 <USBH_ParseCfgDesc+0x140>
 8012008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	2b09      	cmp	r3, #9
 801200e:	d007      	beq.n	8012020 <USBH_ParseCfgDesc+0x140>
              {
                pdesc->bLength = 0x09U;
 8012010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012012:	2209      	movs	r2, #9
 8012014:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012016:	e003      	b.n	8012020 <USBH_ParseCfgDesc+0x140>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8012018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801201a:	2207      	movs	r2, #7
 801201c:	701a      	strb	r2, [r3, #0]
 801201e:	e000      	b.n	8012022 <USBH_ParseCfgDesc+0x142>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012020:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8012022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012026:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801202a:	3201      	adds	r2, #1
 801202c:	00d2      	lsls	r2, r2, #3
 801202e:	211a      	movs	r1, #26
 8012030:	fb01 f303 	mul.w	r3, r1, r3
 8012034:	4413      	add	r3, r2
 8012036:	3308      	adds	r3, #8
 8012038:	6a3a      	ldr	r2, [r7, #32]
 801203a:	4413      	add	r3, r2
 801203c:	3304      	adds	r3, #4
 801203e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8012040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012042:	69b9      	ldr	r1, [r7, #24]
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f000 f86b 	bl	8012120 <USBH_ParseEPDesc>
 801204a:	4603      	mov	r3, r0
 801204c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8012050:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012054:	3301      	adds	r3, #1
 8012056:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	791b      	ldrb	r3, [r3, #4]
 801205e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8012062:	429a      	cmp	r2, r3
 8012064:	d204      	bcs.n	8012070 <USBH_ParseCfgDesc+0x190>
 8012066:	6a3b      	ldr	r3, [r7, #32]
 8012068:	885a      	ldrh	r2, [r3, #2]
 801206a:	8afb      	ldrh	r3, [r7, #22]
 801206c:	429a      	cmp	r2, r3
 801206e:	d8b4      	bhi.n	8011fda <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	791b      	ldrb	r3, [r3, #4]
 8012074:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8012078:	429a      	cmp	r2, r3
 801207a:	d201      	bcs.n	8012080 <USBH_ParseCfgDesc+0x1a0>
        {
          return USBH_NOT_SUPPORTED;
 801207c:	2303      	movs	r3, #3
 801207e:	e01c      	b.n	80120ba <USBH_ParseCfgDesc+0x1da>
        }

        if_ix++;
 8012080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012084:	3301      	adds	r3, #1
 8012086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801208a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801208e:	2b01      	cmp	r3, #1
 8012090:	d805      	bhi.n	801209e <USBH_ParseCfgDesc+0x1be>
 8012092:	6a3b      	ldr	r3, [r7, #32]
 8012094:	885a      	ldrh	r2, [r3, #2]
 8012096:	8afb      	ldrh	r3, [r7, #22]
 8012098:	429a      	cmp	r2, r3
 801209a:	f63f af78 	bhi.w	8011f8e <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801209e:	6a3b      	ldr	r3, [r7, #32]
 80120a0:	791b      	ldrb	r3, [r3, #4]
 80120a2:	2b02      	cmp	r3, #2
 80120a4:	bf28      	it	cs
 80120a6:	2302      	movcs	r3, #2
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d201      	bcs.n	80120b6 <USBH_ParseCfgDesc+0x1d6>
    {
      return USBH_NOT_SUPPORTED;
 80120b2:	2303      	movs	r3, #3
 80120b4:	e001      	b.n	80120ba <USBH_ParseCfgDesc+0x1da>
    }
  }

  return status;
 80120b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3730      	adds	r7, #48	@ 0x30
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 80120c2:	b480      	push	{r7}
 80120c4:	b083      	sub	sp, #12
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
 80120ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	781a      	ldrb	r2, [r3, #0]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	785a      	ldrb	r2, [r3, #1]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	789a      	ldrb	r2, [r3, #2]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	78da      	ldrb	r2, [r3, #3]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	791a      	ldrb	r2, [r3, #4]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	795a      	ldrb	r2, [r3, #5]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	799a      	ldrb	r2, [r3, #6]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	79da      	ldrb	r2, [r3, #7]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	7a1a      	ldrb	r2, [r3, #8]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	721a      	strb	r2, [r3, #8]
}
 8012114:	bf00      	nop
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8012120:	b480      	push	{r7}
 8012122:	b087      	sub	sp, #28
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	781a      	ldrb	r2, [r3, #0]
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	785a      	ldrb	r2, [r3, #1]
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	789a      	ldrb	r2, [r3, #2]
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	78da      	ldrb	r2, [r3, #3]
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	3304      	adds	r3, #4
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	461a      	mov	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	3305      	adds	r3, #5
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	021b      	lsls	r3, r3, #8
 8012160:	b29b      	uxth	r3, r3
 8012162:	4313      	orrs	r3, r2
 8012164:	b29a      	uxth	r2, r3
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	799a      	ldrb	r2, [r3, #6]
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	889b      	ldrh	r3, [r3, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d102      	bne.n	8012180 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 801217a:	2303      	movs	r3, #3
 801217c:	75fb      	strb	r3, [r7, #23]
 801217e:	e00d      	b.n	801219c <USBH_ParseEPDesc+0x7c>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	889a      	ldrh	r2, [r3, #4]
 8012184:	4b25      	ldr	r3, [pc, #148]	@ (801221c <USBH_ParseEPDesc+0xfc>)
 8012186:	4013      	ands	r3, r2
 8012188:	b29a      	uxth	r2, r3
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	889b      	ldrh	r3, [r3, #4]
 8012192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8012196:	b29a      	uxth	r2, r3
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d116      	bne.n	80121d4 <USBH_ParseEPDesc+0xb4>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	78db      	ldrb	r3, [r3, #3]
 80121aa:	f003 0303 	and.w	r3, r3, #3
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d005      	beq.n	80121be <USBH_ParseEPDesc+0x9e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	78db      	ldrb	r3, [r3, #3]
 80121b6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80121ba:	2b03      	cmp	r3, #3
 80121bc:	d127      	bne.n	801220e <USBH_ParseEPDesc+0xee>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	799b      	ldrb	r3, [r3, #6]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d003      	beq.n	80121ce <USBH_ParseEPDesc+0xae>
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	799b      	ldrb	r3, [r3, #6]
 80121ca:	2b10      	cmp	r3, #16
 80121cc:	d91f      	bls.n	801220e <USBH_ParseEPDesc+0xee>
      {
        status = USBH_NOT_SUPPORTED;
 80121ce:	2303      	movs	r3, #3
 80121d0:	75fb      	strb	r3, [r7, #23]
 80121d2:	e01c      	b.n	801220e <USBH_ParseEPDesc+0xee>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	78db      	ldrb	r3, [r3, #3]
 80121d8:	f003 0303 	and.w	r3, r3, #3
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d10a      	bne.n	80121f6 <USBH_ParseEPDesc+0xd6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	799b      	ldrb	r3, [r3, #6]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d003      	beq.n	80121f0 <USBH_ParseEPDesc+0xd0>
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	799b      	ldrb	r3, [r3, #6]
 80121ec:	2b10      	cmp	r3, #16
 80121ee:	d90e      	bls.n	801220e <USBH_ParseEPDesc+0xee>
      {
        status = USBH_NOT_SUPPORTED;
 80121f0:	2303      	movs	r3, #3
 80121f2:	75fb      	strb	r3, [r7, #23]
 80121f4:	e00b      	b.n	801220e <USBH_ParseEPDesc+0xee>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	78db      	ldrb	r3, [r3, #3]
 80121fa:	f003 0303 	and.w	r3, r3, #3
 80121fe:	2b03      	cmp	r3, #3
 8012200:	d105      	bne.n	801220e <USBH_ParseEPDesc+0xee>
    {
      if (ep_descriptor->bInterval == 0U)
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	799b      	ldrb	r3, [r3, #6]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d101      	bne.n	801220e <USBH_ParseEPDesc+0xee>
      {
        status = USBH_NOT_SUPPORTED;
 801220a:	2303      	movs	r3, #3
 801220c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 801220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012210:	4618      	mov	r0, r3
 8012212:	371c      	adds	r7, #28
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	fffff800 	.word	0xfffff800

08012220 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8012220:	b480      	push	{r7}
 8012222:	b087      	sub	sp, #28
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	4613      	mov	r3, r2
 801222c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	3301      	adds	r3, #1
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	2b03      	cmp	r3, #3
 8012236:	d120      	bne.n	801227a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	1e9a      	subs	r2, r3, #2
 801223e:	88fb      	ldrh	r3, [r7, #6]
 8012240:	4293      	cmp	r3, r2
 8012242:	bf28      	it	cs
 8012244:	4613      	movcs	r3, r2
 8012246:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	3302      	adds	r3, #2
 801224c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801224e:	2300      	movs	r3, #0
 8012250:	82fb      	strh	r3, [r7, #22]
 8012252:	e00b      	b.n	801226c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8012254:	8afb      	ldrh	r3, [r7, #22]
 8012256:	68fa      	ldr	r2, [r7, #12]
 8012258:	4413      	add	r3, r2
 801225a:	781a      	ldrb	r2, [r3, #0]
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	3301      	adds	r3, #1
 8012264:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8012266:	8afb      	ldrh	r3, [r7, #22]
 8012268:	3302      	adds	r3, #2
 801226a:	82fb      	strh	r3, [r7, #22]
 801226c:	8afa      	ldrh	r2, [r7, #22]
 801226e:	8abb      	ldrh	r3, [r7, #20]
 8012270:	429a      	cmp	r2, r3
 8012272:	d3ef      	bcc.n	8012254 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	2200      	movs	r2, #0
 8012278:	701a      	strb	r2, [r3, #0]
  }
}
 801227a:	bf00      	nop
 801227c:	371c      	adds	r7, #28
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr

08012286 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012286:	b480      	push	{r7}
 8012288:	b085      	sub	sp, #20
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
 801228e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	7812      	ldrb	r2, [r2, #0]
 8012298:	4413      	add	r3, r2
 801229a:	b29a      	uxth	r2, r3
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4413      	add	r3, r2
 80122aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80122ac:	68fb      	ldr	r3, [r7, #12]
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3714      	adds	r7, #20
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr

080122ba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b086      	sub	sp, #24
 80122be:	af00      	add	r7, sp, #0
 80122c0:	60f8      	str	r0, [r7, #12]
 80122c2:	60b9      	str	r1, [r7, #8]
 80122c4:	4613      	mov	r3, r2
 80122c6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80122c8:	2301      	movs	r3, #1
 80122ca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	789b      	ldrb	r3, [r3, #2]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d002      	beq.n	80122da <USBH_CtlReq+0x20>
 80122d4:	2b02      	cmp	r3, #2
 80122d6:	d01d      	beq.n	8012314 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80122d8:	e043      	b.n	8012362 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	68ba      	ldr	r2, [r7, #8]
 80122de:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	88fa      	ldrh	r2, [r7, #6]
 80122e4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2201      	movs	r2, #1
 80122ea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2202      	movs	r2, #2
 80122f0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80122f2:	2301      	movs	r3, #1
 80122f4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2203      	movs	r2, #3
 80122fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801230a:	2200      	movs	r2, #0
 801230c:	4619      	mov	r1, r3
 801230e:	f000 fe57 	bl	8012fc0 <osMessagePut>
      break;
 8012312:	e026      	b.n	8012362 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f000 f829 	bl	801236c <USBH_HandleControl>
 801231a:	4603      	mov	r3, r0
 801231c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801231e:	7dfb      	ldrb	r3, [r7, #23]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d002      	beq.n	801232a <USBH_CtlReq+0x70>
 8012324:	7dfb      	ldrb	r3, [r7, #23]
 8012326:	2b03      	cmp	r3, #3
 8012328:	d106      	bne.n	8012338 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2201      	movs	r2, #1
 801232e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2200      	movs	r2, #0
 8012334:	761a      	strb	r2, [r3, #24]
 8012336:	e005      	b.n	8012344 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8012338:	7dfb      	ldrb	r3, [r7, #23]
 801233a:	2b02      	cmp	r3, #2
 801233c:	d102      	bne.n	8012344 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2201      	movs	r2, #1
 8012342:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2203      	movs	r2, #3
 8012348:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012358:	2200      	movs	r2, #0
 801235a:	4619      	mov	r1, r3
 801235c:	f000 fe30 	bl	8012fc0 <osMessagePut>
      break;
 8012360:	bf00      	nop
  }
  return status;
 8012362:	7dfb      	ldrb	r3, [r7, #23]
}
 8012364:	4618      	mov	r0, r3
 8012366:	3718      	adds	r7, #24
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af02      	add	r7, sp, #8
 8012372:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8012374:	2301      	movs	r3, #1
 8012376:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012378:	2300      	movs	r3, #0
 801237a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	7e1b      	ldrb	r3, [r3, #24]
 8012380:	3b01      	subs	r3, #1
 8012382:	2b0a      	cmp	r3, #10
 8012384:	f200 8229 	bhi.w	80127da <USBH_HandleControl+0x46e>
 8012388:	a201      	add	r2, pc, #4	@ (adr r2, 8012390 <USBH_HandleControl+0x24>)
 801238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801238e:	bf00      	nop
 8012390:	080123bd 	.word	0x080123bd
 8012394:	080123d7 	.word	0x080123d7
 8012398:	08012479 	.word	0x08012479
 801239c:	0801249f 	.word	0x0801249f
 80123a0:	0801252b 	.word	0x0801252b
 80123a4:	08012555 	.word	0x08012555
 80123a8:	08012617 	.word	0x08012617
 80123ac:	08012639 	.word	0x08012639
 80123b0:	080126cb 	.word	0x080126cb
 80123b4:	080126f1 	.word	0x080126f1
 80123b8:	08012783 	.word	0x08012783
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f103 0110 	add.w	r1, r3, #16
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	795b      	ldrb	r3, [r3, #5]
 80123c6:	461a      	mov	r2, r3
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 fa17 	bl	80127fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2202      	movs	r2, #2
 80123d2:	761a      	strb	r2, [r3, #24]
      break;
 80123d4:	e20c      	b.n	80127f0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	795b      	ldrb	r3, [r3, #5]
 80123da:	4619      	mov	r1, r3
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f010 fe4f 	bl	8023080 <USBH_LL_GetURBState>
 80123e2:	4603      	mov	r3, r0
 80123e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80123e6:	7bbb      	ldrb	r3, [r7, #14]
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d12c      	bne.n	8012446 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	7c1b      	ldrb	r3, [r3, #16]
 80123f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80123f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	8adb      	ldrh	r3, [r3, #22]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00a      	beq.n	8012414 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80123fe:	7b7b      	ldrb	r3, [r7, #13]
 8012400:	2b80      	cmp	r3, #128	@ 0x80
 8012402:	d103      	bne.n	801240c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2203      	movs	r2, #3
 8012408:	761a      	strb	r2, [r3, #24]
 801240a:	e00d      	b.n	8012428 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2205      	movs	r2, #5
 8012410:	761a      	strb	r2, [r3, #24]
 8012412:	e009      	b.n	8012428 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8012414:	7b7b      	ldrb	r3, [r7, #13]
 8012416:	2b80      	cmp	r3, #128	@ 0x80
 8012418:	d103      	bne.n	8012422 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2209      	movs	r2, #9
 801241e:	761a      	strb	r2, [r3, #24]
 8012420:	e002      	b.n	8012428 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2207      	movs	r2, #7
 8012426:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2203      	movs	r2, #3
 801242c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801243c:	2200      	movs	r2, #0
 801243e:	4619      	mov	r1, r3
 8012440:	f000 fdbe 	bl	8012fc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012444:	e1cb      	b.n	80127de <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8012446:	7bbb      	ldrb	r3, [r7, #14]
 8012448:	2b04      	cmp	r3, #4
 801244a:	d003      	beq.n	8012454 <USBH_HandleControl+0xe8>
 801244c:	7bbb      	ldrb	r3, [r7, #14]
 801244e:	2b02      	cmp	r3, #2
 8012450:	f040 81c5 	bne.w	80127de <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	220b      	movs	r2, #11
 8012458:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2203      	movs	r2, #3
 801245e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801246e:	2200      	movs	r2, #0
 8012470:	4619      	mov	r1, r3
 8012472:	f000 fda5 	bl	8012fc0 <osMessagePut>
      break;
 8012476:	e1b2      	b.n	80127de <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801247e:	b29a      	uxth	r2, r3
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6899      	ldr	r1, [r3, #8]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	899a      	ldrh	r2, [r3, #12]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	791b      	ldrb	r3, [r3, #4]
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f000 f9f2 	bl	801287a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2204      	movs	r2, #4
 801249a:	761a      	strb	r2, [r3, #24]
      break;
 801249c:	e1a8      	b.n	80127f0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	791b      	ldrb	r3, [r3, #4]
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f010 fdeb 	bl	8023080 <USBH_LL_GetURBState>
 80124aa:	4603      	mov	r3, r0
 80124ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80124ae:	7bbb      	ldrb	r3, [r7, #14]
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d110      	bne.n	80124d6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2209      	movs	r2, #9
 80124b8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2203      	movs	r2, #3
 80124be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80124ce:	2200      	movs	r2, #0
 80124d0:	4619      	mov	r1, r3
 80124d2:	f000 fd75 	bl	8012fc0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80124d6:	7bbb      	ldrb	r3, [r7, #14]
 80124d8:	2b05      	cmp	r3, #5
 80124da:	d110      	bne.n	80124fe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80124dc:	2303      	movs	r3, #3
 80124de:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2203      	movs	r2, #3
 80124e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80124f4:	2200      	movs	r2, #0
 80124f6:	4619      	mov	r1, r3
 80124f8:	f000 fd62 	bl	8012fc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80124fc:	e171      	b.n	80127e2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80124fe:	7bbb      	ldrb	r3, [r7, #14]
 8012500:	2b04      	cmp	r3, #4
 8012502:	f040 816e 	bne.w	80127e2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	220b      	movs	r2, #11
 801250a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2203      	movs	r2, #3
 8012510:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012520:	2200      	movs	r2, #0
 8012522:	4619      	mov	r1, r3
 8012524:	f000 fd4c 	bl	8012fc0 <osMessagePut>
      break;
 8012528:	e15b      	b.n	80127e2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6899      	ldr	r1, [r3, #8]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	899a      	ldrh	r2, [r3, #12]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	795b      	ldrb	r3, [r3, #5]
 8012536:	2001      	movs	r0, #1
 8012538:	9000      	str	r0, [sp, #0]
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f978 	bl	8012830 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012546:	b29a      	uxth	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2206      	movs	r2, #6
 8012550:	761a      	strb	r2, [r3, #24]
      break;
 8012552:	e14d      	b.n	80127f0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	795b      	ldrb	r3, [r3, #5]
 8012558:	4619      	mov	r1, r3
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f010 fd90 	bl	8023080 <USBH_LL_GetURBState>
 8012560:	4603      	mov	r3, r0
 8012562:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012564:	7bbb      	ldrb	r3, [r7, #14]
 8012566:	2b01      	cmp	r3, #1
 8012568:	d111      	bne.n	801258e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2207      	movs	r2, #7
 801256e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2203      	movs	r2, #3
 8012574:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012584:	2200      	movs	r2, #0
 8012586:	4619      	mov	r1, r3
 8012588:	f000 fd1a 	bl	8012fc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801258c:	e12b      	b.n	80127e6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 801258e:	7bbb      	ldrb	r3, [r7, #14]
 8012590:	2b05      	cmp	r3, #5
 8012592:	d113      	bne.n	80125bc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	220c      	movs	r2, #12
 8012598:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801259a:	2303      	movs	r3, #3
 801259c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2203      	movs	r2, #3
 80125a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80125b2:	2200      	movs	r2, #0
 80125b4:	4619      	mov	r1, r3
 80125b6:	f000 fd03 	bl	8012fc0 <osMessagePut>
      break;
 80125ba:	e114      	b.n	80127e6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80125bc:	7bbb      	ldrb	r3, [r7, #14]
 80125be:	2b02      	cmp	r3, #2
 80125c0:	d111      	bne.n	80125e6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2205      	movs	r2, #5
 80125c6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2203      	movs	r2, #3
 80125cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80125dc:	2200      	movs	r2, #0
 80125de:	4619      	mov	r1, r3
 80125e0:	f000 fcee 	bl	8012fc0 <osMessagePut>
      break;
 80125e4:	e0ff      	b.n	80127e6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80125e6:	7bbb      	ldrb	r3, [r7, #14]
 80125e8:	2b04      	cmp	r3, #4
 80125ea:	f040 80fc 	bne.w	80127e6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	220b      	movs	r2, #11
 80125f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80125f4:	2302      	movs	r3, #2
 80125f6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2203      	movs	r2, #3
 80125fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801260c:	2200      	movs	r2, #0
 801260e:	4619      	mov	r1, r3
 8012610:	f000 fcd6 	bl	8012fc0 <osMessagePut>
      break;
 8012614:	e0e7      	b.n	80127e6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	791b      	ldrb	r3, [r3, #4]
 801261a:	2200      	movs	r2, #0
 801261c:	2100      	movs	r1, #0
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f000 f92b 	bl	801287a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801262a:	b29a      	uxth	r2, r3
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2208      	movs	r2, #8
 8012634:	761a      	strb	r2, [r3, #24]

      break;
 8012636:	e0db      	b.n	80127f0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	791b      	ldrb	r3, [r3, #4]
 801263c:	4619      	mov	r1, r3
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f010 fd1e 	bl	8023080 <USBH_LL_GetURBState>
 8012644:	4603      	mov	r3, r0
 8012646:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012648:	7bbb      	ldrb	r3, [r7, #14]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d113      	bne.n	8012676 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	220d      	movs	r2, #13
 8012652:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8012654:	2300      	movs	r3, #0
 8012656:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2203      	movs	r2, #3
 801265c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801266c:	2200      	movs	r2, #0
 801266e:	4619      	mov	r1, r3
 8012670:	f000 fca6 	bl	8012fc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012674:	e0b9      	b.n	80127ea <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8012676:	7bbb      	ldrb	r3, [r7, #14]
 8012678:	2b04      	cmp	r3, #4
 801267a:	d111      	bne.n	80126a0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	220b      	movs	r2, #11
 8012680:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2203      	movs	r2, #3
 8012686:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012696:	2200      	movs	r2, #0
 8012698:	4619      	mov	r1, r3
 801269a:	f000 fc91 	bl	8012fc0 <osMessagePut>
      break;
 801269e:	e0a4      	b.n	80127ea <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80126a0:	7bbb      	ldrb	r3, [r7, #14]
 80126a2:	2b05      	cmp	r3, #5
 80126a4:	f040 80a1 	bne.w	80127ea <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80126a8:	2303      	movs	r3, #3
 80126aa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2203      	movs	r2, #3
 80126b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80126c0:	2200      	movs	r2, #0
 80126c2:	4619      	mov	r1, r3
 80126c4:	f000 fc7c 	bl	8012fc0 <osMessagePut>
      break;
 80126c8:	e08f      	b.n	80127ea <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	795b      	ldrb	r3, [r3, #5]
 80126ce:	2201      	movs	r2, #1
 80126d0:	9200      	str	r2, [sp, #0]
 80126d2:	2200      	movs	r2, #0
 80126d4:	2100      	movs	r1, #0
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f8aa 	bl	8012830 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	220a      	movs	r2, #10
 80126ec:	761a      	strb	r2, [r3, #24]
      break;
 80126ee:	e07f      	b.n	80127f0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	795b      	ldrb	r3, [r3, #5]
 80126f4:	4619      	mov	r1, r3
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f010 fcc2 	bl	8023080 <USBH_LL_GetURBState>
 80126fc:	4603      	mov	r3, r0
 80126fe:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8012700:	7bbb      	ldrb	r3, [r7, #14]
 8012702:	2b01      	cmp	r3, #1
 8012704:	d113      	bne.n	801272e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8012706:	2300      	movs	r3, #0
 8012708:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	220d      	movs	r2, #13
 801270e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2203      	movs	r2, #3
 8012714:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012724:	2200      	movs	r2, #0
 8012726:	4619      	mov	r1, r3
 8012728:	f000 fc4a 	bl	8012fc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801272c:	e05f      	b.n	80127ee <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 801272e:	7bbb      	ldrb	r3, [r7, #14]
 8012730:	2b02      	cmp	r3, #2
 8012732:	d111      	bne.n	8012758 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2209      	movs	r2, #9
 8012738:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2203      	movs	r2, #3
 801273e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801274e:	2200      	movs	r2, #0
 8012750:	4619      	mov	r1, r3
 8012752:	f000 fc35 	bl	8012fc0 <osMessagePut>
      break;
 8012756:	e04a      	b.n	80127ee <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8012758:	7bbb      	ldrb	r3, [r7, #14]
 801275a:	2b04      	cmp	r3, #4
 801275c:	d147      	bne.n	80127ee <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	220b      	movs	r2, #11
 8012762:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2203      	movs	r2, #3
 8012768:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012778:	2200      	movs	r2, #0
 801277a:	4619      	mov	r1, r3
 801277c:	f000 fc20 	bl	8012fc0 <osMessagePut>
      break;
 8012780:	e035      	b.n	80127ee <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	7e5b      	ldrb	r3, [r3, #25]
 8012786:	3301      	adds	r3, #1
 8012788:	b2da      	uxtb	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	765a      	strb	r2, [r3, #25]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	7e5b      	ldrb	r3, [r3, #25]
 8012792:	2b02      	cmp	r3, #2
 8012794:	d806      	bhi.n	80127a4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2201      	movs	r2, #1
 801279a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2201      	movs	r2, #1
 80127a0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80127a2:	e025      	b.n	80127f0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80127aa:	2106      	movs	r1, #6
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2200      	movs	r2, #0
 80127b4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	795b      	ldrb	r3, [r3, #5]
 80127ba:	4619      	mov	r1, r3
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 f90d 	bl	80129dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	791b      	ldrb	r3, [r3, #4]
 80127c6:	4619      	mov	r1, r3
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f000 f907 	bl	80129dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80127d4:	2302      	movs	r3, #2
 80127d6:	73fb      	strb	r3, [r7, #15]
      break;
 80127d8:	e00a      	b.n	80127f0 <USBH_HandleControl+0x484>

    default:
      break;
 80127da:	bf00      	nop
 80127dc:	e008      	b.n	80127f0 <USBH_HandleControl+0x484>
      break;
 80127de:	bf00      	nop
 80127e0:	e006      	b.n	80127f0 <USBH_HandleControl+0x484>
      break;
 80127e2:	bf00      	nop
 80127e4:	e004      	b.n	80127f0 <USBH_HandleControl+0x484>
      break;
 80127e6:	bf00      	nop
 80127e8:	e002      	b.n	80127f0 <USBH_HandleControl+0x484>
      break;
 80127ea:	bf00      	nop
 80127ec:	e000      	b.n	80127f0 <USBH_HandleControl+0x484>
      break;
 80127ee:	bf00      	nop
  }

  return status;
 80127f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop

080127fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b088      	sub	sp, #32
 8012800:	af04      	add	r7, sp, #16
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	4613      	mov	r3, r2
 8012808:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801280a:	79f9      	ldrb	r1, [r7, #7]
 801280c:	2300      	movs	r3, #0
 801280e:	9303      	str	r3, [sp, #12]
 8012810:	2308      	movs	r3, #8
 8012812:	9302      	str	r3, [sp, #8]
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	9301      	str	r3, [sp, #4]
 8012818:	2300      	movs	r3, #0
 801281a:	9300      	str	r3, [sp, #0]
 801281c:	2300      	movs	r3, #0
 801281e:	2200      	movs	r2, #0
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f010 fbfc 	bl	802301e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8012826:	2300      	movs	r3, #0
}
 8012828:	4618      	mov	r0, r3
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b088      	sub	sp, #32
 8012834:	af04      	add	r7, sp, #16
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	4611      	mov	r1, r2
 801283c:	461a      	mov	r2, r3
 801283e:	460b      	mov	r3, r1
 8012840:	80fb      	strh	r3, [r7, #6]
 8012842:	4613      	mov	r3, r2
 8012844:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801284c:	2b00      	cmp	r3, #0
 801284e:	d001      	beq.n	8012854 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8012850:	2300      	movs	r3, #0
 8012852:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012854:	7979      	ldrb	r1, [r7, #5]
 8012856:	7e3b      	ldrb	r3, [r7, #24]
 8012858:	9303      	str	r3, [sp, #12]
 801285a:	88fb      	ldrh	r3, [r7, #6]
 801285c:	9302      	str	r3, [sp, #8]
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	9301      	str	r3, [sp, #4]
 8012862:	2301      	movs	r3, #1
 8012864:	9300      	str	r3, [sp, #0]
 8012866:	2300      	movs	r3, #0
 8012868:	2200      	movs	r2, #0
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f010 fbd7 	bl	802301e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8012870:	2300      	movs	r3, #0
}
 8012872:	4618      	mov	r0, r3
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b088      	sub	sp, #32
 801287e:	af04      	add	r7, sp, #16
 8012880:	60f8      	str	r0, [r7, #12]
 8012882:	60b9      	str	r1, [r7, #8]
 8012884:	4611      	mov	r1, r2
 8012886:	461a      	mov	r2, r3
 8012888:	460b      	mov	r3, r1
 801288a:	80fb      	strh	r3, [r7, #6]
 801288c:	4613      	mov	r3, r2
 801288e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012890:	7979      	ldrb	r1, [r7, #5]
 8012892:	2300      	movs	r3, #0
 8012894:	9303      	str	r3, [sp, #12]
 8012896:	88fb      	ldrh	r3, [r7, #6]
 8012898:	9302      	str	r3, [sp, #8]
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	9301      	str	r3, [sp, #4]
 801289e:	2301      	movs	r3, #1
 80128a0:	9300      	str	r3, [sp, #0]
 80128a2:	2300      	movs	r3, #0
 80128a4:	2201      	movs	r2, #1
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f010 fbb9 	bl	802301e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80128ac:	2300      	movs	r3, #0

}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}

080128b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80128b6:	b580      	push	{r7, lr}
 80128b8:	b088      	sub	sp, #32
 80128ba:	af04      	add	r7, sp, #16
 80128bc:	60f8      	str	r0, [r7, #12]
 80128be:	60b9      	str	r1, [r7, #8]
 80128c0:	4611      	mov	r1, r2
 80128c2:	461a      	mov	r2, r3
 80128c4:	460b      	mov	r3, r1
 80128c6:	80fb      	strh	r3, [r7, #6]
 80128c8:	4613      	mov	r3, r2
 80128ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d001      	beq.n	80128da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80128d6:	2300      	movs	r3, #0
 80128d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80128da:	7979      	ldrb	r1, [r7, #5]
 80128dc:	7e3b      	ldrb	r3, [r7, #24]
 80128de:	9303      	str	r3, [sp, #12]
 80128e0:	88fb      	ldrh	r3, [r7, #6]
 80128e2:	9302      	str	r3, [sp, #8]
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	9301      	str	r3, [sp, #4]
 80128e8:	2301      	movs	r3, #1
 80128ea:	9300      	str	r3, [sp, #0]
 80128ec:	2302      	movs	r3, #2
 80128ee:	2200      	movs	r2, #0
 80128f0:	68f8      	ldr	r0, [r7, #12]
 80128f2:	f010 fb94 	bl	802301e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b088      	sub	sp, #32
 8012904:	af04      	add	r7, sp, #16
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	4611      	mov	r1, r2
 801290c:	461a      	mov	r2, r3
 801290e:	460b      	mov	r3, r1
 8012910:	80fb      	strh	r3, [r7, #6]
 8012912:	4613      	mov	r3, r2
 8012914:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012916:	7979      	ldrb	r1, [r7, #5]
 8012918:	2300      	movs	r3, #0
 801291a:	9303      	str	r3, [sp, #12]
 801291c:	88fb      	ldrh	r3, [r7, #6]
 801291e:	9302      	str	r3, [sp, #8]
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	9301      	str	r3, [sp, #4]
 8012924:	2301      	movs	r3, #1
 8012926:	9300      	str	r3, [sp, #0]
 8012928:	2302      	movs	r3, #2
 801292a:	2201      	movs	r2, #1
 801292c:	68f8      	ldr	r0, [r7, #12]
 801292e:	f010 fb76 	bl	802301e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8012932:	2300      	movs	r3, #0
}
 8012934:	4618      	mov	r0, r3
 8012936:	3710      	adds	r7, #16
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b086      	sub	sp, #24
 8012940:	af04      	add	r7, sp, #16
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	4608      	mov	r0, r1
 8012946:	4611      	mov	r1, r2
 8012948:	461a      	mov	r2, r3
 801294a:	4603      	mov	r3, r0
 801294c:	70fb      	strb	r3, [r7, #3]
 801294e:	460b      	mov	r3, r1
 8012950:	70bb      	strb	r3, [r7, #2]
 8012952:	4613      	mov	r3, r2
 8012954:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8012956:	7878      	ldrb	r0, [r7, #1]
 8012958:	78ba      	ldrb	r2, [r7, #2]
 801295a:	78f9      	ldrb	r1, [r7, #3]
 801295c:	8b3b      	ldrh	r3, [r7, #24]
 801295e:	9302      	str	r3, [sp, #8]
 8012960:	7d3b      	ldrb	r3, [r7, #20]
 8012962:	9301      	str	r3, [sp, #4]
 8012964:	7c3b      	ldrb	r3, [r7, #16]
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	4603      	mov	r3, r0
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f010 fb09 	bl	8022f82 <USBH_LL_OpenPipe>

  return USBH_OK;
 8012970:	2300      	movs	r3, #0
}
 8012972:	4618      	mov	r0, r3
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801297a:	b580      	push	{r7, lr}
 801297c:	b082      	sub	sp, #8
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
 8012982:	460b      	mov	r3, r1
 8012984:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8012986:	78fb      	ldrb	r3, [r7, #3]
 8012988:	4619      	mov	r1, r3
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f010 fb28 	bl	8022fe0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	3708      	adds	r7, #8
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b084      	sub	sp, #16
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
 80129a2:	460b      	mov	r3, r1
 80129a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 f836 	bl	8012a18 <USBH_GetFreePipe>
 80129ac:	4603      	mov	r3, r0
 80129ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80129b0:	89fb      	ldrh	r3, [r7, #14]
 80129b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129b6:	4293      	cmp	r3, r2
 80129b8:	d00a      	beq.n	80129d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80129ba:	78fa      	ldrb	r2, [r7, #3]
 80129bc:	89fb      	ldrh	r3, [r7, #14]
 80129be:	f003 030f 	and.w	r3, r3, #15
 80129c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80129c6:	6879      	ldr	r1, [r7, #4]
 80129c8:	33e0      	adds	r3, #224	@ 0xe0
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	440b      	add	r3, r1
 80129ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80129d0:	89fb      	ldrh	r3, [r7, #14]
 80129d2:	b2db      	uxtb	r3, r3
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3710      	adds	r7, #16
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	460b      	mov	r3, r1
 80129e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80129e8:	78fb      	ldrb	r3, [r7, #3]
 80129ea:	2b0f      	cmp	r3, #15
 80129ec:	d80d      	bhi.n	8012a0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80129ee:	78fb      	ldrb	r3, [r7, #3]
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	33e0      	adds	r3, #224	@ 0xe0
 80129f4:	009b      	lsls	r3, r3, #2
 80129f6:	4413      	add	r3, r2
 80129f8:	685a      	ldr	r2, [r3, #4]
 80129fa:	78fb      	ldrb	r3, [r7, #3]
 80129fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8012a00:	6879      	ldr	r1, [r7, #4]
 8012a02:	33e0      	adds	r3, #224	@ 0xe0
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	440b      	add	r3, r1
 8012a08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012a0a:	2300      	movs	r3, #0
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	370c      	adds	r7, #12
 8012a10:	46bd      	mov	sp, r7
 8012a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a16:	4770      	bx	lr

08012a18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	b085      	sub	sp, #20
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8012a20:	2300      	movs	r3, #0
 8012a22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012a24:	2300      	movs	r3, #0
 8012a26:	73fb      	strb	r3, [r7, #15]
 8012a28:	e00f      	b.n	8012a4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8012a2a:	7bfb      	ldrb	r3, [r7, #15]
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	33e0      	adds	r3, #224	@ 0xe0
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	4413      	add	r3, r2
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d102      	bne.n	8012a44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8012a3e:	7bfb      	ldrb	r3, [r7, #15]
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	e007      	b.n	8012a54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012a44:	7bfb      	ldrb	r3, [r7, #15]
 8012a46:	3301      	adds	r3, #1
 8012a48:	73fb      	strb	r3, [r7, #15]
 8012a4a:	7bfb      	ldrb	r3, [r7, #15]
 8012a4c:	2b0f      	cmp	r3, #15
 8012a4e:	d9ec      	bls.n	8012a2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8012a50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3714      	adds	r7, #20
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr

08012a60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b087      	sub	sp, #28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012a72:	2300      	movs	r3, #0
 8012a74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012a76:	4b1f      	ldr	r3, [pc, #124]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012a78:	7a5b      	ldrb	r3, [r3, #9]
 8012a7a:	b2db      	uxtb	r3, r3
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d131      	bne.n	8012ae4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012a80:	4b1c      	ldr	r3, [pc, #112]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012a82:	7a5b      	ldrb	r3, [r3, #9]
 8012a84:	b2db      	uxtb	r3, r3
 8012a86:	461a      	mov	r2, r3
 8012a88:	4b1a      	ldr	r3, [pc, #104]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012a8e:	4b19      	ldr	r3, [pc, #100]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012a90:	7a5b      	ldrb	r3, [r3, #9]
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	4a17      	ldr	r2, [pc, #92]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	4413      	add	r3, r2
 8012a9a:	68fa      	ldr	r2, [r7, #12]
 8012a9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012a9e:	4b15      	ldr	r3, [pc, #84]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012aa0:	7a5b      	ldrb	r3, [r3, #9]
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	4b13      	ldr	r3, [pc, #76]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012aa8:	4413      	add	r3, r2
 8012aaa:	79fa      	ldrb	r2, [r7, #7]
 8012aac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012aae:	4b11      	ldr	r3, [pc, #68]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012ab0:	7a5b      	ldrb	r3, [r3, #9]
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	1c5a      	adds	r2, r3, #1
 8012ab6:	b2d1      	uxtb	r1, r2
 8012ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8012af4 <FATFS_LinkDriverEx+0x94>)
 8012aba:	7251      	strb	r1, [r2, #9]
 8012abc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012abe:	7dbb      	ldrb	r3, [r7, #22]
 8012ac0:	3330      	adds	r3, #48	@ 0x30
 8012ac2:	b2da      	uxtb	r2, r3
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	3301      	adds	r3, #1
 8012acc:	223a      	movs	r2, #58	@ 0x3a
 8012ace:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	3302      	adds	r3, #2
 8012ad4:	222f      	movs	r2, #47	@ 0x2f
 8012ad6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	3303      	adds	r3, #3
 8012adc:	2200      	movs	r2, #0
 8012ade:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	371c      	adds	r7, #28
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr
 8012af2:	bf00      	nop
 8012af4:	20005a0c 	.word	0x20005a0c

08012af8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012b02:	2200      	movs	r2, #0
 8012b04:	6839      	ldr	r1, [r7, #0]
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ff ffaa 	bl	8012a60 <FATFS_LinkDriverEx>
 8012b0c:	4603      	mov	r3, r0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3708      	adds	r7, #8
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}

08012b16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012b16:	b480      	push	{r7}
 8012b18:	b085      	sub	sp, #20
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012b20:	2300      	movs	r3, #0
 8012b22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b28:	2b84      	cmp	r3, #132	@ 0x84
 8012b2a:	d005      	beq.n	8012b38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012b2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	4413      	add	r3, r2
 8012b34:	3303      	adds	r3, #3
 8012b36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012b38:	68fb      	ldr	r3, [r7, #12]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3714      	adds	r7, #20
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr

08012b46 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012b46:	b480      	push	{r7}
 8012b48:	b083      	sub	sp, #12
 8012b4a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b4c:	f3ef 8305 	mrs	r3, IPSR
 8012b50:	607b      	str	r3, [r7, #4]
  return(result);
 8012b52:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	bf14      	ite	ne
 8012b58:	2301      	movne	r3, #1
 8012b5a:	2300      	moveq	r3, #0
 8012b5c:	b2db      	uxtb	r3, r3
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	370c      	adds	r7, #12
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr

08012b6a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012b6e:	f001 fee5 	bl	801493c <vTaskStartScheduler>
  
  return osOK;
 8012b72:	2300      	movs	r3, #0
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012b7c:	f002 fb5a 	bl	8015234 <xTaskGetSchedulerState>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d101      	bne.n	8012b8a <osKernelRunning+0x12>
    return 0;
 8012b86:	2300      	movs	r3, #0
 8012b88:	e000      	b.n	8012b8c <osKernelRunning+0x14>
  else
    return 1;
 8012b8a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012b94:	f7ff ffd7 	bl	8012b46 <inHandlerMode>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d003      	beq.n	8012ba6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012b9e:	f001 fff9 	bl	8014b94 <xTaskGetTickCountFromISR>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	e002      	b.n	8012bac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012ba6:	f001 ffe5 	bl	8014b74 <xTaskGetTickCount>
 8012baa:	4603      	mov	r3, r0
  }
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bb2:	b089      	sub	sp, #36	@ 0x24
 8012bb4:	af04      	add	r7, sp, #16
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	695b      	ldr	r3, [r3, #20]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d020      	beq.n	8012c04 <osThreadCreate+0x54>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	699b      	ldr	r3, [r3, #24]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d01c      	beq.n	8012c04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	685c      	ldr	r4, [r3, #4]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	691e      	ldr	r6, [r3, #16]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7ff ff9a 	bl	8012b16 <makeFreeRtosPriority>
 8012be2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	695b      	ldr	r3, [r3, #20]
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bec:	9202      	str	r2, [sp, #8]
 8012bee:	9301      	str	r3, [sp, #4]
 8012bf0:	9100      	str	r1, [sp, #0]
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	4632      	mov	r2, r6
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f001 fc13 	bl	8014424 <xTaskCreateStatic>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	60fb      	str	r3, [r7, #12]
 8012c02:	e01c      	b.n	8012c3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	685c      	ldr	r4, [r3, #4]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012c10:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7ff ff7c 	bl	8012b16 <makeFreeRtosPriority>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	f107 030c 	add.w	r3, r7, #12
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	9200      	str	r2, [sp, #0]
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	4632      	mov	r2, r6
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f001 fc5e 	bl	80144f0 <xTaskCreate>
 8012c34:	4603      	mov	r3, r0
 8012c36:	2b01      	cmp	r3, #1
 8012c38:	d001      	beq.n	8012c3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	e000      	b.n	8012c40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3714      	adds	r7, #20
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c48 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f001 fda9 	bl	80147a8 <vTaskDelete>
  return osOK;
 8012c56:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3708      	adds	r7, #8
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d001      	beq.n	8012c76 <osDelay+0x16>
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	e000      	b.n	8012c78 <osDelay+0x18>
 8012c76:	2301      	movs	r3, #1
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f001 fe27 	bl	80148cc <vTaskDelay>
  
  return osOK;
 8012c7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d007      	beq.n	8012ca8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	2001      	movs	r0, #1
 8012ca0:	f000 fca7 	bl	80135f2 <xQueueCreateMutexStatic>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	e003      	b.n	8012cb0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012ca8:	2001      	movs	r0, #1
 8012caa:	f000 fc8a 	bl	80135c2 <xQueueCreateMutex>
 8012cae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d101      	bne.n	8012cd0 <osMutexWait+0x18>
    return osErrorParameter;
 8012ccc:	2380      	movs	r3, #128	@ 0x80
 8012cce:	e03a      	b.n	8012d46 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cda:	d103      	bne.n	8012ce4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8012cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ce0:	60fb      	str	r3, [r7, #12]
 8012ce2:	e009      	b.n	8012cf8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d006      	beq.n	8012cf8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d101      	bne.n	8012cf8 <osMutexWait+0x40>
      ticks = 1;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012cf8:	f7ff ff25 	bl	8012b46 <inHandlerMode>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d017      	beq.n	8012d32 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012d02:	f107 0308 	add.w	r3, r7, #8
 8012d06:	461a      	mov	r2, r3
 8012d08:	2100      	movs	r1, #0
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f001 f948 	bl	8013fa0 <xQueueReceiveFromISR>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d001      	beq.n	8012d1a <osMutexWait+0x62>
      return osErrorOS;
 8012d16:	23ff      	movs	r3, #255	@ 0xff
 8012d18:	e015      	b.n	8012d46 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d011      	beq.n	8012d44 <osMutexWait+0x8c>
 8012d20:	4b0b      	ldr	r3, [pc, #44]	@ (8012d50 <osMutexWait+0x98>)
 8012d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d26:	601a      	str	r2, [r3, #0]
 8012d28:	f3bf 8f4f 	dsb	sy
 8012d2c:	f3bf 8f6f 	isb	sy
 8012d30:	e008      	b.n	8012d44 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012d32:	68f9      	ldr	r1, [r7, #12]
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f001 f81b 	bl	8013d70 <xQueueSemaphoreTake>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b01      	cmp	r3, #1
 8012d3e:	d001      	beq.n	8012d44 <osMutexWait+0x8c>
    return osErrorOS;
 8012d40:	23ff      	movs	r3, #255	@ 0xff
 8012d42:	e000      	b.n	8012d46 <osMutexWait+0x8e>
  }
  
  return osOK;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	e000ed04 	.word	0xe000ed04

08012d54 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012d60:	2300      	movs	r3, #0
 8012d62:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8012d64:	f7ff feef 	bl	8012b46 <inHandlerMode>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d016      	beq.n	8012d9c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012d6e:	f107 0308 	add.w	r3, r7, #8
 8012d72:	4619      	mov	r1, r3
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 fe7a 	bl	8013a6e <xQueueGiveFromISR>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d001      	beq.n	8012d84 <osMutexRelease+0x30>
      return osErrorOS;
 8012d80:	23ff      	movs	r3, #255	@ 0xff
 8012d82:	e017      	b.n	8012db4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d013      	beq.n	8012db2 <osMutexRelease+0x5e>
 8012d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8012dbc <osMutexRelease+0x68>)
 8012d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	e00a      	b.n	8012db2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	2200      	movs	r2, #0
 8012da0:	2100      	movs	r1, #0
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f000 fcb6 	bl	8013714 <xQueueGenericSend>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	d001      	beq.n	8012db2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8012dae:	23ff      	movs	r3, #255	@ 0xff
 8012db0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8012db2:	68fb      	ldr	r3, [r7, #12]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	e000ed04 	.word	0xe000ed04

08012dc0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b086      	sub	sp, #24
 8012dc4:	af02      	add	r7, sp, #8
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d016      	beq.n	8012e00 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	2b01      	cmp	r3, #1
 8012dd6:	d10a      	bne.n	8012dee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	2203      	movs	r2, #3
 8012dde:	9200      	str	r2, [sp, #0]
 8012de0:	2200      	movs	r2, #0
 8012de2:	2100      	movs	r1, #0
 8012de4:	2001      	movs	r0, #1
 8012de6:	f000 fae9 	bl	80133bc <xQueueGenericCreateStatic>
 8012dea:	4603      	mov	r3, r0
 8012dec:	e023      	b.n	8012e36 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8012dee:	6838      	ldr	r0, [r7, #0]
 8012df0:	6839      	ldr	r1, [r7, #0]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	461a      	mov	r2, r3
 8012df8:	f000 fc16 	bl	8013628 <xQueueCreateCountingSemaphoreStatic>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	e01a      	b.n	8012e36 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d110      	bne.n	8012e28 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8012e06:	2203      	movs	r2, #3
 8012e08:	2100      	movs	r1, #0
 8012e0a:	2001      	movs	r0, #1
 8012e0c:	f000 fb5d 	bl	80134ca <xQueueGenericCreate>
 8012e10:	60f8      	str	r0, [r7, #12]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d005      	beq.n	8012e24 <osSemaphoreCreate+0x64>
 8012e18:	2300      	movs	r3, #0
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	68f8      	ldr	r0, [r7, #12]
 8012e20:	f000 fc78 	bl	8013714 <xQueueGenericSend>
      return sema;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	e006      	b.n	8012e36 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	4611      	mov	r1, r2
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f000 fc37 	bl	80136a2 <xQueueCreateCountingSemaphore>
 8012e34:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8012e36:	4618      	mov	r0, r3
 8012e38:	3710      	adds	r7, #16
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}
	...

08012e40 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d101      	bne.n	8012e58 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012e54:	2380      	movs	r3, #128	@ 0x80
 8012e56:	e03a      	b.n	8012ece <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e62:	d103      	bne.n	8012e6c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012e64:	f04f 33ff 	mov.w	r3, #4294967295
 8012e68:	60fb      	str	r3, [r7, #12]
 8012e6a:	e009      	b.n	8012e80 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d006      	beq.n	8012e80 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d101      	bne.n	8012e80 <osSemaphoreWait+0x40>
      ticks = 1;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012e80:	f7ff fe61 	bl	8012b46 <inHandlerMode>
 8012e84:	4603      	mov	r3, r0
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d017      	beq.n	8012eba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012e8a:	f107 0308 	add.w	r3, r7, #8
 8012e8e:	461a      	mov	r2, r3
 8012e90:	2100      	movs	r1, #0
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f001 f884 	bl	8013fa0 <xQueueReceiveFromISR>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	d001      	beq.n	8012ea2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8012e9e:	23ff      	movs	r3, #255	@ 0xff
 8012ea0:	e015      	b.n	8012ece <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d011      	beq.n	8012ecc <osSemaphoreWait+0x8c>
 8012ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8012ed8 <osSemaphoreWait+0x98>)
 8012eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012eae:	601a      	str	r2, [r3, #0]
 8012eb0:	f3bf 8f4f 	dsb	sy
 8012eb4:	f3bf 8f6f 	isb	sy
 8012eb8:	e008      	b.n	8012ecc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012eba:	68f9      	ldr	r1, [r7, #12]
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f000 ff57 	bl	8013d70 <xQueueSemaphoreTake>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b01      	cmp	r3, #1
 8012ec6:	d001      	beq.n	8012ecc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012ec8:	23ff      	movs	r3, #255	@ 0xff
 8012eca:	e000      	b.n	8012ece <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012ecc:	2300      	movs	r3, #0
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3710      	adds	r7, #16
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	e000ed04 	.word	0xe000ed04

08012edc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012eec:	f7ff fe2b 	bl	8012b46 <inHandlerMode>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d016      	beq.n	8012f24 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012ef6:	f107 0308 	add.w	r3, r7, #8
 8012efa:	4619      	mov	r1, r3
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f000 fdb6 	bl	8013a6e <xQueueGiveFromISR>
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d001      	beq.n	8012f0c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012f08:	23ff      	movs	r3, #255	@ 0xff
 8012f0a:	e017      	b.n	8012f3c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d013      	beq.n	8012f3a <osSemaphoreRelease+0x5e>
 8012f12:	4b0c      	ldr	r3, [pc, #48]	@ (8012f44 <osSemaphoreRelease+0x68>)
 8012f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f18:	601a      	str	r2, [r3, #0]
 8012f1a:	f3bf 8f4f 	dsb	sy
 8012f1e:	f3bf 8f6f 	isb	sy
 8012f22:	e00a      	b.n	8012f3a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012f24:	2300      	movs	r3, #0
 8012f26:	2200      	movs	r2, #0
 8012f28:	2100      	movs	r1, #0
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 fbf2 	bl	8013714 <xQueueGenericSend>
 8012f30:	4603      	mov	r3, r0
 8012f32:	2b01      	cmp	r3, #1
 8012f34:	d001      	beq.n	8012f3a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012f36:	23ff      	movs	r3, #255	@ 0xff
 8012f38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3710      	adds	r7, #16
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	e000ed04 	.word	0xe000ed04

08012f48 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012f50:	f7ff fdf9 	bl	8012b46 <inHandlerMode>
 8012f54:	4603      	mov	r3, r0
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d001      	beq.n	8012f5e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012f5a:	2382      	movs	r3, #130	@ 0x82
 8012f5c:	e003      	b.n	8012f66 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f001 f8e8 	bl	8014134 <vQueueDelete>

  return osOK; 
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}

08012f6e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012f6e:	b590      	push	{r4, r7, lr}
 8012f70:	b085      	sub	sp, #20
 8012f72:	af02      	add	r7, sp, #8
 8012f74:	6078      	str	r0, [r7, #4]
 8012f76:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d011      	beq.n	8012fa4 <osMessageCreate+0x36>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d00d      	beq.n	8012fa4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6818      	ldr	r0, [r3, #0]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6859      	ldr	r1, [r3, #4]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	689a      	ldr	r2, [r3, #8]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	2400      	movs	r4, #0
 8012f9a:	9400      	str	r4, [sp, #0]
 8012f9c:	f000 fa0e 	bl	80133bc <xQueueGenericCreateStatic>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	e008      	b.n	8012fb6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6818      	ldr	r0, [r3, #0]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	4619      	mov	r1, r3
 8012fb0:	f000 fa8b 	bl	80134ca <xQueueGenericCreate>
 8012fb4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	370c      	adds	r7, #12
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd90      	pop	{r4, r7, pc}
	...

08012fc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d101      	bne.n	8012fde <osMessagePut+0x1e>
    ticks = 1;
 8012fda:	2301      	movs	r3, #1
 8012fdc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012fde:	f7ff fdb2 	bl	8012b46 <inHandlerMode>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d018      	beq.n	801301a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012fe8:	f107 0210 	add.w	r2, r7, #16
 8012fec:	f107 0108 	add.w	r1, r7, #8
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	68f8      	ldr	r0, [r7, #12]
 8012ff4:	f000 fc98 	bl	8013928 <xQueueGenericSendFromISR>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d001      	beq.n	8013002 <osMessagePut+0x42>
      return osErrorOS;
 8012ffe:	23ff      	movs	r3, #255	@ 0xff
 8013000:	e018      	b.n	8013034 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d014      	beq.n	8013032 <osMessagePut+0x72>
 8013008:	4b0c      	ldr	r3, [pc, #48]	@ (801303c <osMessagePut+0x7c>)
 801300a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801300e:	601a      	str	r2, [r3, #0]
 8013010:	f3bf 8f4f 	dsb	sy
 8013014:	f3bf 8f6f 	isb	sy
 8013018:	e00b      	b.n	8013032 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801301a:	f107 0108 	add.w	r1, r7, #8
 801301e:	2300      	movs	r3, #0
 8013020:	697a      	ldr	r2, [r7, #20]
 8013022:	68f8      	ldr	r0, [r7, #12]
 8013024:	f000 fb76 	bl	8013714 <xQueueGenericSend>
 8013028:	4603      	mov	r3, r0
 801302a:	2b01      	cmp	r3, #1
 801302c:	d001      	beq.n	8013032 <osMessagePut+0x72>
      return osErrorOS;
 801302e:	23ff      	movs	r3, #255	@ 0xff
 8013030:	e000      	b.n	8013034 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3718      	adds	r7, #24
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	e000ed04 	.word	0xe000ed04

08013040 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013040:	b590      	push	{r4, r7, lr}
 8013042:	b08b      	sub	sp, #44	@ 0x2c
 8013044:	af00      	add	r7, sp, #0
 8013046:	60f8      	str	r0, [r7, #12]
 8013048:	60b9      	str	r1, [r7, #8]
 801304a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013050:	2300      	movs	r3, #0
 8013052:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d10a      	bne.n	8013070 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801305a:	2380      	movs	r3, #128	@ 0x80
 801305c:	617b      	str	r3, [r7, #20]
    return event;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	461c      	mov	r4, r3
 8013062:	f107 0314 	add.w	r3, r7, #20
 8013066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801306a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801306e:	e054      	b.n	801311a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013070:	2300      	movs	r3, #0
 8013072:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013074:	2300      	movs	r3, #0
 8013076:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801307e:	d103      	bne.n	8013088 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8013080:	f04f 33ff 	mov.w	r3, #4294967295
 8013084:	627b      	str	r3, [r7, #36]	@ 0x24
 8013086:	e009      	b.n	801309c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d006      	beq.n	801309c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8013092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013094:	2b00      	cmp	r3, #0
 8013096:	d101      	bne.n	801309c <osMessageGet+0x5c>
      ticks = 1;
 8013098:	2301      	movs	r3, #1
 801309a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 801309c:	f7ff fd53 	bl	8012b46 <inHandlerMode>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d01c      	beq.n	80130e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80130a6:	f107 0220 	add.w	r2, r7, #32
 80130aa:	f107 0314 	add.w	r3, r7, #20
 80130ae:	3304      	adds	r3, #4
 80130b0:	4619      	mov	r1, r3
 80130b2:	68b8      	ldr	r0, [r7, #8]
 80130b4:	f000 ff74 	bl	8013fa0 <xQueueReceiveFromISR>
 80130b8:	4603      	mov	r3, r0
 80130ba:	2b01      	cmp	r3, #1
 80130bc:	d102      	bne.n	80130c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80130be:	2310      	movs	r3, #16
 80130c0:	617b      	str	r3, [r7, #20]
 80130c2:	e001      	b.n	80130c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80130c4:	2300      	movs	r3, #0
 80130c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80130c8:	6a3b      	ldr	r3, [r7, #32]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d01d      	beq.n	801310a <osMessageGet+0xca>
 80130ce:	4b15      	ldr	r3, [pc, #84]	@ (8013124 <osMessageGet+0xe4>)
 80130d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130d4:	601a      	str	r2, [r3, #0]
 80130d6:	f3bf 8f4f 	dsb	sy
 80130da:	f3bf 8f6f 	isb	sy
 80130de:	e014      	b.n	801310a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80130e0:	f107 0314 	add.w	r3, r7, #20
 80130e4:	3304      	adds	r3, #4
 80130e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130e8:	4619      	mov	r1, r3
 80130ea:	68b8      	ldr	r0, [r7, #8]
 80130ec:	f000 fd58 	bl	8013ba0 <xQueueReceive>
 80130f0:	4603      	mov	r3, r0
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d102      	bne.n	80130fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80130f6:	2310      	movs	r3, #16
 80130f8:	617b      	str	r3, [r7, #20]
 80130fa:	e006      	b.n	801310a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80130fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d101      	bne.n	8013106 <osMessageGet+0xc6>
 8013102:	2300      	movs	r3, #0
 8013104:	e000      	b.n	8013108 <osMessageGet+0xc8>
 8013106:	2340      	movs	r3, #64	@ 0x40
 8013108:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	461c      	mov	r4, r3
 801310e:	f107 0314 	add.w	r3, r7, #20
 8013112:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	372c      	adds	r7, #44	@ 0x2c
 801311e:	46bd      	mov	sp, r7
 8013120:	bd90      	pop	{r4, r7, pc}
 8013122:	bf00      	nop
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013130:	f7ff fd09 	bl	8012b46 <inHandlerMode>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d004      	beq.n	8013144 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f000 ffd9 	bl	80140f2 <uxQueueMessagesWaitingFromISR>
 8013140:	4603      	mov	r3, r0
 8013142:	e003      	b.n	801314c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 ffb3 	bl	80140b0 <uxQueueMessagesWaiting>
 801314a:	4603      	mov	r3, r0
  }
}
 801314c:	4618      	mov	r0, r3
 801314e:	3708      	adds	r7, #8
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801315c:	f7ff fcf3 	bl	8012b46 <inHandlerMode>
 8013160:	4603      	mov	r3, r0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d001      	beq.n	801316a <osMessageDelete+0x16>
    return osErrorISR;
 8013166:	2382      	movs	r3, #130	@ 0x82
 8013168:	e003      	b.n	8013172 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f000 ffe2 	bl	8014134 <vQueueDelete>

  return osOK; 
 8013170:	2300      	movs	r3, #0
}
 8013172:	4618      	mov	r0, r3
 8013174:	3708      	adds	r7, #8
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}

0801317a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801317a:	b480      	push	{r7}
 801317c:	b083      	sub	sp, #12
 801317e:	af00      	add	r7, sp, #0
 8013180:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f103 0208 	add.w	r2, r3, #8
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f04f 32ff 	mov.w	r2, #4294967295
 8013192:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f103 0208 	add.w	r2, r3, #8
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f103 0208 	add.w	r2, r3, #8
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2200      	movs	r2, #0
 80131ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80131ae:	bf00      	nop
 80131b0:	370c      	adds	r7, #12
 80131b2:	46bd      	mov	sp, r7
 80131b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b8:	4770      	bx	lr

080131ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80131ba:	b480      	push	{r7}
 80131bc:	b083      	sub	sp, #12
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2200      	movs	r2, #0
 80131c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80131c8:	bf00      	nop
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80131d4:	b480      	push	{r7}
 80131d6:	b085      	sub	sp, #20
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	68fa      	ldr	r2, [r7, #12]
 80131e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	689a      	ldr	r2, [r3, #8]
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	689b      	ldr	r3, [r3, #8]
 80131f6:	683a      	ldr	r2, [r7, #0]
 80131f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	683a      	ldr	r2, [r7, #0]
 80131fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	1c5a      	adds	r2, r3, #1
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	601a      	str	r2, [r3, #0]
}
 8013210:	bf00      	nop
 8013212:	3714      	adds	r7, #20
 8013214:	46bd      	mov	sp, r7
 8013216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321a:	4770      	bx	lr

0801321c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801321c:	b480      	push	{r7}
 801321e:	b085      	sub	sp, #20
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013232:	d103      	bne.n	801323c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	691b      	ldr	r3, [r3, #16]
 8013238:	60fb      	str	r3, [r7, #12]
 801323a:	e00c      	b.n	8013256 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	3308      	adds	r3, #8
 8013240:	60fb      	str	r3, [r7, #12]
 8013242:	e002      	b.n	801324a <vListInsert+0x2e>
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	685b      	ldr	r3, [r3, #4]
 8013248:	60fb      	str	r3, [r7, #12]
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	68ba      	ldr	r2, [r7, #8]
 8013252:	429a      	cmp	r2, r3
 8013254:	d2f6      	bcs.n	8013244 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	685a      	ldr	r2, [r3, #4]
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	683a      	ldr	r2, [r7, #0]
 8013264:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	68fa      	ldr	r2, [r7, #12]
 801326a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	683a      	ldr	r2, [r7, #0]
 8013270:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	1c5a      	adds	r2, r3, #1
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	601a      	str	r2, [r3, #0]
}
 8013282:	bf00      	nop
 8013284:	3714      	adds	r7, #20
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr

0801328e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801328e:	b480      	push	{r7}
 8013290:	b085      	sub	sp, #20
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	691b      	ldr	r3, [r3, #16]
 801329a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	6892      	ldr	r2, [r2, #8]
 80132a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	6852      	ldr	r2, [r2, #4]
 80132ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d103      	bne.n	80132c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	689a      	ldr	r2, [r3, #8]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2200      	movs	r2, #0
 80132c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	1e5a      	subs	r2, r3, #1
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	3714      	adds	r7, #20
 80132da:	46bd      	mov	sp, r7
 80132dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e0:	4770      	bx	lr
	...

080132e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d10d      	bne.n	8013314 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80132f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132fc:	b672      	cpsid	i
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	b662      	cpsie	i
 801330c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801330e:	bf00      	nop
 8013310:	bf00      	nop
 8013312:	e7fd      	b.n	8013310 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013314:	f002 fae2 	bl	80158dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013320:	68f9      	ldr	r1, [r7, #12]
 8013322:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013324:	fb01 f303 	mul.w	r3, r1, r3
 8013328:	441a      	add	r2, r3
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2200      	movs	r2, #0
 8013332:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013344:	3b01      	subs	r3, #1
 8013346:	68f9      	ldr	r1, [r7, #12]
 8013348:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801334a:	fb01 f303 	mul.w	r3, r1, r3
 801334e:	441a      	add	r2, r3
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	22ff      	movs	r2, #255	@ 0xff
 8013358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	22ff      	movs	r2, #255	@ 0xff
 8013360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d114      	bne.n	8013394 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	691b      	ldr	r3, [r3, #16]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d01a      	beq.n	80133a8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	3310      	adds	r3, #16
 8013376:	4618      	mov	r0, r3
 8013378:	f001 fd8c 	bl	8014e94 <xTaskRemoveFromEventList>
 801337c:	4603      	mov	r3, r0
 801337e:	2b00      	cmp	r3, #0
 8013380:	d012      	beq.n	80133a8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013382:	4b0d      	ldr	r3, [pc, #52]	@ (80133b8 <xQueueGenericReset+0xd4>)
 8013384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013388:	601a      	str	r2, [r3, #0]
 801338a:	f3bf 8f4f 	dsb	sy
 801338e:	f3bf 8f6f 	isb	sy
 8013392:	e009      	b.n	80133a8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	3310      	adds	r3, #16
 8013398:	4618      	mov	r0, r3
 801339a:	f7ff feee 	bl	801317a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	3324      	adds	r3, #36	@ 0x24
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7ff fee9 	bl	801317a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80133a8:	f002 face 	bl	8015948 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80133ac:	2301      	movs	r3, #1
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	e000ed04 	.word	0xe000ed04

080133bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b08e      	sub	sp, #56	@ 0x38
 80133c0:	af02      	add	r7, sp, #8
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
 80133c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d10d      	bne.n	80133ec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80133d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133d4:	b672      	cpsid	i
 80133d6:	f383 8811 	msr	BASEPRI, r3
 80133da:	f3bf 8f6f 	isb	sy
 80133de:	f3bf 8f4f 	dsb	sy
 80133e2:	b662      	cpsie	i
 80133e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80133e6:	bf00      	nop
 80133e8:	bf00      	nop
 80133ea:	e7fd      	b.n	80133e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d10d      	bne.n	801340e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80133f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133f6:	b672      	cpsid	i
 80133f8:	f383 8811 	msr	BASEPRI, r3
 80133fc:	f3bf 8f6f 	isb	sy
 8013400:	f3bf 8f4f 	dsb	sy
 8013404:	b662      	cpsie	i
 8013406:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013408:	bf00      	nop
 801340a:	bf00      	nop
 801340c:	e7fd      	b.n	801340a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d002      	beq.n	801341a <xQueueGenericCreateStatic+0x5e>
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d001      	beq.n	801341e <xQueueGenericCreateStatic+0x62>
 801341a:	2301      	movs	r3, #1
 801341c:	e000      	b.n	8013420 <xQueueGenericCreateStatic+0x64>
 801341e:	2300      	movs	r3, #0
 8013420:	2b00      	cmp	r3, #0
 8013422:	d10d      	bne.n	8013440 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8013424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013428:	b672      	cpsid	i
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	b662      	cpsie	i
 8013438:	623b      	str	r3, [r7, #32]
}
 801343a:	bf00      	nop
 801343c:	bf00      	nop
 801343e:	e7fd      	b.n	801343c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d102      	bne.n	801344c <xQueueGenericCreateStatic+0x90>
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d101      	bne.n	8013450 <xQueueGenericCreateStatic+0x94>
 801344c:	2301      	movs	r3, #1
 801344e:	e000      	b.n	8013452 <xQueueGenericCreateStatic+0x96>
 8013450:	2300      	movs	r3, #0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d10d      	bne.n	8013472 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8013456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801345a:	b672      	cpsid	i
 801345c:	f383 8811 	msr	BASEPRI, r3
 8013460:	f3bf 8f6f 	isb	sy
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	b662      	cpsie	i
 801346a:	61fb      	str	r3, [r7, #28]
}
 801346c:	bf00      	nop
 801346e:	bf00      	nop
 8013470:	e7fd      	b.n	801346e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013472:	2348      	movs	r3, #72	@ 0x48
 8013474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	2b48      	cmp	r3, #72	@ 0x48
 801347a:	d00d      	beq.n	8013498 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 801347c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013480:	b672      	cpsid	i
 8013482:	f383 8811 	msr	BASEPRI, r3
 8013486:	f3bf 8f6f 	isb	sy
 801348a:	f3bf 8f4f 	dsb	sy
 801348e:	b662      	cpsie	i
 8013490:	61bb      	str	r3, [r7, #24]
}
 8013492:	bf00      	nop
 8013494:	bf00      	nop
 8013496:	e7fd      	b.n	8013494 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013498:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801349e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d00d      	beq.n	80134c0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80134a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a6:	2201      	movs	r2, #1
 80134a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80134ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80134b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b2:	9300      	str	r3, [sp, #0]
 80134b4:	4613      	mov	r3, r2
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	68b9      	ldr	r1, [r7, #8]
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f000 f848 	bl	8013550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80134c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3730      	adds	r7, #48	@ 0x30
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}

080134ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80134ca:	b580      	push	{r7, lr}
 80134cc:	b08a      	sub	sp, #40	@ 0x28
 80134ce:	af02      	add	r7, sp, #8
 80134d0:	60f8      	str	r0, [r7, #12]
 80134d2:	60b9      	str	r1, [r7, #8]
 80134d4:	4613      	mov	r3, r2
 80134d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d10d      	bne.n	80134fa <xQueueGenericCreate+0x30>
	__asm volatile
 80134de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134e2:	b672      	cpsid	i
 80134e4:	f383 8811 	msr	BASEPRI, r3
 80134e8:	f3bf 8f6f 	isb	sy
 80134ec:	f3bf 8f4f 	dsb	sy
 80134f0:	b662      	cpsie	i
 80134f2:	613b      	str	r3, [r7, #16]
}
 80134f4:	bf00      	nop
 80134f6:	bf00      	nop
 80134f8:	e7fd      	b.n	80134f6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d102      	bne.n	8013506 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013500:	2300      	movs	r3, #0
 8013502:	61fb      	str	r3, [r7, #28]
 8013504:	e004      	b.n	8013510 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	fb02 f303 	mul.w	r3, r2, r3
 801350e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	3348      	adds	r3, #72	@ 0x48
 8013514:	4618      	mov	r0, r3
 8013516:	f002 fb0f 	bl	8015b38 <pvPortMalloc>
 801351a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d011      	beq.n	8013546 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	3348      	adds	r3, #72	@ 0x48
 801352a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	2200      	movs	r2, #0
 8013530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013534:	79fa      	ldrb	r2, [r7, #7]
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	4613      	mov	r3, r2
 801353c:	697a      	ldr	r2, [r7, #20]
 801353e:	68b9      	ldr	r1, [r7, #8]
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	f000 f805 	bl	8013550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013546:	69bb      	ldr	r3, [r7, #24]
	}
 8013548:	4618      	mov	r0, r3
 801354a:	3720      	adds	r7, #32
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	60f8      	str	r0, [r7, #12]
 8013558:	60b9      	str	r1, [r7, #8]
 801355a:	607a      	str	r2, [r7, #4]
 801355c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d103      	bne.n	801356c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	69ba      	ldr	r2, [r7, #24]
 8013568:	601a      	str	r2, [r3, #0]
 801356a:	e002      	b.n	8013572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801356c:	69bb      	ldr	r3, [r7, #24]
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	68ba      	ldr	r2, [r7, #8]
 801357c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801357e:	2101      	movs	r1, #1
 8013580:	69b8      	ldr	r0, [r7, #24]
 8013582:	f7ff feaf 	bl	80132e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013586:	bf00      	nop
 8013588:	3710      	adds	r7, #16
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}

0801358e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801358e:	b580      	push	{r7, lr}
 8013590:	b082      	sub	sp, #8
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d00e      	beq.n	80135ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2200      	movs	r2, #0
 80135a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2200      	movs	r2, #0
 80135ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80135ae:	2300      	movs	r3, #0
 80135b0:	2200      	movs	r2, #0
 80135b2:	2100      	movs	r1, #0
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 f8ad 	bl	8013714 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80135ba:	bf00      	nop
 80135bc:	3708      	adds	r7, #8
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}

080135c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80135c2:	b580      	push	{r7, lr}
 80135c4:	b086      	sub	sp, #24
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	4603      	mov	r3, r0
 80135ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80135cc:	2301      	movs	r3, #1
 80135ce:	617b      	str	r3, [r7, #20]
 80135d0:	2300      	movs	r3, #0
 80135d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80135d4:	79fb      	ldrb	r3, [r7, #7]
 80135d6:	461a      	mov	r2, r3
 80135d8:	6939      	ldr	r1, [r7, #16]
 80135da:	6978      	ldr	r0, [r7, #20]
 80135dc:	f7ff ff75 	bl	80134ca <xQueueGenericCreate>
 80135e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80135e2:	68f8      	ldr	r0, [r7, #12]
 80135e4:	f7ff ffd3 	bl	801358e <prvInitialiseMutex>

		return xNewQueue;
 80135e8:	68fb      	ldr	r3, [r7, #12]
	}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3718      	adds	r7, #24
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}

080135f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80135f2:	b580      	push	{r7, lr}
 80135f4:	b088      	sub	sp, #32
 80135f6:	af02      	add	r7, sp, #8
 80135f8:	4603      	mov	r3, r0
 80135fa:	6039      	str	r1, [r7, #0]
 80135fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80135fe:	2301      	movs	r3, #1
 8013600:	617b      	str	r3, [r7, #20]
 8013602:	2300      	movs	r3, #0
 8013604:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013606:	79fb      	ldrb	r3, [r7, #7]
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	2200      	movs	r2, #0
 801360e:	6939      	ldr	r1, [r7, #16]
 8013610:	6978      	ldr	r0, [r7, #20]
 8013612:	f7ff fed3 	bl	80133bc <xQueueGenericCreateStatic>
 8013616:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7ff ffb8 	bl	801358e <prvInitialiseMutex>

		return xNewQueue;
 801361e:	68fb      	ldr	r3, [r7, #12]
	}
 8013620:	4618      	mov	r0, r3
 8013622:	3718      	adds	r7, #24
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013628:	b580      	push	{r7, lr}
 801362a:	b08a      	sub	sp, #40	@ 0x28
 801362c:	af02      	add	r7, sp, #8
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10d      	bne.n	8013656 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 801363a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801363e:	b672      	cpsid	i
 8013640:	f383 8811 	msr	BASEPRI, r3
 8013644:	f3bf 8f6f 	isb	sy
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	b662      	cpsie	i
 801364e:	61bb      	str	r3, [r7, #24]
}
 8013650:	bf00      	nop
 8013652:	bf00      	nop
 8013654:	e7fd      	b.n	8013652 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	429a      	cmp	r2, r3
 801365c:	d90d      	bls.n	801367a <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 801365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013662:	b672      	cpsid	i
 8013664:	f383 8811 	msr	BASEPRI, r3
 8013668:	f3bf 8f6f 	isb	sy
 801366c:	f3bf 8f4f 	dsb	sy
 8013670:	b662      	cpsie	i
 8013672:	617b      	str	r3, [r7, #20]
}
 8013674:	bf00      	nop
 8013676:	bf00      	nop
 8013678:	e7fd      	b.n	8013676 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801367a:	2302      	movs	r3, #2
 801367c:	9300      	str	r3, [sp, #0]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2200      	movs	r2, #0
 8013682:	2100      	movs	r1, #0
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	f7ff fe99 	bl	80133bc <xQueueGenericCreateStatic>
 801368a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d002      	beq.n	8013698 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	68ba      	ldr	r2, [r7, #8]
 8013696:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013698:	69fb      	ldr	r3, [r7, #28]
	}
 801369a:	4618      	mov	r0, r3
 801369c:	3720      	adds	r7, #32
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}

080136a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80136a2:	b580      	push	{r7, lr}
 80136a4:	b086      	sub	sp, #24
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
 80136aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d10d      	bne.n	80136ce <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80136b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136b6:	b672      	cpsid	i
 80136b8:	f383 8811 	msr	BASEPRI, r3
 80136bc:	f3bf 8f6f 	isb	sy
 80136c0:	f3bf 8f4f 	dsb	sy
 80136c4:	b662      	cpsie	i
 80136c6:	613b      	str	r3, [r7, #16]
}
 80136c8:	bf00      	nop
 80136ca:	bf00      	nop
 80136cc:	e7fd      	b.n	80136ca <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80136ce:	683a      	ldr	r2, [r7, #0]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	429a      	cmp	r2, r3
 80136d4:	d90d      	bls.n	80136f2 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80136d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136da:	b672      	cpsid	i
 80136dc:	f383 8811 	msr	BASEPRI, r3
 80136e0:	f3bf 8f6f 	isb	sy
 80136e4:	f3bf 8f4f 	dsb	sy
 80136e8:	b662      	cpsie	i
 80136ea:	60fb      	str	r3, [r7, #12]
}
 80136ec:	bf00      	nop
 80136ee:	bf00      	nop
 80136f0:	e7fd      	b.n	80136ee <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80136f2:	2202      	movs	r2, #2
 80136f4:	2100      	movs	r1, #0
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f7ff fee7 	bl	80134ca <xQueueGenericCreate>
 80136fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d002      	beq.n	801370a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	683a      	ldr	r2, [r7, #0]
 8013708:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801370a:	697b      	ldr	r3, [r7, #20]
	}
 801370c:	4618      	mov	r0, r3
 801370e:	3718      	adds	r7, #24
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b08e      	sub	sp, #56	@ 0x38
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	607a      	str	r2, [r7, #4]
 8013720:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013722:	2300      	movs	r3, #0
 8013724:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10d      	bne.n	801374c <xQueueGenericSend+0x38>
	__asm volatile
 8013730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013734:	b672      	cpsid	i
 8013736:	f383 8811 	msr	BASEPRI, r3
 801373a:	f3bf 8f6f 	isb	sy
 801373e:	f3bf 8f4f 	dsb	sy
 8013742:	b662      	cpsie	i
 8013744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013746:	bf00      	nop
 8013748:	bf00      	nop
 801374a:	e7fd      	b.n	8013748 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d103      	bne.n	801375a <xQueueGenericSend+0x46>
 8013752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013756:	2b00      	cmp	r3, #0
 8013758:	d101      	bne.n	801375e <xQueueGenericSend+0x4a>
 801375a:	2301      	movs	r3, #1
 801375c:	e000      	b.n	8013760 <xQueueGenericSend+0x4c>
 801375e:	2300      	movs	r3, #0
 8013760:	2b00      	cmp	r3, #0
 8013762:	d10d      	bne.n	8013780 <xQueueGenericSend+0x6c>
	__asm volatile
 8013764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013768:	b672      	cpsid	i
 801376a:	f383 8811 	msr	BASEPRI, r3
 801376e:	f3bf 8f6f 	isb	sy
 8013772:	f3bf 8f4f 	dsb	sy
 8013776:	b662      	cpsie	i
 8013778:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801377a:	bf00      	nop
 801377c:	bf00      	nop
 801377e:	e7fd      	b.n	801377c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	2b02      	cmp	r3, #2
 8013784:	d103      	bne.n	801378e <xQueueGenericSend+0x7a>
 8013786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801378a:	2b01      	cmp	r3, #1
 801378c:	d101      	bne.n	8013792 <xQueueGenericSend+0x7e>
 801378e:	2301      	movs	r3, #1
 8013790:	e000      	b.n	8013794 <xQueueGenericSend+0x80>
 8013792:	2300      	movs	r3, #0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d10d      	bne.n	80137b4 <xQueueGenericSend+0xa0>
	__asm volatile
 8013798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801379c:	b672      	cpsid	i
 801379e:	f383 8811 	msr	BASEPRI, r3
 80137a2:	f3bf 8f6f 	isb	sy
 80137a6:	f3bf 8f4f 	dsb	sy
 80137aa:	b662      	cpsie	i
 80137ac:	623b      	str	r3, [r7, #32]
}
 80137ae:	bf00      	nop
 80137b0:	bf00      	nop
 80137b2:	e7fd      	b.n	80137b0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137b4:	f001 fd3e 	bl	8015234 <xTaskGetSchedulerState>
 80137b8:	4603      	mov	r3, r0
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d102      	bne.n	80137c4 <xQueueGenericSend+0xb0>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d101      	bne.n	80137c8 <xQueueGenericSend+0xb4>
 80137c4:	2301      	movs	r3, #1
 80137c6:	e000      	b.n	80137ca <xQueueGenericSend+0xb6>
 80137c8:	2300      	movs	r3, #0
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d10d      	bne.n	80137ea <xQueueGenericSend+0xd6>
	__asm volatile
 80137ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137d2:	b672      	cpsid	i
 80137d4:	f383 8811 	msr	BASEPRI, r3
 80137d8:	f3bf 8f6f 	isb	sy
 80137dc:	f3bf 8f4f 	dsb	sy
 80137e0:	b662      	cpsie	i
 80137e2:	61fb      	str	r3, [r7, #28]
}
 80137e4:	bf00      	nop
 80137e6:	bf00      	nop
 80137e8:	e7fd      	b.n	80137e6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80137ea:	f002 f877 	bl	80158dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80137ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d302      	bcc.n	8013800 <xQueueGenericSend+0xec>
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	2b02      	cmp	r3, #2
 80137fe:	d129      	bne.n	8013854 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013800:	683a      	ldr	r2, [r7, #0]
 8013802:	68b9      	ldr	r1, [r7, #8]
 8013804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013806:	f000 fcd3 	bl	80141b0 <prvCopyDataToQueue>
 801380a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013810:	2b00      	cmp	r3, #0
 8013812:	d010      	beq.n	8013836 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013816:	3324      	adds	r3, #36	@ 0x24
 8013818:	4618      	mov	r0, r3
 801381a:	f001 fb3b 	bl	8014e94 <xTaskRemoveFromEventList>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d013      	beq.n	801384c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013824:	4b3f      	ldr	r3, [pc, #252]	@ (8013924 <xQueueGenericSend+0x210>)
 8013826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801382a:	601a      	str	r2, [r3, #0]
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	e00a      	b.n	801384c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013838:	2b00      	cmp	r3, #0
 801383a:	d007      	beq.n	801384c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801383c:	4b39      	ldr	r3, [pc, #228]	@ (8013924 <xQueueGenericSend+0x210>)
 801383e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013842:	601a      	str	r2, [r3, #0]
 8013844:	f3bf 8f4f 	dsb	sy
 8013848:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801384c:	f002 f87c 	bl	8015948 <vPortExitCritical>
				return pdPASS;
 8013850:	2301      	movs	r3, #1
 8013852:	e063      	b.n	801391c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d103      	bne.n	8013862 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801385a:	f002 f875 	bl	8015948 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801385e:	2300      	movs	r3, #0
 8013860:	e05c      	b.n	801391c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013864:	2b00      	cmp	r3, #0
 8013866:	d106      	bne.n	8013876 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013868:	f107 0314 	add.w	r3, r7, #20
 801386c:	4618      	mov	r0, r3
 801386e:	f001 fb77 	bl	8014f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013872:	2301      	movs	r3, #1
 8013874:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013876:	f002 f867 	bl	8015948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801387a:	f001 f8cd 	bl	8014a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801387e:	f002 f82d 	bl	80158dc <vPortEnterCritical>
 8013882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013884:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013888:	b25b      	sxtb	r3, r3
 801388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801388e:	d103      	bne.n	8013898 <xQueueGenericSend+0x184>
 8013890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013892:	2200      	movs	r2, #0
 8013894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801389a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801389e:	b25b      	sxtb	r3, r3
 80138a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a4:	d103      	bne.n	80138ae <xQueueGenericSend+0x19a>
 80138a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138a8:	2200      	movs	r2, #0
 80138aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138ae:	f002 f84b 	bl	8015948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138b2:	1d3a      	adds	r2, r7, #4
 80138b4:	f107 0314 	add.w	r3, r7, #20
 80138b8:	4611      	mov	r1, r2
 80138ba:	4618      	mov	r0, r3
 80138bc:	f001 fb66 	bl	8014f8c <xTaskCheckForTimeOut>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d124      	bne.n	8013910 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80138c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138c8:	f000 fd6a 	bl	80143a0 <prvIsQueueFull>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d018      	beq.n	8013904 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80138d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138d4:	3310      	adds	r3, #16
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	4611      	mov	r1, r2
 80138da:	4618      	mov	r0, r3
 80138dc:	f001 fab2 	bl	8014e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80138e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138e2:	f000 fcf5 	bl	80142d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80138e6:	f001 f8a5 	bl	8014a34 <xTaskResumeAll>
 80138ea:	4603      	mov	r3, r0
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	f47f af7c 	bne.w	80137ea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80138f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013924 <xQueueGenericSend+0x210>)
 80138f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138f8:	601a      	str	r2, [r3, #0]
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	f3bf 8f6f 	isb	sy
 8013902:	e772      	b.n	80137ea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013906:	f000 fce3 	bl	80142d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801390a:	f001 f893 	bl	8014a34 <xTaskResumeAll>
 801390e:	e76c      	b.n	80137ea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013912:	f000 fcdd 	bl	80142d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013916:	f001 f88d 	bl	8014a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801391a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801391c:	4618      	mov	r0, r3
 801391e:	3738      	adds	r7, #56	@ 0x38
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	e000ed04 	.word	0xe000ed04

08013928 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b08e      	sub	sp, #56	@ 0x38
 801392c:	af00      	add	r7, sp, #0
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	60b9      	str	r1, [r7, #8]
 8013932:	607a      	str	r2, [r7, #4]
 8013934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393c:	2b00      	cmp	r3, #0
 801393e:	d10d      	bne.n	801395c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013944:	b672      	cpsid	i
 8013946:	f383 8811 	msr	BASEPRI, r3
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	f3bf 8f4f 	dsb	sy
 8013952:	b662      	cpsie	i
 8013954:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013956:	bf00      	nop
 8013958:	bf00      	nop
 801395a:	e7fd      	b.n	8013958 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d103      	bne.n	801396a <xQueueGenericSendFromISR+0x42>
 8013962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013966:	2b00      	cmp	r3, #0
 8013968:	d101      	bne.n	801396e <xQueueGenericSendFromISR+0x46>
 801396a:	2301      	movs	r3, #1
 801396c:	e000      	b.n	8013970 <xQueueGenericSendFromISR+0x48>
 801396e:	2300      	movs	r3, #0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d10d      	bne.n	8013990 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8013974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013978:	b672      	cpsid	i
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
 8013986:	b662      	cpsie	i
 8013988:	623b      	str	r3, [r7, #32]
}
 801398a:	bf00      	nop
 801398c:	bf00      	nop
 801398e:	e7fd      	b.n	801398c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	2b02      	cmp	r3, #2
 8013994:	d103      	bne.n	801399e <xQueueGenericSendFromISR+0x76>
 8013996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801399a:	2b01      	cmp	r3, #1
 801399c:	d101      	bne.n	80139a2 <xQueueGenericSendFromISR+0x7a>
 801399e:	2301      	movs	r3, #1
 80139a0:	e000      	b.n	80139a4 <xQueueGenericSendFromISR+0x7c>
 80139a2:	2300      	movs	r3, #0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10d      	bne.n	80139c4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80139a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ac:	b672      	cpsid	i
 80139ae:	f383 8811 	msr	BASEPRI, r3
 80139b2:	f3bf 8f6f 	isb	sy
 80139b6:	f3bf 8f4f 	dsb	sy
 80139ba:	b662      	cpsie	i
 80139bc:	61fb      	str	r3, [r7, #28]
}
 80139be:	bf00      	nop
 80139c0:	bf00      	nop
 80139c2:	e7fd      	b.n	80139c0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139c4:	f002 f872 	bl	8015aac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80139c8:	f3ef 8211 	mrs	r2, BASEPRI
 80139cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139d0:	b672      	cpsid	i
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	b662      	cpsie	i
 80139e0:	61ba      	str	r2, [r7, #24]
 80139e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80139e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d302      	bcc.n	80139fa <xQueueGenericSendFromISR+0xd2>
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	2b02      	cmp	r3, #2
 80139f8:	d12c      	bne.n	8013a54 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80139fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a04:	683a      	ldr	r2, [r7, #0]
 8013a06:	68b9      	ldr	r1, [r7, #8]
 8013a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a0a:	f000 fbd1 	bl	80141b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013a0e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8013a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a16:	d112      	bne.n	8013a3e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d016      	beq.n	8013a4e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a22:	3324      	adds	r3, #36	@ 0x24
 8013a24:	4618      	mov	r0, r3
 8013a26:	f001 fa35 	bl	8014e94 <xTaskRemoveFromEventList>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d00e      	beq.n	8013a4e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d00b      	beq.n	8013a4e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2201      	movs	r2, #1
 8013a3a:	601a      	str	r2, [r3, #0]
 8013a3c:	e007      	b.n	8013a4e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013a42:	3301      	adds	r3, #1
 8013a44:	b2db      	uxtb	r3, r3
 8013a46:	b25a      	sxtb	r2, r3
 8013a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8013a52:	e001      	b.n	8013a58 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013a54:	2300      	movs	r3, #0
 8013a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a5a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013a62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013a66:	4618      	mov	r0, r3
 8013a68:	3738      	adds	r7, #56	@ 0x38
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}

08013a6e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b08e      	sub	sp, #56	@ 0x38
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
 8013a76:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d10d      	bne.n	8013a9e <xQueueGiveFromISR+0x30>
	__asm volatile
 8013a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a86:	b672      	cpsid	i
 8013a88:	f383 8811 	msr	BASEPRI, r3
 8013a8c:	f3bf 8f6f 	isb	sy
 8013a90:	f3bf 8f4f 	dsb	sy
 8013a94:	b662      	cpsie	i
 8013a96:	623b      	str	r3, [r7, #32]
}
 8013a98:	bf00      	nop
 8013a9a:	bf00      	nop
 8013a9c:	e7fd      	b.n	8013a9a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d00d      	beq.n	8013ac2 <xQueueGiveFromISR+0x54>
	__asm volatile
 8013aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aaa:	b672      	cpsid	i
 8013aac:	f383 8811 	msr	BASEPRI, r3
 8013ab0:	f3bf 8f6f 	isb	sy
 8013ab4:	f3bf 8f4f 	dsb	sy
 8013ab8:	b662      	cpsie	i
 8013aba:	61fb      	str	r3, [r7, #28]
}
 8013abc:	bf00      	nop
 8013abe:	bf00      	nop
 8013ac0:	e7fd      	b.n	8013abe <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d103      	bne.n	8013ad2 <xQueueGiveFromISR+0x64>
 8013aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013acc:	689b      	ldr	r3, [r3, #8]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d101      	bne.n	8013ad6 <xQueueGiveFromISR+0x68>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e000      	b.n	8013ad8 <xQueueGiveFromISR+0x6a>
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d10d      	bne.n	8013af8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8013adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ae0:	b672      	cpsid	i
 8013ae2:	f383 8811 	msr	BASEPRI, r3
 8013ae6:	f3bf 8f6f 	isb	sy
 8013aea:	f3bf 8f4f 	dsb	sy
 8013aee:	b662      	cpsie	i
 8013af0:	61bb      	str	r3, [r7, #24]
}
 8013af2:	bf00      	nop
 8013af4:	bf00      	nop
 8013af6:	e7fd      	b.n	8013af4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013af8:	f001 ffd8 	bl	8015aac <vPortValidateInterruptPriority>
	__asm volatile
 8013afc:	f3ef 8211 	mrs	r2, BASEPRI
 8013b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b04:	b672      	cpsid	i
 8013b06:	f383 8811 	msr	BASEPRI, r3
 8013b0a:	f3bf 8f6f 	isb	sy
 8013b0e:	f3bf 8f4f 	dsb	sy
 8013b12:	b662      	cpsie	i
 8013b14:	617a      	str	r2, [r7, #20]
 8013b16:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013b18:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b20:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d22b      	bcs.n	8013b84 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b38:	1c5a      	adds	r2, r3, #1
 8013b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b3c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b46:	d112      	bne.n	8013b6e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d016      	beq.n	8013b7e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b52:	3324      	adds	r3, #36	@ 0x24
 8013b54:	4618      	mov	r0, r3
 8013b56:	f001 f99d 	bl	8014e94 <xTaskRemoveFromEventList>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d00e      	beq.n	8013b7e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d00b      	beq.n	8013b7e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	601a      	str	r2, [r3, #0]
 8013b6c:	e007      	b.n	8013b7e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b72:	3301      	adds	r3, #1
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	b25a      	sxtb	r2, r3
 8013b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013b7e:	2301      	movs	r3, #1
 8013b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b82:	e001      	b.n	8013b88 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b84:	2300      	movs	r3, #0
 8013b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b8a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	f383 8811 	msr	BASEPRI, r3
}
 8013b92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3738      	adds	r7, #56	@ 0x38
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
	...

08013ba0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b08c      	sub	sp, #48	@ 0x30
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	60b9      	str	r1, [r7, #8]
 8013baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013bac:	2300      	movs	r3, #0
 8013bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d10d      	bne.n	8013bd6 <xQueueReceive+0x36>
	__asm volatile
 8013bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bbe:	b672      	cpsid	i
 8013bc0:	f383 8811 	msr	BASEPRI, r3
 8013bc4:	f3bf 8f6f 	isb	sy
 8013bc8:	f3bf 8f4f 	dsb	sy
 8013bcc:	b662      	cpsie	i
 8013bce:	623b      	str	r3, [r7, #32]
}
 8013bd0:	bf00      	nop
 8013bd2:	bf00      	nop
 8013bd4:	e7fd      	b.n	8013bd2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d103      	bne.n	8013be4 <xQueueReceive+0x44>
 8013bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d101      	bne.n	8013be8 <xQueueReceive+0x48>
 8013be4:	2301      	movs	r3, #1
 8013be6:	e000      	b.n	8013bea <xQueueReceive+0x4a>
 8013be8:	2300      	movs	r3, #0
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d10d      	bne.n	8013c0a <xQueueReceive+0x6a>
	__asm volatile
 8013bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bf2:	b672      	cpsid	i
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	b662      	cpsie	i
 8013c02:	61fb      	str	r3, [r7, #28]
}
 8013c04:	bf00      	nop
 8013c06:	bf00      	nop
 8013c08:	e7fd      	b.n	8013c06 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c0a:	f001 fb13 	bl	8015234 <xTaskGetSchedulerState>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d102      	bne.n	8013c1a <xQueueReceive+0x7a>
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d101      	bne.n	8013c1e <xQueueReceive+0x7e>
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e000      	b.n	8013c20 <xQueueReceive+0x80>
 8013c1e:	2300      	movs	r3, #0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d10d      	bne.n	8013c40 <xQueueReceive+0xa0>
	__asm volatile
 8013c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c28:	b672      	cpsid	i
 8013c2a:	f383 8811 	msr	BASEPRI, r3
 8013c2e:	f3bf 8f6f 	isb	sy
 8013c32:	f3bf 8f4f 	dsb	sy
 8013c36:	b662      	cpsie	i
 8013c38:	61bb      	str	r3, [r7, #24]
}
 8013c3a:	bf00      	nop
 8013c3c:	bf00      	nop
 8013c3e:	e7fd      	b.n	8013c3c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c40:	f001 fe4c 	bl	80158dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d01f      	beq.n	8013c90 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c50:	68b9      	ldr	r1, [r7, #8]
 8013c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c54:	f000 fb16 	bl	8014284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c5a:	1e5a      	subs	r2, r3, #1
 8013c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c62:	691b      	ldr	r3, [r3, #16]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d00f      	beq.n	8013c88 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c6a:	3310      	adds	r3, #16
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f001 f911 	bl	8014e94 <xTaskRemoveFromEventList>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d007      	beq.n	8013c88 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013c78:	4b3c      	ldr	r3, [pc, #240]	@ (8013d6c <xQueueReceive+0x1cc>)
 8013c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c7e:	601a      	str	r2, [r3, #0]
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c88:	f001 fe5e 	bl	8015948 <vPortExitCritical>
				return pdPASS;
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	e069      	b.n	8013d64 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d103      	bne.n	8013c9e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c96:	f001 fe57 	bl	8015948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	e062      	b.n	8013d64 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d106      	bne.n	8013cb2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ca4:	f107 0310 	add.w	r3, r7, #16
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f001 f959 	bl	8014f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cae:	2301      	movs	r3, #1
 8013cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cb2:	f001 fe49 	bl	8015948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cb6:	f000 feaf 	bl	8014a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cba:	f001 fe0f 	bl	80158dc <vPortEnterCritical>
 8013cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013cc4:	b25b      	sxtb	r3, r3
 8013cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cca:	d103      	bne.n	8013cd4 <xQueueReceive+0x134>
 8013ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cce:	2200      	movs	r2, #0
 8013cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013cda:	b25b      	sxtb	r3, r3
 8013cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce0:	d103      	bne.n	8013cea <xQueueReceive+0x14a>
 8013ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013cea:	f001 fe2d 	bl	8015948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013cee:	1d3a      	adds	r2, r7, #4
 8013cf0:	f107 0310 	add.w	r3, r7, #16
 8013cf4:	4611      	mov	r1, r2
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f001 f948 	bl	8014f8c <xTaskCheckForTimeOut>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d123      	bne.n	8013d4a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d04:	f000 fb36 	bl	8014374 <prvIsQueueEmpty>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d017      	beq.n	8013d3e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d10:	3324      	adds	r3, #36	@ 0x24
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	4611      	mov	r1, r2
 8013d16:	4618      	mov	r0, r3
 8013d18:	f001 f894 	bl	8014e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d1e:	f000 fad7 	bl	80142d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d22:	f000 fe87 	bl	8014a34 <xTaskResumeAll>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d189      	bne.n	8013c40 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8013d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8013d6c <xQueueReceive+0x1cc>)
 8013d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d32:	601a      	str	r2, [r3, #0]
 8013d34:	f3bf 8f4f 	dsb	sy
 8013d38:	f3bf 8f6f 	isb	sy
 8013d3c:	e780      	b.n	8013c40 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013d3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d40:	f000 fac6 	bl	80142d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d44:	f000 fe76 	bl	8014a34 <xTaskResumeAll>
 8013d48:	e77a      	b.n	8013c40 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d4c:	f000 fac0 	bl	80142d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d50:	f000 fe70 	bl	8014a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d56:	f000 fb0d 	bl	8014374 <prvIsQueueEmpty>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	f43f af6f 	beq.w	8013c40 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013d62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3730      	adds	r7, #48	@ 0x30
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	e000ed04 	.word	0xe000ed04

08013d70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b08e      	sub	sp, #56	@ 0x38
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013d82:	2300      	movs	r3, #0
 8013d84:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d10d      	bne.n	8013da8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d90:	b672      	cpsid	i
 8013d92:	f383 8811 	msr	BASEPRI, r3
 8013d96:	f3bf 8f6f 	isb	sy
 8013d9a:	f3bf 8f4f 	dsb	sy
 8013d9e:	b662      	cpsie	i
 8013da0:	623b      	str	r3, [r7, #32]
}
 8013da2:	bf00      	nop
 8013da4:	bf00      	nop
 8013da6:	e7fd      	b.n	8013da4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d00d      	beq.n	8013dcc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8013db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013db4:	b672      	cpsid	i
 8013db6:	f383 8811 	msr	BASEPRI, r3
 8013dba:	f3bf 8f6f 	isb	sy
 8013dbe:	f3bf 8f4f 	dsb	sy
 8013dc2:	b662      	cpsie	i
 8013dc4:	61fb      	str	r3, [r7, #28]
}
 8013dc6:	bf00      	nop
 8013dc8:	bf00      	nop
 8013dca:	e7fd      	b.n	8013dc8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013dcc:	f001 fa32 	bl	8015234 <xTaskGetSchedulerState>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d102      	bne.n	8013ddc <xQueueSemaphoreTake+0x6c>
 8013dd6:	683b      	ldr	r3, [r7, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d101      	bne.n	8013de0 <xQueueSemaphoreTake+0x70>
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e000      	b.n	8013de2 <xQueueSemaphoreTake+0x72>
 8013de0:	2300      	movs	r3, #0
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d10d      	bne.n	8013e02 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dea:	b672      	cpsid	i
 8013dec:	f383 8811 	msr	BASEPRI, r3
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	b662      	cpsie	i
 8013dfa:	61bb      	str	r3, [r7, #24]
}
 8013dfc:	bf00      	nop
 8013dfe:	bf00      	nop
 8013e00:	e7fd      	b.n	8013dfe <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e02:	f001 fd6b 	bl	80158dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d024      	beq.n	8013e5c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e14:	1e5a      	subs	r2, r3, #1
 8013e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e18:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d104      	bne.n	8013e2c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013e22:	f001 fbd1 	bl	80155c8 <pvTaskIncrementMutexHeldCount>
 8013e26:	4602      	mov	r2, r0
 8013e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e2a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e2e:	691b      	ldr	r3, [r3, #16]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d00f      	beq.n	8013e54 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e36:	3310      	adds	r3, #16
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f001 f82b 	bl	8014e94 <xTaskRemoveFromEventList>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d007      	beq.n	8013e54 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013e44:	4b55      	ldr	r3, [pc, #340]	@ (8013f9c <xQueueSemaphoreTake+0x22c>)
 8013e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e4a:	601a      	str	r2, [r3, #0]
 8013e4c:	f3bf 8f4f 	dsb	sy
 8013e50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013e54:	f001 fd78 	bl	8015948 <vPortExitCritical>
				return pdPASS;
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e09a      	b.n	8013f92 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d114      	bne.n	8013e8c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d00d      	beq.n	8013e84 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e6c:	b672      	cpsid	i
 8013e6e:	f383 8811 	msr	BASEPRI, r3
 8013e72:	f3bf 8f6f 	isb	sy
 8013e76:	f3bf 8f4f 	dsb	sy
 8013e7a:	b662      	cpsie	i
 8013e7c:	617b      	str	r3, [r7, #20]
}
 8013e7e:	bf00      	nop
 8013e80:	bf00      	nop
 8013e82:	e7fd      	b.n	8013e80 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013e84:	f001 fd60 	bl	8015948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	e082      	b.n	8013f92 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d106      	bne.n	8013ea0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e92:	f107 030c 	add.w	r3, r7, #12
 8013e96:	4618      	mov	r0, r3
 8013e98:	f001 f862 	bl	8014f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ea0:	f001 fd52 	bl	8015948 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ea4:	f000 fdb8 	bl	8014a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ea8:	f001 fd18 	bl	80158dc <vPortEnterCritical>
 8013eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013eb2:	b25b      	sxtb	r3, r3
 8013eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eb8:	d103      	bne.n	8013ec2 <xQueueSemaphoreTake+0x152>
 8013eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013ec8:	b25b      	sxtb	r3, r3
 8013eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ece:	d103      	bne.n	8013ed8 <xQueueSemaphoreTake+0x168>
 8013ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013ed8:	f001 fd36 	bl	8015948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013edc:	463a      	mov	r2, r7
 8013ede:	f107 030c 	add.w	r3, r7, #12
 8013ee2:	4611      	mov	r1, r2
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f001 f851 	bl	8014f8c <xTaskCheckForTimeOut>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d132      	bne.n	8013f56 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ef0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ef2:	f000 fa3f 	bl	8014374 <prvIsQueueEmpty>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d026      	beq.n	8013f4a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d109      	bne.n	8013f18 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013f04:	f001 fcea 	bl	80158dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f0a:	689b      	ldr	r3, [r3, #8]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f001 f9af 	bl	8015270 <xTaskPriorityInherit>
 8013f12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013f14:	f001 fd18 	bl	8015948 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f1a:	3324      	adds	r3, #36	@ 0x24
 8013f1c:	683a      	ldr	r2, [r7, #0]
 8013f1e:	4611      	mov	r1, r2
 8013f20:	4618      	mov	r0, r3
 8013f22:	f000 ff8f 	bl	8014e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f28:	f000 f9d2 	bl	80142d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f2c:	f000 fd82 	bl	8014a34 <xTaskResumeAll>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f47f af65 	bne.w	8013e02 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013f38:	4b18      	ldr	r3, [pc, #96]	@ (8013f9c <xQueueSemaphoreTake+0x22c>)
 8013f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f3e:	601a      	str	r2, [r3, #0]
 8013f40:	f3bf 8f4f 	dsb	sy
 8013f44:	f3bf 8f6f 	isb	sy
 8013f48:	e75b      	b.n	8013e02 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013f4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f4c:	f000 f9c0 	bl	80142d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013f50:	f000 fd70 	bl	8014a34 <xTaskResumeAll>
 8013f54:	e755      	b.n	8013e02 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013f56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f58:	f000 f9ba 	bl	80142d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013f5c:	f000 fd6a 	bl	8014a34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f62:	f000 fa07 	bl	8014374 <prvIsQueueEmpty>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	f43f af4a 	beq.w	8013e02 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d00d      	beq.n	8013f90 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8013f74:	f001 fcb2 	bl	80158dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013f78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f7a:	f000 f901 	bl	8014180 <prvGetDisinheritPriorityAfterTimeout>
 8013f7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013f86:	4618      	mov	r0, r3
 8013f88:	f001 fa7e 	bl	8015488 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013f8c:	f001 fcdc 	bl	8015948 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013f90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3738      	adds	r7, #56	@ 0x38
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	e000ed04 	.word	0xe000ed04

08013fa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b08e      	sub	sp, #56	@ 0x38
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d10d      	bne.n	8013fd2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fba:	b672      	cpsid	i
 8013fbc:	f383 8811 	msr	BASEPRI, r3
 8013fc0:	f3bf 8f6f 	isb	sy
 8013fc4:	f3bf 8f4f 	dsb	sy
 8013fc8:	b662      	cpsie	i
 8013fca:	623b      	str	r3, [r7, #32]
}
 8013fcc:	bf00      	nop
 8013fce:	bf00      	nop
 8013fd0:	e7fd      	b.n	8013fce <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d103      	bne.n	8013fe0 <xQueueReceiveFromISR+0x40>
 8013fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d101      	bne.n	8013fe4 <xQueueReceiveFromISR+0x44>
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	e000      	b.n	8013fe6 <xQueueReceiveFromISR+0x46>
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d10d      	bne.n	8014006 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fee:	b672      	cpsid	i
 8013ff0:	f383 8811 	msr	BASEPRI, r3
 8013ff4:	f3bf 8f6f 	isb	sy
 8013ff8:	f3bf 8f4f 	dsb	sy
 8013ffc:	b662      	cpsie	i
 8013ffe:	61fb      	str	r3, [r7, #28]
}
 8014000:	bf00      	nop
 8014002:	bf00      	nop
 8014004:	e7fd      	b.n	8014002 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014006:	f001 fd51 	bl	8015aac <vPortValidateInterruptPriority>
	__asm volatile
 801400a:	f3ef 8211 	mrs	r2, BASEPRI
 801400e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014012:	b672      	cpsid	i
 8014014:	f383 8811 	msr	BASEPRI, r3
 8014018:	f3bf 8f6f 	isb	sy
 801401c:	f3bf 8f4f 	dsb	sy
 8014020:	b662      	cpsie	i
 8014022:	61ba      	str	r2, [r7, #24]
 8014024:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014026:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014028:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801402e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014032:	2b00      	cmp	r3, #0
 8014034:	d02f      	beq.n	8014096 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801403c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014040:	68b9      	ldr	r1, [r7, #8]
 8014042:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014044:	f000 f91e 	bl	8014284 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801404a:	1e5a      	subs	r2, r3, #1
 801404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801404e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014050:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014058:	d112      	bne.n	8014080 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405c:	691b      	ldr	r3, [r3, #16]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d016      	beq.n	8014090 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014064:	3310      	adds	r3, #16
 8014066:	4618      	mov	r0, r3
 8014068:	f000 ff14 	bl	8014e94 <xTaskRemoveFromEventList>
 801406c:	4603      	mov	r3, r0
 801406e:	2b00      	cmp	r3, #0
 8014070:	d00e      	beq.n	8014090 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00b      	beq.n	8014090 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2201      	movs	r2, #1
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	e007      	b.n	8014090 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014084:	3301      	adds	r3, #1
 8014086:	b2db      	uxtb	r3, r3
 8014088:	b25a      	sxtb	r2, r3
 801408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801408c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8014090:	2301      	movs	r3, #1
 8014092:	637b      	str	r3, [r7, #52]	@ 0x34
 8014094:	e001      	b.n	801409a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8014096:	2300      	movs	r3, #0
 8014098:	637b      	str	r3, [r7, #52]	@ 0x34
 801409a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801409c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	f383 8811 	msr	BASEPRI, r3
}
 80140a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80140a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3738      	adds	r7, #56	@ 0x38
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d10d      	bne.n	80140da <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80140be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140c2:	b672      	cpsid	i
 80140c4:	f383 8811 	msr	BASEPRI, r3
 80140c8:	f3bf 8f6f 	isb	sy
 80140cc:	f3bf 8f4f 	dsb	sy
 80140d0:	b662      	cpsie	i
 80140d2:	60bb      	str	r3, [r7, #8]
}
 80140d4:	bf00      	nop
 80140d6:	bf00      	nop
 80140d8:	e7fd      	b.n	80140d6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80140da:	f001 fbff 	bl	80158dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140e2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80140e4:	f001 fc30 	bl	8015948 <vPortExitCritical>

	return uxReturn;
 80140e8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80140ea:	4618      	mov	r0, r3
 80140ec:	3710      	adds	r7, #16
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}

080140f2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80140f2:	b480      	push	{r7}
 80140f4:	b087      	sub	sp, #28
 80140f6:	af00      	add	r7, sp, #0
 80140f8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d10d      	bne.n	8014120 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8014104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014108:	b672      	cpsid	i
 801410a:	f383 8811 	msr	BASEPRI, r3
 801410e:	f3bf 8f6f 	isb	sy
 8014112:	f3bf 8f4f 	dsb	sy
 8014116:	b662      	cpsie	i
 8014118:	60fb      	str	r3, [r7, #12]
}
 801411a:	bf00      	nop
 801411c:	bf00      	nop
 801411e:	e7fd      	b.n	801411c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014124:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8014126:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014128:	4618      	mov	r0, r3
 801412a:	371c      	adds	r7, #28
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr

08014134 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b084      	sub	sp, #16
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d10d      	bne.n	8014162 <vQueueDelete+0x2e>
	__asm volatile
 8014146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801414a:	b672      	cpsid	i
 801414c:	f383 8811 	msr	BASEPRI, r3
 8014150:	f3bf 8f6f 	isb	sy
 8014154:	f3bf 8f4f 	dsb	sy
 8014158:	b662      	cpsie	i
 801415a:	60bb      	str	r3, [r7, #8]
}
 801415c:	bf00      	nop
 801415e:	bf00      	nop
 8014160:	e7fd      	b.n	801415e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f000 f934 	bl	80143d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801416e:	2b00      	cmp	r3, #0
 8014170:	d102      	bne.n	8014178 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f001 fdb2 	bl	8015cdc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014178:	bf00      	nop
 801417a:	3710      	adds	r7, #16
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014180:	b480      	push	{r7}
 8014182:	b085      	sub	sp, #20
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801418c:	2b00      	cmp	r3, #0
 801418e:	d006      	beq.n	801419e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f1c3 0307 	rsb	r3, r3, #7
 801419a:	60fb      	str	r3, [r7, #12]
 801419c:	e001      	b.n	80141a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801419e:	2300      	movs	r3, #0
 80141a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80141a2:	68fb      	ldr	r3, [r7, #12]
	}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3714      	adds	r7, #20
 80141a8:	46bd      	mov	sp, r7
 80141aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ae:	4770      	bx	lr

080141b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b086      	sub	sp, #24
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80141bc:	2300      	movs	r3, #0
 80141be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d10d      	bne.n	80141ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d14d      	bne.n	8014272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	689b      	ldr	r3, [r3, #8]
 80141da:	4618      	mov	r0, r3
 80141dc:	f001 f8c8 	bl	8015370 <xTaskPriorityDisinherit>
 80141e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2200      	movs	r2, #0
 80141e6:	609a      	str	r2, [r3, #8]
 80141e8:	e043      	b.n	8014272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d119      	bne.n	8014224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	6858      	ldr	r0, [r3, #4]
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141f8:	461a      	mov	r2, r3
 80141fa:	68b9      	ldr	r1, [r7, #8]
 80141fc:	f00f fbdb 	bl	80239b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	685a      	ldr	r2, [r3, #4]
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014208:	441a      	add	r2, r3
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	685a      	ldr	r2, [r3, #4]
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	689b      	ldr	r3, [r3, #8]
 8014216:	429a      	cmp	r2, r3
 8014218:	d32b      	bcc.n	8014272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	605a      	str	r2, [r3, #4]
 8014222:	e026      	b.n	8014272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	68d8      	ldr	r0, [r3, #12]
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801422c:	461a      	mov	r2, r3
 801422e:	68b9      	ldr	r1, [r7, #8]
 8014230:	f00f fbc1 	bl	80239b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	68da      	ldr	r2, [r3, #12]
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801423c:	425b      	negs	r3, r3
 801423e:	441a      	add	r2, r3
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	68da      	ldr	r2, [r3, #12]
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	429a      	cmp	r2, r3
 801424e:	d207      	bcs.n	8014260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	689a      	ldr	r2, [r3, #8]
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014258:	425b      	negs	r3, r3
 801425a:	441a      	add	r2, r3
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2b02      	cmp	r3, #2
 8014264:	d105      	bne.n	8014272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d002      	beq.n	8014272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	3b01      	subs	r3, #1
 8014270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	1c5a      	adds	r2, r3, #1
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801427a:	697b      	ldr	r3, [r7, #20]
}
 801427c:	4618      	mov	r0, r3
 801427e:	3718      	adds	r7, #24
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}

08014284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b082      	sub	sp, #8
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014292:	2b00      	cmp	r3, #0
 8014294:	d018      	beq.n	80142c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	68da      	ldr	r2, [r3, #12]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801429e:	441a      	add	r2, r3
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	68da      	ldr	r2, [r3, #12]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d303      	bcc.n	80142b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	68d9      	ldr	r1, [r3, #12]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142c0:	461a      	mov	r2, r3
 80142c2:	6838      	ldr	r0, [r7, #0]
 80142c4:	f00f fb77 	bl	80239b6 <memcpy>
	}
}
 80142c8:	bf00      	nop
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80142d8:	f001 fb00 	bl	80158dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80142e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80142e4:	e011      	b.n	801430a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d012      	beq.n	8014314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	3324      	adds	r3, #36	@ 0x24
 80142f2:	4618      	mov	r0, r3
 80142f4:	f000 fdce 	bl	8014e94 <xTaskRemoveFromEventList>
 80142f8:	4603      	mov	r3, r0
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d001      	beq.n	8014302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80142fe:	f000 fead 	bl	801505c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014302:	7bfb      	ldrb	r3, [r7, #15]
 8014304:	3b01      	subs	r3, #1
 8014306:	b2db      	uxtb	r3, r3
 8014308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801430e:	2b00      	cmp	r3, #0
 8014310:	dce9      	bgt.n	80142e6 <prvUnlockQueue+0x16>
 8014312:	e000      	b.n	8014316 <prvUnlockQueue+0x46>
					break;
 8014314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	22ff      	movs	r2, #255	@ 0xff
 801431a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801431e:	f001 fb13 	bl	8015948 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014322:	f001 fadb 	bl	80158dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801432c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801432e:	e011      	b.n	8014354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	691b      	ldr	r3, [r3, #16]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d012      	beq.n	801435e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	3310      	adds	r3, #16
 801433c:	4618      	mov	r0, r3
 801433e:	f000 fda9 	bl	8014e94 <xTaskRemoveFromEventList>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d001      	beq.n	801434c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014348:	f000 fe88 	bl	801505c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801434c:	7bbb      	ldrb	r3, [r7, #14]
 801434e:	3b01      	subs	r3, #1
 8014350:	b2db      	uxtb	r3, r3
 8014352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014358:	2b00      	cmp	r3, #0
 801435a:	dce9      	bgt.n	8014330 <prvUnlockQueue+0x60>
 801435c:	e000      	b.n	8014360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801435e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	22ff      	movs	r2, #255	@ 0xff
 8014364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014368:	f001 faee 	bl	8015948 <vPortExitCritical>
}
 801436c:	bf00      	nop
 801436e:	3710      	adds	r7, #16
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801437c:	f001 faae 	bl	80158dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014384:	2b00      	cmp	r3, #0
 8014386:	d102      	bne.n	801438e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014388:	2301      	movs	r3, #1
 801438a:	60fb      	str	r3, [r7, #12]
 801438c:	e001      	b.n	8014392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801438e:	2300      	movs	r3, #0
 8014390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014392:	f001 fad9 	bl	8015948 <vPortExitCritical>

	return xReturn;
 8014396:	68fb      	ldr	r3, [r7, #12]
}
 8014398:	4618      	mov	r0, r3
 801439a:	3710      	adds	r7, #16
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80143a8:	f001 fa98 	bl	80158dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d102      	bne.n	80143be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80143b8:	2301      	movs	r3, #1
 80143ba:	60fb      	str	r3, [r7, #12]
 80143bc:	e001      	b.n	80143c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80143be:	2300      	movs	r3, #0
 80143c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80143c2:	f001 fac1 	bl	8015948 <vPortExitCritical>

	return xReturn;
 80143c6:	68fb      	ldr	r3, [r7, #12]
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3710      	adds	r7, #16
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}

080143d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80143d0:	b480      	push	{r7}
 80143d2:	b085      	sub	sp, #20
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143d8:	2300      	movs	r3, #0
 80143da:	60fb      	str	r3, [r7, #12]
 80143dc:	e016      	b.n	801440c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80143de:	4a10      	ldr	r2, [pc, #64]	@ (8014420 <vQueueUnregisterQueue+0x50>)
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	00db      	lsls	r3, r3, #3
 80143e4:	4413      	add	r3, r2
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	687a      	ldr	r2, [r7, #4]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d10b      	bne.n	8014406 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80143ee:	4a0c      	ldr	r2, [pc, #48]	@ (8014420 <vQueueUnregisterQueue+0x50>)
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2100      	movs	r1, #0
 80143f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80143f8:	4a09      	ldr	r2, [pc, #36]	@ (8014420 <vQueueUnregisterQueue+0x50>)
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	00db      	lsls	r3, r3, #3
 80143fe:	4413      	add	r3, r2
 8014400:	2200      	movs	r2, #0
 8014402:	605a      	str	r2, [r3, #4]
				break;
 8014404:	e006      	b.n	8014414 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	3301      	adds	r3, #1
 801440a:	60fb      	str	r3, [r7, #12]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2b07      	cmp	r3, #7
 8014410:	d9e5      	bls.n	80143de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014412:	bf00      	nop
 8014414:	bf00      	nop
 8014416:	3714      	adds	r7, #20
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr
 8014420:	20005a18 	.word	0x20005a18

08014424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014424:	b580      	push	{r7, lr}
 8014426:	b08e      	sub	sp, #56	@ 0x38
 8014428:	af04      	add	r7, sp, #16
 801442a:	60f8      	str	r0, [r7, #12]
 801442c:	60b9      	str	r1, [r7, #8]
 801442e:	607a      	str	r2, [r7, #4]
 8014430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10d      	bne.n	8014454 <xTaskCreateStatic+0x30>
	__asm volatile
 8014438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801443c:	b672      	cpsid	i
 801443e:	f383 8811 	msr	BASEPRI, r3
 8014442:	f3bf 8f6f 	isb	sy
 8014446:	f3bf 8f4f 	dsb	sy
 801444a:	b662      	cpsie	i
 801444c:	623b      	str	r3, [r7, #32]
}
 801444e:	bf00      	nop
 8014450:	bf00      	nop
 8014452:	e7fd      	b.n	8014450 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8014454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014456:	2b00      	cmp	r3, #0
 8014458:	d10d      	bne.n	8014476 <xTaskCreateStatic+0x52>
	__asm volatile
 801445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801445e:	b672      	cpsid	i
 8014460:	f383 8811 	msr	BASEPRI, r3
 8014464:	f3bf 8f6f 	isb	sy
 8014468:	f3bf 8f4f 	dsb	sy
 801446c:	b662      	cpsie	i
 801446e:	61fb      	str	r3, [r7, #28]
}
 8014470:	bf00      	nop
 8014472:	bf00      	nop
 8014474:	e7fd      	b.n	8014472 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014476:	23a4      	movs	r3, #164	@ 0xa4
 8014478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	2ba4      	cmp	r3, #164	@ 0xa4
 801447e:	d00d      	beq.n	801449c <xTaskCreateStatic+0x78>
	__asm volatile
 8014480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014484:	b672      	cpsid	i
 8014486:	f383 8811 	msr	BASEPRI, r3
 801448a:	f3bf 8f6f 	isb	sy
 801448e:	f3bf 8f4f 	dsb	sy
 8014492:	b662      	cpsie	i
 8014494:	61bb      	str	r3, [r7, #24]
}
 8014496:	bf00      	nop
 8014498:	bf00      	nop
 801449a:	e7fd      	b.n	8014498 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801449c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d01e      	beq.n	80144e2 <xTaskCreateStatic+0xbe>
 80144a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d01b      	beq.n	80144e2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80144aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80144ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80144b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80144b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144b6:	2202      	movs	r2, #2
 80144b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80144bc:	2300      	movs	r3, #0
 80144be:	9303      	str	r3, [sp, #12]
 80144c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144c2:	9302      	str	r3, [sp, #8]
 80144c4:	f107 0314 	add.w	r3, r7, #20
 80144c8:	9301      	str	r3, [sp, #4]
 80144ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	68b9      	ldr	r1, [r7, #8]
 80144d4:	68f8      	ldr	r0, [r7, #12]
 80144d6:	f000 f851 	bl	801457c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80144da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80144dc:	f000 f8fa 	bl	80146d4 <prvAddNewTaskToReadyList>
 80144e0:	e001      	b.n	80144e6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80144e2:	2300      	movs	r3, #0
 80144e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80144e6:	697b      	ldr	r3, [r7, #20]
	}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3728      	adds	r7, #40	@ 0x28
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}

080144f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b08c      	sub	sp, #48	@ 0x30
 80144f4:	af04      	add	r7, sp, #16
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	603b      	str	r3, [r7, #0]
 80144fc:	4613      	mov	r3, r2
 80144fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014500:	88fb      	ldrh	r3, [r7, #6]
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	4618      	mov	r0, r3
 8014506:	f001 fb17 	bl	8015b38 <pvPortMalloc>
 801450a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d00e      	beq.n	8014530 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014512:	20a4      	movs	r0, #164	@ 0xa4
 8014514:	f001 fb10 	bl	8015b38 <pvPortMalloc>
 8014518:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d003      	beq.n	8014528 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014520:	69fb      	ldr	r3, [r7, #28]
 8014522:	697a      	ldr	r2, [r7, #20]
 8014524:	631a      	str	r2, [r3, #48]	@ 0x30
 8014526:	e005      	b.n	8014534 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014528:	6978      	ldr	r0, [r7, #20]
 801452a:	f001 fbd7 	bl	8015cdc <vPortFree>
 801452e:	e001      	b.n	8014534 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014530:	2300      	movs	r3, #0
 8014532:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d017      	beq.n	801456a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801453a:	69fb      	ldr	r3, [r7, #28]
 801453c:	2200      	movs	r2, #0
 801453e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014542:	88fa      	ldrh	r2, [r7, #6]
 8014544:	2300      	movs	r3, #0
 8014546:	9303      	str	r3, [sp, #12]
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	9302      	str	r3, [sp, #8]
 801454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801454e:	9301      	str	r3, [sp, #4]
 8014550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	68b9      	ldr	r1, [r7, #8]
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f000 f80f 	bl	801457c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801455e:	69f8      	ldr	r0, [r7, #28]
 8014560:	f000 f8b8 	bl	80146d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014564:	2301      	movs	r3, #1
 8014566:	61bb      	str	r3, [r7, #24]
 8014568:	e002      	b.n	8014570 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801456a:	f04f 33ff 	mov.w	r3, #4294967295
 801456e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014570:	69bb      	ldr	r3, [r7, #24]
	}
 8014572:	4618      	mov	r0, r3
 8014574:	3720      	adds	r7, #32
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
	...

0801457c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b088      	sub	sp, #32
 8014580:	af00      	add	r7, sp, #0
 8014582:	60f8      	str	r0, [r7, #12]
 8014584:	60b9      	str	r1, [r7, #8]
 8014586:	607a      	str	r2, [r7, #4]
 8014588:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801458c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	461a      	mov	r2, r3
 8014594:	21a5      	movs	r1, #165	@ 0xa5
 8014596:	f00f f91a 	bl	80237ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801459c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801459e:	6879      	ldr	r1, [r7, #4]
 80145a0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80145a4:	440b      	add	r3, r1
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	4413      	add	r3, r2
 80145aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	f023 0307 	bic.w	r3, r3, #7
 80145b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	f003 0307 	and.w	r3, r3, #7
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d00d      	beq.n	80145da <prvInitialiseNewTask+0x5e>
	__asm volatile
 80145be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145c2:	b672      	cpsid	i
 80145c4:	f383 8811 	msr	BASEPRI, r3
 80145c8:	f3bf 8f6f 	isb	sy
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	b662      	cpsie	i
 80145d2:	617b      	str	r3, [r7, #20]
}
 80145d4:	bf00      	nop
 80145d6:	bf00      	nop
 80145d8:	e7fd      	b.n	80145d6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d01f      	beq.n	8014620 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80145e0:	2300      	movs	r3, #0
 80145e2:	61fb      	str	r3, [r7, #28]
 80145e4:	e012      	b.n	801460c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80145e6:	68ba      	ldr	r2, [r7, #8]
 80145e8:	69fb      	ldr	r3, [r7, #28]
 80145ea:	4413      	add	r3, r2
 80145ec:	7819      	ldrb	r1, [r3, #0]
 80145ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	4413      	add	r3, r2
 80145f4:	3334      	adds	r3, #52	@ 0x34
 80145f6:	460a      	mov	r2, r1
 80145f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80145fa:	68ba      	ldr	r2, [r7, #8]
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	4413      	add	r3, r2
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d006      	beq.n	8014614 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	3301      	adds	r3, #1
 801460a:	61fb      	str	r3, [r7, #28]
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	2b0f      	cmp	r3, #15
 8014610:	d9e9      	bls.n	80145e6 <prvInitialiseNewTask+0x6a>
 8014612:	e000      	b.n	8014616 <prvInitialiseNewTask+0x9a>
			{
				break;
 8014614:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014618:	2200      	movs	r2, #0
 801461a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801461e:	e003      	b.n	8014628 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014622:	2200      	movs	r2, #0
 8014624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801462a:	2b06      	cmp	r3, #6
 801462c:	d901      	bls.n	8014632 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801462e:	2306      	movs	r3, #6
 8014630:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014636:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801463a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801463c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014640:	2200      	movs	r2, #0
 8014642:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014646:	3304      	adds	r3, #4
 8014648:	4618      	mov	r0, r3
 801464a:	f7fe fdb6 	bl	80131ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014650:	3318      	adds	r3, #24
 8014652:	4618      	mov	r0, r3
 8014654:	f7fe fdb1 	bl	80131ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801465a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801465c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014660:	f1c3 0207 	rsb	r2, r3, #7
 8014664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014666:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801466a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801466c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014670:	2200      	movs	r2, #0
 8014672:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014676:	2200      	movs	r2, #0
 8014678:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801467e:	2200      	movs	r2, #0
 8014680:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014686:	3350      	adds	r3, #80	@ 0x50
 8014688:	224c      	movs	r2, #76	@ 0x4c
 801468a:	2100      	movs	r1, #0
 801468c:	4618      	mov	r0, r3
 801468e:	f00f f89e 	bl	80237ce <memset>
 8014692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014694:	4a0c      	ldr	r2, [pc, #48]	@ (80146c8 <prvInitialiseNewTask+0x14c>)
 8014696:	655a      	str	r2, [r3, #84]	@ 0x54
 8014698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801469a:	4a0c      	ldr	r2, [pc, #48]	@ (80146cc <prvInitialiseNewTask+0x150>)
 801469c:	659a      	str	r2, [r3, #88]	@ 0x58
 801469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a0:	4a0b      	ldr	r2, [pc, #44]	@ (80146d0 <prvInitialiseNewTask+0x154>)
 80146a2:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80146a4:	683a      	ldr	r2, [r7, #0]
 80146a6:	68f9      	ldr	r1, [r7, #12]
 80146a8:	69b8      	ldr	r0, [r7, #24]
 80146aa:	f001 f807 	bl	80156bc <pxPortInitialiseStack>
 80146ae:	4602      	mov	r2, r0
 80146b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80146b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d002      	beq.n	80146c0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80146ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146c0:	bf00      	nop
 80146c2:	3720      	adds	r7, #32
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	20019414 	.word	0x20019414
 80146cc:	2001947c 	.word	0x2001947c
 80146d0:	200194e4 	.word	0x200194e4

080146d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80146dc:	f001 f8fe 	bl	80158dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80146e0:	4b2a      	ldr	r3, [pc, #168]	@ (801478c <prvAddNewTaskToReadyList+0xb8>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	3301      	adds	r3, #1
 80146e6:	4a29      	ldr	r2, [pc, #164]	@ (801478c <prvAddNewTaskToReadyList+0xb8>)
 80146e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80146ea:	4b29      	ldr	r3, [pc, #164]	@ (8014790 <prvAddNewTaskToReadyList+0xbc>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d109      	bne.n	8014706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80146f2:	4a27      	ldr	r2, [pc, #156]	@ (8014790 <prvAddNewTaskToReadyList+0xbc>)
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80146f8:	4b24      	ldr	r3, [pc, #144]	@ (801478c <prvAddNewTaskToReadyList+0xb8>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d110      	bne.n	8014722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014700:	f000 fcd2 	bl	80150a8 <prvInitialiseTaskLists>
 8014704:	e00d      	b.n	8014722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014706:	4b23      	ldr	r3, [pc, #140]	@ (8014794 <prvAddNewTaskToReadyList+0xc0>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d109      	bne.n	8014722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801470e:	4b20      	ldr	r3, [pc, #128]	@ (8014790 <prvAddNewTaskToReadyList+0xbc>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014718:	429a      	cmp	r2, r3
 801471a:	d802      	bhi.n	8014722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801471c:	4a1c      	ldr	r2, [pc, #112]	@ (8014790 <prvAddNewTaskToReadyList+0xbc>)
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014722:	4b1d      	ldr	r3, [pc, #116]	@ (8014798 <prvAddNewTaskToReadyList+0xc4>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	3301      	adds	r3, #1
 8014728:	4a1b      	ldr	r2, [pc, #108]	@ (8014798 <prvAddNewTaskToReadyList+0xc4>)
 801472a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014730:	2201      	movs	r2, #1
 8014732:	409a      	lsls	r2, r3
 8014734:	4b19      	ldr	r3, [pc, #100]	@ (801479c <prvAddNewTaskToReadyList+0xc8>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4313      	orrs	r3, r2
 801473a:	4a18      	ldr	r2, [pc, #96]	@ (801479c <prvAddNewTaskToReadyList+0xc8>)
 801473c:	6013      	str	r3, [r2, #0]
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014742:	4613      	mov	r3, r2
 8014744:	009b      	lsls	r3, r3, #2
 8014746:	4413      	add	r3, r2
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	4a15      	ldr	r2, [pc, #84]	@ (80147a0 <prvAddNewTaskToReadyList+0xcc>)
 801474c:	441a      	add	r2, r3
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	3304      	adds	r3, #4
 8014752:	4619      	mov	r1, r3
 8014754:	4610      	mov	r0, r2
 8014756:	f7fe fd3d 	bl	80131d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801475a:	f001 f8f5 	bl	8015948 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801475e:	4b0d      	ldr	r3, [pc, #52]	@ (8014794 <prvAddNewTaskToReadyList+0xc0>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00e      	beq.n	8014784 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014766:	4b0a      	ldr	r3, [pc, #40]	@ (8014790 <prvAddNewTaskToReadyList+0xbc>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014770:	429a      	cmp	r2, r3
 8014772:	d207      	bcs.n	8014784 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014774:	4b0b      	ldr	r3, [pc, #44]	@ (80147a4 <prvAddNewTaskToReadyList+0xd0>)
 8014776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801477a:	601a      	str	r2, [r3, #0]
 801477c:	f3bf 8f4f 	dsb	sy
 8014780:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014784:	bf00      	nop
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	20005b58 	.word	0x20005b58
 8014790:	20005a58 	.word	0x20005a58
 8014794:	20005b64 	.word	0x20005b64
 8014798:	20005b74 	.word	0x20005b74
 801479c:	20005b60 	.word	0x20005b60
 80147a0:	20005a5c 	.word	0x20005a5c
 80147a4:	e000ed04 	.word	0xe000ed04

080147a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80147b0:	f001 f894 	bl	80158dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d102      	bne.n	80147c0 <vTaskDelete+0x18>
 80147ba:	4b3a      	ldr	r3, [pc, #232]	@ (80148a4 <vTaskDelete+0xfc>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	e000      	b.n	80147c2 <vTaskDelete+0x1a>
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	3304      	adds	r3, #4
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fe fd60 	bl	801328e <uxListRemove>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d115      	bne.n	8014800 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147d8:	4933      	ldr	r1, [pc, #204]	@ (80148a8 <vTaskDelete+0x100>)
 80147da:	4613      	mov	r3, r2
 80147dc:	009b      	lsls	r3, r3, #2
 80147de:	4413      	add	r3, r2
 80147e0:	009b      	lsls	r3, r3, #2
 80147e2:	440b      	add	r3, r1
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d10a      	bne.n	8014800 <vTaskDelete+0x58>
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ee:	2201      	movs	r2, #1
 80147f0:	fa02 f303 	lsl.w	r3, r2, r3
 80147f4:	43da      	mvns	r2, r3
 80147f6:	4b2d      	ldr	r3, [pc, #180]	@ (80148ac <vTaskDelete+0x104>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	4013      	ands	r3, r2
 80147fc:	4a2b      	ldr	r2, [pc, #172]	@ (80148ac <vTaskDelete+0x104>)
 80147fe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014804:	2b00      	cmp	r3, #0
 8014806:	d004      	beq.n	8014812 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	3318      	adds	r3, #24
 801480c:	4618      	mov	r0, r3
 801480e:	f7fe fd3e 	bl	801328e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8014812:	4b27      	ldr	r3, [pc, #156]	@ (80148b0 <vTaskDelete+0x108>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	3301      	adds	r3, #1
 8014818:	4a25      	ldr	r2, [pc, #148]	@ (80148b0 <vTaskDelete+0x108>)
 801481a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801481c:	4b21      	ldr	r3, [pc, #132]	@ (80148a4 <vTaskDelete+0xfc>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	68fa      	ldr	r2, [r7, #12]
 8014822:	429a      	cmp	r2, r3
 8014824:	d10b      	bne.n	801483e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	3304      	adds	r3, #4
 801482a:	4619      	mov	r1, r3
 801482c:	4821      	ldr	r0, [pc, #132]	@ (80148b4 <vTaskDelete+0x10c>)
 801482e:	f7fe fcd1 	bl	80131d4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8014832:	4b21      	ldr	r3, [pc, #132]	@ (80148b8 <vTaskDelete+0x110>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	3301      	adds	r3, #1
 8014838:	4a1f      	ldr	r2, [pc, #124]	@ (80148b8 <vTaskDelete+0x110>)
 801483a:	6013      	str	r3, [r2, #0]
 801483c:	e009      	b.n	8014852 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801483e:	4b1f      	ldr	r3, [pc, #124]	@ (80148bc <vTaskDelete+0x114>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	3b01      	subs	r3, #1
 8014844:	4a1d      	ldr	r2, [pc, #116]	@ (80148bc <vTaskDelete+0x114>)
 8014846:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8014848:	68f8      	ldr	r0, [r7, #12]
 801484a:	f000 fc9b 	bl	8015184 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801484e:	f000 fcd1 	bl	80151f4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8014852:	f001 f879 	bl	8015948 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8014856:	4b1a      	ldr	r3, [pc, #104]	@ (80148c0 <vTaskDelete+0x118>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d01e      	beq.n	801489c <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 801485e:	4b11      	ldr	r3, [pc, #68]	@ (80148a4 <vTaskDelete+0xfc>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	429a      	cmp	r2, r3
 8014866:	d119      	bne.n	801489c <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8014868:	4b16      	ldr	r3, [pc, #88]	@ (80148c4 <vTaskDelete+0x11c>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d00d      	beq.n	801488c <vTaskDelete+0xe4>
	__asm volatile
 8014870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014874:	b672      	cpsid	i
 8014876:	f383 8811 	msr	BASEPRI, r3
 801487a:	f3bf 8f6f 	isb	sy
 801487e:	f3bf 8f4f 	dsb	sy
 8014882:	b662      	cpsie	i
 8014884:	60bb      	str	r3, [r7, #8]
}
 8014886:	bf00      	nop
 8014888:	bf00      	nop
 801488a:	e7fd      	b.n	8014888 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 801488c:	4b0e      	ldr	r3, [pc, #56]	@ (80148c8 <vTaskDelete+0x120>)
 801488e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014892:	601a      	str	r2, [r3, #0]
 8014894:	f3bf 8f4f 	dsb	sy
 8014898:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801489c:	bf00      	nop
 801489e:	3710      	adds	r7, #16
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	20005a58 	.word	0x20005a58
 80148a8:	20005a5c 	.word	0x20005a5c
 80148ac:	20005b60 	.word	0x20005b60
 80148b0:	20005b74 	.word	0x20005b74
 80148b4:	20005b2c 	.word	0x20005b2c
 80148b8:	20005b40 	.word	0x20005b40
 80148bc:	20005b58 	.word	0x20005b58
 80148c0:	20005b64 	.word	0x20005b64
 80148c4:	20005b80 	.word	0x20005b80
 80148c8:	e000ed04 	.word	0xe000ed04

080148cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b084      	sub	sp, #16
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80148d4:	2300      	movs	r3, #0
 80148d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d01a      	beq.n	8014914 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80148de:	4b15      	ldr	r3, [pc, #84]	@ (8014934 <vTaskDelay+0x68>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d00d      	beq.n	8014902 <vTaskDelay+0x36>
	__asm volatile
 80148e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ea:	b672      	cpsid	i
 80148ec:	f383 8811 	msr	BASEPRI, r3
 80148f0:	f3bf 8f6f 	isb	sy
 80148f4:	f3bf 8f4f 	dsb	sy
 80148f8:	b662      	cpsie	i
 80148fa:	60bb      	str	r3, [r7, #8]
}
 80148fc:	bf00      	nop
 80148fe:	bf00      	nop
 8014900:	e7fd      	b.n	80148fe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8014902:	f000 f889 	bl	8014a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014906:	2100      	movs	r1, #0
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 fe71 	bl	80155f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801490e:	f000 f891 	bl	8014a34 <xTaskResumeAll>
 8014912:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d107      	bne.n	801492a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801491a:	4b07      	ldr	r3, [pc, #28]	@ (8014938 <vTaskDelay+0x6c>)
 801491c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014920:	601a      	str	r2, [r3, #0]
 8014922:	f3bf 8f4f 	dsb	sy
 8014926:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801492a:	bf00      	nop
 801492c:	3710      	adds	r7, #16
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	20005b80 	.word	0x20005b80
 8014938:	e000ed04 	.word	0xe000ed04

0801493c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b08a      	sub	sp, #40	@ 0x28
 8014940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014942:	2300      	movs	r3, #0
 8014944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014946:	2300      	movs	r3, #0
 8014948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801494a:	463a      	mov	r2, r7
 801494c:	1d39      	adds	r1, r7, #4
 801494e:	f107 0308 	add.w	r3, r7, #8
 8014952:	4618      	mov	r0, r3
 8014954:	f7eb fe3e 	bl	80005d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014958:	6839      	ldr	r1, [r7, #0]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	9202      	str	r2, [sp, #8]
 8014960:	9301      	str	r3, [sp, #4]
 8014962:	2300      	movs	r3, #0
 8014964:	9300      	str	r3, [sp, #0]
 8014966:	2300      	movs	r3, #0
 8014968:	460a      	mov	r2, r1
 801496a:	4923      	ldr	r1, [pc, #140]	@ (80149f8 <vTaskStartScheduler+0xbc>)
 801496c:	4823      	ldr	r0, [pc, #140]	@ (80149fc <vTaskStartScheduler+0xc0>)
 801496e:	f7ff fd59 	bl	8014424 <xTaskCreateStatic>
 8014972:	4603      	mov	r3, r0
 8014974:	4a22      	ldr	r2, [pc, #136]	@ (8014a00 <vTaskStartScheduler+0xc4>)
 8014976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014978:	4b21      	ldr	r3, [pc, #132]	@ (8014a00 <vTaskStartScheduler+0xc4>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d002      	beq.n	8014986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014980:	2301      	movs	r3, #1
 8014982:	617b      	str	r3, [r7, #20]
 8014984:	e001      	b.n	801498a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014986:	2300      	movs	r3, #0
 8014988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	2b01      	cmp	r3, #1
 801498e:	d11d      	bne.n	80149cc <vTaskStartScheduler+0x90>
	__asm volatile
 8014990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014994:	b672      	cpsid	i
 8014996:	f383 8811 	msr	BASEPRI, r3
 801499a:	f3bf 8f6f 	isb	sy
 801499e:	f3bf 8f4f 	dsb	sy
 80149a2:	b662      	cpsie	i
 80149a4:	613b      	str	r3, [r7, #16]
}
 80149a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80149a8:	4b16      	ldr	r3, [pc, #88]	@ (8014a04 <vTaskStartScheduler+0xc8>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	3350      	adds	r3, #80	@ 0x50
 80149ae:	4a16      	ldr	r2, [pc, #88]	@ (8014a08 <vTaskStartScheduler+0xcc>)
 80149b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80149b2:	4b16      	ldr	r3, [pc, #88]	@ (8014a0c <vTaskStartScheduler+0xd0>)
 80149b4:	f04f 32ff 	mov.w	r2, #4294967295
 80149b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80149ba:	4b15      	ldr	r3, [pc, #84]	@ (8014a10 <vTaskStartScheduler+0xd4>)
 80149bc:	2201      	movs	r2, #1
 80149be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80149c0:	4b14      	ldr	r3, [pc, #80]	@ (8014a14 <vTaskStartScheduler+0xd8>)
 80149c2:	2200      	movs	r2, #0
 80149c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80149c6:	f000 ff0b 	bl	80157e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80149ca:	e011      	b.n	80149f0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d2:	d10d      	bne.n	80149f0 <vTaskStartScheduler+0xb4>
	__asm volatile
 80149d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149d8:	b672      	cpsid	i
 80149da:	f383 8811 	msr	BASEPRI, r3
 80149de:	f3bf 8f6f 	isb	sy
 80149e2:	f3bf 8f4f 	dsb	sy
 80149e6:	b662      	cpsie	i
 80149e8:	60fb      	str	r3, [r7, #12]
}
 80149ea:	bf00      	nop
 80149ec:	bf00      	nop
 80149ee:	e7fd      	b.n	80149ec <vTaskStartScheduler+0xb0>
}
 80149f0:	bf00      	nop
 80149f2:	3718      	adds	r7, #24
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	08024bd0 	.word	0x08024bd0
 80149fc:	08015075 	.word	0x08015075
 8014a00:	20005b7c 	.word	0x20005b7c
 8014a04:	20005a58 	.word	0x20005a58
 8014a08:	2000005c 	.word	0x2000005c
 8014a0c:	20005b78 	.word	0x20005b78
 8014a10:	20005b64 	.word	0x20005b64
 8014a14:	20005b5c 	.word	0x20005b5c

08014a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014a18:	b480      	push	{r7}
 8014a1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014a1c:	4b04      	ldr	r3, [pc, #16]	@ (8014a30 <vTaskSuspendAll+0x18>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	3301      	adds	r3, #1
 8014a22:	4a03      	ldr	r2, [pc, #12]	@ (8014a30 <vTaskSuspendAll+0x18>)
 8014a24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014a26:	bf00      	nop
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr
 8014a30:	20005b80 	.word	0x20005b80

08014a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b084      	sub	sp, #16
 8014a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014a42:	4b43      	ldr	r3, [pc, #268]	@ (8014b50 <xTaskResumeAll+0x11c>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d10d      	bne.n	8014a66 <xTaskResumeAll+0x32>
	__asm volatile
 8014a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a4e:	b672      	cpsid	i
 8014a50:	f383 8811 	msr	BASEPRI, r3
 8014a54:	f3bf 8f6f 	isb	sy
 8014a58:	f3bf 8f4f 	dsb	sy
 8014a5c:	b662      	cpsie	i
 8014a5e:	603b      	str	r3, [r7, #0]
}
 8014a60:	bf00      	nop
 8014a62:	bf00      	nop
 8014a64:	e7fd      	b.n	8014a62 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014a66:	f000 ff39 	bl	80158dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014a6a:	4b39      	ldr	r3, [pc, #228]	@ (8014b50 <xTaskResumeAll+0x11c>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	4a37      	ldr	r2, [pc, #220]	@ (8014b50 <xTaskResumeAll+0x11c>)
 8014a72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a74:	4b36      	ldr	r3, [pc, #216]	@ (8014b50 <xTaskResumeAll+0x11c>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d161      	bne.n	8014b40 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014a7c:	4b35      	ldr	r3, [pc, #212]	@ (8014b54 <xTaskResumeAll+0x120>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d05d      	beq.n	8014b40 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014a84:	e02e      	b.n	8014ae4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a86:	4b34      	ldr	r3, [pc, #208]	@ (8014b58 <xTaskResumeAll+0x124>)
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	3318      	adds	r3, #24
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7fe fbfb 	bl	801328e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	3304      	adds	r3, #4
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7fe fbf6 	bl	801328e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014aa6:	2201      	movs	r2, #1
 8014aa8:	409a      	lsls	r2, r3
 8014aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8014b5c <xTaskResumeAll+0x128>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	4313      	orrs	r3, r2
 8014ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8014b5c <xTaskResumeAll+0x128>)
 8014ab2:	6013      	str	r3, [r2, #0]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ab8:	4613      	mov	r3, r2
 8014aba:	009b      	lsls	r3, r3, #2
 8014abc:	4413      	add	r3, r2
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	4a27      	ldr	r2, [pc, #156]	@ (8014b60 <xTaskResumeAll+0x12c>)
 8014ac2:	441a      	add	r2, r3
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	3304      	adds	r3, #4
 8014ac8:	4619      	mov	r1, r3
 8014aca:	4610      	mov	r0, r2
 8014acc:	f7fe fb82 	bl	80131d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ad4:	4b23      	ldr	r3, [pc, #140]	@ (8014b64 <xTaskResumeAll+0x130>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d302      	bcc.n	8014ae4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8014ade:	4b22      	ldr	r3, [pc, #136]	@ (8014b68 <xTaskResumeAll+0x134>)
 8014ae0:	2201      	movs	r2, #1
 8014ae2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8014b58 <xTaskResumeAll+0x124>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d1cc      	bne.n	8014a86 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d001      	beq.n	8014af6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014af2:	f000 fb7f 	bl	80151f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014af6:	4b1d      	ldr	r3, [pc, #116]	@ (8014b6c <xTaskResumeAll+0x138>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d010      	beq.n	8014b24 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014b02:	f000 f859 	bl	8014bb8 <xTaskIncrementTick>
 8014b06:	4603      	mov	r3, r0
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d002      	beq.n	8014b12 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8014b0c:	4b16      	ldr	r3, [pc, #88]	@ (8014b68 <xTaskResumeAll+0x134>)
 8014b0e:	2201      	movs	r2, #1
 8014b10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	3b01      	subs	r3, #1
 8014b16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d1f1      	bne.n	8014b02 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8014b1e:	4b13      	ldr	r3, [pc, #76]	@ (8014b6c <xTaskResumeAll+0x138>)
 8014b20:	2200      	movs	r2, #0
 8014b22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014b24:	4b10      	ldr	r3, [pc, #64]	@ (8014b68 <xTaskResumeAll+0x134>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d009      	beq.n	8014b40 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014b30:	4b0f      	ldr	r3, [pc, #60]	@ (8014b70 <xTaskResumeAll+0x13c>)
 8014b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b36:	601a      	str	r2, [r3, #0]
 8014b38:	f3bf 8f4f 	dsb	sy
 8014b3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014b40:	f000 ff02 	bl	8015948 <vPortExitCritical>

	return xAlreadyYielded;
 8014b44:	68bb      	ldr	r3, [r7, #8]
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3710      	adds	r7, #16
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	20005b80 	.word	0x20005b80
 8014b54:	20005b58 	.word	0x20005b58
 8014b58:	20005b18 	.word	0x20005b18
 8014b5c:	20005b60 	.word	0x20005b60
 8014b60:	20005a5c 	.word	0x20005a5c
 8014b64:	20005a58 	.word	0x20005a58
 8014b68:	20005b6c 	.word	0x20005b6c
 8014b6c:	20005b68 	.word	0x20005b68
 8014b70:	e000ed04 	.word	0xe000ed04

08014b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014b7a:	4b05      	ldr	r3, [pc, #20]	@ (8014b90 <xTaskGetTickCount+0x1c>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014b80:	687b      	ldr	r3, [r7, #4]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	370c      	adds	r7, #12
 8014b86:	46bd      	mov	sp, r7
 8014b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8c:	4770      	bx	lr
 8014b8e:	bf00      	nop
 8014b90:	20005b5c 	.word	0x20005b5c

08014b94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b9a:	f000 ff87 	bl	8015aac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014ba2:	4b04      	ldr	r3, [pc, #16]	@ (8014bb4 <xTaskGetTickCountFromISR+0x20>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014ba8:	683b      	ldr	r3, [r7, #0]
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3708      	adds	r7, #8
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	20005b5c 	.word	0x20005b5c

08014bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014bc2:	4b50      	ldr	r3, [pc, #320]	@ (8014d04 <xTaskIncrementTick+0x14c>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	f040 808b 	bne.w	8014ce2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8014d08 <xTaskIncrementTick+0x150>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8014d08 <xTaskIncrementTick+0x150>)
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d123      	bne.n	8014c28 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8014be0:	4b4a      	ldr	r3, [pc, #296]	@ (8014d0c <xTaskIncrementTick+0x154>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00d      	beq.n	8014c06 <xTaskIncrementTick+0x4e>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bee:	b672      	cpsid	i
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	b662      	cpsie	i
 8014bfe:	603b      	str	r3, [r7, #0]
}
 8014c00:	bf00      	nop
 8014c02:	bf00      	nop
 8014c04:	e7fd      	b.n	8014c02 <xTaskIncrementTick+0x4a>
 8014c06:	4b41      	ldr	r3, [pc, #260]	@ (8014d0c <xTaskIncrementTick+0x154>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	60fb      	str	r3, [r7, #12]
 8014c0c:	4b40      	ldr	r3, [pc, #256]	@ (8014d10 <xTaskIncrementTick+0x158>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	4a3e      	ldr	r2, [pc, #248]	@ (8014d0c <xTaskIncrementTick+0x154>)
 8014c12:	6013      	str	r3, [r2, #0]
 8014c14:	4a3e      	ldr	r2, [pc, #248]	@ (8014d10 <xTaskIncrementTick+0x158>)
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	6013      	str	r3, [r2, #0]
 8014c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8014d14 <xTaskIncrementTick+0x15c>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3301      	adds	r3, #1
 8014c20:	4a3c      	ldr	r2, [pc, #240]	@ (8014d14 <xTaskIncrementTick+0x15c>)
 8014c22:	6013      	str	r3, [r2, #0]
 8014c24:	f000 fae6 	bl	80151f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014c28:	4b3b      	ldr	r3, [pc, #236]	@ (8014d18 <xTaskIncrementTick+0x160>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	693a      	ldr	r2, [r7, #16]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d348      	bcc.n	8014cc4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c32:	4b36      	ldr	r3, [pc, #216]	@ (8014d0c <xTaskIncrementTick+0x154>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d104      	bne.n	8014c46 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c3c:	4b36      	ldr	r3, [pc, #216]	@ (8014d18 <xTaskIncrementTick+0x160>)
 8014c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8014c42:	601a      	str	r2, [r3, #0]
					break;
 8014c44:	e03e      	b.n	8014cc4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c46:	4b31      	ldr	r3, [pc, #196]	@ (8014d0c <xTaskIncrementTick+0x154>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	68db      	ldr	r3, [r3, #12]
 8014c4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014c56:	693a      	ldr	r2, [r7, #16]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d203      	bcs.n	8014c66 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8014d18 <xTaskIncrementTick+0x160>)
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014c64:	e02e      	b.n	8014cc4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	3304      	adds	r3, #4
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fe fb0f 	bl	801328e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d004      	beq.n	8014c82 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	3318      	adds	r3, #24
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7fe fb06 	bl	801328e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c86:	2201      	movs	r2, #1
 8014c88:	409a      	lsls	r2, r3
 8014c8a:	4b24      	ldr	r3, [pc, #144]	@ (8014d1c <xTaskIncrementTick+0x164>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	4313      	orrs	r3, r2
 8014c90:	4a22      	ldr	r2, [pc, #136]	@ (8014d1c <xTaskIncrementTick+0x164>)
 8014c92:	6013      	str	r3, [r2, #0]
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c98:	4613      	mov	r3, r2
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	4413      	add	r3, r2
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8014d20 <xTaskIncrementTick+0x168>)
 8014ca2:	441a      	add	r2, r3
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	3304      	adds	r3, #4
 8014ca8:	4619      	mov	r1, r3
 8014caa:	4610      	mov	r0, r2
 8014cac:	f7fe fa92 	bl	80131d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8014d24 <xTaskIncrementTick+0x16c>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d3b9      	bcc.n	8014c32 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8014cbe:	2301      	movs	r3, #1
 8014cc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014cc2:	e7b6      	b.n	8014c32 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014cc4:	4b17      	ldr	r3, [pc, #92]	@ (8014d24 <xTaskIncrementTick+0x16c>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cca:	4915      	ldr	r1, [pc, #84]	@ (8014d20 <xTaskIncrementTick+0x168>)
 8014ccc:	4613      	mov	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4413      	add	r3, r2
 8014cd2:	009b      	lsls	r3, r3, #2
 8014cd4:	440b      	add	r3, r1
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d907      	bls.n	8014cec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	617b      	str	r3, [r7, #20]
 8014ce0:	e004      	b.n	8014cec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014ce2:	4b11      	ldr	r3, [pc, #68]	@ (8014d28 <xTaskIncrementTick+0x170>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8014d28 <xTaskIncrementTick+0x170>)
 8014cea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014cec:	4b0f      	ldr	r3, [pc, #60]	@ (8014d2c <xTaskIncrementTick+0x174>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d001      	beq.n	8014cf8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014cf8:	697b      	ldr	r3, [r7, #20]
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3718      	adds	r7, #24
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
 8014d02:	bf00      	nop
 8014d04:	20005b80 	.word	0x20005b80
 8014d08:	20005b5c 	.word	0x20005b5c
 8014d0c:	20005b10 	.word	0x20005b10
 8014d10:	20005b14 	.word	0x20005b14
 8014d14:	20005b70 	.word	0x20005b70
 8014d18:	20005b78 	.word	0x20005b78
 8014d1c:	20005b60 	.word	0x20005b60
 8014d20:	20005a5c 	.word	0x20005a5c
 8014d24:	20005a58 	.word	0x20005a58
 8014d28:	20005b68 	.word	0x20005b68
 8014d2c:	20005b6c 	.word	0x20005b6c

08014d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b088      	sub	sp, #32
 8014d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014d36:	4b3d      	ldr	r3, [pc, #244]	@ (8014e2c <vTaskSwitchContext+0xfc>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d003      	beq.n	8014d46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8014e30 <vTaskSwitchContext+0x100>)
 8014d40:	2201      	movs	r2, #1
 8014d42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014d44:	e06e      	b.n	8014e24 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8014d46:	4b3a      	ldr	r3, [pc, #232]	@ (8014e30 <vTaskSwitchContext+0x100>)
 8014d48:	2200      	movs	r2, #0
 8014d4a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014d4c:	4b39      	ldr	r3, [pc, #228]	@ (8014e34 <vTaskSwitchContext+0x104>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d52:	61fb      	str	r3, [r7, #28]
 8014d54:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014d58:	61bb      	str	r3, [r7, #24]
 8014d5a:	69fb      	ldr	r3, [r7, #28]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	69ba      	ldr	r2, [r7, #24]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d111      	bne.n	8014d88 <vTaskSwitchContext+0x58>
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	3304      	adds	r3, #4
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	69ba      	ldr	r2, [r7, #24]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d10b      	bne.n	8014d88 <vTaskSwitchContext+0x58>
 8014d70:	69fb      	ldr	r3, [r7, #28]
 8014d72:	3308      	adds	r3, #8
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	69ba      	ldr	r2, [r7, #24]
 8014d78:	429a      	cmp	r2, r3
 8014d7a:	d105      	bne.n	8014d88 <vTaskSwitchContext+0x58>
 8014d7c:	69fb      	ldr	r3, [r7, #28]
 8014d7e:	330c      	adds	r3, #12
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	69ba      	ldr	r2, [r7, #24]
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d008      	beq.n	8014d9a <vTaskSwitchContext+0x6a>
 8014d88:	4b2a      	ldr	r3, [pc, #168]	@ (8014e34 <vTaskSwitchContext+0x104>)
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	4b29      	ldr	r3, [pc, #164]	@ (8014e34 <vTaskSwitchContext+0x104>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	3334      	adds	r3, #52	@ 0x34
 8014d92:	4619      	mov	r1, r3
 8014d94:	4610      	mov	r0, r2
 8014d96:	f7eb fc0a 	bl	80005ae <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d9a:	4b27      	ldr	r3, [pc, #156]	@ (8014e38 <vTaskSwitchContext+0x108>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	fab3 f383 	clz	r3, r3
 8014da6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014da8:	7afb      	ldrb	r3, [r7, #11]
 8014daa:	f1c3 031f 	rsb	r3, r3, #31
 8014dae:	617b      	str	r3, [r7, #20]
 8014db0:	4922      	ldr	r1, [pc, #136]	@ (8014e3c <vTaskSwitchContext+0x10c>)
 8014db2:	697a      	ldr	r2, [r7, #20]
 8014db4:	4613      	mov	r3, r2
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	4413      	add	r3, r2
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	440b      	add	r3, r1
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10d      	bne.n	8014de0 <vTaskSwitchContext+0xb0>
	__asm volatile
 8014dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dc8:	b672      	cpsid	i
 8014dca:	f383 8811 	msr	BASEPRI, r3
 8014dce:	f3bf 8f6f 	isb	sy
 8014dd2:	f3bf 8f4f 	dsb	sy
 8014dd6:	b662      	cpsie	i
 8014dd8:	607b      	str	r3, [r7, #4]
}
 8014dda:	bf00      	nop
 8014ddc:	bf00      	nop
 8014dde:	e7fd      	b.n	8014ddc <vTaskSwitchContext+0xac>
 8014de0:	697a      	ldr	r2, [r7, #20]
 8014de2:	4613      	mov	r3, r2
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	4413      	add	r3, r2
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	4a14      	ldr	r2, [pc, #80]	@ (8014e3c <vTaskSwitchContext+0x10c>)
 8014dec:	4413      	add	r3, r2
 8014dee:	613b      	str	r3, [r7, #16]
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	685a      	ldr	r2, [r3, #4]
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	605a      	str	r2, [r3, #4]
 8014dfa:	693b      	ldr	r3, [r7, #16]
 8014dfc:	685a      	ldr	r2, [r3, #4]
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	3308      	adds	r3, #8
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d104      	bne.n	8014e10 <vTaskSwitchContext+0xe0>
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	685b      	ldr	r3, [r3, #4]
 8014e0a:	685a      	ldr	r2, [r3, #4]
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	605a      	str	r2, [r3, #4]
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	685b      	ldr	r3, [r3, #4]
 8014e14:	68db      	ldr	r3, [r3, #12]
 8014e16:	4a07      	ldr	r2, [pc, #28]	@ (8014e34 <vTaskSwitchContext+0x104>)
 8014e18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014e1a:	4b06      	ldr	r3, [pc, #24]	@ (8014e34 <vTaskSwitchContext+0x104>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	3350      	adds	r3, #80	@ 0x50
 8014e20:	4a07      	ldr	r2, [pc, #28]	@ (8014e40 <vTaskSwitchContext+0x110>)
 8014e22:	6013      	str	r3, [r2, #0]
}
 8014e24:	bf00      	nop
 8014e26:	3720      	adds	r7, #32
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	20005b80 	.word	0x20005b80
 8014e30:	20005b6c 	.word	0x20005b6c
 8014e34:	20005a58 	.word	0x20005a58
 8014e38:	20005b60 	.word	0x20005b60
 8014e3c:	20005a5c 	.word	0x20005a5c
 8014e40:	2000005c 	.word	0x2000005c

08014e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b084      	sub	sp, #16
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d10d      	bne.n	8014e70 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e58:	b672      	cpsid	i
 8014e5a:	f383 8811 	msr	BASEPRI, r3
 8014e5e:	f3bf 8f6f 	isb	sy
 8014e62:	f3bf 8f4f 	dsb	sy
 8014e66:	b662      	cpsie	i
 8014e68:	60fb      	str	r3, [r7, #12]
}
 8014e6a:	bf00      	nop
 8014e6c:	bf00      	nop
 8014e6e:	e7fd      	b.n	8014e6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014e70:	4b07      	ldr	r3, [pc, #28]	@ (8014e90 <vTaskPlaceOnEventList+0x4c>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	3318      	adds	r3, #24
 8014e76:	4619      	mov	r1, r3
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f7fe f9cf 	bl	801321c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014e7e:	2101      	movs	r1, #1
 8014e80:	6838      	ldr	r0, [r7, #0]
 8014e82:	f000 fbb5 	bl	80155f0 <prvAddCurrentTaskToDelayedList>
}
 8014e86:	bf00      	nop
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	20005a58 	.word	0x20005a58

08014e94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b086      	sub	sp, #24
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	68db      	ldr	r3, [r3, #12]
 8014ea2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d10d      	bne.n	8014ec6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eae:	b672      	cpsid	i
 8014eb0:	f383 8811 	msr	BASEPRI, r3
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	f3bf 8f4f 	dsb	sy
 8014ebc:	b662      	cpsie	i
 8014ebe:	60fb      	str	r3, [r7, #12]
}
 8014ec0:	bf00      	nop
 8014ec2:	bf00      	nop
 8014ec4:	e7fd      	b.n	8014ec2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	3318      	adds	r3, #24
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fe f9df 	bl	801328e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8014f48 <xTaskRemoveFromEventList+0xb4>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d11c      	bne.n	8014f12 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	3304      	adds	r3, #4
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7fe f9d6 	bl	801328e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	409a      	lsls	r2, r3
 8014eea:	4b18      	ldr	r3, [pc, #96]	@ (8014f4c <xTaskRemoveFromEventList+0xb8>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	4313      	orrs	r3, r2
 8014ef0:	4a16      	ldr	r2, [pc, #88]	@ (8014f4c <xTaskRemoveFromEventList+0xb8>)
 8014ef2:	6013      	str	r3, [r2, #0]
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ef8:	4613      	mov	r3, r2
 8014efa:	009b      	lsls	r3, r3, #2
 8014efc:	4413      	add	r3, r2
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	4a13      	ldr	r2, [pc, #76]	@ (8014f50 <xTaskRemoveFromEventList+0xbc>)
 8014f02:	441a      	add	r2, r3
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	3304      	adds	r3, #4
 8014f08:	4619      	mov	r1, r3
 8014f0a:	4610      	mov	r0, r2
 8014f0c:	f7fe f962 	bl	80131d4 <vListInsertEnd>
 8014f10:	e005      	b.n	8014f1e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	3318      	adds	r3, #24
 8014f16:	4619      	mov	r1, r3
 8014f18:	480e      	ldr	r0, [pc, #56]	@ (8014f54 <xTaskRemoveFromEventList+0xc0>)
 8014f1a:	f7fe f95b 	bl	80131d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f22:	4b0d      	ldr	r3, [pc, #52]	@ (8014f58 <xTaskRemoveFromEventList+0xc4>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d905      	bls.n	8014f38 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014f30:	4b0a      	ldr	r3, [pc, #40]	@ (8014f5c <xTaskRemoveFromEventList+0xc8>)
 8014f32:	2201      	movs	r2, #1
 8014f34:	601a      	str	r2, [r3, #0]
 8014f36:	e001      	b.n	8014f3c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014f3c:	697b      	ldr	r3, [r7, #20]
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3718      	adds	r7, #24
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	20005b80 	.word	0x20005b80
 8014f4c:	20005b60 	.word	0x20005b60
 8014f50:	20005a5c 	.word	0x20005a5c
 8014f54:	20005b18 	.word	0x20005b18
 8014f58:	20005a58 	.word	0x20005a58
 8014f5c:	20005b6c 	.word	0x20005b6c

08014f60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014f60:	b480      	push	{r7}
 8014f62:	b083      	sub	sp, #12
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014f68:	4b06      	ldr	r3, [pc, #24]	@ (8014f84 <vTaskInternalSetTimeOutState+0x24>)
 8014f6a:	681a      	ldr	r2, [r3, #0]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014f70:	4b05      	ldr	r3, [pc, #20]	@ (8014f88 <vTaskInternalSetTimeOutState+0x28>)
 8014f72:	681a      	ldr	r2, [r3, #0]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	605a      	str	r2, [r3, #4]
}
 8014f78:	bf00      	nop
 8014f7a:	370c      	adds	r7, #12
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f82:	4770      	bx	lr
 8014f84:	20005b70 	.word	0x20005b70
 8014f88:	20005b5c 	.word	0x20005b5c

08014f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b088      	sub	sp, #32
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d10d      	bne.n	8014fb8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa0:	b672      	cpsid	i
 8014fa2:	f383 8811 	msr	BASEPRI, r3
 8014fa6:	f3bf 8f6f 	isb	sy
 8014faa:	f3bf 8f4f 	dsb	sy
 8014fae:	b662      	cpsie	i
 8014fb0:	613b      	str	r3, [r7, #16]
}
 8014fb2:	bf00      	nop
 8014fb4:	bf00      	nop
 8014fb6:	e7fd      	b.n	8014fb4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d10d      	bne.n	8014fda <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc2:	b672      	cpsid	i
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	b662      	cpsie	i
 8014fd2:	60fb      	str	r3, [r7, #12]
}
 8014fd4:	bf00      	nop
 8014fd6:	bf00      	nop
 8014fd8:	e7fd      	b.n	8014fd6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014fda:	f000 fc7f 	bl	80158dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014fde:	4b1d      	ldr	r3, [pc, #116]	@ (8015054 <xTaskCheckForTimeOut+0xc8>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	69ba      	ldr	r2, [r7, #24]
 8014fea:	1ad3      	subs	r3, r2, r3
 8014fec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ff6:	d102      	bne.n	8014ffe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	61fb      	str	r3, [r7, #28]
 8014ffc:	e023      	b.n	8015046 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	4b15      	ldr	r3, [pc, #84]	@ (8015058 <xTaskCheckForTimeOut+0xcc>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	429a      	cmp	r2, r3
 8015008:	d007      	beq.n	801501a <xTaskCheckForTimeOut+0x8e>
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	69ba      	ldr	r2, [r7, #24]
 8015010:	429a      	cmp	r2, r3
 8015012:	d302      	bcc.n	801501a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015014:	2301      	movs	r3, #1
 8015016:	61fb      	str	r3, [r7, #28]
 8015018:	e015      	b.n	8015046 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	697a      	ldr	r2, [r7, #20]
 8015020:	429a      	cmp	r2, r3
 8015022:	d20b      	bcs.n	801503c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	1ad2      	subs	r2, r2, r3
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f7ff ff95 	bl	8014f60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015036:	2300      	movs	r3, #0
 8015038:	61fb      	str	r3, [r7, #28]
 801503a:	e004      	b.n	8015046 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	2200      	movs	r2, #0
 8015040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015042:	2301      	movs	r3, #1
 8015044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015046:	f000 fc7f 	bl	8015948 <vPortExitCritical>

	return xReturn;
 801504a:	69fb      	ldr	r3, [r7, #28]
}
 801504c:	4618      	mov	r0, r3
 801504e:	3720      	adds	r7, #32
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	20005b5c 	.word	0x20005b5c
 8015058:	20005b70 	.word	0x20005b70

0801505c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801505c:	b480      	push	{r7}
 801505e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015060:	4b03      	ldr	r3, [pc, #12]	@ (8015070 <vTaskMissedYield+0x14>)
 8015062:	2201      	movs	r2, #1
 8015064:	601a      	str	r2, [r3, #0]
}
 8015066:	bf00      	nop
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr
 8015070:	20005b6c 	.word	0x20005b6c

08015074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801507c:	f000 f854 	bl	8015128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015080:	4b07      	ldr	r3, [pc, #28]	@ (80150a0 <prvIdleTask+0x2c>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	2b01      	cmp	r3, #1
 8015086:	d907      	bls.n	8015098 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015088:	4b06      	ldr	r3, [pc, #24]	@ (80150a4 <prvIdleTask+0x30>)
 801508a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801508e:	601a      	str	r2, [r3, #0]
 8015090:	f3bf 8f4f 	dsb	sy
 8015094:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015098:	f7eb fa82 	bl	80005a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801509c:	e7ee      	b.n	801507c <prvIdleTask+0x8>
 801509e:	bf00      	nop
 80150a0:	20005a5c 	.word	0x20005a5c
 80150a4:	e000ed04 	.word	0xe000ed04

080150a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80150ae:	2300      	movs	r3, #0
 80150b0:	607b      	str	r3, [r7, #4]
 80150b2:	e00c      	b.n	80150ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80150b4:	687a      	ldr	r2, [r7, #4]
 80150b6:	4613      	mov	r3, r2
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	4413      	add	r3, r2
 80150bc:	009b      	lsls	r3, r3, #2
 80150be:	4a12      	ldr	r2, [pc, #72]	@ (8015108 <prvInitialiseTaskLists+0x60>)
 80150c0:	4413      	add	r3, r2
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fe f859 	bl	801317a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	3301      	adds	r3, #1
 80150cc:	607b      	str	r3, [r7, #4]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2b06      	cmp	r3, #6
 80150d2:	d9ef      	bls.n	80150b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80150d4:	480d      	ldr	r0, [pc, #52]	@ (801510c <prvInitialiseTaskLists+0x64>)
 80150d6:	f7fe f850 	bl	801317a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80150da:	480d      	ldr	r0, [pc, #52]	@ (8015110 <prvInitialiseTaskLists+0x68>)
 80150dc:	f7fe f84d 	bl	801317a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80150e0:	480c      	ldr	r0, [pc, #48]	@ (8015114 <prvInitialiseTaskLists+0x6c>)
 80150e2:	f7fe f84a 	bl	801317a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80150e6:	480c      	ldr	r0, [pc, #48]	@ (8015118 <prvInitialiseTaskLists+0x70>)
 80150e8:	f7fe f847 	bl	801317a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80150ec:	480b      	ldr	r0, [pc, #44]	@ (801511c <prvInitialiseTaskLists+0x74>)
 80150ee:	f7fe f844 	bl	801317a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80150f2:	4b0b      	ldr	r3, [pc, #44]	@ (8015120 <prvInitialiseTaskLists+0x78>)
 80150f4:	4a05      	ldr	r2, [pc, #20]	@ (801510c <prvInitialiseTaskLists+0x64>)
 80150f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80150f8:	4b0a      	ldr	r3, [pc, #40]	@ (8015124 <prvInitialiseTaskLists+0x7c>)
 80150fa:	4a05      	ldr	r2, [pc, #20]	@ (8015110 <prvInitialiseTaskLists+0x68>)
 80150fc:	601a      	str	r2, [r3, #0]
}
 80150fe:	bf00      	nop
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	20005a5c 	.word	0x20005a5c
 801510c:	20005ae8 	.word	0x20005ae8
 8015110:	20005afc 	.word	0x20005afc
 8015114:	20005b18 	.word	0x20005b18
 8015118:	20005b2c 	.word	0x20005b2c
 801511c:	20005b44 	.word	0x20005b44
 8015120:	20005b10 	.word	0x20005b10
 8015124:	20005b14 	.word	0x20005b14

08015128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801512e:	e019      	b.n	8015164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015130:	f000 fbd4 	bl	80158dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015134:	4b10      	ldr	r3, [pc, #64]	@ (8015178 <prvCheckTasksWaitingTermination+0x50>)
 8015136:	68db      	ldr	r3, [r3, #12]
 8015138:	68db      	ldr	r3, [r3, #12]
 801513a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	3304      	adds	r3, #4
 8015140:	4618      	mov	r0, r3
 8015142:	f7fe f8a4 	bl	801328e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015146:	4b0d      	ldr	r3, [pc, #52]	@ (801517c <prvCheckTasksWaitingTermination+0x54>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	3b01      	subs	r3, #1
 801514c:	4a0b      	ldr	r2, [pc, #44]	@ (801517c <prvCheckTasksWaitingTermination+0x54>)
 801514e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015150:	4b0b      	ldr	r3, [pc, #44]	@ (8015180 <prvCheckTasksWaitingTermination+0x58>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	3b01      	subs	r3, #1
 8015156:	4a0a      	ldr	r2, [pc, #40]	@ (8015180 <prvCheckTasksWaitingTermination+0x58>)
 8015158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801515a:	f000 fbf5 	bl	8015948 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f000 f810 	bl	8015184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015164:	4b06      	ldr	r3, [pc, #24]	@ (8015180 <prvCheckTasksWaitingTermination+0x58>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d1e1      	bne.n	8015130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801516c:	bf00      	nop
 801516e:	bf00      	nop
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	20005b2c 	.word	0x20005b2c
 801517c:	20005b58 	.word	0x20005b58
 8015180:	20005b40 	.word	0x20005b40

08015184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015184:	b580      	push	{r7, lr}
 8015186:	b084      	sub	sp, #16
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	3350      	adds	r3, #80	@ 0x50
 8015190:	4618      	mov	r0, r3
 8015192:	f00e fb47 	bl	8023824 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 801519c:	2b00      	cmp	r3, #0
 801519e:	d108      	bne.n	80151b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151a4:	4618      	mov	r0, r3
 80151a6:	f000 fd99 	bl	8015cdc <vPortFree>
				vPortFree( pxTCB );
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f000 fd96 	bl	8015cdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80151b0:	e01b      	b.n	80151ea <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80151b8:	2b01      	cmp	r3, #1
 80151ba:	d103      	bne.n	80151c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f000 fd8d 	bl	8015cdc <vPortFree>
	}
 80151c2:	e012      	b.n	80151ea <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80151ca:	2b02      	cmp	r3, #2
 80151cc:	d00d      	beq.n	80151ea <prvDeleteTCB+0x66>
	__asm volatile
 80151ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151d2:	b672      	cpsid	i
 80151d4:	f383 8811 	msr	BASEPRI, r3
 80151d8:	f3bf 8f6f 	isb	sy
 80151dc:	f3bf 8f4f 	dsb	sy
 80151e0:	b662      	cpsie	i
 80151e2:	60fb      	str	r3, [r7, #12]
}
 80151e4:	bf00      	nop
 80151e6:	bf00      	nop
 80151e8:	e7fd      	b.n	80151e6 <prvDeleteTCB+0x62>
	}
 80151ea:	bf00      	nop
 80151ec:	3710      	adds	r7, #16
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
	...

080151f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80151f4:	b480      	push	{r7}
 80151f6:	b083      	sub	sp, #12
 80151f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80151fa:	4b0c      	ldr	r3, [pc, #48]	@ (801522c <prvResetNextTaskUnblockTime+0x38>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d104      	bne.n	801520e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015204:	4b0a      	ldr	r3, [pc, #40]	@ (8015230 <prvResetNextTaskUnblockTime+0x3c>)
 8015206:	f04f 32ff 	mov.w	r2, #4294967295
 801520a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801520c:	e008      	b.n	8015220 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801520e:	4b07      	ldr	r3, [pc, #28]	@ (801522c <prvResetNextTaskUnblockTime+0x38>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	68db      	ldr	r3, [r3, #12]
 8015214:	68db      	ldr	r3, [r3, #12]
 8015216:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	4a04      	ldr	r2, [pc, #16]	@ (8015230 <prvResetNextTaskUnblockTime+0x3c>)
 801521e:	6013      	str	r3, [r2, #0]
}
 8015220:	bf00      	nop
 8015222:	370c      	adds	r7, #12
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr
 801522c:	20005b10 	.word	0x20005b10
 8015230:	20005b78 	.word	0x20005b78

08015234 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015234:	b480      	push	{r7}
 8015236:	b083      	sub	sp, #12
 8015238:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801523a:	4b0b      	ldr	r3, [pc, #44]	@ (8015268 <xTaskGetSchedulerState+0x34>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d102      	bne.n	8015248 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015242:	2301      	movs	r3, #1
 8015244:	607b      	str	r3, [r7, #4]
 8015246:	e008      	b.n	801525a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015248:	4b08      	ldr	r3, [pc, #32]	@ (801526c <xTaskGetSchedulerState+0x38>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d102      	bne.n	8015256 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015250:	2302      	movs	r3, #2
 8015252:	607b      	str	r3, [r7, #4]
 8015254:	e001      	b.n	801525a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015256:	2300      	movs	r3, #0
 8015258:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801525a:	687b      	ldr	r3, [r7, #4]
	}
 801525c:	4618      	mov	r0, r3
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr
 8015268:	20005b64 	.word	0x20005b64
 801526c:	20005b80 	.word	0x20005b80

08015270 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015270:	b580      	push	{r7, lr}
 8015272:	b084      	sub	sp, #16
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801527c:	2300      	movs	r3, #0
 801527e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d069      	beq.n	801535a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801528a:	4b36      	ldr	r3, [pc, #216]	@ (8015364 <xTaskPriorityInherit+0xf4>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015290:	429a      	cmp	r2, r3
 8015292:	d259      	bcs.n	8015348 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	699b      	ldr	r3, [r3, #24]
 8015298:	2b00      	cmp	r3, #0
 801529a:	db06      	blt.n	80152aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801529c:	4b31      	ldr	r3, [pc, #196]	@ (8015364 <xTaskPriorityInherit+0xf4>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152a2:	f1c3 0207 	rsb	r2, r3, #7
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	6959      	ldr	r1, [r3, #20]
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152b2:	4613      	mov	r3, r2
 80152b4:	009b      	lsls	r3, r3, #2
 80152b6:	4413      	add	r3, r2
 80152b8:	009b      	lsls	r3, r3, #2
 80152ba:	4a2b      	ldr	r2, [pc, #172]	@ (8015368 <xTaskPriorityInherit+0xf8>)
 80152bc:	4413      	add	r3, r2
 80152be:	4299      	cmp	r1, r3
 80152c0:	d13a      	bne.n	8015338 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	3304      	adds	r3, #4
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7fd ffe1 	bl	801328e <uxListRemove>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d115      	bne.n	80152fe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152d6:	4924      	ldr	r1, [pc, #144]	@ (8015368 <xTaskPriorityInherit+0xf8>)
 80152d8:	4613      	mov	r3, r2
 80152da:	009b      	lsls	r3, r3, #2
 80152dc:	4413      	add	r3, r2
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	440b      	add	r3, r1
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d10a      	bne.n	80152fe <xTaskPriorityInherit+0x8e>
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152ec:	2201      	movs	r2, #1
 80152ee:	fa02 f303 	lsl.w	r3, r2, r3
 80152f2:	43da      	mvns	r2, r3
 80152f4:	4b1d      	ldr	r3, [pc, #116]	@ (801536c <xTaskPriorityInherit+0xfc>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4013      	ands	r3, r2
 80152fa:	4a1c      	ldr	r2, [pc, #112]	@ (801536c <xTaskPriorityInherit+0xfc>)
 80152fc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80152fe:	4b19      	ldr	r3, [pc, #100]	@ (8015364 <xTaskPriorityInherit+0xf4>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801530c:	2201      	movs	r2, #1
 801530e:	409a      	lsls	r2, r3
 8015310:	4b16      	ldr	r3, [pc, #88]	@ (801536c <xTaskPriorityInherit+0xfc>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	4313      	orrs	r3, r2
 8015316:	4a15      	ldr	r2, [pc, #84]	@ (801536c <xTaskPriorityInherit+0xfc>)
 8015318:	6013      	str	r3, [r2, #0]
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801531e:	4613      	mov	r3, r2
 8015320:	009b      	lsls	r3, r3, #2
 8015322:	4413      	add	r3, r2
 8015324:	009b      	lsls	r3, r3, #2
 8015326:	4a10      	ldr	r2, [pc, #64]	@ (8015368 <xTaskPriorityInherit+0xf8>)
 8015328:	441a      	add	r2, r3
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	3304      	adds	r3, #4
 801532e:	4619      	mov	r1, r3
 8015330:	4610      	mov	r0, r2
 8015332:	f7fd ff4f 	bl	80131d4 <vListInsertEnd>
 8015336:	e004      	b.n	8015342 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015338:	4b0a      	ldr	r3, [pc, #40]	@ (8015364 <xTaskPriorityInherit+0xf4>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015342:	2301      	movs	r3, #1
 8015344:	60fb      	str	r3, [r7, #12]
 8015346:	e008      	b.n	801535a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801534c:	4b05      	ldr	r3, [pc, #20]	@ (8015364 <xTaskPriorityInherit+0xf4>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015352:	429a      	cmp	r2, r3
 8015354:	d201      	bcs.n	801535a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015356:	2301      	movs	r3, #1
 8015358:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801535a:	68fb      	ldr	r3, [r7, #12]
	}
 801535c:	4618      	mov	r0, r3
 801535e:	3710      	adds	r7, #16
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	20005a58 	.word	0x20005a58
 8015368:	20005a5c 	.word	0x20005a5c
 801536c:	20005b60 	.word	0x20005b60

08015370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015370:	b580      	push	{r7, lr}
 8015372:	b086      	sub	sp, #24
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801537c:	2300      	movs	r3, #0
 801537e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d074      	beq.n	8015470 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015386:	4b3d      	ldr	r3, [pc, #244]	@ (801547c <xTaskPriorityDisinherit+0x10c>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	693a      	ldr	r2, [r7, #16]
 801538c:	429a      	cmp	r2, r3
 801538e:	d00d      	beq.n	80153ac <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015394:	b672      	cpsid	i
 8015396:	f383 8811 	msr	BASEPRI, r3
 801539a:	f3bf 8f6f 	isb	sy
 801539e:	f3bf 8f4f 	dsb	sy
 80153a2:	b662      	cpsie	i
 80153a4:	60fb      	str	r3, [r7, #12]
}
 80153a6:	bf00      	nop
 80153a8:	bf00      	nop
 80153aa:	e7fd      	b.n	80153a8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d10d      	bne.n	80153d0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80153b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153b8:	b672      	cpsid	i
 80153ba:	f383 8811 	msr	BASEPRI, r3
 80153be:	f3bf 8f6f 	isb	sy
 80153c2:	f3bf 8f4f 	dsb	sy
 80153c6:	b662      	cpsie	i
 80153c8:	60bb      	str	r3, [r7, #8]
}
 80153ca:	bf00      	nop
 80153cc:	bf00      	nop
 80153ce:	e7fd      	b.n	80153cc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153d4:	1e5a      	subs	r2, r3, #1
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d044      	beq.n	8015470 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d140      	bne.n	8015470 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153ee:	693b      	ldr	r3, [r7, #16]
 80153f0:	3304      	adds	r3, #4
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7fd ff4b 	bl	801328e <uxListRemove>
 80153f8:	4603      	mov	r3, r0
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d115      	bne.n	801542a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015402:	491f      	ldr	r1, [pc, #124]	@ (8015480 <xTaskPriorityDisinherit+0x110>)
 8015404:	4613      	mov	r3, r2
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	4413      	add	r3, r2
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	440b      	add	r3, r1
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d10a      	bne.n	801542a <xTaskPriorityDisinherit+0xba>
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015418:	2201      	movs	r2, #1
 801541a:	fa02 f303 	lsl.w	r3, r2, r3
 801541e:	43da      	mvns	r2, r3
 8015420:	4b18      	ldr	r3, [pc, #96]	@ (8015484 <xTaskPriorityDisinherit+0x114>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	4013      	ands	r3, r2
 8015426:	4a17      	ldr	r2, [pc, #92]	@ (8015484 <xTaskPriorityDisinherit+0x114>)
 8015428:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801542a:	693b      	ldr	r3, [r7, #16]
 801542c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015436:	f1c3 0207 	rsb	r2, r3, #7
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015442:	2201      	movs	r2, #1
 8015444:	409a      	lsls	r2, r3
 8015446:	4b0f      	ldr	r3, [pc, #60]	@ (8015484 <xTaskPriorityDisinherit+0x114>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4313      	orrs	r3, r2
 801544c:	4a0d      	ldr	r2, [pc, #52]	@ (8015484 <xTaskPriorityDisinherit+0x114>)
 801544e:	6013      	str	r3, [r2, #0]
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015454:	4613      	mov	r3, r2
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	4413      	add	r3, r2
 801545a:	009b      	lsls	r3, r3, #2
 801545c:	4a08      	ldr	r2, [pc, #32]	@ (8015480 <xTaskPriorityDisinherit+0x110>)
 801545e:	441a      	add	r2, r3
 8015460:	693b      	ldr	r3, [r7, #16]
 8015462:	3304      	adds	r3, #4
 8015464:	4619      	mov	r1, r3
 8015466:	4610      	mov	r0, r2
 8015468:	f7fd feb4 	bl	80131d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801546c:	2301      	movs	r3, #1
 801546e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015470:	697b      	ldr	r3, [r7, #20]
	}
 8015472:	4618      	mov	r0, r3
 8015474:	3718      	adds	r7, #24
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	20005a58 	.word	0x20005a58
 8015480:	20005a5c 	.word	0x20005a5c
 8015484:	20005b60 	.word	0x20005b60

08015488 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015488:	b580      	push	{r7, lr}
 801548a:	b088      	sub	sp, #32
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015496:	2301      	movs	r3, #1
 8015498:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2b00      	cmp	r3, #0
 801549e:	f000 8089 	beq.w	80155b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d10d      	bne.n	80154c6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80154aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154ae:	b672      	cpsid	i
 80154b0:	f383 8811 	msr	BASEPRI, r3
 80154b4:	f3bf 8f6f 	isb	sy
 80154b8:	f3bf 8f4f 	dsb	sy
 80154bc:	b662      	cpsie	i
 80154be:	60fb      	str	r3, [r7, #12]
}
 80154c0:	bf00      	nop
 80154c2:	bf00      	nop
 80154c4:	e7fd      	b.n	80154c2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154ca:	683a      	ldr	r2, [r7, #0]
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d902      	bls.n	80154d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	61fb      	str	r3, [r7, #28]
 80154d4:	e002      	b.n	80154dc <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154e0:	69fa      	ldr	r2, [r7, #28]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d066      	beq.n	80155b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80154ea:	697a      	ldr	r2, [r7, #20]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d161      	bne.n	80155b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80154f0:	4b32      	ldr	r3, [pc, #200]	@ (80155bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	69ba      	ldr	r2, [r7, #24]
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d10d      	bne.n	8015516 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80154fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154fe:	b672      	cpsid	i
 8015500:	f383 8811 	msr	BASEPRI, r3
 8015504:	f3bf 8f6f 	isb	sy
 8015508:	f3bf 8f4f 	dsb	sy
 801550c:	b662      	cpsie	i
 801550e:	60bb      	str	r3, [r7, #8]
}
 8015510:	bf00      	nop
 8015512:	bf00      	nop
 8015514:	e7fd      	b.n	8015512 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015516:	69bb      	ldr	r3, [r7, #24]
 8015518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801551a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801551c:	69bb      	ldr	r3, [r7, #24]
 801551e:	69fa      	ldr	r2, [r7, #28]
 8015520:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	699b      	ldr	r3, [r3, #24]
 8015526:	2b00      	cmp	r3, #0
 8015528:	db04      	blt.n	8015534 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801552a:	69fb      	ldr	r3, [r7, #28]
 801552c:	f1c3 0207 	rsb	r2, r3, #7
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015534:	69bb      	ldr	r3, [r7, #24]
 8015536:	6959      	ldr	r1, [r3, #20]
 8015538:	693a      	ldr	r2, [r7, #16]
 801553a:	4613      	mov	r3, r2
 801553c:	009b      	lsls	r3, r3, #2
 801553e:	4413      	add	r3, r2
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	4a1f      	ldr	r2, [pc, #124]	@ (80155c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015544:	4413      	add	r3, r2
 8015546:	4299      	cmp	r1, r3
 8015548:	d134      	bne.n	80155b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801554a:	69bb      	ldr	r3, [r7, #24]
 801554c:	3304      	adds	r3, #4
 801554e:	4618      	mov	r0, r3
 8015550:	f7fd fe9d 	bl	801328e <uxListRemove>
 8015554:	4603      	mov	r3, r0
 8015556:	2b00      	cmp	r3, #0
 8015558:	d115      	bne.n	8015586 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801555a:	69bb      	ldr	r3, [r7, #24]
 801555c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801555e:	4918      	ldr	r1, [pc, #96]	@ (80155c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015560:	4613      	mov	r3, r2
 8015562:	009b      	lsls	r3, r3, #2
 8015564:	4413      	add	r3, r2
 8015566:	009b      	lsls	r3, r3, #2
 8015568:	440b      	add	r3, r1
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d10a      	bne.n	8015586 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8015570:	69bb      	ldr	r3, [r7, #24]
 8015572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015574:	2201      	movs	r2, #1
 8015576:	fa02 f303 	lsl.w	r3, r2, r3
 801557a:	43da      	mvns	r2, r3
 801557c:	4b11      	ldr	r3, [pc, #68]	@ (80155c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	4013      	ands	r3, r2
 8015582:	4a10      	ldr	r2, [pc, #64]	@ (80155c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015584:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801558a:	2201      	movs	r2, #1
 801558c:	409a      	lsls	r2, r3
 801558e:	4b0d      	ldr	r3, [pc, #52]	@ (80155c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	4313      	orrs	r3, r2
 8015594:	4a0b      	ldr	r2, [pc, #44]	@ (80155c4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015596:	6013      	str	r3, [r2, #0]
 8015598:	69bb      	ldr	r3, [r7, #24]
 801559a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801559c:	4613      	mov	r3, r2
 801559e:	009b      	lsls	r3, r3, #2
 80155a0:	4413      	add	r3, r2
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	4a06      	ldr	r2, [pc, #24]	@ (80155c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80155a6:	441a      	add	r2, r3
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	3304      	adds	r3, #4
 80155ac:	4619      	mov	r1, r3
 80155ae:	4610      	mov	r0, r2
 80155b0:	f7fd fe10 	bl	80131d4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80155b4:	bf00      	nop
 80155b6:	3720      	adds	r7, #32
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}
 80155bc:	20005a58 	.word	0x20005a58
 80155c0:	20005a5c 	.word	0x20005a5c
 80155c4:	20005b60 	.word	0x20005b60

080155c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80155c8:	b480      	push	{r7}
 80155ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80155cc:	4b07      	ldr	r3, [pc, #28]	@ (80155ec <pvTaskIncrementMutexHeldCount+0x24>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d004      	beq.n	80155de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80155d4:	4b05      	ldr	r3, [pc, #20]	@ (80155ec <pvTaskIncrementMutexHeldCount+0x24>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80155da:	3201      	adds	r2, #1
 80155dc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80155de:	4b03      	ldr	r3, [pc, #12]	@ (80155ec <pvTaskIncrementMutexHeldCount+0x24>)
 80155e0:	681b      	ldr	r3, [r3, #0]
	}
 80155e2:	4618      	mov	r0, r3
 80155e4:	46bd      	mov	sp, r7
 80155e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ea:	4770      	bx	lr
 80155ec:	20005a58 	.word	0x20005a58

080155f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80155fa:	4b29      	ldr	r3, [pc, #164]	@ (80156a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015600:	4b28      	ldr	r3, [pc, #160]	@ (80156a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	3304      	adds	r3, #4
 8015606:	4618      	mov	r0, r3
 8015608:	f7fd fe41 	bl	801328e <uxListRemove>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	d10b      	bne.n	801562a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015612:	4b24      	ldr	r3, [pc, #144]	@ (80156a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015618:	2201      	movs	r2, #1
 801561a:	fa02 f303 	lsl.w	r3, r2, r3
 801561e:	43da      	mvns	r2, r3
 8015620:	4b21      	ldr	r3, [pc, #132]	@ (80156a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	4013      	ands	r3, r2
 8015626:	4a20      	ldr	r2, [pc, #128]	@ (80156a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015628:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015630:	d10a      	bne.n	8015648 <prvAddCurrentTaskToDelayedList+0x58>
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d007      	beq.n	8015648 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015638:	4b1a      	ldr	r3, [pc, #104]	@ (80156a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	3304      	adds	r3, #4
 801563e:	4619      	mov	r1, r3
 8015640:	481a      	ldr	r0, [pc, #104]	@ (80156ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8015642:	f7fd fdc7 	bl	80131d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015646:	e026      	b.n	8015696 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015648:	68fa      	ldr	r2, [r7, #12]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4413      	add	r3, r2
 801564e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015650:	4b14      	ldr	r3, [pc, #80]	@ (80156a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	68ba      	ldr	r2, [r7, #8]
 8015656:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015658:	68ba      	ldr	r2, [r7, #8]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	429a      	cmp	r2, r3
 801565e:	d209      	bcs.n	8015674 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015660:	4b13      	ldr	r3, [pc, #76]	@ (80156b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	4b0f      	ldr	r3, [pc, #60]	@ (80156a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	3304      	adds	r3, #4
 801566a:	4619      	mov	r1, r3
 801566c:	4610      	mov	r0, r2
 801566e:	f7fd fdd5 	bl	801321c <vListInsert>
}
 8015672:	e010      	b.n	8015696 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015674:	4b0f      	ldr	r3, [pc, #60]	@ (80156b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	4b0a      	ldr	r3, [pc, #40]	@ (80156a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	3304      	adds	r3, #4
 801567e:	4619      	mov	r1, r3
 8015680:	4610      	mov	r0, r2
 8015682:	f7fd fdcb 	bl	801321c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015686:	4b0c      	ldr	r3, [pc, #48]	@ (80156b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	68ba      	ldr	r2, [r7, #8]
 801568c:	429a      	cmp	r2, r3
 801568e:	d202      	bcs.n	8015696 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015690:	4a09      	ldr	r2, [pc, #36]	@ (80156b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	6013      	str	r3, [r2, #0]
}
 8015696:	bf00      	nop
 8015698:	3710      	adds	r7, #16
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	20005b5c 	.word	0x20005b5c
 80156a4:	20005a58 	.word	0x20005a58
 80156a8:	20005b60 	.word	0x20005b60
 80156ac:	20005b44 	.word	0x20005b44
 80156b0:	20005b14 	.word	0x20005b14
 80156b4:	20005b10 	.word	0x20005b10
 80156b8:	20005b78 	.word	0x20005b78

080156bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80156bc:	b480      	push	{r7}
 80156be:	b085      	sub	sp, #20
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	3b04      	subs	r3, #4
 80156cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80156d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	3b04      	subs	r3, #4
 80156da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	f023 0201 	bic.w	r2, r3, #1
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	3b04      	subs	r3, #4
 80156ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80156ec:	4a0c      	ldr	r2, [pc, #48]	@ (8015720 <pxPortInitialiseStack+0x64>)
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	3b14      	subs	r3, #20
 80156f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	3b04      	subs	r3, #4
 8015702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	f06f 0202 	mvn.w	r2, #2
 801570a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	3b20      	subs	r3, #32
 8015710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015712:	68fb      	ldr	r3, [r7, #12]
}
 8015714:	4618      	mov	r0, r3
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr
 8015720:	08015725 	.word	0x08015725

08015724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015724:	b480      	push	{r7}
 8015726:	b085      	sub	sp, #20
 8015728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801572a:	2300      	movs	r3, #0
 801572c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801572e:	4b15      	ldr	r3, [pc, #84]	@ (8015784 <prvTaskExitError+0x60>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015736:	d00d      	beq.n	8015754 <prvTaskExitError+0x30>
	__asm volatile
 8015738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801573c:	b672      	cpsid	i
 801573e:	f383 8811 	msr	BASEPRI, r3
 8015742:	f3bf 8f6f 	isb	sy
 8015746:	f3bf 8f4f 	dsb	sy
 801574a:	b662      	cpsie	i
 801574c:	60fb      	str	r3, [r7, #12]
}
 801574e:	bf00      	nop
 8015750:	bf00      	nop
 8015752:	e7fd      	b.n	8015750 <prvTaskExitError+0x2c>
	__asm volatile
 8015754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015758:	b672      	cpsid	i
 801575a:	f383 8811 	msr	BASEPRI, r3
 801575e:	f3bf 8f6f 	isb	sy
 8015762:	f3bf 8f4f 	dsb	sy
 8015766:	b662      	cpsie	i
 8015768:	60bb      	str	r3, [r7, #8]
}
 801576a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801576c:	bf00      	nop
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d0fc      	beq.n	801576e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015774:	bf00      	nop
 8015776:	bf00      	nop
 8015778:	3714      	adds	r7, #20
 801577a:	46bd      	mov	sp, r7
 801577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	20000040 	.word	0x20000040
	...

08015790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015790:	4b07      	ldr	r3, [pc, #28]	@ (80157b0 <pxCurrentTCBConst2>)
 8015792:	6819      	ldr	r1, [r3, #0]
 8015794:	6808      	ldr	r0, [r1, #0]
 8015796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801579a:	f380 8809 	msr	PSP, r0
 801579e:	f3bf 8f6f 	isb	sy
 80157a2:	f04f 0000 	mov.w	r0, #0
 80157a6:	f380 8811 	msr	BASEPRI, r0
 80157aa:	4770      	bx	lr
 80157ac:	f3af 8000 	nop.w

080157b0 <pxCurrentTCBConst2>:
 80157b0:	20005a58 	.word	0x20005a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80157b4:	bf00      	nop
 80157b6:	bf00      	nop

080157b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80157b8:	4808      	ldr	r0, [pc, #32]	@ (80157dc <prvPortStartFirstTask+0x24>)
 80157ba:	6800      	ldr	r0, [r0, #0]
 80157bc:	6800      	ldr	r0, [r0, #0]
 80157be:	f380 8808 	msr	MSP, r0
 80157c2:	f04f 0000 	mov.w	r0, #0
 80157c6:	f380 8814 	msr	CONTROL, r0
 80157ca:	b662      	cpsie	i
 80157cc:	b661      	cpsie	f
 80157ce:	f3bf 8f4f 	dsb	sy
 80157d2:	f3bf 8f6f 	isb	sy
 80157d6:	df00      	svc	0
 80157d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80157da:	bf00      	nop
 80157dc:	e000ed08 	.word	0xe000ed08

080157e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80157e6:	4b37      	ldr	r3, [pc, #220]	@ (80158c4 <xPortStartScheduler+0xe4>)
 80157e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	b2db      	uxtb	r3, r3
 80157f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	22ff      	movs	r2, #255	@ 0xff
 80157f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015800:	78fb      	ldrb	r3, [r7, #3]
 8015802:	b2db      	uxtb	r3, r3
 8015804:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015808:	b2da      	uxtb	r2, r3
 801580a:	4b2f      	ldr	r3, [pc, #188]	@ (80158c8 <xPortStartScheduler+0xe8>)
 801580c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801580e:	4b2f      	ldr	r3, [pc, #188]	@ (80158cc <xPortStartScheduler+0xec>)
 8015810:	2207      	movs	r2, #7
 8015812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015814:	e009      	b.n	801582a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015816:	4b2d      	ldr	r3, [pc, #180]	@ (80158cc <xPortStartScheduler+0xec>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	3b01      	subs	r3, #1
 801581c:	4a2b      	ldr	r2, [pc, #172]	@ (80158cc <xPortStartScheduler+0xec>)
 801581e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015820:	78fb      	ldrb	r3, [r7, #3]
 8015822:	b2db      	uxtb	r3, r3
 8015824:	005b      	lsls	r3, r3, #1
 8015826:	b2db      	uxtb	r3, r3
 8015828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801582a:	78fb      	ldrb	r3, [r7, #3]
 801582c:	b2db      	uxtb	r3, r3
 801582e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015832:	2b80      	cmp	r3, #128	@ 0x80
 8015834:	d0ef      	beq.n	8015816 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015836:	4b25      	ldr	r3, [pc, #148]	@ (80158cc <xPortStartScheduler+0xec>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f1c3 0307 	rsb	r3, r3, #7
 801583e:	2b04      	cmp	r3, #4
 8015840:	d00d      	beq.n	801585e <xPortStartScheduler+0x7e>
	__asm volatile
 8015842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015846:	b672      	cpsid	i
 8015848:	f383 8811 	msr	BASEPRI, r3
 801584c:	f3bf 8f6f 	isb	sy
 8015850:	f3bf 8f4f 	dsb	sy
 8015854:	b662      	cpsie	i
 8015856:	60bb      	str	r3, [r7, #8]
}
 8015858:	bf00      	nop
 801585a:	bf00      	nop
 801585c:	e7fd      	b.n	801585a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801585e:	4b1b      	ldr	r3, [pc, #108]	@ (80158cc <xPortStartScheduler+0xec>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	021b      	lsls	r3, r3, #8
 8015864:	4a19      	ldr	r2, [pc, #100]	@ (80158cc <xPortStartScheduler+0xec>)
 8015866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015868:	4b18      	ldr	r3, [pc, #96]	@ (80158cc <xPortStartScheduler+0xec>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015870:	4a16      	ldr	r2, [pc, #88]	@ (80158cc <xPortStartScheduler+0xec>)
 8015872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	b2da      	uxtb	r2, r3
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801587c:	4b14      	ldr	r3, [pc, #80]	@ (80158d0 <xPortStartScheduler+0xf0>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	4a13      	ldr	r2, [pc, #76]	@ (80158d0 <xPortStartScheduler+0xf0>)
 8015882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015888:	4b11      	ldr	r3, [pc, #68]	@ (80158d0 <xPortStartScheduler+0xf0>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	4a10      	ldr	r2, [pc, #64]	@ (80158d0 <xPortStartScheduler+0xf0>)
 801588e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015894:	f000 f8dc 	bl	8015a50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015898:	4b0e      	ldr	r3, [pc, #56]	@ (80158d4 <xPortStartScheduler+0xf4>)
 801589a:	2200      	movs	r2, #0
 801589c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801589e:	f000 f8fb 	bl	8015a98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80158a2:	4b0d      	ldr	r3, [pc, #52]	@ (80158d8 <xPortStartScheduler+0xf8>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4a0c      	ldr	r2, [pc, #48]	@ (80158d8 <xPortStartScheduler+0xf8>)
 80158a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80158ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80158ae:	f7ff ff83 	bl	80157b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80158b2:	f7ff fa3d 	bl	8014d30 <vTaskSwitchContext>
	prvTaskExitError();
 80158b6:	f7ff ff35 	bl	8015724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80158ba:	2300      	movs	r3, #0
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3710      	adds	r7, #16
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	e000e400 	.word	0xe000e400
 80158c8:	20005b84 	.word	0x20005b84
 80158cc:	20005b88 	.word	0x20005b88
 80158d0:	e000ed20 	.word	0xe000ed20
 80158d4:	20000040 	.word	0x20000040
 80158d8:	e000ef34 	.word	0xe000ef34

080158dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80158dc:	b480      	push	{r7}
 80158de:	b083      	sub	sp, #12
 80158e0:	af00      	add	r7, sp, #0
	__asm volatile
 80158e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158e6:	b672      	cpsid	i
 80158e8:	f383 8811 	msr	BASEPRI, r3
 80158ec:	f3bf 8f6f 	isb	sy
 80158f0:	f3bf 8f4f 	dsb	sy
 80158f4:	b662      	cpsie	i
 80158f6:	607b      	str	r3, [r7, #4]
}
 80158f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80158fa:	4b11      	ldr	r3, [pc, #68]	@ (8015940 <vPortEnterCritical+0x64>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	3301      	adds	r3, #1
 8015900:	4a0f      	ldr	r2, [pc, #60]	@ (8015940 <vPortEnterCritical+0x64>)
 8015902:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015904:	4b0e      	ldr	r3, [pc, #56]	@ (8015940 <vPortEnterCritical+0x64>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2b01      	cmp	r3, #1
 801590a:	d112      	bne.n	8015932 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801590c:	4b0d      	ldr	r3, [pc, #52]	@ (8015944 <vPortEnterCritical+0x68>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	b2db      	uxtb	r3, r3
 8015912:	2b00      	cmp	r3, #0
 8015914:	d00d      	beq.n	8015932 <vPortEnterCritical+0x56>
	__asm volatile
 8015916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801591a:	b672      	cpsid	i
 801591c:	f383 8811 	msr	BASEPRI, r3
 8015920:	f3bf 8f6f 	isb	sy
 8015924:	f3bf 8f4f 	dsb	sy
 8015928:	b662      	cpsie	i
 801592a:	603b      	str	r3, [r7, #0]
}
 801592c:	bf00      	nop
 801592e:	bf00      	nop
 8015930:	e7fd      	b.n	801592e <vPortEnterCritical+0x52>
	}
}
 8015932:	bf00      	nop
 8015934:	370c      	adds	r7, #12
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr
 801593e:	bf00      	nop
 8015940:	20000040 	.word	0x20000040
 8015944:	e000ed04 	.word	0xe000ed04

08015948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015948:	b480      	push	{r7}
 801594a:	b083      	sub	sp, #12
 801594c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801594e:	4b13      	ldr	r3, [pc, #76]	@ (801599c <vPortExitCritical+0x54>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d10d      	bne.n	8015972 <vPortExitCritical+0x2a>
	__asm volatile
 8015956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801595a:	b672      	cpsid	i
 801595c:	f383 8811 	msr	BASEPRI, r3
 8015960:	f3bf 8f6f 	isb	sy
 8015964:	f3bf 8f4f 	dsb	sy
 8015968:	b662      	cpsie	i
 801596a:	607b      	str	r3, [r7, #4]
}
 801596c:	bf00      	nop
 801596e:	bf00      	nop
 8015970:	e7fd      	b.n	801596e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8015972:	4b0a      	ldr	r3, [pc, #40]	@ (801599c <vPortExitCritical+0x54>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	3b01      	subs	r3, #1
 8015978:	4a08      	ldr	r2, [pc, #32]	@ (801599c <vPortExitCritical+0x54>)
 801597a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801597c:	4b07      	ldr	r3, [pc, #28]	@ (801599c <vPortExitCritical+0x54>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d105      	bne.n	8015990 <vPortExitCritical+0x48>
 8015984:	2300      	movs	r3, #0
 8015986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	f383 8811 	msr	BASEPRI, r3
}
 801598e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015990:	bf00      	nop
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr
 801599c:	20000040 	.word	0x20000040

080159a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80159a0:	f3ef 8009 	mrs	r0, PSP
 80159a4:	f3bf 8f6f 	isb	sy
 80159a8:	4b15      	ldr	r3, [pc, #84]	@ (8015a00 <pxCurrentTCBConst>)
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	f01e 0f10 	tst.w	lr, #16
 80159b0:	bf08      	it	eq
 80159b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80159b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ba:	6010      	str	r0, [r2, #0]
 80159bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80159c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80159c4:	b672      	cpsid	i
 80159c6:	f380 8811 	msr	BASEPRI, r0
 80159ca:	f3bf 8f4f 	dsb	sy
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	b662      	cpsie	i
 80159d4:	f7ff f9ac 	bl	8014d30 <vTaskSwitchContext>
 80159d8:	f04f 0000 	mov.w	r0, #0
 80159dc:	f380 8811 	msr	BASEPRI, r0
 80159e0:	bc09      	pop	{r0, r3}
 80159e2:	6819      	ldr	r1, [r3, #0]
 80159e4:	6808      	ldr	r0, [r1, #0]
 80159e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ea:	f01e 0f10 	tst.w	lr, #16
 80159ee:	bf08      	it	eq
 80159f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80159f4:	f380 8809 	msr	PSP, r0
 80159f8:	f3bf 8f6f 	isb	sy
 80159fc:	4770      	bx	lr
 80159fe:	bf00      	nop

08015a00 <pxCurrentTCBConst>:
 8015a00:	20005a58 	.word	0x20005a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015a04:	bf00      	nop
 8015a06:	bf00      	nop

08015a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8015a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a12:	b672      	cpsid	i
 8015a14:	f383 8811 	msr	BASEPRI, r3
 8015a18:	f3bf 8f6f 	isb	sy
 8015a1c:	f3bf 8f4f 	dsb	sy
 8015a20:	b662      	cpsie	i
 8015a22:	607b      	str	r3, [r7, #4]
}
 8015a24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015a26:	f7ff f8c7 	bl	8014bb8 <xTaskIncrementTick>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d003      	beq.n	8015a38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015a30:	4b06      	ldr	r3, [pc, #24]	@ (8015a4c <SysTick_Handler+0x44>)
 8015a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a36:	601a      	str	r2, [r3, #0]
 8015a38:	2300      	movs	r3, #0
 8015a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	f383 8811 	msr	BASEPRI, r3
}
 8015a42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015a44:	bf00      	nop
 8015a46:	3708      	adds	r7, #8
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	e000ed04 	.word	0xe000ed04

08015a50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015a50:	b480      	push	{r7}
 8015a52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015a54:	4b0b      	ldr	r3, [pc, #44]	@ (8015a84 <vPortSetupTimerInterrupt+0x34>)
 8015a56:	2200      	movs	r2, #0
 8015a58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8015a88 <vPortSetupTimerInterrupt+0x38>)
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015a60:	4b0a      	ldr	r3, [pc, #40]	@ (8015a8c <vPortSetupTimerInterrupt+0x3c>)
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4a0a      	ldr	r2, [pc, #40]	@ (8015a90 <vPortSetupTimerInterrupt+0x40>)
 8015a66:	fba2 2303 	umull	r2, r3, r2, r3
 8015a6a:	099b      	lsrs	r3, r3, #6
 8015a6c:	4a09      	ldr	r2, [pc, #36]	@ (8015a94 <vPortSetupTimerInterrupt+0x44>)
 8015a6e:	3b01      	subs	r3, #1
 8015a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015a72:	4b04      	ldr	r3, [pc, #16]	@ (8015a84 <vPortSetupTimerInterrupt+0x34>)
 8015a74:	2207      	movs	r2, #7
 8015a76:	601a      	str	r2, [r3, #0]
}
 8015a78:	bf00      	nop
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a80:	4770      	bx	lr
 8015a82:	bf00      	nop
 8015a84:	e000e010 	.word	0xe000e010
 8015a88:	e000e018 	.word	0xe000e018
 8015a8c:	20000000 	.word	0x20000000
 8015a90:	10624dd3 	.word	0x10624dd3
 8015a94:	e000e014 	.word	0xe000e014

08015a98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015a98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015aa8 <vPortEnableVFP+0x10>
 8015a9c:	6801      	ldr	r1, [r0, #0]
 8015a9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015aa2:	6001      	str	r1, [r0, #0]
 8015aa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015aa6:	bf00      	nop
 8015aa8:	e000ed88 	.word	0xe000ed88

08015aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015aac:	b480      	push	{r7}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015ab2:	f3ef 8305 	mrs	r3, IPSR
 8015ab6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	2b0f      	cmp	r3, #15
 8015abc:	d917      	bls.n	8015aee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015abe:	4a1a      	ldr	r2, [pc, #104]	@ (8015b28 <vPortValidateInterruptPriority+0x7c>)
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	4413      	add	r3, r2
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015ac8:	4b18      	ldr	r3, [pc, #96]	@ (8015b2c <vPortValidateInterruptPriority+0x80>)
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	7afa      	ldrb	r2, [r7, #11]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d20d      	bcs.n	8015aee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8015ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ad6:	b672      	cpsid	i
 8015ad8:	f383 8811 	msr	BASEPRI, r3
 8015adc:	f3bf 8f6f 	isb	sy
 8015ae0:	f3bf 8f4f 	dsb	sy
 8015ae4:	b662      	cpsie	i
 8015ae6:	607b      	str	r3, [r7, #4]
}
 8015ae8:	bf00      	nop
 8015aea:	bf00      	nop
 8015aec:	e7fd      	b.n	8015aea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015aee:	4b10      	ldr	r3, [pc, #64]	@ (8015b30 <vPortValidateInterruptPriority+0x84>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015af6:	4b0f      	ldr	r3, [pc, #60]	@ (8015b34 <vPortValidateInterruptPriority+0x88>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d90d      	bls.n	8015b1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8015afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b02:	b672      	cpsid	i
 8015b04:	f383 8811 	msr	BASEPRI, r3
 8015b08:	f3bf 8f6f 	isb	sy
 8015b0c:	f3bf 8f4f 	dsb	sy
 8015b10:	b662      	cpsie	i
 8015b12:	603b      	str	r3, [r7, #0]
}
 8015b14:	bf00      	nop
 8015b16:	bf00      	nop
 8015b18:	e7fd      	b.n	8015b16 <vPortValidateInterruptPriority+0x6a>
	}
 8015b1a:	bf00      	nop
 8015b1c:	3714      	adds	r7, #20
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b24:	4770      	bx	lr
 8015b26:	bf00      	nop
 8015b28:	e000e3f0 	.word	0xe000e3f0
 8015b2c:	20005b84 	.word	0x20005b84
 8015b30:	e000ed0c 	.word	0xe000ed0c
 8015b34:	20005b88 	.word	0x20005b88

08015b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b08a      	sub	sp, #40	@ 0x28
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015b40:	2300      	movs	r3, #0
 8015b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015b44:	f7fe ff68 	bl	8014a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015b48:	4b5f      	ldr	r3, [pc, #380]	@ (8015cc8 <pvPortMalloc+0x190>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d101      	bne.n	8015b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015b50:	f000 f924 	bl	8015d9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015b54:	4b5d      	ldr	r3, [pc, #372]	@ (8015ccc <pvPortMalloc+0x194>)
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	4013      	ands	r3, r2
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	f040 8094 	bne.w	8015c8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d020      	beq.n	8015baa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8015b68:	2208      	movs	r2, #8
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	4413      	add	r3, r2
 8015b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f003 0307 	and.w	r3, r3, #7
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d017      	beq.n	8015baa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	f023 0307 	bic.w	r3, r3, #7
 8015b80:	3308      	adds	r3, #8
 8015b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f003 0307 	and.w	r3, r3, #7
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d00d      	beq.n	8015baa <pvPortMalloc+0x72>
	__asm volatile
 8015b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b92:	b672      	cpsid	i
 8015b94:	f383 8811 	msr	BASEPRI, r3
 8015b98:	f3bf 8f6f 	isb	sy
 8015b9c:	f3bf 8f4f 	dsb	sy
 8015ba0:	b662      	cpsie	i
 8015ba2:	617b      	str	r3, [r7, #20]
}
 8015ba4:	bf00      	nop
 8015ba6:	bf00      	nop
 8015ba8:	e7fd      	b.n	8015ba6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d06c      	beq.n	8015c8a <pvPortMalloc+0x152>
 8015bb0:	4b47      	ldr	r3, [pc, #284]	@ (8015cd0 <pvPortMalloc+0x198>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	687a      	ldr	r2, [r7, #4]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d867      	bhi.n	8015c8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015bba:	4b46      	ldr	r3, [pc, #280]	@ (8015cd4 <pvPortMalloc+0x19c>)
 8015bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015bbe:	4b45      	ldr	r3, [pc, #276]	@ (8015cd4 <pvPortMalloc+0x19c>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015bc4:	e004      	b.n	8015bd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	687a      	ldr	r2, [r7, #4]
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d903      	bls.n	8015be2 <pvPortMalloc+0xaa>
 8015bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d1f1      	bne.n	8015bc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015be2:	4b39      	ldr	r3, [pc, #228]	@ (8015cc8 <pvPortMalloc+0x190>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d04e      	beq.n	8015c8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015bec:	6a3b      	ldr	r3, [r7, #32]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2208      	movs	r2, #8
 8015bf2:	4413      	add	r3, r2
 8015bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf8:	681a      	ldr	r2, [r3, #0]
 8015bfa:	6a3b      	ldr	r3, [r7, #32]
 8015bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c00:	685a      	ldr	r2, [r3, #4]
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	1ad2      	subs	r2, r2, r3
 8015c06:	2308      	movs	r3, #8
 8015c08:	005b      	lsls	r3, r3, #1
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d922      	bls.n	8015c54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	4413      	add	r3, r2
 8015c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c16:	69bb      	ldr	r3, [r7, #24]
 8015c18:	f003 0307 	and.w	r3, r3, #7
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d00d      	beq.n	8015c3c <pvPortMalloc+0x104>
	__asm volatile
 8015c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c24:	b672      	cpsid	i
 8015c26:	f383 8811 	msr	BASEPRI, r3
 8015c2a:	f3bf 8f6f 	isb	sy
 8015c2e:	f3bf 8f4f 	dsb	sy
 8015c32:	b662      	cpsie	i
 8015c34:	613b      	str	r3, [r7, #16]
}
 8015c36:	bf00      	nop
 8015c38:	bf00      	nop
 8015c3a:	e7fd      	b.n	8015c38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c3e:	685a      	ldr	r2, [r3, #4]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	1ad2      	subs	r2, r2, r3
 8015c44:	69bb      	ldr	r3, [r7, #24]
 8015c46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c4a:	687a      	ldr	r2, [r7, #4]
 8015c4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015c4e:	69b8      	ldr	r0, [r7, #24]
 8015c50:	f000 f906 	bl	8015e60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015c54:	4b1e      	ldr	r3, [pc, #120]	@ (8015cd0 <pvPortMalloc+0x198>)
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	1ad3      	subs	r3, r2, r3
 8015c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8015cd0 <pvPortMalloc+0x198>)
 8015c60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015c62:	4b1b      	ldr	r3, [pc, #108]	@ (8015cd0 <pvPortMalloc+0x198>)
 8015c64:	681a      	ldr	r2, [r3, #0]
 8015c66:	4b1c      	ldr	r3, [pc, #112]	@ (8015cd8 <pvPortMalloc+0x1a0>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d203      	bcs.n	8015c76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015c6e:	4b18      	ldr	r3, [pc, #96]	@ (8015cd0 <pvPortMalloc+0x198>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	4a19      	ldr	r2, [pc, #100]	@ (8015cd8 <pvPortMalloc+0x1a0>)
 8015c74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c78:	685a      	ldr	r2, [r3, #4]
 8015c7a:	4b14      	ldr	r3, [pc, #80]	@ (8015ccc <pvPortMalloc+0x194>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	431a      	orrs	r2, r3
 8015c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c86:	2200      	movs	r2, #0
 8015c88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015c8a:	f7fe fed3 	bl	8014a34 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d101      	bne.n	8015c98 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015c94:	f7ea fc96 	bl	80005c4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	f003 0307 	and.w	r3, r3, #7
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d00d      	beq.n	8015cbe <pvPortMalloc+0x186>
	__asm volatile
 8015ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ca6:	b672      	cpsid	i
 8015ca8:	f383 8811 	msr	BASEPRI, r3
 8015cac:	f3bf 8f6f 	isb	sy
 8015cb0:	f3bf 8f4f 	dsb	sy
 8015cb4:	b662      	cpsie	i
 8015cb6:	60fb      	str	r3, [r7, #12]
}
 8015cb8:	bf00      	nop
 8015cba:	bf00      	nop
 8015cbc:	e7fd      	b.n	8015cba <pvPortMalloc+0x182>
	return pvReturn;
 8015cbe:	69fb      	ldr	r3, [r7, #28]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3728      	adds	r7, #40	@ 0x28
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	2000db94 	.word	0x2000db94
 8015ccc:	2000dba0 	.word	0x2000dba0
 8015cd0:	2000db98 	.word	0x2000db98
 8015cd4:	2000db8c 	.word	0x2000db8c
 8015cd8:	2000db9c 	.word	0x2000db9c

08015cdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b086      	sub	sp, #24
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d04e      	beq.n	8015d8c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015cee:	2308      	movs	r3, #8
 8015cf0:	425b      	negs	r3, r3
 8015cf2:	697a      	ldr	r2, [r7, #20]
 8015cf4:	4413      	add	r3, r2
 8015cf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	685a      	ldr	r2, [r3, #4]
 8015d00:	4b24      	ldr	r3, [pc, #144]	@ (8015d94 <vPortFree+0xb8>)
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	4013      	ands	r3, r2
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d10d      	bne.n	8015d26 <vPortFree+0x4a>
	__asm volatile
 8015d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d0e:	b672      	cpsid	i
 8015d10:	f383 8811 	msr	BASEPRI, r3
 8015d14:	f3bf 8f6f 	isb	sy
 8015d18:	f3bf 8f4f 	dsb	sy
 8015d1c:	b662      	cpsie	i
 8015d1e:	60fb      	str	r3, [r7, #12]
}
 8015d20:	bf00      	nop
 8015d22:	bf00      	nop
 8015d24:	e7fd      	b.n	8015d22 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d00d      	beq.n	8015d4a <vPortFree+0x6e>
	__asm volatile
 8015d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d32:	b672      	cpsid	i
 8015d34:	f383 8811 	msr	BASEPRI, r3
 8015d38:	f3bf 8f6f 	isb	sy
 8015d3c:	f3bf 8f4f 	dsb	sy
 8015d40:	b662      	cpsie	i
 8015d42:	60bb      	str	r3, [r7, #8]
}
 8015d44:	bf00      	nop
 8015d46:	bf00      	nop
 8015d48:	e7fd      	b.n	8015d46 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	685a      	ldr	r2, [r3, #4]
 8015d4e:	4b11      	ldr	r3, [pc, #68]	@ (8015d94 <vPortFree+0xb8>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	4013      	ands	r3, r2
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d019      	beq.n	8015d8c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d115      	bne.n	8015d8c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015d60:	693b      	ldr	r3, [r7, #16]
 8015d62:	685a      	ldr	r2, [r3, #4]
 8015d64:	4b0b      	ldr	r3, [pc, #44]	@ (8015d94 <vPortFree+0xb8>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	43db      	mvns	r3, r3
 8015d6a:	401a      	ands	r2, r3
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015d70:	f7fe fe52 	bl	8014a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	685a      	ldr	r2, [r3, #4]
 8015d78:	4b07      	ldr	r3, [pc, #28]	@ (8015d98 <vPortFree+0xbc>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	4413      	add	r3, r2
 8015d7e:	4a06      	ldr	r2, [pc, #24]	@ (8015d98 <vPortFree+0xbc>)
 8015d80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015d82:	6938      	ldr	r0, [r7, #16]
 8015d84:	f000 f86c 	bl	8015e60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015d88:	f7fe fe54 	bl	8014a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015d8c:	bf00      	nop
 8015d8e:	3718      	adds	r7, #24
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	2000dba0 	.word	0x2000dba0
 8015d98:	2000db98 	.word	0x2000db98

08015d9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b085      	sub	sp, #20
 8015da0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015da6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015da8:	4b27      	ldr	r3, [pc, #156]	@ (8015e48 <prvHeapInit+0xac>)
 8015daa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	f003 0307 	and.w	r3, r3, #7
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d00c      	beq.n	8015dd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	3307      	adds	r3, #7
 8015dba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	f023 0307 	bic.w	r3, r3, #7
 8015dc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015dc4:	68ba      	ldr	r2, [r7, #8]
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	1ad3      	subs	r3, r2, r3
 8015dca:	4a1f      	ldr	r2, [pc, #124]	@ (8015e48 <prvHeapInit+0xac>)
 8015dcc:	4413      	add	r3, r2
 8015dce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8015e4c <prvHeapInit+0xb0>)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015dda:	4b1c      	ldr	r3, [pc, #112]	@ (8015e4c <prvHeapInit+0xb0>)
 8015ddc:	2200      	movs	r2, #0
 8015dde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	68ba      	ldr	r2, [r7, #8]
 8015de4:	4413      	add	r3, r2
 8015de6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015de8:	2208      	movs	r2, #8
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	1a9b      	subs	r3, r3, r2
 8015dee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f023 0307 	bic.w	r3, r3, #7
 8015df6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	4a15      	ldr	r2, [pc, #84]	@ (8015e50 <prvHeapInit+0xb4>)
 8015dfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015dfe:	4b14      	ldr	r3, [pc, #80]	@ (8015e50 <prvHeapInit+0xb4>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	2200      	movs	r2, #0
 8015e04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015e06:	4b12      	ldr	r3, [pc, #72]	@ (8015e50 <prvHeapInit+0xb4>)
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	68fa      	ldr	r2, [r7, #12]
 8015e16:	1ad2      	subs	r2, r2, r3
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8015e50 <prvHeapInit+0xb4>)
 8015e1e:	681a      	ldr	r2, [r3, #0]
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	4a0a      	ldr	r2, [pc, #40]	@ (8015e54 <prvHeapInit+0xb8>)
 8015e2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	685b      	ldr	r3, [r3, #4]
 8015e30:	4a09      	ldr	r2, [pc, #36]	@ (8015e58 <prvHeapInit+0xbc>)
 8015e32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015e34:	4b09      	ldr	r3, [pc, #36]	@ (8015e5c <prvHeapInit+0xc0>)
 8015e36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015e3a:	601a      	str	r2, [r3, #0]
}
 8015e3c:	bf00      	nop
 8015e3e:	3714      	adds	r7, #20
 8015e40:	46bd      	mov	sp, r7
 8015e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e46:	4770      	bx	lr
 8015e48:	20005b8c 	.word	0x20005b8c
 8015e4c:	2000db8c 	.word	0x2000db8c
 8015e50:	2000db94 	.word	0x2000db94
 8015e54:	2000db9c 	.word	0x2000db9c
 8015e58:	2000db98 	.word	0x2000db98
 8015e5c:	2000dba0 	.word	0x2000dba0

08015e60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015e60:	b480      	push	{r7}
 8015e62:	b085      	sub	sp, #20
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015e68:	4b28      	ldr	r3, [pc, #160]	@ (8015f0c <prvInsertBlockIntoFreeList+0xac>)
 8015e6a:	60fb      	str	r3, [r7, #12]
 8015e6c:	e002      	b.n	8015e74 <prvInsertBlockIntoFreeList+0x14>
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	60fb      	str	r3, [r7, #12]
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d8f7      	bhi.n	8015e6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	68ba      	ldr	r2, [r7, #8]
 8015e88:	4413      	add	r3, r2
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d108      	bne.n	8015ea2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	685a      	ldr	r2, [r3, #4]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	685b      	ldr	r3, [r3, #4]
 8015e98:	441a      	add	r2, r3
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	68ba      	ldr	r2, [r7, #8]
 8015eac:	441a      	add	r2, r3
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d118      	bne.n	8015ee8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	4b15      	ldr	r3, [pc, #84]	@ (8015f10 <prvInsertBlockIntoFreeList+0xb0>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d00d      	beq.n	8015ede <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	685a      	ldr	r2, [r3, #4]
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	441a      	add	r2, r3
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	681a      	ldr	r2, [r3, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	601a      	str	r2, [r3, #0]
 8015edc:	e008      	b.n	8015ef0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015ede:	4b0c      	ldr	r3, [pc, #48]	@ (8015f10 <prvInsertBlockIntoFreeList+0xb0>)
 8015ee0:	681a      	ldr	r2, [r3, #0]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	601a      	str	r2, [r3, #0]
 8015ee6:	e003      	b.n	8015ef0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015ef0:	68fa      	ldr	r2, [r7, #12]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d002      	beq.n	8015efe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015efe:	bf00      	nop
 8015f00:	3714      	adds	r7, #20
 8015f02:	46bd      	mov	sp, r7
 8015f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop
 8015f0c:	2000db8c 	.word	0x2000db8c
 8015f10:	2000db94 	.word	0x2000db94

08015f14 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	330c      	adds	r3, #12
 8015f24:	461a      	mov	r2, r3
 8015f26:	6839      	ldr	r1, [r7, #0]
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f001 fbb5 	bl	8017698 <tcpip_send_msg_wait_sem>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8015f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d103      	bne.n	8015f42 <netconn_apimsg+0x2e>
    return apimsg->err;
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015f40:	e001      	b.n	8015f46 <netconn_apimsg+0x32>
  }
  return err;
 8015f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3710      	adds	r7, #16
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
	...

08015f50 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b08c      	sub	sp, #48	@ 0x30
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	4603      	mov	r3, r0
 8015f58:	603a      	str	r2, [r7, #0]
 8015f5a:	71fb      	strb	r3, [r7, #7]
 8015f5c:	460b      	mov	r3, r1
 8015f5e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8015f60:	79fb      	ldrb	r3, [r7, #7]
 8015f62:	6839      	ldr	r1, [r7, #0]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f000 fc93 	bl	8016890 <netconn_alloc>
 8015f6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8015f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d054      	beq.n	801601c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8015f72:	79bb      	ldrb	r3, [r7, #6]
 8015f74:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8015f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f78:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8015f7a:	f107 0308 	add.w	r3, r7, #8
 8015f7e:	4619      	mov	r1, r3
 8015f80:	4829      	ldr	r0, [pc, #164]	@ (8016028 <netconn_new_with_proto_and_callback+0xd8>)
 8015f82:	f7ff ffc7 	bl	8015f14 <netconn_apimsg>
 8015f86:	4603      	mov	r3, r0
 8015f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8015f8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d043      	beq.n	801601c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8015f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d005      	beq.n	8015fa8 <netconn_new_with_proto_and_callback+0x58>
 8015f9c:	4b23      	ldr	r3, [pc, #140]	@ (801602c <netconn_new_with_proto_and_callback+0xdc>)
 8015f9e:	22a3      	movs	r2, #163	@ 0xa3
 8015fa0:	4923      	ldr	r1, [pc, #140]	@ (8016030 <netconn_new_with_proto_and_callback+0xe0>)
 8015fa2:	4824      	ldr	r0, [pc, #144]	@ (8016034 <netconn_new_with_proto_and_callback+0xe4>)
 8015fa4:	f00d fb60 	bl	8023668 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8015fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015faa:	3310      	adds	r3, #16
 8015fac:	4618      	mov	r0, r3
 8015fae:	f00c fce6 	bl	802297e <sys_mbox_valid>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d105      	bne.n	8015fc4 <netconn_new_with_proto_and_callback+0x74>
 8015fb8:	4b1c      	ldr	r3, [pc, #112]	@ (801602c <netconn_new_with_proto_and_callback+0xdc>)
 8015fba:	22a4      	movs	r2, #164	@ 0xa4
 8015fbc:	491e      	ldr	r1, [pc, #120]	@ (8016038 <netconn_new_with_proto_and_callback+0xe8>)
 8015fbe:	481d      	ldr	r0, [pc, #116]	@ (8016034 <netconn_new_with_proto_and_callback+0xe4>)
 8015fc0:	f00d fb52 	bl	8023668 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8015fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fc6:	3314      	adds	r3, #20
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f00c fcd8 	bl	802297e <sys_mbox_valid>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d005      	beq.n	8015fe0 <netconn_new_with_proto_and_callback+0x90>
 8015fd4:	4b15      	ldr	r3, [pc, #84]	@ (801602c <netconn_new_with_proto_and_callback+0xdc>)
 8015fd6:	22a6      	movs	r2, #166	@ 0xa6
 8015fd8:	4918      	ldr	r1, [pc, #96]	@ (801603c <netconn_new_with_proto_and_callback+0xec>)
 8015fda:	4816      	ldr	r0, [pc, #88]	@ (8016034 <netconn_new_with_proto_and_callback+0xe4>)
 8015fdc:	f00d fb44 	bl	8023668 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8015fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fe2:	330c      	adds	r3, #12
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f00c fd5b 	bl	8022aa0 <sys_sem_valid>
 8015fea:	4603      	mov	r3, r0
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d105      	bne.n	8015ffc <netconn_new_with_proto_and_callback+0xac>
 8015ff0:	4b0e      	ldr	r3, [pc, #56]	@ (801602c <netconn_new_with_proto_and_callback+0xdc>)
 8015ff2:	22a9      	movs	r2, #169	@ 0xa9
 8015ff4:	4912      	ldr	r1, [pc, #72]	@ (8016040 <netconn_new_with_proto_and_callback+0xf0>)
 8015ff6:	480f      	ldr	r0, [pc, #60]	@ (8016034 <netconn_new_with_proto_and_callback+0xe4>)
 8015ff8:	f00d fb36 	bl	8023668 <iprintf>
      sys_sem_free(&conn->op_completed);
 8015ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ffe:	330c      	adds	r3, #12
 8016000:	4618      	mov	r0, r3
 8016002:	f00c fd40 	bl	8022a86 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8016006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016008:	3310      	adds	r3, #16
 801600a:	4618      	mov	r0, r3
 801600c:	f00c fc30 	bl	8022870 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8016010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016012:	2007      	movs	r0, #7
 8016014:	f002 f8fe 	bl	8018214 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8016018:	2300      	movs	r3, #0
 801601a:	e000      	b.n	801601e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801601e:	4618      	mov	r0, r3
 8016020:	3730      	adds	r7, #48	@ 0x30
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	08016865 	.word	0x08016865
 801602c:	08024bd8 	.word	0x08024bd8
 8016030:	08024c0c 	.word	0x08024c0c
 8016034:	08024c30 	.word	0x08024c30
 8016038:	08024c58 	.word	0x08024c58
 801603c:	08024c70 	.word	0x08024c70
 8016040:	08024c94 	.word	0x08024c94

08016044 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b08c      	sub	sp, #48	@ 0x30
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d101      	bne.n	8016056 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8016052:	2300      	movs	r3, #0
 8016054:	e014      	b.n	8016080 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801605a:	2329      	movs	r3, #41	@ 0x29
 801605c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801605e:	f107 030c 	add.w	r3, r7, #12
 8016062:	4619      	mov	r1, r3
 8016064:	4808      	ldr	r0, [pc, #32]	@ (8016088 <netconn_prepare_delete+0x44>)
 8016066:	f7ff ff55 	bl	8015f14 <netconn_apimsg>
 801606a:	4603      	mov	r3, r0
 801606c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8016070:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8016074:	2b00      	cmp	r3, #0
 8016076:	d002      	beq.n	801607e <netconn_prepare_delete+0x3a>
    return err;
 8016078:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801607c:	e000      	b.n	8016080 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801607e:	2300      	movs	r3, #0
}
 8016080:	4618      	mov	r0, r3
 8016082:	3730      	adds	r7, #48	@ 0x30
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}
 8016088:	08016dd1 	.word	0x08016dd1

0801608c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d101      	bne.n	801609e <netconn_delete+0x12>
    return ERR_OK;
 801609a:	2300      	movs	r3, #0
 801609c:	e00d      	b.n	80160ba <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7ff ffd0 	bl	8016044 <netconn_prepare_delete>
 80160a4:	4603      	mov	r3, r0
 80160a6:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80160a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d102      	bne.n	80160b6 <netconn_delete+0x2a>
    netconn_free(conn);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 fc5b 	bl	801696c <netconn_free>
  }
  return err;
 80160b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3710      	adds	r7, #16
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
	...

080160c4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b08e      	sub	sp, #56	@ 0x38
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	60f8      	str	r0, [r7, #12]
 80160cc:	60b9      	str	r1, [r7, #8]
 80160ce:	4613      	mov	r3, r2
 80160d0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d109      	bne.n	80160ec <netconn_bind+0x28>
 80160d8:	4b11      	ldr	r3, [pc, #68]	@ (8016120 <netconn_bind+0x5c>)
 80160da:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80160de:	4911      	ldr	r1, [pc, #68]	@ (8016124 <netconn_bind+0x60>)
 80160e0:	4811      	ldr	r0, [pc, #68]	@ (8016128 <netconn_bind+0x64>)
 80160e2:	f00d fac1 	bl	8023668 <iprintf>
 80160e6:	f06f 030f 	mvn.w	r3, #15
 80160ea:	e015      	b.n	8016118 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d101      	bne.n	80160f6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80160f2:	4b0e      	ldr	r3, [pc, #56]	@ (801612c <netconn_bind+0x68>)
 80160f4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80160fe:	88fb      	ldrh	r3, [r7, #6]
 8016100:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8016102:	f107 0314 	add.w	r3, r7, #20
 8016106:	4619      	mov	r1, r3
 8016108:	4809      	ldr	r0, [pc, #36]	@ (8016130 <netconn_bind+0x6c>)
 801610a:	f7ff ff03 	bl	8015f14 <netconn_apimsg>
 801610e:	4603      	mov	r3, r0
 8016110:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8016114:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8016118:	4618      	mov	r0, r3
 801611a:	3738      	adds	r7, #56	@ 0x38
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}
 8016120:	08024bd8 	.word	0x08024bd8
 8016124:	08024d10 	.word	0x08024d10
 8016128:	08024c30 	.word	0x08024c30
 801612c:	0802805c 	.word	0x0802805c
 8016130:	08016f99 	.word	0x08016f99

08016134 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b082      	sub	sp, #8
 8016138:	af00      	add	r7, sp, #0
 801613a:	4603      	mov	r3, r0
 801613c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801613e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016142:	f113 0f0d 	cmn.w	r3, #13
 8016146:	d009      	beq.n	801615c <lwip_netconn_err_to_msg+0x28>
 8016148:	f113 0f0d 	cmn.w	r3, #13
 801614c:	dc0c      	bgt.n	8016168 <lwip_netconn_err_to_msg+0x34>
 801614e:	f113 0f0f 	cmn.w	r3, #15
 8016152:	d007      	beq.n	8016164 <lwip_netconn_err_to_msg+0x30>
 8016154:	f113 0f0e 	cmn.w	r3, #14
 8016158:	d002      	beq.n	8016160 <lwip_netconn_err_to_msg+0x2c>
 801615a:	e005      	b.n	8016168 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 801615c:	4b0a      	ldr	r3, [pc, #40]	@ (8016188 <lwip_netconn_err_to_msg+0x54>)
 801615e:	e00e      	b.n	801617e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8016160:	4b0a      	ldr	r3, [pc, #40]	@ (801618c <lwip_netconn_err_to_msg+0x58>)
 8016162:	e00c      	b.n	801617e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8016164:	4b0a      	ldr	r3, [pc, #40]	@ (8016190 <lwip_netconn_err_to_msg+0x5c>)
 8016166:	e00a      	b.n	801617e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8016168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d005      	beq.n	801617c <lwip_netconn_err_to_msg+0x48>
 8016170:	4b08      	ldr	r3, [pc, #32]	@ (8016194 <lwip_netconn_err_to_msg+0x60>)
 8016172:	227d      	movs	r2, #125	@ 0x7d
 8016174:	4908      	ldr	r1, [pc, #32]	@ (8016198 <lwip_netconn_err_to_msg+0x64>)
 8016176:	4809      	ldr	r0, [pc, #36]	@ (801619c <lwip_netconn_err_to_msg+0x68>)
 8016178:	f00d fa76 	bl	8023668 <iprintf>
      return NULL;
 801617c:	2300      	movs	r3, #0
  }
}
 801617e:	4618      	mov	r0, r3
 8016180:	3708      	adds	r7, #8
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}
 8016186:	bf00      	nop
 8016188:	08027f48 	.word	0x08027f48
 801618c:	08027f49 	.word	0x08027f49
 8016190:	08027f4a 	.word	0x08027f4a
 8016194:	08024f30 	.word	0x08024f30
 8016198:	08024f64 	.word	0x08024f64
 801619c:	08024f74 	.word	0x08024f74

080161a0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d105      	bne.n	80161bc <lwip_netconn_is_err_msg+0x1c>
 80161b0:	4b12      	ldr	r3, [pc, #72]	@ (80161fc <lwip_netconn_is_err_msg+0x5c>)
 80161b2:	2285      	movs	r2, #133	@ 0x85
 80161b4:	4912      	ldr	r1, [pc, #72]	@ (8016200 <lwip_netconn_is_err_msg+0x60>)
 80161b6:	4813      	ldr	r0, [pc, #76]	@ (8016204 <lwip_netconn_is_err_msg+0x64>)
 80161b8:	f00d fa56 	bl	8023668 <iprintf>

  if (msg == &netconn_aborted) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	4a12      	ldr	r2, [pc, #72]	@ (8016208 <lwip_netconn_is_err_msg+0x68>)
 80161c0:	4293      	cmp	r3, r2
 80161c2:	d104      	bne.n	80161ce <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	22f3      	movs	r2, #243	@ 0xf3
 80161c8:	701a      	strb	r2, [r3, #0]
    return 1;
 80161ca:	2301      	movs	r3, #1
 80161cc:	e012      	b.n	80161f4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	4a0e      	ldr	r2, [pc, #56]	@ (801620c <lwip_netconn_is_err_msg+0x6c>)
 80161d2:	4293      	cmp	r3, r2
 80161d4:	d104      	bne.n	80161e0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80161d6:	683b      	ldr	r3, [r7, #0]
 80161d8:	22f2      	movs	r2, #242	@ 0xf2
 80161da:	701a      	strb	r2, [r3, #0]
    return 1;
 80161dc:	2301      	movs	r3, #1
 80161de:	e009      	b.n	80161f4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	4a0b      	ldr	r2, [pc, #44]	@ (8016210 <lwip_netconn_is_err_msg+0x70>)
 80161e4:	4293      	cmp	r3, r2
 80161e6:	d104      	bne.n	80161f2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	22f1      	movs	r2, #241	@ 0xf1
 80161ec:	701a      	strb	r2, [r3, #0]
    return 1;
 80161ee:	2301      	movs	r3, #1
 80161f0:	e000      	b.n	80161f4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80161f2:	2300      	movs	r3, #0
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	08024f30 	.word	0x08024f30
 8016200:	08024f9c 	.word	0x08024f9c
 8016204:	08024f74 	.word	0x08024f74
 8016208:	08027f48 	.word	0x08027f48
 801620c:	08027f49 	.word	0x08027f49
 8016210:	08027f4a 	.word	0x08027f4a

08016214 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b088      	sub	sp, #32
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
 8016220:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d105      	bne.n	8016234 <recv_udp+0x20>
 8016228:	4b34      	ldr	r3, [pc, #208]	@ (80162fc <recv_udp+0xe8>)
 801622a:	22e5      	movs	r2, #229	@ 0xe5
 801622c:	4934      	ldr	r1, [pc, #208]	@ (8016300 <recv_udp+0xec>)
 801622e:	4835      	ldr	r0, [pc, #212]	@ (8016304 <recv_udp+0xf0>)
 8016230:	f00d fa1a 	bl	8023668 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d105      	bne.n	8016246 <recv_udp+0x32>
 801623a:	4b30      	ldr	r3, [pc, #192]	@ (80162fc <recv_udp+0xe8>)
 801623c:	22e6      	movs	r2, #230	@ 0xe6
 801623e:	4932      	ldr	r1, [pc, #200]	@ (8016308 <recv_udp+0xf4>)
 8016240:	4830      	ldr	r0, [pc, #192]	@ (8016304 <recv_udp+0xf0>)
 8016242:	f00d fa11 	bl	8023668 <iprintf>
  conn = (struct netconn *)arg;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801624a:	69fb      	ldr	r3, [r7, #28]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d103      	bne.n	8016258 <recv_udp+0x44>
    pbuf_free(p);
 8016250:	6878      	ldr	r0, [r7, #4]
 8016252:	f002 feb5 	bl	8018fc0 <pbuf_free>
    return;
 8016256:	e04d      	b.n	80162f4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8016258:	69fb      	ldr	r3, [r7, #28]
 801625a:	685b      	ldr	r3, [r3, #4]
 801625c:	68ba      	ldr	r2, [r7, #8]
 801625e:	429a      	cmp	r2, r3
 8016260:	d005      	beq.n	801626e <recv_udp+0x5a>
 8016262:	4b26      	ldr	r3, [pc, #152]	@ (80162fc <recv_udp+0xe8>)
 8016264:	22ee      	movs	r2, #238	@ 0xee
 8016266:	4929      	ldr	r1, [pc, #164]	@ (801630c <recv_udp+0xf8>)
 8016268:	4826      	ldr	r0, [pc, #152]	@ (8016304 <recv_udp+0xf0>)
 801626a:	f00d f9fd 	bl	8023668 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801626e:	69fb      	ldr	r3, [r7, #28]
 8016270:	3310      	adds	r3, #16
 8016272:	4618      	mov	r0, r3
 8016274:	f00c fb83 	bl	802297e <sys_mbox_valid>
 8016278:	4603      	mov	r3, r0
 801627a:	2b00      	cmp	r3, #0
 801627c:	d103      	bne.n	8016286 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f002 fe9e 	bl	8018fc0 <pbuf_free>
    return;
 8016284:	e036      	b.n	80162f4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8016286:	2006      	movs	r0, #6
 8016288:	f001 ff4e 	bl	8018128 <memp_malloc>
 801628c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d103      	bne.n	801629c <recv_udp+0x88>
    pbuf_free(p);
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f002 fe93 	bl	8018fc0 <pbuf_free>
    return;
 801629a:	e02b      	b.n	80162f4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 801629c:	69bb      	ldr	r3, [r7, #24]
 801629e:	687a      	ldr	r2, [r7, #4]
 80162a0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80162a2:	69bb      	ldr	r3, [r7, #24]
 80162a4:	687a      	ldr	r2, [r7, #4]
 80162a6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80162a8:	683b      	ldr	r3, [r7, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d002      	beq.n	80162b4 <recv_udp+0xa0>
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	e000      	b.n	80162b6 <recv_udp+0xa2>
 80162b4:	2300      	movs	r3, #0
 80162b6:	69ba      	ldr	r2, [r7, #24]
 80162b8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80162be:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	891b      	ldrh	r3, [r3, #8]
 80162c4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	3310      	adds	r3, #16
 80162ca:	69b9      	ldr	r1, [r7, #24]
 80162cc:	4618      	mov	r0, r3
 80162ce:	f00c fae1 	bl	8022894 <sys_mbox_trypost>
 80162d2:	4603      	mov	r3, r0
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d003      	beq.n	80162e0 <recv_udp+0xcc>
    netbuf_delete(buf);
 80162d8:	69b8      	ldr	r0, [r7, #24]
 80162da:	f001 f865 	bl	80173a8 <netbuf_delete>
    return;
 80162de:	e009      	b.n	80162f4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d005      	beq.n	80162f4 <recv_udp+0xe0>
 80162e8:	69fb      	ldr	r3, [r7, #28]
 80162ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162ec:	8afa      	ldrh	r2, [r7, #22]
 80162ee:	2100      	movs	r1, #0
 80162f0:	69f8      	ldr	r0, [r7, #28]
 80162f2:	4798      	blx	r3
  }
}
 80162f4:	3720      	adds	r7, #32
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}
 80162fa:	bf00      	nop
 80162fc:	08024f30 	.word	0x08024f30
 8016300:	08024fa8 	.word	0x08024fa8
 8016304:	08024f74 	.word	0x08024f74
 8016308:	08024fcc 	.word	0x08024fcc
 801630c:	08024fec 	.word	0x08024fec

08016310 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b088      	sub	sp, #32
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	607a      	str	r2, [r7, #4]
 801631c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d106      	bne.n	8016332 <recv_tcp+0x22>
 8016324:	4b36      	ldr	r3, [pc, #216]	@ (8016400 <recv_tcp+0xf0>)
 8016326:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801632a:	4936      	ldr	r1, [pc, #216]	@ (8016404 <recv_tcp+0xf4>)
 801632c:	4836      	ldr	r0, [pc, #216]	@ (8016408 <recv_tcp+0xf8>)
 801632e:	f00d f99b 	bl	8023668 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d106      	bne.n	8016346 <recv_tcp+0x36>
 8016338:	4b31      	ldr	r3, [pc, #196]	@ (8016400 <recv_tcp+0xf0>)
 801633a:	f240 122d 	movw	r2, #301	@ 0x12d
 801633e:	4933      	ldr	r1, [pc, #204]	@ (801640c <recv_tcp+0xfc>)
 8016340:	4831      	ldr	r0, [pc, #196]	@ (8016408 <recv_tcp+0xf8>)
 8016342:	f00d f991 	bl	8023668 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8016346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d006      	beq.n	801635c <recv_tcp+0x4c>
 801634e:	4b2c      	ldr	r3, [pc, #176]	@ (8016400 <recv_tcp+0xf0>)
 8016350:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8016354:	492e      	ldr	r1, [pc, #184]	@ (8016410 <recv_tcp+0x100>)
 8016356:	482c      	ldr	r0, [pc, #176]	@ (8016408 <recv_tcp+0xf8>)
 8016358:	f00d f986 	bl	8023668 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d102      	bne.n	801636c <recv_tcp+0x5c>
    return ERR_VAL;
 8016366:	f06f 0305 	mvn.w	r3, #5
 801636a:	e045      	b.n	80163f8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	68ba      	ldr	r2, [r7, #8]
 8016372:	429a      	cmp	r2, r3
 8016374:	d006      	beq.n	8016384 <recv_tcp+0x74>
 8016376:	4b22      	ldr	r3, [pc, #136]	@ (8016400 <recv_tcp+0xf0>)
 8016378:	f240 1235 	movw	r2, #309	@ 0x135
 801637c:	4925      	ldr	r1, [pc, #148]	@ (8016414 <recv_tcp+0x104>)
 801637e:	4822      	ldr	r0, [pc, #136]	@ (8016408 <recv_tcp+0xf8>)
 8016380:	f00d f972 	bl	8023668 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	3310      	adds	r3, #16
 8016388:	4618      	mov	r0, r3
 801638a:	f00c faf8 	bl	802297e <sys_mbox_valid>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d10d      	bne.n	80163b0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d008      	beq.n	80163ac <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	891b      	ldrh	r3, [r3, #8]
 801639e:	4619      	mov	r1, r3
 80163a0:	68b8      	ldr	r0, [r7, #8]
 80163a2:	f003 fde9 	bl	8019f78 <tcp_recved>
      pbuf_free(p);
 80163a6:	6878      	ldr	r0, [r7, #4]
 80163a8:	f002 fe0a 	bl	8018fc0 <pbuf_free>
    }
    return ERR_OK;
 80163ac:	2300      	movs	r3, #0
 80163ae:	e023      	b.n	80163f8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d005      	beq.n	80163c2 <recv_tcp+0xb2>
    msg = p;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	891b      	ldrh	r3, [r3, #8]
 80163be:	83fb      	strh	r3, [r7, #30]
 80163c0:	e003      	b.n	80163ca <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80163c2:	4b15      	ldr	r3, [pc, #84]	@ (8016418 <recv_tcp+0x108>)
 80163c4:	61bb      	str	r3, [r7, #24]
    len = 0;
 80163c6:	2300      	movs	r3, #0
 80163c8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	3310      	adds	r3, #16
 80163ce:	69b9      	ldr	r1, [r7, #24]
 80163d0:	4618      	mov	r0, r3
 80163d2:	f00c fa5f 	bl	8022894 <sys_mbox_trypost>
 80163d6:	4603      	mov	r3, r0
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d002      	beq.n	80163e2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80163dc:	f04f 33ff 	mov.w	r3, #4294967295
 80163e0:	e00a      	b.n	80163f8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80163e2:	697b      	ldr	r3, [r7, #20]
 80163e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d005      	beq.n	80163f6 <recv_tcp+0xe6>
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163ee:	8bfa      	ldrh	r2, [r7, #30]
 80163f0:	2100      	movs	r1, #0
 80163f2:	6978      	ldr	r0, [r7, #20]
 80163f4:	4798      	blx	r3
  }

  return ERR_OK;
 80163f6:	2300      	movs	r3, #0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3720      	adds	r7, #32
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	08024f30 	.word	0x08024f30
 8016404:	0802500c 	.word	0x0802500c
 8016408:	08024f74 	.word	0x08024f74
 801640c:	08025030 	.word	0x08025030
 8016410:	08025050 	.word	0x08025050
 8016414:	08025068 	.word	0x08025068
 8016418:	08027f4a 	.word	0x08027f4a

0801641c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
 8016424:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d106      	bne.n	801643e <poll_tcp+0x22>
 8016430:	4b2a      	ldr	r3, [pc, #168]	@ (80164dc <poll_tcp+0xc0>)
 8016432:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8016436:	492a      	ldr	r1, [pc, #168]	@ (80164e0 <poll_tcp+0xc4>)
 8016438:	482a      	ldr	r0, [pc, #168]	@ (80164e4 <poll_tcp+0xc8>)
 801643a:	f00d f915 	bl	8023668 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	785b      	ldrb	r3, [r3, #1]
 8016442:	2b01      	cmp	r3, #1
 8016444:	d104      	bne.n	8016450 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8016446:	2101      	movs	r1, #1
 8016448:	68f8      	ldr	r0, [r7, #12]
 801644a:	f000 fddf 	bl	801700c <lwip_netconn_do_writemore>
 801644e:	e016      	b.n	801647e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	785b      	ldrb	r3, [r3, #1]
 8016454:	2b04      	cmp	r3, #4
 8016456:	d112      	bne.n	801647e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	6a1b      	ldr	r3, [r3, #32]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d00a      	beq.n	8016476 <poll_tcp+0x5a>
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	6a1b      	ldr	r3, [r3, #32]
 8016464:	7a5b      	ldrb	r3, [r3, #9]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d005      	beq.n	8016476 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	6a1b      	ldr	r3, [r3, #32]
 801646e:	7a5a      	ldrb	r2, [r3, #9]
 8016470:	3a01      	subs	r2, #1
 8016472:	b2d2      	uxtb	r2, r2
 8016474:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8016476:	2101      	movs	r1, #1
 8016478:	68f8      	ldr	r0, [r7, #12]
 801647a:	f000 fb3f 	bl	8016afc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	7f1b      	ldrb	r3, [r3, #28]
 8016482:	f003 0310 	and.w	r3, r3, #16
 8016486:	2b00      	cmp	r3, #0
 8016488:	d022      	beq.n	80164d0 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d01e      	beq.n	80164d0 <poll_tcp+0xb4>
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	685b      	ldr	r3, [r3, #4]
 8016496:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801649a:	f640 3269 	movw	r2, #2921	@ 0xb69
 801649e:	4293      	cmp	r3, r2
 80164a0:	d916      	bls.n	80164d0 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80164aa:	2b07      	cmp	r3, #7
 80164ac:	d810      	bhi.n	80164d0 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	7f1b      	ldrb	r3, [r3, #28]
 80164b2:	f023 0310 	bic.w	r3, r3, #16
 80164b6:	b2da      	uxtb	r2, r3
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d005      	beq.n	80164d0 <poll_tcp+0xb4>
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164c8:	2200      	movs	r2, #0
 80164ca:	2102      	movs	r1, #2
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80164d0:	2300      	movs	r3, #0
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3710      	adds	r7, #16
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	08024f30 	.word	0x08024f30
 80164e0:	08025088 	.word	0x08025088
 80164e4:	08024f74 	.word	0x08024f74

080164e8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b086      	sub	sp, #24
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	60f8      	str	r0, [r7, #12]
 80164f0:	60b9      	str	r1, [r7, #8]
 80164f2:	4613      	mov	r3, r2
 80164f4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d106      	bne.n	801650e <sent_tcp+0x26>
 8016500:	4b21      	ldr	r3, [pc, #132]	@ (8016588 <sent_tcp+0xa0>)
 8016502:	f240 1293 	movw	r2, #403	@ 0x193
 8016506:	4921      	ldr	r1, [pc, #132]	@ (801658c <sent_tcp+0xa4>)
 8016508:	4821      	ldr	r0, [pc, #132]	@ (8016590 <sent_tcp+0xa8>)
 801650a:	f00d f8ad 	bl	8023668 <iprintf>

  if (conn) {
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d033      	beq.n	801657c <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8016514:	697b      	ldr	r3, [r7, #20]
 8016516:	785b      	ldrb	r3, [r3, #1]
 8016518:	2b01      	cmp	r3, #1
 801651a:	d104      	bne.n	8016526 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801651c:	2101      	movs	r1, #1
 801651e:	6978      	ldr	r0, [r7, #20]
 8016520:	f000 fd74 	bl	801700c <lwip_netconn_do_writemore>
 8016524:	e007      	b.n	8016536 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8016526:	697b      	ldr	r3, [r7, #20]
 8016528:	785b      	ldrb	r3, [r3, #1]
 801652a:	2b04      	cmp	r3, #4
 801652c:	d103      	bne.n	8016536 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801652e:	2101      	movs	r1, #1
 8016530:	6978      	ldr	r0, [r7, #20]
 8016532:	f000 fae3 	bl	8016afc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d01e      	beq.n	801657c <sent_tcp+0x94>
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	685b      	ldr	r3, [r3, #4]
 8016542:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016546:	f640 3269 	movw	r2, #2921	@ 0xb69
 801654a:	4293      	cmp	r3, r2
 801654c:	d916      	bls.n	801657c <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	685b      	ldr	r3, [r3, #4]
 8016552:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016556:	2b07      	cmp	r3, #7
 8016558:	d810      	bhi.n	801657c <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801655a:	697b      	ldr	r3, [r7, #20]
 801655c:	7f1b      	ldrb	r3, [r3, #28]
 801655e:	f023 0310 	bic.w	r3, r3, #16
 8016562:	b2da      	uxtb	r2, r3
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801656c:	2b00      	cmp	r3, #0
 801656e:	d005      	beq.n	801657c <sent_tcp+0x94>
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016574:	88fa      	ldrh	r2, [r7, #6]
 8016576:	2102      	movs	r1, #2
 8016578:	6978      	ldr	r0, [r7, #20]
 801657a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801657c:	2300      	movs	r3, #0
}
 801657e:	4618      	mov	r0, r3
 8016580:	3718      	adds	r7, #24
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	08024f30 	.word	0x08024f30
 801658c:	08025088 	.word	0x08025088
 8016590:	08024f74 	.word	0x08024f74

08016594 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b088      	sub	sp, #32
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	460b      	mov	r3, r1
 801659e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80165a4:	69fb      	ldr	r3, [r7, #28]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d106      	bne.n	80165b8 <err_tcp+0x24>
 80165aa:	4b5f      	ldr	r3, [pc, #380]	@ (8016728 <err_tcp+0x194>)
 80165ac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80165b0:	495e      	ldr	r1, [pc, #376]	@ (801672c <err_tcp+0x198>)
 80165b2:	485f      	ldr	r0, [pc, #380]	@ (8016730 <err_tcp+0x19c>)
 80165b4:	f00d f858 	bl	8023668 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80165b8:	f00c fafc 	bl	8022bb4 <sys_arch_protect>
 80165bc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80165be:	69fb      	ldr	r3, [r7, #28]
 80165c0:	2200      	movs	r2, #0
 80165c2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80165c4:	69fb      	ldr	r3, [r7, #28]
 80165c6:	78fa      	ldrb	r2, [r7, #3]
 80165c8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	7f1b      	ldrb	r3, [r3, #28]
 80165ce:	f043 0301 	orr.w	r3, r3, #1
 80165d2:	b2da      	uxtb	r2, r3
 80165d4:	69fb      	ldr	r3, [r7, #28]
 80165d6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80165d8:	69fb      	ldr	r3, [r7, #28]
 80165da:	785b      	ldrb	r3, [r3, #1]
 80165dc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	2200      	movs	r2, #0
 80165e2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80165e4:	69b8      	ldr	r0, [r7, #24]
 80165e6:	f00c faf3 	bl	8022bd0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80165ea:	69fb      	ldr	r3, [r7, #28]
 80165ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d005      	beq.n	80165fe <err_tcp+0x6a>
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165f6:	2200      	movs	r2, #0
 80165f8:	2104      	movs	r1, #4
 80165fa:	69f8      	ldr	r0, [r7, #28]
 80165fc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016602:	2b00      	cmp	r3, #0
 8016604:	d005      	beq.n	8016612 <err_tcp+0x7e>
 8016606:	69fb      	ldr	r3, [r7, #28]
 8016608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801660a:	2200      	movs	r2, #0
 801660c:	2100      	movs	r1, #0
 801660e:	69f8      	ldr	r0, [r7, #28]
 8016610:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016612:	69fb      	ldr	r3, [r7, #28]
 8016614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016616:	2b00      	cmp	r3, #0
 8016618:	d005      	beq.n	8016626 <err_tcp+0x92>
 801661a:	69fb      	ldr	r3, [r7, #28]
 801661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801661e:	2200      	movs	r2, #0
 8016620:	2102      	movs	r1, #2
 8016622:	69f8      	ldr	r0, [r7, #28]
 8016624:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8016626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801662a:	4618      	mov	r0, r3
 801662c:	f7ff fd82 	bl	8016134 <lwip_netconn_err_to_msg>
 8016630:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016632:	69fb      	ldr	r3, [r7, #28]
 8016634:	3310      	adds	r3, #16
 8016636:	4618      	mov	r0, r3
 8016638:	f00c f9a1 	bl	802297e <sys_mbox_valid>
 801663c:	4603      	mov	r3, r0
 801663e:	2b00      	cmp	r3, #0
 8016640:	d005      	beq.n	801664e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8016642:	69fb      	ldr	r3, [r7, #28]
 8016644:	3310      	adds	r3, #16
 8016646:	6939      	ldr	r1, [r7, #16]
 8016648:	4618      	mov	r0, r3
 801664a:	f00c f923 	bl	8022894 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	3314      	adds	r3, #20
 8016652:	4618      	mov	r0, r3
 8016654:	f00c f993 	bl	802297e <sys_mbox_valid>
 8016658:	4603      	mov	r3, r0
 801665a:	2b00      	cmp	r3, #0
 801665c:	d005      	beq.n	801666a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801665e:	69fb      	ldr	r3, [r7, #28]
 8016660:	3314      	adds	r3, #20
 8016662:	6939      	ldr	r1, [r7, #16]
 8016664:	4618      	mov	r0, r3
 8016666:	f00c f915 	bl	8022894 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801666a:	7dfb      	ldrb	r3, [r7, #23]
 801666c:	2b01      	cmp	r3, #1
 801666e:	d005      	beq.n	801667c <err_tcp+0xe8>
 8016670:	7dfb      	ldrb	r3, [r7, #23]
 8016672:	2b04      	cmp	r3, #4
 8016674:	d002      	beq.n	801667c <err_tcp+0xe8>
 8016676:	7dfb      	ldrb	r3, [r7, #23]
 8016678:	2b03      	cmp	r3, #3
 801667a:	d143      	bne.n	8016704 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	7f1b      	ldrb	r3, [r3, #28]
 8016680:	f003 0304 	and.w	r3, r3, #4
 8016684:	2b00      	cmp	r3, #0
 8016686:	bf14      	ite	ne
 8016688:	2301      	movne	r3, #1
 801668a:	2300      	moveq	r3, #0
 801668c:	b2db      	uxtb	r3, r3
 801668e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8016690:	69fb      	ldr	r3, [r7, #28]
 8016692:	7f1b      	ldrb	r3, [r3, #28]
 8016694:	f023 0304 	bic.w	r3, r3, #4
 8016698:	b2da      	uxtb	r2, r3
 801669a:	69fb      	ldr	r3, [r7, #28]
 801669c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d13b      	bne.n	801671c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80166a4:	69fb      	ldr	r3, [r7, #28]
 80166a6:	6a1b      	ldr	r3, [r3, #32]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d106      	bne.n	80166ba <err_tcp+0x126>
 80166ac:	4b1e      	ldr	r3, [pc, #120]	@ (8016728 <err_tcp+0x194>)
 80166ae:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80166b2:	4920      	ldr	r1, [pc, #128]	@ (8016734 <err_tcp+0x1a0>)
 80166b4:	481e      	ldr	r0, [pc, #120]	@ (8016730 <err_tcp+0x19c>)
 80166b6:	f00c ffd7 	bl	8023668 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80166ba:	7dfb      	ldrb	r3, [r7, #23]
 80166bc:	2b04      	cmp	r3, #4
 80166be:	d104      	bne.n	80166ca <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80166c0:	69fb      	ldr	r3, [r7, #28]
 80166c2:	6a1b      	ldr	r3, [r3, #32]
 80166c4:	2200      	movs	r2, #0
 80166c6:	711a      	strb	r2, [r3, #4]
 80166c8:	e003      	b.n	80166d2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80166ca:	69fb      	ldr	r3, [r7, #28]
 80166cc:	6a1b      	ldr	r3, [r3, #32]
 80166ce:	78fa      	ldrb	r2, [r7, #3]
 80166d0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80166d2:	69fb      	ldr	r3, [r7, #28]
 80166d4:	6a1b      	ldr	r3, [r3, #32]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	330c      	adds	r3, #12
 80166da:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80166dc:	68b8      	ldr	r0, [r7, #8]
 80166de:	f00c f9df 	bl	8022aa0 <sys_sem_valid>
 80166e2:	4603      	mov	r3, r0
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d106      	bne.n	80166f6 <err_tcp+0x162>
 80166e8:	4b0f      	ldr	r3, [pc, #60]	@ (8016728 <err_tcp+0x194>)
 80166ea:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80166ee:	4912      	ldr	r1, [pc, #72]	@ (8016738 <err_tcp+0x1a4>)
 80166f0:	480f      	ldr	r0, [pc, #60]	@ (8016730 <err_tcp+0x19c>)
 80166f2:	f00c ffb9 	bl	8023668 <iprintf>
      conn->current_msg = NULL;
 80166f6:	69fb      	ldr	r3, [r7, #28]
 80166f8:	2200      	movs	r2, #0
 80166fa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80166fc:	68b8      	ldr	r0, [r7, #8]
 80166fe:	f00c f9b5 	bl	8022a6c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8016702:	e00b      	b.n	801671c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	6a1b      	ldr	r3, [r3, #32]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d008      	beq.n	801671e <err_tcp+0x18a>
 801670c:	4b06      	ldr	r3, [pc, #24]	@ (8016728 <err_tcp+0x194>)
 801670e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8016712:	490a      	ldr	r1, [pc, #40]	@ (801673c <err_tcp+0x1a8>)
 8016714:	4806      	ldr	r0, [pc, #24]	@ (8016730 <err_tcp+0x19c>)
 8016716:	f00c ffa7 	bl	8023668 <iprintf>
  }
}
 801671a:	e000      	b.n	801671e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801671c:	bf00      	nop
}
 801671e:	bf00      	nop
 8016720:	3720      	adds	r7, #32
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}
 8016726:	bf00      	nop
 8016728:	08024f30 	.word	0x08024f30
 801672c:	08025088 	.word	0x08025088
 8016730:	08024f74 	.word	0x08024f74
 8016734:	08025098 	.word	0x08025098
 8016738:	080250b4 	.word	0x080250b4
 801673c:	080250d0 	.word	0x080250d0

08016740 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	685b      	ldr	r3, [r3, #4]
 801674c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801674e:	6879      	ldr	r1, [r7, #4]
 8016750:	68f8      	ldr	r0, [r7, #12]
 8016752:	f004 fbfd 	bl	801af50 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8016756:	490a      	ldr	r1, [pc, #40]	@ (8016780 <setup_tcp+0x40>)
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	f004 fc0b 	bl	801af74 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801675e:	4909      	ldr	r1, [pc, #36]	@ (8016784 <setup_tcp+0x44>)
 8016760:	68f8      	ldr	r0, [r7, #12]
 8016762:	f004 fc29 	bl	801afb8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8016766:	2202      	movs	r2, #2
 8016768:	4907      	ldr	r1, [pc, #28]	@ (8016788 <setup_tcp+0x48>)
 801676a:	68f8      	ldr	r0, [r7, #12]
 801676c:	f004 fc80 	bl	801b070 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8016770:	4906      	ldr	r1, [pc, #24]	@ (801678c <setup_tcp+0x4c>)
 8016772:	68f8      	ldr	r0, [r7, #12]
 8016774:	f004 fc42 	bl	801affc <tcp_err>
}
 8016778:	bf00      	nop
 801677a:	3710      	adds	r7, #16
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	08016311 	.word	0x08016311
 8016784:	080164e9 	.word	0x080164e9
 8016788:	0801641d 	.word	0x0801641d
 801678c:	08016595 	.word	0x08016595

08016790 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8016790:	b590      	push	{r4, r7, lr}
 8016792:	b085      	sub	sp, #20
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8016798:	2300      	movs	r3, #0
 801679a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d006      	beq.n	80167b4 <pcb_new+0x24>
 80167a6:	4b2b      	ldr	r3, [pc, #172]	@ (8016854 <pcb_new+0xc4>)
 80167a8:	f240 2265 	movw	r2, #613	@ 0x265
 80167ac:	492a      	ldr	r1, [pc, #168]	@ (8016858 <pcb_new+0xc8>)
 80167ae:	482b      	ldr	r0, [pc, #172]	@ (801685c <pcb_new+0xcc>)
 80167b0:	f00c ff5a 	bl	8023668 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80167be:	2b10      	cmp	r3, #16
 80167c0:	d022      	beq.n	8016808 <pcb_new+0x78>
 80167c2:	2b20      	cmp	r3, #32
 80167c4:	d133      	bne.n	801682e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681c      	ldr	r4, [r3, #0]
 80167ca:	7bfb      	ldrb	r3, [r7, #15]
 80167cc:	4618      	mov	r0, r3
 80167ce:	f009 fc9a 	bl	8020106 <udp_new_ip_type>
 80167d2:	4603      	mov	r3, r0
 80167d4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d02a      	beq.n	8016836 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	2b22      	cmp	r3, #34	@ 0x22
 80167e8:	d104      	bne.n	80167f4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	2201      	movs	r2, #1
 80167f2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	6858      	ldr	r0, [r3, #4]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	461a      	mov	r2, r3
 8016800:	4917      	ldr	r1, [pc, #92]	@ (8016860 <pcb_new+0xd0>)
 8016802:	f009 fc07 	bl	8020014 <udp_recv>
      }
      break;
 8016806:	e016      	b.n	8016836 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681c      	ldr	r4, [r3, #0]
 801680c:	7bfb      	ldrb	r3, [r7, #15]
 801680e:	4618      	mov	r0, r3
 8016810:	f004 fb90 	bl	801af34 <tcp_new_ip_type>
 8016814:	4603      	mov	r3, r0
 8016816:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d00b      	beq.n	801683a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	4618      	mov	r0, r3
 8016828:	f7ff ff8a 	bl	8016740 <setup_tcp>
      }
      break;
 801682c:	e005      	b.n	801683a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	22fa      	movs	r2, #250	@ 0xfa
 8016832:	711a      	strb	r2, [r3, #4]
      return;
 8016834:	e00a      	b.n	801684c <pcb_new+0xbc>
      break;
 8016836:	bf00      	nop
 8016838:	e000      	b.n	801683c <pcb_new+0xac>
      break;
 801683a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	685b      	ldr	r3, [r3, #4]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d102      	bne.n	801684c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	22ff      	movs	r2, #255	@ 0xff
 801684a:	711a      	strb	r2, [r3, #4]
  }
}
 801684c:	3714      	adds	r7, #20
 801684e:	46bd      	mov	sp, r7
 8016850:	bd90      	pop	{r4, r7, pc}
 8016852:	bf00      	nop
 8016854:	08024f30 	.word	0x08024f30
 8016858:	08025114 	.word	0x08025114
 801685c:	08024f74 	.word	0x08024f74
 8016860:	08016215 	.word	0x08016215

08016864 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b084      	sub	sp, #16
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	2200      	movs	r2, #0
 8016874:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d102      	bne.n	8016886 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8016880:	68f8      	ldr	r0, [r7, #12]
 8016882:	f7ff ff85 	bl	8016790 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8016886:	bf00      	nop
 8016888:	3710      	adds	r7, #16
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
	...

08016890 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b086      	sub	sp, #24
 8016894:	af00      	add	r7, sp, #0
 8016896:	4603      	mov	r3, r0
 8016898:	6039      	str	r1, [r7, #0]
 801689a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 801689c:	2300      	movs	r3, #0
 801689e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80168a0:	2007      	movs	r0, #7
 80168a2:	f001 fc41 	bl	8018128 <memp_malloc>
 80168a6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d101      	bne.n	80168b2 <netconn_alloc+0x22>
    return NULL;
 80168ae:	2300      	movs	r3, #0
 80168b0:	e052      	b.n	8016958 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2200      	movs	r2, #0
 80168b6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	79fa      	ldrb	r2, [r7, #7]
 80168bc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2200      	movs	r2, #0
 80168c2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80168c4:	79fb      	ldrb	r3, [r7, #7]
 80168c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80168ca:	2b10      	cmp	r3, #16
 80168cc:	d004      	beq.n	80168d8 <netconn_alloc+0x48>
 80168ce:	2b20      	cmp	r3, #32
 80168d0:	d105      	bne.n	80168de <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80168d2:	2306      	movs	r3, #6
 80168d4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80168d6:	e00a      	b.n	80168ee <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80168d8:	2306      	movs	r3, #6
 80168da:	617b      	str	r3, [r7, #20]
      break;
 80168dc:	e007      	b.n	80168ee <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80168de:	4b20      	ldr	r3, [pc, #128]	@ (8016960 <netconn_alloc+0xd0>)
 80168e0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80168e4:	491f      	ldr	r1, [pc, #124]	@ (8016964 <netconn_alloc+0xd4>)
 80168e6:	4820      	ldr	r0, [pc, #128]	@ (8016968 <netconn_alloc+0xd8>)
 80168e8:	f00c febe 	bl	8023668 <iprintf>
      goto free_and_return;
 80168ec:	e02f      	b.n	801694e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	3310      	adds	r3, #16
 80168f2:	6979      	ldr	r1, [r7, #20]
 80168f4:	4618      	mov	r0, r3
 80168f6:	f00b ff99 	bl	802282c <sys_mbox_new>
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d125      	bne.n	801694c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	330c      	adds	r3, #12
 8016904:	2100      	movs	r1, #0
 8016906:	4618      	mov	r0, r3
 8016908:	f00c f857 	bl	80229ba <sys_sem_new>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	d005      	beq.n	801691e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	3310      	adds	r3, #16
 8016916:	4618      	mov	r0, r3
 8016918:	f00b ffaa 	bl	8022870 <sys_mbox_free>
    goto free_and_return;
 801691c:	e017      	b.n	801694e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	3314      	adds	r3, #20
 8016922:	4618      	mov	r0, r3
 8016924:	f00c f83c 	bl	80229a0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	2200      	movs	r2, #0
 801692c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	f04f 32ff 	mov.w	r2, #4294967295
 8016934:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	683a      	ldr	r2, [r7, #0]
 801693a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2200      	movs	r2, #0
 8016940:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	7cfa      	ldrb	r2, [r7, #19]
 8016946:	771a      	strb	r2, [r3, #28]
  return conn;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	e005      	b.n	8016958 <netconn_alloc+0xc8>
    goto free_and_return;
 801694c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801694e:	68f9      	ldr	r1, [r7, #12]
 8016950:	2007      	movs	r0, #7
 8016952:	f001 fc5f 	bl	8018214 <memp_free>
  return NULL;
 8016956:	2300      	movs	r3, #0
}
 8016958:	4618      	mov	r0, r3
 801695a:	3718      	adds	r7, #24
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}
 8016960:	08024f30 	.word	0x08024f30
 8016964:	08025134 	.word	0x08025134
 8016968:	08024f74 	.word	0x08024f74

0801696c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	685b      	ldr	r3, [r3, #4]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d006      	beq.n	801698a <netconn_free+0x1e>
 801697c:	4b1b      	ldr	r3, [pc, #108]	@ (80169ec <netconn_free+0x80>)
 801697e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016982:	491b      	ldr	r1, [pc, #108]	@ (80169f0 <netconn_free+0x84>)
 8016984:	481b      	ldr	r0, [pc, #108]	@ (80169f4 <netconn_free+0x88>)
 8016986:	f00c fe6f 	bl	8023668 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	3310      	adds	r3, #16
 801698e:	4618      	mov	r0, r3
 8016990:	f00b fff5 	bl	802297e <sys_mbox_valid>
 8016994:	4603      	mov	r3, r0
 8016996:	2b00      	cmp	r3, #0
 8016998:	d006      	beq.n	80169a8 <netconn_free+0x3c>
 801699a:	4b14      	ldr	r3, [pc, #80]	@ (80169ec <netconn_free+0x80>)
 801699c:	f240 3223 	movw	r2, #803	@ 0x323
 80169a0:	4915      	ldr	r1, [pc, #84]	@ (80169f8 <netconn_free+0x8c>)
 80169a2:	4814      	ldr	r0, [pc, #80]	@ (80169f4 <netconn_free+0x88>)
 80169a4:	f00c fe60 	bl	8023668 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	3314      	adds	r3, #20
 80169ac:	4618      	mov	r0, r3
 80169ae:	f00b ffe6 	bl	802297e <sys_mbox_valid>
 80169b2:	4603      	mov	r3, r0
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d006      	beq.n	80169c6 <netconn_free+0x5a>
 80169b8:	4b0c      	ldr	r3, [pc, #48]	@ (80169ec <netconn_free+0x80>)
 80169ba:	f240 3226 	movw	r2, #806	@ 0x326
 80169be:	490f      	ldr	r1, [pc, #60]	@ (80169fc <netconn_free+0x90>)
 80169c0:	480c      	ldr	r0, [pc, #48]	@ (80169f4 <netconn_free+0x88>)
 80169c2:	f00c fe51 	bl	8023668 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	330c      	adds	r3, #12
 80169ca:	4618      	mov	r0, r3
 80169cc:	f00c f85b 	bl	8022a86 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	330c      	adds	r3, #12
 80169d4:	4618      	mov	r0, r3
 80169d6:	f00c f874 	bl	8022ac2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80169da:	6879      	ldr	r1, [r7, #4]
 80169dc:	2007      	movs	r0, #7
 80169de:	f001 fc19 	bl	8018214 <memp_free>
}
 80169e2:	bf00      	nop
 80169e4:	3708      	adds	r7, #8
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	bf00      	nop
 80169ec:	08024f30 	.word	0x08024f30
 80169f0:	0802515c 	.word	0x0802515c
 80169f4:	08024f74 	.word	0x08024f74
 80169f8:	0802518c 	.word	0x0802518c
 80169fc:	080251c8 	.word	0x080251c8

08016a00 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b086      	sub	sp, #24
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	3310      	adds	r3, #16
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	f00b ffb6 	bl	802297e <sys_mbox_valid>
 8016a12:	4603      	mov	r3, r0
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d02f      	beq.n	8016a78 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a18:	e018      	b.n	8016a4c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	781b      	ldrb	r3, [r3, #0]
 8016a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016a22:	2b10      	cmp	r3, #16
 8016a24:	d10e      	bne.n	8016a44 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	f107 020f 	add.w	r2, r7, #15
 8016a2c:	4611      	mov	r1, r2
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7ff fbb6 	bl	80161a0 <lwip_netconn_is_err_msg>
 8016a34:	4603      	mov	r3, r0
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d108      	bne.n	8016a4c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f002 fabf 	bl	8018fc0 <pbuf_free>
 8016a42:	e003      	b.n	8016a4c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	4618      	mov	r0, r3
 8016a48:	f000 fcae 	bl	80173a8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	3310      	adds	r3, #16
 8016a50:	f107 0210 	add.w	r2, r7, #16
 8016a54:	4611      	mov	r1, r2
 8016a56:	4618      	mov	r0, r3
 8016a58:	f00b ff75 	bl	8022946 <sys_arch_mbox_tryfetch>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a62:	d1da      	bne.n	8016a1a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	3310      	adds	r3, #16
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f00b ff01 	bl	8022870 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	3310      	adds	r3, #16
 8016a72:	4618      	mov	r0, r3
 8016a74:	f00b ff94 	bl	80229a0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	3314      	adds	r3, #20
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f00b ff7e 	bl	802297e <sys_mbox_valid>
 8016a82:	4603      	mov	r3, r0
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d034      	beq.n	8016af2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a88:	e01d      	b.n	8016ac6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	f107 020e 	add.w	r2, r7, #14
 8016a90:	4611      	mov	r1, r2
 8016a92:	4618      	mov	r0, r3
 8016a94:	f7ff fb84 	bl	80161a0 <lwip_netconn_is_err_msg>
 8016a98:	4603      	mov	r3, r0
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d113      	bne.n	8016ac6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8016a9e:	693b      	ldr	r3, [r7, #16]
 8016aa0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8016aa2:	6978      	ldr	r0, [r7, #20]
 8016aa4:	f7ff ffac 	bl	8016a00 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	685b      	ldr	r3, [r3, #4]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d007      	beq.n	8016ac0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f003 f961 	bl	8019d7c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	2200      	movs	r2, #0
 8016abe:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8016ac0:	6978      	ldr	r0, [r7, #20]
 8016ac2:	f7ff ff53 	bl	801696c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	3314      	adds	r3, #20
 8016aca:	f107 0210 	add.w	r2, r7, #16
 8016ace:	4611      	mov	r1, r2
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f00b ff38 	bl	8022946 <sys_arch_mbox_tryfetch>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016adc:	d1d5      	bne.n	8016a8a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	3314      	adds	r3, #20
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f00b fec4 	bl	8022870 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	3314      	adds	r3, #20
 8016aec:	4618      	mov	r0, r3
 8016aee:	f00b ff57 	bl	80229a0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8016af2:	bf00      	nop
 8016af4:	3718      	adds	r7, #24
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
	...

08016afc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b086      	sub	sp, #24
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	460b      	mov	r3, r1
 8016b06:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d106      	bne.n	8016b20 <lwip_netconn_do_close_internal+0x24>
 8016b12:	4b87      	ldr	r3, [pc, #540]	@ (8016d30 <lwip_netconn_do_close_internal+0x234>)
 8016b14:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8016b18:	4986      	ldr	r1, [pc, #536]	@ (8016d34 <lwip_netconn_do_close_internal+0x238>)
 8016b1a:	4887      	ldr	r0, [pc, #540]	@ (8016d38 <lwip_netconn_do_close_internal+0x23c>)
 8016b1c:	f00c fda4 	bl	8023668 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016b28:	2b10      	cmp	r3, #16
 8016b2a:	d006      	beq.n	8016b3a <lwip_netconn_do_close_internal+0x3e>
 8016b2c:	4b80      	ldr	r3, [pc, #512]	@ (8016d30 <lwip_netconn_do_close_internal+0x234>)
 8016b2e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8016b32:	4982      	ldr	r1, [pc, #520]	@ (8016d3c <lwip_netconn_do_close_internal+0x240>)
 8016b34:	4880      	ldr	r0, [pc, #512]	@ (8016d38 <lwip_netconn_do_close_internal+0x23c>)
 8016b36:	f00c fd97 	bl	8023668 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	785b      	ldrb	r3, [r3, #1]
 8016b3e:	2b04      	cmp	r3, #4
 8016b40:	d006      	beq.n	8016b50 <lwip_netconn_do_close_internal+0x54>
 8016b42:	4b7b      	ldr	r3, [pc, #492]	@ (8016d30 <lwip_netconn_do_close_internal+0x234>)
 8016b44:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8016b48:	497d      	ldr	r1, [pc, #500]	@ (8016d40 <lwip_netconn_do_close_internal+0x244>)
 8016b4a:	487b      	ldr	r0, [pc, #492]	@ (8016d38 <lwip_netconn_do_close_internal+0x23c>)
 8016b4c:	f00c fd8c 	bl	8023668 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	685b      	ldr	r3, [r3, #4]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d106      	bne.n	8016b66 <lwip_netconn_do_close_internal+0x6a>
 8016b58:	4b75      	ldr	r3, [pc, #468]	@ (8016d30 <lwip_netconn_do_close_internal+0x234>)
 8016b5a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8016b5e:	4979      	ldr	r1, [pc, #484]	@ (8016d44 <lwip_netconn_do_close_internal+0x248>)
 8016b60:	4875      	ldr	r0, [pc, #468]	@ (8016d38 <lwip_netconn_do_close_internal+0x23c>)
 8016b62:	f00c fd81 	bl	8023668 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6a1b      	ldr	r3, [r3, #32]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d106      	bne.n	8016b7c <lwip_netconn_do_close_internal+0x80>
 8016b6e:	4b70      	ldr	r3, [pc, #448]	@ (8016d30 <lwip_netconn_do_close_internal+0x234>)
 8016b70:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8016b74:	4974      	ldr	r1, [pc, #464]	@ (8016d48 <lwip_netconn_do_close_internal+0x24c>)
 8016b76:	4870      	ldr	r0, [pc, #448]	@ (8016d38 <lwip_netconn_do_close_internal+0x23c>)
 8016b78:	f00c fd76 	bl	8023668 <iprintf>

  tpcb = conn->pcb.tcp;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	6a1b      	ldr	r3, [r3, #32]
 8016b86:	7a1b      	ldrb	r3, [r3, #8]
 8016b88:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8016b8a:	7bfb      	ldrb	r3, [r7, #15]
 8016b8c:	f003 0301 	and.w	r3, r3, #1
 8016b90:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8016b92:	7bfb      	ldrb	r3, [r7, #15]
 8016b94:	f003 0302 	and.w	r3, r3, #2
 8016b98:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8016b9a:	7bfb      	ldrb	r3, [r7, #15]
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	d102      	bne.n	8016ba6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	75bb      	strb	r3, [r7, #22]
 8016ba4:	e01f      	b.n	8016be6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8016ba6:	7bbb      	ldrb	r3, [r7, #14]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d00e      	beq.n	8016bca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8016bac:	693b      	ldr	r3, [r7, #16]
 8016bae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8016bb0:	2b05      	cmp	r3, #5
 8016bb2:	d007      	beq.n	8016bc4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8016bb8:	2b06      	cmp	r3, #6
 8016bba:	d003      	beq.n	8016bc4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8016bc0:	2b08      	cmp	r3, #8
 8016bc2:	d102      	bne.n	8016bca <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	75bb      	strb	r3, [r7, #22]
 8016bc8:	e00d      	b.n	8016be6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8016bca:	7b7b      	ldrb	r3, [r7, #13]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d008      	beq.n	8016be2 <lwip_netconn_do_close_internal+0xe6>
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	8b5b      	ldrh	r3, [r3, #26]
 8016bd4:	f003 0310 	and.w	r3, r3, #16
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d002      	beq.n	8016be2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8016bdc:	2301      	movs	r3, #1
 8016bde:	75bb      	strb	r3, [r7, #22]
 8016be0:	e001      	b.n	8016be6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8016be2:	2300      	movs	r3, #0
 8016be4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8016be6:	7dbb      	ldrb	r3, [r7, #22]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d003      	beq.n	8016bf4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8016bec:	2100      	movs	r1, #0
 8016bee:	6938      	ldr	r0, [r7, #16]
 8016bf0:	f004 f9ae 	bl	801af50 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8016bf4:	693b      	ldr	r3, [r7, #16]
 8016bf6:	7d1b      	ldrb	r3, [r3, #20]
 8016bf8:	2b01      	cmp	r3, #1
 8016bfa:	d104      	bne.n	8016c06 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8016bfc:	2100      	movs	r1, #0
 8016bfe:	6938      	ldr	r0, [r7, #16]
 8016c00:	f004 fa1e 	bl	801b040 <tcp_accept>
 8016c04:	e01d      	b.n	8016c42 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8016c06:	7bbb      	ldrb	r3, [r7, #14]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d007      	beq.n	8016c1c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8016c0c:	2100      	movs	r1, #0
 8016c0e:	6938      	ldr	r0, [r7, #16]
 8016c10:	f004 f9b0 	bl	801af74 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8016c14:	2100      	movs	r1, #0
 8016c16:	6938      	ldr	r0, [r7, #16]
 8016c18:	f004 fa12 	bl	801b040 <tcp_accept>
    }
    if (shut_tx) {
 8016c1c:	7b7b      	ldrb	r3, [r7, #13]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d003      	beq.n	8016c2a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8016c22:	2100      	movs	r1, #0
 8016c24:	6938      	ldr	r0, [r7, #16]
 8016c26:	f004 f9c7 	bl	801afb8 <tcp_sent>
    }
    if (shut_close) {
 8016c2a:	7dbb      	ldrb	r3, [r7, #22]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d008      	beq.n	8016c42 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8016c30:	2200      	movs	r2, #0
 8016c32:	2100      	movs	r1, #0
 8016c34:	6938      	ldr	r0, [r7, #16]
 8016c36:	f004 fa1b 	bl	801b070 <tcp_poll>
      tcp_err(tpcb, NULL);
 8016c3a:	2100      	movs	r1, #0
 8016c3c:	6938      	ldr	r0, [r7, #16]
 8016c3e:	f004 f9dd 	bl	801affc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8016c42:	7dbb      	ldrb	r3, [r7, #22]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d005      	beq.n	8016c54 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8016c48:	6938      	ldr	r0, [r7, #16]
 8016c4a:	f002 ff51 	bl	8019af0 <tcp_close>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	75fb      	strb	r3, [r7, #23]
 8016c52:	e007      	b.n	8016c64 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8016c54:	7bbb      	ldrb	r3, [r7, #14]
 8016c56:	7b7a      	ldrb	r2, [r7, #13]
 8016c58:	4619      	mov	r1, r3
 8016c5a:	6938      	ldr	r0, [r7, #16]
 8016c5c:	f002 ff74 	bl	8019b48 <tcp_shutdown>
 8016c60:	4603      	mov	r3, r0
 8016c62:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8016c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d102      	bne.n	8016c72 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	757b      	strb	r3, [r7, #21]
 8016c70:	e016      	b.n	8016ca0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8016c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c7a:	d10f      	bne.n	8016c9c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6a1b      	ldr	r3, [r3, #32]
 8016c80:	7a5b      	ldrb	r3, [r3, #9]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d10c      	bne.n	8016ca0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8016c86:	2301      	movs	r3, #1
 8016c88:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8016c8a:	7dbb      	ldrb	r3, [r7, #22]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d007      	beq.n	8016ca0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8016c90:	6938      	ldr	r0, [r7, #16]
 8016c92:	f003 f873 	bl	8019d7c <tcp_abort>
          err = ERR_OK;
 8016c96:	2300      	movs	r3, #0
 8016c98:	75fb      	strb	r3, [r7, #23]
 8016c9a:	e001      	b.n	8016ca0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8016ca0:	7d7b      	ldrb	r3, [r7, #21]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d052      	beq.n	8016d4c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6a1b      	ldr	r3, [r3, #32]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	330c      	adds	r3, #12
 8016cae:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6a1b      	ldr	r3, [r3, #32]
 8016cb4:	7dfa      	ldrb	r2, [r7, #23]
 8016cb6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d129      	bne.n	8016d20 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8016ccc:	7dbb      	ldrb	r3, [r7, #22]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d00c      	beq.n	8016cec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d005      	beq.n	8016cec <lwip_netconn_do_close_internal+0x1f0>
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	2104      	movs	r1, #4
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	4798      	blx	r3
      }
      if (shut_rx) {
 8016cec:	7bbb      	ldrb	r3, [r7, #14]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d009      	beq.n	8016d06 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d005      	beq.n	8016d06 <lwip_netconn_do_close_internal+0x20a>
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cfe:	2200      	movs	r2, #0
 8016d00:	2100      	movs	r1, #0
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	4798      	blx	r3
      }
      if (shut_tx) {
 8016d06:	7b7b      	ldrb	r3, [r7, #13]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d009      	beq.n	8016d20 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d005      	beq.n	8016d20 <lwip_netconn_do_close_internal+0x224>
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d18:	2200      	movs	r2, #0
 8016d1a:	2102      	movs	r1, #2
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016d20:	78fb      	ldrb	r3, [r7, #3]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d002      	beq.n	8016d2c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8016d26:	68b8      	ldr	r0, [r7, #8]
 8016d28:	f00b fea0 	bl	8022a6c <sys_sem_signal>
    }
    return ERR_OK;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	e03c      	b.n	8016daa <lwip_netconn_do_close_internal+0x2ae>
 8016d30:	08024f30 	.word	0x08024f30
 8016d34:	08025204 	.word	0x08025204
 8016d38:	08024f74 	.word	0x08024f74
 8016d3c:	08025214 	.word	0x08025214
 8016d40:	08025234 	.word	0x08025234
 8016d44:	08025258 	.word	0x08025258
 8016d48:	08025098 	.word	0x08025098
  }
  if (!close_finished) {
 8016d4c:	7d7b      	ldrb	r3, [r7, #21]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d11e      	bne.n	8016d90 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	7d1b      	ldrb	r3, [r3, #20]
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d106      	bne.n	8016d68 <lwip_netconn_do_close_internal+0x26c>
 8016d5a:	4b16      	ldr	r3, [pc, #88]	@ (8016db4 <lwip_netconn_do_close_internal+0x2b8>)
 8016d5c:	f240 4241 	movw	r2, #1089	@ 0x441
 8016d60:	4915      	ldr	r1, [pc, #84]	@ (8016db8 <lwip_netconn_do_close_internal+0x2bc>)
 8016d62:	4816      	ldr	r0, [pc, #88]	@ (8016dbc <lwip_netconn_do_close_internal+0x2c0>)
 8016d64:	f00c fc80 	bl	8023668 <iprintf>
    if (shut_tx) {
 8016d68:	7b7b      	ldrb	r3, [r7, #13]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d003      	beq.n	8016d76 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8016d6e:	4914      	ldr	r1, [pc, #80]	@ (8016dc0 <lwip_netconn_do_close_internal+0x2c4>)
 8016d70:	6938      	ldr	r0, [r7, #16]
 8016d72:	f004 f921 	bl	801afb8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8016d76:	2201      	movs	r2, #1
 8016d78:	4912      	ldr	r1, [pc, #72]	@ (8016dc4 <lwip_netconn_do_close_internal+0x2c8>)
 8016d7a:	6938      	ldr	r0, [r7, #16]
 8016d7c:	f004 f978 	bl	801b070 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8016d80:	4911      	ldr	r1, [pc, #68]	@ (8016dc8 <lwip_netconn_do_close_internal+0x2cc>)
 8016d82:	6938      	ldr	r0, [r7, #16]
 8016d84:	f004 f93a 	bl	801affc <tcp_err>
    tcp_arg(tpcb, conn);
 8016d88:	6879      	ldr	r1, [r7, #4]
 8016d8a:	6938      	ldr	r0, [r7, #16]
 8016d8c:	f004 f8e0 	bl	801af50 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8016d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d106      	bne.n	8016da6 <lwip_netconn_do_close_internal+0x2aa>
 8016d98:	4b06      	ldr	r3, [pc, #24]	@ (8016db4 <lwip_netconn_do_close_internal+0x2b8>)
 8016d9a:	f240 424d 	movw	r2, #1101	@ 0x44d
 8016d9e:	490b      	ldr	r1, [pc, #44]	@ (8016dcc <lwip_netconn_do_close_internal+0x2d0>)
 8016da0:	4806      	ldr	r0, [pc, #24]	@ (8016dbc <lwip_netconn_do_close_internal+0x2c0>)
 8016da2:	f00c fc61 	bl	8023668 <iprintf>
  return err;
 8016da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3718      	adds	r7, #24
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}
 8016db2:	bf00      	nop
 8016db4:	08024f30 	.word	0x08024f30
 8016db8:	0802526c 	.word	0x0802526c
 8016dbc:	08024f74 	.word	0x08024f74
 8016dc0:	080164e9 	.word	0x080164e9
 8016dc4:	0801641d 	.word	0x0801641d
 8016dc8:	08016595 	.word	0x08016595
 8016dcc:	08025290 	.word	0x08025290

08016dd0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	785b      	ldrb	r3, [r3, #1]
 8016de2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8016de4:	7afb      	ldrb	r3, [r7, #11]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d00d      	beq.n	8016e06 <lwip_netconn_do_delconn+0x36>
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016df4:	2b10      	cmp	r3, #16
 8016df6:	d006      	beq.n	8016e06 <lwip_netconn_do_delconn+0x36>
 8016df8:	4b60      	ldr	r3, [pc, #384]	@ (8016f7c <lwip_netconn_do_delconn+0x1ac>)
 8016dfa:	f240 425e 	movw	r2, #1118	@ 0x45e
 8016dfe:	4960      	ldr	r1, [pc, #384]	@ (8016f80 <lwip_netconn_do_delconn+0x1b0>)
 8016e00:	4860      	ldr	r0, [pc, #384]	@ (8016f84 <lwip_netconn_do_delconn+0x1b4>)
 8016e02:	f00c fc31 	bl	8023668 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8016e06:	7afb      	ldrb	r3, [r7, #11]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d005      	beq.n	8016e18 <lwip_netconn_do_delconn+0x48>
 8016e0c:	7afb      	ldrb	r3, [r7, #11]
 8016e0e:	2b02      	cmp	r3, #2
 8016e10:	d002      	beq.n	8016e18 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8016e12:	7afb      	ldrb	r3, [r7, #11]
 8016e14:	2b03      	cmp	r3, #3
 8016e16:	d109      	bne.n	8016e2c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8016e18:	7afb      	ldrb	r3, [r7, #11]
 8016e1a:	2b03      	cmp	r3, #3
 8016e1c:	d10a      	bne.n	8016e34 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	7f1b      	ldrb	r3, [r3, #28]
 8016e24:	f003 0304 	and.w	r3, r3, #4
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d103      	bne.n	8016e34 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	22fb      	movs	r2, #251	@ 0xfb
 8016e30:	711a      	strb	r2, [r3, #4]
 8016e32:	e097      	b.n	8016f64 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8016e34:	7afb      	ldrb	r3, [r7, #11]
 8016e36:	2b03      	cmp	r3, #3
 8016e38:	d10d      	bne.n	8016e56 <lwip_netconn_do_delconn+0x86>
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	7f1b      	ldrb	r3, [r3, #28]
 8016e40:	f003 0304 	and.w	r3, r3, #4
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d106      	bne.n	8016e56 <lwip_netconn_do_delconn+0x86>
 8016e48:	4b4c      	ldr	r3, [pc, #304]	@ (8016f7c <lwip_netconn_do_delconn+0x1ac>)
 8016e4a:	f240 427a 	movw	r2, #1146	@ 0x47a
 8016e4e:	494e      	ldr	r1, [pc, #312]	@ (8016f88 <lwip_netconn_do_delconn+0x1b8>)
 8016e50:	484c      	ldr	r0, [pc, #304]	@ (8016f84 <lwip_netconn_do_delconn+0x1b4>)
 8016e52:	f00c fc09 	bl	8023668 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7ff fdcd 	bl	8016a00 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	685b      	ldr	r3, [r3, #4]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d05f      	beq.n	8016f30 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	781b      	ldrb	r3, [r3, #0]
 8016e76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016e7a:	2b10      	cmp	r3, #16
 8016e7c:	d00d      	beq.n	8016e9a <lwip_netconn_do_delconn+0xca>
 8016e7e:	2b20      	cmp	r3, #32
 8016e80:	d151      	bne.n	8016f26 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	2200      	movs	r2, #0
 8016e8a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	4618      	mov	r0, r3
 8016e94:	f009 f8de 	bl	8020054 <udp_remove>
          break;
 8016e98:	e046      	b.n	8016f28 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	6a1b      	ldr	r3, [r3, #32]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d006      	beq.n	8016eb2 <lwip_netconn_do_delconn+0xe2>
 8016ea4:	4b35      	ldr	r3, [pc, #212]	@ (8016f7c <lwip_netconn_do_delconn+0x1ac>)
 8016ea6:	f240 4294 	movw	r2, #1172	@ 0x494
 8016eaa:	4938      	ldr	r1, [pc, #224]	@ (8016f8c <lwip_netconn_do_delconn+0x1bc>)
 8016eac:	4835      	ldr	r0, [pc, #212]	@ (8016f84 <lwip_netconn_do_delconn+0x1b4>)
 8016eae:	f00c fbdb 	bl	8023668 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	2204      	movs	r2, #4
 8016eb8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	2203      	movs	r2, #3
 8016ebe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	68fa      	ldr	r2, [r7, #12]
 8016ec6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	2100      	movs	r1, #0
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7ff fe14 	bl	8016afc <lwip_netconn_do_close_internal>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d04b      	beq.n	8016f72 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	785b      	ldrb	r3, [r3, #1]
 8016ee0:	2b04      	cmp	r3, #4
 8016ee2:	d006      	beq.n	8016ef2 <lwip_netconn_do_delconn+0x122>
 8016ee4:	4b25      	ldr	r3, [pc, #148]	@ (8016f7c <lwip_netconn_do_delconn+0x1ac>)
 8016ee6:	f240 429a 	movw	r2, #1178	@ 0x49a
 8016eea:	4929      	ldr	r1, [pc, #164]	@ (8016f90 <lwip_netconn_do_delconn+0x1c0>)
 8016eec:	4825      	ldr	r0, [pc, #148]	@ (8016f84 <lwip_netconn_do_delconn+0x1b4>)
 8016eee:	f00c fbbb 	bl	8023668 <iprintf>
            UNLOCK_TCPIP_CORE();
 8016ef2:	4828      	ldr	r0, [pc, #160]	@ (8016f94 <lwip_netconn_do_delconn+0x1c4>)
 8016ef4:	f00b fe2b 	bl	8022b4e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	330c      	adds	r3, #12
 8016efe:	2100      	movs	r1, #0
 8016f00:	4618      	mov	r0, r3
 8016f02:	f00b fd82 	bl	8022a0a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8016f06:	4823      	ldr	r0, [pc, #140]	@ (8016f94 <lwip_netconn_do_delconn+0x1c4>)
 8016f08:	f00b fe12 	bl	8022b30 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	785b      	ldrb	r3, [r3, #1]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d02d      	beq.n	8016f72 <lwip_netconn_do_delconn+0x1a2>
 8016f16:	4b19      	ldr	r3, [pc, #100]	@ (8016f7c <lwip_netconn_do_delconn+0x1ac>)
 8016f18:	f240 429e 	movw	r2, #1182	@ 0x49e
 8016f1c:	491c      	ldr	r1, [pc, #112]	@ (8016f90 <lwip_netconn_do_delconn+0x1c0>)
 8016f1e:	4819      	ldr	r0, [pc, #100]	@ (8016f84 <lwip_netconn_do_delconn+0x1b4>)
 8016f20:	f00c fba2 	bl	8023668 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8016f24:	e025      	b.n	8016f72 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8016f26:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d007      	beq.n	8016f4a <lwip_netconn_do_delconn+0x17a>
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f40:	68fa      	ldr	r2, [r7, #12]
 8016f42:	6810      	ldr	r0, [r2, #0]
 8016f44:	2200      	movs	r2, #0
 8016f46:	2100      	movs	r1, #0
 8016f48:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d007      	beq.n	8016f64 <lwip_netconn_do_delconn+0x194>
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f5a:	68fa      	ldr	r2, [r7, #12]
 8016f5c:	6810      	ldr	r0, [r2, #0]
 8016f5e:	2200      	movs	r2, #0
 8016f60:	2102      	movs	r1, #2
 8016f62:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	330c      	adds	r3, #12
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f00b fd98 	bl	8022aa0 <sys_sem_valid>
 8016f70:	e000      	b.n	8016f74 <lwip_netconn_do_delconn+0x1a4>
          return;
 8016f72:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8016f74:	3710      	adds	r7, #16
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bd80      	pop	{r7, pc}
 8016f7a:	bf00      	nop
 8016f7c:	08024f30 	.word	0x08024f30
 8016f80:	080252a0 	.word	0x080252a0
 8016f84:	08024f74 	.word	0x08024f74
 8016f88:	080252b4 	.word	0x080252b4
 8016f8c:	080252d4 	.word	0x080252d4
 8016f90:	080252f0 	.word	0x080252f0
 8016f94:	2000dbb0 	.word	0x2000dbb0

08016f98 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b084      	sub	sp, #16
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d025      	beq.n	8016ffa <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016fb8:	2b10      	cmp	r3, #16
 8016fba:	d00e      	beq.n	8016fda <lwip_netconn_do_bind+0x42>
 8016fbc:	2b20      	cmp	r3, #32
 8016fbe:	d119      	bne.n	8016ff4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	6858      	ldr	r0, [r3, #4]
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	6899      	ldr	r1, [r3, #8]
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	899b      	ldrh	r3, [r3, #12]
 8016fce:	461a      	mov	r2, r3
 8016fd0:	f008 ff98 	bl	801ff04 <udp_bind>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	73fb      	strb	r3, [r7, #15]
        break;
 8016fd8:	e011      	b.n	8016ffe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	6858      	ldr	r0, [r3, #4]
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	6899      	ldr	r1, [r3, #8]
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	899b      	ldrh	r3, [r3, #12]
 8016fe8:	461a      	mov	r2, r3
 8016fea:	f002 fed3 	bl	8019d94 <tcp_bind>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	73fb      	strb	r3, [r7, #15]
        break;
 8016ff2:	e004      	b.n	8016ffe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8016ff4:	23fa      	movs	r3, #250	@ 0xfa
 8016ff6:	73fb      	strb	r3, [r7, #15]
        break;
 8016ff8:	e001      	b.n	8016ffe <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8016ffa:	23fa      	movs	r3, #250	@ 0xfa
 8016ffc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8016ffe:	68bb      	ldr	r3, [r7, #8]
 8017000:	7bfa      	ldrb	r2, [r7, #15]
 8017002:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8017004:	bf00      	nop
 8017006:	3710      	adds	r7, #16
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}

0801700c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b088      	sub	sp, #32
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	460b      	mov	r3, r1
 8017016:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8017018:	2300      	movs	r3, #0
 801701a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d106      	bne.n	8017030 <lwip_netconn_do_writemore+0x24>
 8017022:	4b96      	ldr	r3, [pc, #600]	@ (801727c <lwip_netconn_do_writemore+0x270>)
 8017024:	f240 6273 	movw	r2, #1651	@ 0x673
 8017028:	4995      	ldr	r1, [pc, #596]	@ (8017280 <lwip_netconn_do_writemore+0x274>)
 801702a:	4896      	ldr	r0, [pc, #600]	@ (8017284 <lwip_netconn_do_writemore+0x278>)
 801702c:	f00c fb1c 	bl	8023668 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	785b      	ldrb	r3, [r3, #1]
 8017034:	2b01      	cmp	r3, #1
 8017036:	d006      	beq.n	8017046 <lwip_netconn_do_writemore+0x3a>
 8017038:	4b90      	ldr	r3, [pc, #576]	@ (801727c <lwip_netconn_do_writemore+0x270>)
 801703a:	f240 6274 	movw	r2, #1652	@ 0x674
 801703e:	4992      	ldr	r1, [pc, #584]	@ (8017288 <lwip_netconn_do_writemore+0x27c>)
 8017040:	4890      	ldr	r0, [pc, #576]	@ (8017284 <lwip_netconn_do_writemore+0x278>)
 8017042:	f00c fb11 	bl	8023668 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	6a1b      	ldr	r3, [r3, #32]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d106      	bne.n	801705c <lwip_netconn_do_writemore+0x50>
 801704e:	4b8b      	ldr	r3, [pc, #556]	@ (801727c <lwip_netconn_do_writemore+0x270>)
 8017050:	f240 6275 	movw	r2, #1653	@ 0x675
 8017054:	498d      	ldr	r1, [pc, #564]	@ (801728c <lwip_netconn_do_writemore+0x280>)
 8017056:	488b      	ldr	r0, [pc, #556]	@ (8017284 <lwip_netconn_do_writemore+0x278>)
 8017058:	f00c fb06 	bl	8023668 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d106      	bne.n	8017072 <lwip_netconn_do_writemore+0x66>
 8017064:	4b85      	ldr	r3, [pc, #532]	@ (801727c <lwip_netconn_do_writemore+0x270>)
 8017066:	f240 6276 	movw	r2, #1654	@ 0x676
 801706a:	4989      	ldr	r1, [pc, #548]	@ (8017290 <lwip_netconn_do_writemore+0x284>)
 801706c:	4885      	ldr	r0, [pc, #532]	@ (8017284 <lwip_netconn_do_writemore+0x278>)
 801706e:	f00c fafb 	bl	8023668 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	6a1b      	ldr	r3, [r3, #32]
 8017076:	699a      	ldr	r2, [r3, #24]
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6a1b      	ldr	r3, [r3, #32]
 801707c:	695b      	ldr	r3, [r3, #20]
 801707e:	429a      	cmp	r2, r3
 8017080:	d306      	bcc.n	8017090 <lwip_netconn_do_writemore+0x84>
 8017082:	4b7e      	ldr	r3, [pc, #504]	@ (801727c <lwip_netconn_do_writemore+0x270>)
 8017084:	f240 6277 	movw	r2, #1655	@ 0x677
 8017088:	4982      	ldr	r1, [pc, #520]	@ (8017294 <lwip_netconn_do_writemore+0x288>)
 801708a:	487e      	ldr	r0, [pc, #504]	@ (8017284 <lwip_netconn_do_writemore+0x278>)
 801708c:	f00c faec 	bl	8023668 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	6a1b      	ldr	r3, [r3, #32]
 8017094:	899b      	ldrh	r3, [r3, #12]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d106      	bne.n	80170a8 <lwip_netconn_do_writemore+0x9c>
 801709a:	4b78      	ldr	r3, [pc, #480]	@ (801727c <lwip_netconn_do_writemore+0x270>)
 801709c:	f240 6279 	movw	r2, #1657	@ 0x679
 80170a0:	497d      	ldr	r1, [pc, #500]	@ (8017298 <lwip_netconn_do_writemore+0x28c>)
 80170a2:	4878      	ldr	r0, [pc, #480]	@ (8017284 <lwip_netconn_do_writemore+0x278>)
 80170a4:	f00c fae0 	bl	8023668 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	6a1b      	ldr	r3, [r3, #32]
 80170ac:	7f1b      	ldrb	r3, [r3, #28]
 80170ae:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	7f1b      	ldrb	r3, [r3, #28]
 80170b4:	f003 0302 	and.w	r3, r3, #2
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d104      	bne.n	80170c6 <lwip_netconn_do_writemore+0xba>
 80170bc:	7ebb      	ldrb	r3, [r7, #26]
 80170be:	f003 0304 	and.w	r3, r3, #4
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d001      	beq.n	80170ca <lwip_netconn_do_writemore+0xbe>
 80170c6:	2301      	movs	r3, #1
 80170c8:	e000      	b.n	80170cc <lwip_netconn_do_writemore+0xc0>
 80170ca:	2300      	movs	r3, #0
 80170cc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	6a1b      	ldr	r3, [r3, #32]
 80170d2:	689b      	ldr	r3, [r3, #8]
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	6a1b      	ldr	r3, [r3, #32]
 80170da:	691b      	ldr	r3, [r3, #16]
 80170dc:	4413      	add	r3, r2
 80170de:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	6a1b      	ldr	r3, [r3, #32]
 80170e4:	689b      	ldr	r3, [r3, #8]
 80170e6:	685a      	ldr	r2, [r3, #4]
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6a1b      	ldr	r3, [r3, #32]
 80170ec:	691b      	ldr	r3, [r3, #16]
 80170ee:	1ad3      	subs	r3, r2, r3
 80170f0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80170f2:	693b      	ldr	r3, [r7, #16]
 80170f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80170f8:	d307      	bcc.n	801710a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80170fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80170fe:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8017100:	7ebb      	ldrb	r3, [r7, #26]
 8017102:	f043 0302 	orr.w	r3, r3, #2
 8017106:	76bb      	strb	r3, [r7, #26]
 8017108:	e001      	b.n	801710e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801710a:	693b      	ldr	r3, [r7, #16]
 801710c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	685b      	ldr	r3, [r3, #4]
 8017112:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017116:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8017118:	89fa      	ldrh	r2, [r7, #14]
 801711a:	8bbb      	ldrh	r3, [r7, #28]
 801711c:	429a      	cmp	r2, r3
 801711e:	d216      	bcs.n	801714e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8017120:	89fb      	ldrh	r3, [r7, #14]
 8017122:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8017124:	7e3b      	ldrb	r3, [r7, #24]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d00d      	beq.n	8017146 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801712a:	8bbb      	ldrh	r3, [r7, #28]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d10e      	bne.n	801714e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	6a1b      	ldr	r3, [r3, #32]
 8017134:	699b      	ldr	r3, [r3, #24]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d102      	bne.n	8017140 <lwip_netconn_do_writemore+0x134>
 801713a:	f06f 0306 	mvn.w	r3, #6
 801713e:	e000      	b.n	8017142 <lwip_netconn_do_writemore+0x136>
 8017140:	2300      	movs	r3, #0
 8017142:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8017144:	e07d      	b.n	8017242 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8017146:	7ebb      	ldrb	r3, [r7, #26]
 8017148:	f043 0302 	orr.w	r3, r3, #2
 801714c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6a1b      	ldr	r3, [r3, #32]
 8017152:	691a      	ldr	r2, [r3, #16]
 8017154:	8bbb      	ldrh	r3, [r7, #28]
 8017156:	441a      	add	r2, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	6a1b      	ldr	r3, [r3, #32]
 801715c:	689b      	ldr	r3, [r3, #8]
 801715e:	685b      	ldr	r3, [r3, #4]
 8017160:	429a      	cmp	r2, r3
 8017162:	d906      	bls.n	8017172 <lwip_netconn_do_writemore+0x166>
 8017164:	4b45      	ldr	r3, [pc, #276]	@ (801727c <lwip_netconn_do_writemore+0x270>)
 8017166:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 801716a:	494c      	ldr	r1, [pc, #304]	@ (801729c <lwip_netconn_do_writemore+0x290>)
 801716c:	4845      	ldr	r0, [pc, #276]	@ (8017284 <lwip_netconn_do_writemore+0x278>)
 801716e:	f00c fa7b 	bl	8023668 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8017172:	8bbb      	ldrh	r3, [r7, #28]
 8017174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017178:	4293      	cmp	r3, r2
 801717a:	d103      	bne.n	8017184 <lwip_netconn_do_writemore+0x178>
 801717c:	693b      	ldr	r3, [r7, #16]
 801717e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017182:	d209      	bcs.n	8017198 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8017188:	8bba      	ldrh	r2, [r7, #28]
 801718a:	429a      	cmp	r2, r3
 801718c:	d10b      	bne.n	80171a6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6a1b      	ldr	r3, [r3, #32]
 8017192:	899b      	ldrh	r3, [r3, #12]
 8017194:	2b01      	cmp	r3, #1
 8017196:	d906      	bls.n	80171a6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8017198:	2301      	movs	r3, #1
 801719a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801719c:	7ebb      	ldrb	r3, [r7, #26]
 801719e:	f043 0302 	orr.w	r3, r3, #2
 80171a2:	76bb      	strb	r3, [r7, #26]
 80171a4:	e001      	b.n	80171aa <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80171a6:	2300      	movs	r3, #0
 80171a8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	6858      	ldr	r0, [r3, #4]
 80171ae:	7ebb      	ldrb	r3, [r7, #26]
 80171b0:	8bba      	ldrh	r2, [r7, #28]
 80171b2:	6979      	ldr	r1, [r7, #20]
 80171b4:	f006 fe0a 	bl	801ddcc <tcp_write>
 80171b8:	4603      	mov	r3, r0
 80171ba:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80171bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d12c      	bne.n	801721e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	6a1b      	ldr	r3, [r3, #32]
 80171c8:	6999      	ldr	r1, [r3, #24]
 80171ca:	8bba      	ldrh	r2, [r7, #28]
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6a1b      	ldr	r3, [r3, #32]
 80171d0:	440a      	add	r2, r1
 80171d2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	6a1b      	ldr	r3, [r3, #32]
 80171d8:	6919      	ldr	r1, [r3, #16]
 80171da:	8bba      	ldrh	r2, [r7, #28]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6a1b      	ldr	r3, [r3, #32]
 80171e0:	440a      	add	r2, r1
 80171e2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	6a1b      	ldr	r3, [r3, #32]
 80171e8:	691a      	ldr	r2, [r3, #16]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	6a1b      	ldr	r3, [r3, #32]
 80171ee:	689b      	ldr	r3, [r3, #8]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	429a      	cmp	r2, r3
 80171f4:	d113      	bne.n	801721e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	6a1b      	ldr	r3, [r3, #32]
 80171fa:	899a      	ldrh	r2, [r3, #12]
 80171fc:	3a01      	subs	r2, #1
 80171fe:	b292      	uxth	r2, r2
 8017200:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	6a1b      	ldr	r3, [r3, #32]
 8017206:	899b      	ldrh	r3, [r3, #12]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d008      	beq.n	801721e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6a1b      	ldr	r3, [r3, #32]
 8017210:	689a      	ldr	r2, [r3, #8]
 8017212:	3208      	adds	r2, #8
 8017214:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	6a1b      	ldr	r3, [r3, #32]
 801721a:	2200      	movs	r2, #0
 801721c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801721e:	7e7b      	ldrb	r3, [r7, #25]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d004      	beq.n	801722e <lwip_netconn_do_writemore+0x222>
 8017224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017228:	2b00      	cmp	r3, #0
 801722a:	f43f af50 	beq.w	80170ce <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801722e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d004      	beq.n	8017240 <lwip_netconn_do_writemore+0x234>
 8017236:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801723e:	d147      	bne.n	80172d0 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8017240:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8017242:	7e3b      	ldrb	r3, [r7, #24]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d02b      	beq.n	80172a0 <lwip_netconn_do_writemore+0x294>
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6a1b      	ldr	r3, [r3, #32]
 801724c:	699a      	ldr	r2, [r3, #24]
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6a1b      	ldr	r3, [r3, #32]
 8017252:	695b      	ldr	r3, [r3, #20]
 8017254:	429a      	cmp	r2, r3
 8017256:	d223      	bcs.n	80172a0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801725c:	2b00      	cmp	r3, #0
 801725e:	d005      	beq.n	801726c <lwip_netconn_do_writemore+0x260>
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017264:	2200      	movs	r2, #0
 8017266:	2103      	movs	r1, #3
 8017268:	6878      	ldr	r0, [r7, #4]
 801726a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	7f1b      	ldrb	r3, [r3, #28]
 8017270:	f043 0310 	orr.w	r3, r3, #16
 8017274:	b2da      	uxtb	r2, r3
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	771a      	strb	r2, [r3, #28]
 801727a:	e029      	b.n	80172d0 <lwip_netconn_do_writemore+0x2c4>
 801727c:	08024f30 	.word	0x08024f30
 8017280:	08025088 	.word	0x08025088
 8017284:	08024f74 	.word	0x08024f74
 8017288:	08025390 	.word	0x08025390
 801728c:	08025098 	.word	0x08025098
 8017290:	080253b0 	.word	0x080253b0
 8017294:	080253c8 	.word	0x080253c8
 8017298:	08025408 	.word	0x08025408
 801729c:	08025430 	.word	0x08025430
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80172a8:	f640 3269 	movw	r2, #2921	@ 0xb69
 80172ac:	4293      	cmp	r3, r2
 80172ae:	d905      	bls.n	80172bc <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	685b      	ldr	r3, [r3, #4]
 80172b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80172b8:	2b07      	cmp	r3, #7
 80172ba:	d909      	bls.n	80172d0 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d005      	beq.n	80172d0 <lwip_netconn_do_writemore+0x2c4>
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172c8:	2200      	movs	r2, #0
 80172ca:	2103      	movs	r1, #3
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80172d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d11d      	bne.n	8017314 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	6a1b      	ldr	r3, [r3, #32]
 80172dc:	699a      	ldr	r2, [r3, #24]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	6a1b      	ldr	r3, [r3, #32]
 80172e2:	695b      	ldr	r3, [r3, #20]
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d002      	beq.n	80172ee <lwip_netconn_do_writemore+0x2e2>
 80172e8:	7e3b      	ldrb	r3, [r7, #24]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d001      	beq.n	80172f2 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80172ee:	2301      	movs	r3, #1
 80172f0:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	685b      	ldr	r3, [r3, #4]
 80172f6:	4618      	mov	r0, r3
 80172f8:	f007 fb52 	bl	801e9a0 <tcp_output>
 80172fc:	4603      	mov	r3, r0
 80172fe:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8017300:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8017304:	f113 0f04 	cmn.w	r3, #4
 8017308:	d12c      	bne.n	8017364 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801730a:	7b3b      	ldrb	r3, [r7, #12]
 801730c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801730e:	2301      	movs	r3, #1
 8017310:	76fb      	strb	r3, [r7, #27]
 8017312:	e027      	b.n	8017364 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8017314:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801731c:	d120      	bne.n	8017360 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	4618      	mov	r0, r3
 8017324:	f007 fb3c 	bl	801e9a0 <tcp_output>
 8017328:	4603      	mov	r3, r0
 801732a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801732c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8017330:	f113 0f04 	cmn.w	r3, #4
 8017334:	d104      	bne.n	8017340 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8017336:	7b7b      	ldrb	r3, [r7, #13]
 8017338:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801733a:	2301      	movs	r3, #1
 801733c:	76fb      	strb	r3, [r7, #27]
 801733e:	e011      	b.n	8017364 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8017340:	7e3b      	ldrb	r3, [r7, #24]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d00e      	beq.n	8017364 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6a1b      	ldr	r3, [r3, #32]
 801734a:	699b      	ldr	r3, [r3, #24]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d102      	bne.n	8017356 <lwip_netconn_do_writemore+0x34a>
 8017350:	f06f 0306 	mvn.w	r3, #6
 8017354:	e000      	b.n	8017358 <lwip_netconn_do_writemore+0x34c>
 8017356:	2300      	movs	r3, #0
 8017358:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801735a:	2301      	movs	r3, #1
 801735c:	76fb      	strb	r3, [r7, #27]
 801735e:	e001      	b.n	8017364 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8017360:	2301      	movs	r3, #1
 8017362:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8017364:	7efb      	ldrb	r3, [r7, #27]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d015      	beq.n	8017396 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6a1b      	ldr	r3, [r3, #32]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	330c      	adds	r3, #12
 8017372:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	6a1b      	ldr	r3, [r3, #32]
 8017378:	7ffa      	ldrb	r2, [r7, #31]
 801737a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2200      	movs	r2, #0
 8017380:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	2200      	movs	r2, #0
 8017386:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8017388:	78fb      	ldrb	r3, [r7, #3]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d006      	beq.n	801739c <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801738e:	68b8      	ldr	r0, [r7, #8]
 8017390:	f00b fb6c 	bl	8022a6c <sys_sem_signal>
 8017394:	e002      	b.n	801739c <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8017396:	f04f 33ff 	mov.w	r3, #4294967295
 801739a:	e000      	b.n	801739e <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 801739c:	2300      	movs	r3, #0
}
 801739e:	4618      	mov	r0, r3
 80173a0:	3720      	adds	r7, #32
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bd80      	pop	{r7, pc}
 80173a6:	bf00      	nop

080173a8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d013      	beq.n	80173de <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d00b      	beq.n	80173d6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	4618      	mov	r0, r3
 80173c4:	f001 fdfc 	bl	8018fc0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2200      	movs	r2, #0
 80173cc:	605a      	str	r2, [r3, #4]
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	685a      	ldr	r2, [r3, #4]
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80173d6:	6879      	ldr	r1, [r7, #4]
 80173d8:	2006      	movs	r0, #6
 80173da:	f000 ff1b 	bl	8018214 <memp_free>
  }
}
 80173de:	bf00      	nop
 80173e0:	3708      	adds	r7, #8
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}
	...

080173e8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b084      	sub	sp, #16
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80173f2:	f008 fb8d 	bl	801fb10 <sys_timeouts_sleeptime>
 80173f6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173fe:	d10b      	bne.n	8017418 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8017400:	4813      	ldr	r0, [pc, #76]	@ (8017450 <tcpip_timeouts_mbox_fetch+0x68>)
 8017402:	f00b fba4 	bl	8022b4e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8017406:	2200      	movs	r2, #0
 8017408:	6839      	ldr	r1, [r7, #0]
 801740a:	6878      	ldr	r0, [r7, #4]
 801740c:	f00b fa5c 	bl	80228c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8017410:	480f      	ldr	r0, [pc, #60]	@ (8017450 <tcpip_timeouts_mbox_fetch+0x68>)
 8017412:	f00b fb8d 	bl	8022b30 <sys_mutex_lock>
    return;
 8017416:	e018      	b.n	801744a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d102      	bne.n	8017424 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801741e:	f008 fb3d 	bl	801fa9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017422:	e7e6      	b.n	80173f2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8017424:	480a      	ldr	r0, [pc, #40]	@ (8017450 <tcpip_timeouts_mbox_fetch+0x68>)
 8017426:	f00b fb92 	bl	8022b4e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801742a:	68fa      	ldr	r2, [r7, #12]
 801742c:	6839      	ldr	r1, [r7, #0]
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f00b fa4a 	bl	80228c8 <sys_arch_mbox_fetch>
 8017434:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8017436:	4806      	ldr	r0, [pc, #24]	@ (8017450 <tcpip_timeouts_mbox_fetch+0x68>)
 8017438:	f00b fb7a 	bl	8022b30 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017442:	d102      	bne.n	801744a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8017444:	f008 fb2a 	bl	801fa9c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017448:	e7d3      	b.n	80173f2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801744a:	3710      	adds	r7, #16
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	2000dbb0 	.word	0x2000dbb0

08017454 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b084      	sub	sp, #16
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801745c:	4810      	ldr	r0, [pc, #64]	@ (80174a0 <tcpip_thread+0x4c>)
 801745e:	f00b fb67 	bl	8022b30 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8017462:	4b10      	ldr	r3, [pc, #64]	@ (80174a4 <tcpip_thread+0x50>)
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d005      	beq.n	8017476 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801746a:	4b0e      	ldr	r3, [pc, #56]	@ (80174a4 <tcpip_thread+0x50>)
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	4a0e      	ldr	r2, [pc, #56]	@ (80174a8 <tcpip_thread+0x54>)
 8017470:	6812      	ldr	r2, [r2, #0]
 8017472:	4610      	mov	r0, r2
 8017474:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8017476:	f107 030c 	add.w	r3, r7, #12
 801747a:	4619      	mov	r1, r3
 801747c:	480b      	ldr	r0, [pc, #44]	@ (80174ac <tcpip_thread+0x58>)
 801747e:	f7ff ffb3 	bl	80173e8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d106      	bne.n	8017496 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017488:	4b09      	ldr	r3, [pc, #36]	@ (80174b0 <tcpip_thread+0x5c>)
 801748a:	2291      	movs	r2, #145	@ 0x91
 801748c:	4909      	ldr	r1, [pc, #36]	@ (80174b4 <tcpip_thread+0x60>)
 801748e:	480a      	ldr	r0, [pc, #40]	@ (80174b8 <tcpip_thread+0x64>)
 8017490:	f00c f8ea 	bl	8023668 <iprintf>
      continue;
 8017494:	e003      	b.n	801749e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	4618      	mov	r0, r3
 801749a:	f000 f80f 	bl	80174bc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801749e:	e7ea      	b.n	8017476 <tcpip_thread+0x22>
 80174a0:	2000dbb0 	.word	0x2000dbb0
 80174a4:	2000dba4 	.word	0x2000dba4
 80174a8:	2000dba8 	.word	0x2000dba8
 80174ac:	2000dbac 	.word	0x2000dbac
 80174b0:	08025488 	.word	0x08025488
 80174b4:	080254b8 	.word	0x080254b8
 80174b8:	080254d8 	.word	0x080254d8

080174bc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	781b      	ldrb	r3, [r3, #0]
 80174c8:	2b02      	cmp	r3, #2
 80174ca:	d026      	beq.n	801751a <tcpip_thread_handle_msg+0x5e>
 80174cc:	2b02      	cmp	r3, #2
 80174ce:	dc2b      	bgt.n	8017528 <tcpip_thread_handle_msg+0x6c>
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d002      	beq.n	80174da <tcpip_thread_handle_msg+0x1e>
 80174d4:	2b01      	cmp	r3, #1
 80174d6:	d015      	beq.n	8017504 <tcpip_thread_handle_msg+0x48>
 80174d8:	e026      	b.n	8017528 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	68db      	ldr	r3, [r3, #12]
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	6850      	ldr	r0, [r2, #4]
 80174e2:	687a      	ldr	r2, [r7, #4]
 80174e4:	6892      	ldr	r2, [r2, #8]
 80174e6:	4611      	mov	r1, r2
 80174e8:	4798      	blx	r3
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d004      	beq.n	80174fa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	685b      	ldr	r3, [r3, #4]
 80174f4:	4618      	mov	r0, r3
 80174f6:	f001 fd63 	bl	8018fc0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80174fa:	6879      	ldr	r1, [r7, #4]
 80174fc:	2009      	movs	r0, #9
 80174fe:	f000 fe89 	bl	8018214 <memp_free>
      break;
 8017502:	e018      	b.n	8017536 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	685b      	ldr	r3, [r3, #4]
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	6892      	ldr	r2, [r2, #8]
 801750c:	4610      	mov	r0, r2
 801750e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017510:	6879      	ldr	r1, [r7, #4]
 8017512:	2008      	movs	r0, #8
 8017514:	f000 fe7e 	bl	8018214 <memp_free>
      break;
 8017518:	e00d      	b.n	8017536 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	687a      	ldr	r2, [r7, #4]
 8017520:	6892      	ldr	r2, [r2, #8]
 8017522:	4610      	mov	r0, r2
 8017524:	4798      	blx	r3
      break;
 8017526:	e006      	b.n	8017536 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017528:	4b05      	ldr	r3, [pc, #20]	@ (8017540 <tcpip_thread_handle_msg+0x84>)
 801752a:	22cf      	movs	r2, #207	@ 0xcf
 801752c:	4905      	ldr	r1, [pc, #20]	@ (8017544 <tcpip_thread_handle_msg+0x88>)
 801752e:	4806      	ldr	r0, [pc, #24]	@ (8017548 <tcpip_thread_handle_msg+0x8c>)
 8017530:	f00c f89a 	bl	8023668 <iprintf>
      break;
 8017534:	bf00      	nop
  }
}
 8017536:	bf00      	nop
 8017538:	3708      	adds	r7, #8
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}
 801753e:	bf00      	nop
 8017540:	08025488 	.word	0x08025488
 8017544:	080254b8 	.word	0x080254b8
 8017548:	080254d8 	.word	0x080254d8

0801754c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b086      	sub	sp, #24
 8017550:	af00      	add	r7, sp, #0
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017558:	481a      	ldr	r0, [pc, #104]	@ (80175c4 <tcpip_inpkt+0x78>)
 801755a:	f00b fa10 	bl	802297e <sys_mbox_valid>
 801755e:	4603      	mov	r3, r0
 8017560:	2b00      	cmp	r3, #0
 8017562:	d105      	bne.n	8017570 <tcpip_inpkt+0x24>
 8017564:	4b18      	ldr	r3, [pc, #96]	@ (80175c8 <tcpip_inpkt+0x7c>)
 8017566:	22fc      	movs	r2, #252	@ 0xfc
 8017568:	4918      	ldr	r1, [pc, #96]	@ (80175cc <tcpip_inpkt+0x80>)
 801756a:	4819      	ldr	r0, [pc, #100]	@ (80175d0 <tcpip_inpkt+0x84>)
 801756c:	f00c f87c 	bl	8023668 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017570:	2009      	movs	r0, #9
 8017572:	f000 fdd9 	bl	8018128 <memp_malloc>
 8017576:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d102      	bne.n	8017584 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801757e:	f04f 33ff 	mov.w	r3, #4294967295
 8017582:	e01a      	b.n	80175ba <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	2200      	movs	r2, #0
 8017588:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801758a:	697b      	ldr	r3, [r7, #20]
 801758c:	68fa      	ldr	r2, [r7, #12]
 801758e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	68ba      	ldr	r2, [r7, #8]
 8017594:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8017596:	697b      	ldr	r3, [r7, #20]
 8017598:	687a      	ldr	r2, [r7, #4]
 801759a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801759c:	6979      	ldr	r1, [r7, #20]
 801759e:	4809      	ldr	r0, [pc, #36]	@ (80175c4 <tcpip_inpkt+0x78>)
 80175a0:	f00b f978 	bl	8022894 <sys_mbox_trypost>
 80175a4:	4603      	mov	r3, r0
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d006      	beq.n	80175b8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80175aa:	6979      	ldr	r1, [r7, #20]
 80175ac:	2009      	movs	r0, #9
 80175ae:	f000 fe31 	bl	8018214 <memp_free>
    return ERR_MEM;
 80175b2:	f04f 33ff 	mov.w	r3, #4294967295
 80175b6:	e000      	b.n	80175ba <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80175b8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3718      	adds	r7, #24
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	2000dbac 	.word	0x2000dbac
 80175c8:	08025488 	.word	0x08025488
 80175cc:	08025500 	.word	0x08025500
 80175d0:	080254d8 	.word	0x080254d8

080175d4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80175e4:	f003 0318 	and.w	r3, r3, #24
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d006      	beq.n	80175fa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80175ec:	4a08      	ldr	r2, [pc, #32]	@ (8017610 <tcpip_input+0x3c>)
 80175ee:	6839      	ldr	r1, [r7, #0]
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7ff ffab 	bl	801754c <tcpip_inpkt>
 80175f6:	4603      	mov	r3, r0
 80175f8:	e005      	b.n	8017606 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80175fa:	4a06      	ldr	r2, [pc, #24]	@ (8017614 <tcpip_input+0x40>)
 80175fc:	6839      	ldr	r1, [r7, #0]
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	f7ff ffa4 	bl	801754c <tcpip_inpkt>
 8017604:	4603      	mov	r3, r0
}
 8017606:	4618      	mov	r0, r3
 8017608:	3708      	adds	r7, #8
 801760a:	46bd      	mov	sp, r7
 801760c:	bd80      	pop	{r7, pc}
 801760e:	bf00      	nop
 8017610:	08022681 	.word	0x08022681
 8017614:	08021469 	.word	0x08021469

08017618 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b084      	sub	sp, #16
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017622:	4819      	ldr	r0, [pc, #100]	@ (8017688 <tcpip_try_callback+0x70>)
 8017624:	f00b f9ab 	bl	802297e <sys_mbox_valid>
 8017628:	4603      	mov	r3, r0
 801762a:	2b00      	cmp	r3, #0
 801762c:	d106      	bne.n	801763c <tcpip_try_callback+0x24>
 801762e:	4b17      	ldr	r3, [pc, #92]	@ (801768c <tcpip_try_callback+0x74>)
 8017630:	f240 125d 	movw	r2, #349	@ 0x15d
 8017634:	4916      	ldr	r1, [pc, #88]	@ (8017690 <tcpip_try_callback+0x78>)
 8017636:	4817      	ldr	r0, [pc, #92]	@ (8017694 <tcpip_try_callback+0x7c>)
 8017638:	f00c f816 	bl	8023668 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801763c:	2008      	movs	r0, #8
 801763e:	f000 fd73 	bl	8018128 <memp_malloc>
 8017642:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d102      	bne.n	8017650 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801764a:	f04f 33ff 	mov.w	r3, #4294967295
 801764e:	e017      	b.n	8017680 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2201      	movs	r2, #1
 8017654:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	687a      	ldr	r2, [r7, #4]
 801765a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	683a      	ldr	r2, [r7, #0]
 8017660:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017662:	68f9      	ldr	r1, [r7, #12]
 8017664:	4808      	ldr	r0, [pc, #32]	@ (8017688 <tcpip_try_callback+0x70>)
 8017666:	f00b f915 	bl	8022894 <sys_mbox_trypost>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	d006      	beq.n	801767e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017670:	68f9      	ldr	r1, [r7, #12]
 8017672:	2008      	movs	r0, #8
 8017674:	f000 fdce 	bl	8018214 <memp_free>
    return ERR_MEM;
 8017678:	f04f 33ff 	mov.w	r3, #4294967295
 801767c:	e000      	b.n	8017680 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801767e:	2300      	movs	r3, #0
}
 8017680:	4618      	mov	r0, r3
 8017682:	3710      	adds	r7, #16
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	2000dbac 	.word	0x2000dbac
 801768c:	08025488 	.word	0x08025488
 8017690:	08025500 	.word	0x08025500
 8017694:	080254d8 	.word	0x080254d8

08017698 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b084      	sub	sp, #16
 801769c:	af00      	add	r7, sp, #0
 801769e:	60f8      	str	r0, [r7, #12]
 80176a0:	60b9      	str	r1, [r7, #8]
 80176a2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80176a4:	4806      	ldr	r0, [pc, #24]	@ (80176c0 <tcpip_send_msg_wait_sem+0x28>)
 80176a6:	f00b fa43 	bl	8022b30 <sys_mutex_lock>
  fn(apimsg);
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	68b8      	ldr	r0, [r7, #8]
 80176ae:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80176b0:	4803      	ldr	r0, [pc, #12]	@ (80176c0 <tcpip_send_msg_wait_sem+0x28>)
 80176b2:	f00b fa4c 	bl	8022b4e <sys_mutex_unlock>
  return ERR_OK;
 80176b6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	3710      	adds	r7, #16
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	2000dbb0 	.word	0x2000dbb0

080176c4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b084      	sub	sp, #16
 80176c8:	af02      	add	r7, sp, #8
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80176ce:	f000 f871 	bl	80177b4 <lwip_init>

  tcpip_init_done = initfunc;
 80176d2:	4a17      	ldr	r2, [pc, #92]	@ (8017730 <tcpip_init+0x6c>)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80176d8:	4a16      	ldr	r2, [pc, #88]	@ (8017734 <tcpip_init+0x70>)
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80176de:	2106      	movs	r1, #6
 80176e0:	4815      	ldr	r0, [pc, #84]	@ (8017738 <tcpip_init+0x74>)
 80176e2:	f00b f8a3 	bl	802282c <sys_mbox_new>
 80176e6:	4603      	mov	r3, r0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d006      	beq.n	80176fa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80176ec:	4b13      	ldr	r3, [pc, #76]	@ (801773c <tcpip_init+0x78>)
 80176ee:	f240 2261 	movw	r2, #609	@ 0x261
 80176f2:	4913      	ldr	r1, [pc, #76]	@ (8017740 <tcpip_init+0x7c>)
 80176f4:	4813      	ldr	r0, [pc, #76]	@ (8017744 <tcpip_init+0x80>)
 80176f6:	f00b ffb7 	bl	8023668 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80176fa:	4813      	ldr	r0, [pc, #76]	@ (8017748 <tcpip_init+0x84>)
 80176fc:	f00b f9fc 	bl	8022af8 <sys_mutex_new>
 8017700:	4603      	mov	r3, r0
 8017702:	2b00      	cmp	r3, #0
 8017704:	d006      	beq.n	8017714 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8017706:	4b0d      	ldr	r3, [pc, #52]	@ (801773c <tcpip_init+0x78>)
 8017708:	f240 2265 	movw	r2, #613	@ 0x265
 801770c:	490f      	ldr	r1, [pc, #60]	@ (801774c <tcpip_init+0x88>)
 801770e:	480d      	ldr	r0, [pc, #52]	@ (8017744 <tcpip_init+0x80>)
 8017710:	f00b ffaa 	bl	8023668 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8017714:	2300      	movs	r3, #0
 8017716:	9300      	str	r3, [sp, #0]
 8017718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801771c:	2200      	movs	r2, #0
 801771e:	490c      	ldr	r1, [pc, #48]	@ (8017750 <tcpip_init+0x8c>)
 8017720:	480c      	ldr	r0, [pc, #48]	@ (8017754 <tcpip_init+0x90>)
 8017722:	f00b fa21 	bl	8022b68 <sys_thread_new>
}
 8017726:	bf00      	nop
 8017728:	3708      	adds	r7, #8
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	2000dba4 	.word	0x2000dba4
 8017734:	2000dba8 	.word	0x2000dba8
 8017738:	2000dbac 	.word	0x2000dbac
 801773c:	08025488 	.word	0x08025488
 8017740:	08025510 	.word	0x08025510
 8017744:	080254d8 	.word	0x080254d8
 8017748:	2000dbb0 	.word	0x2000dbb0
 801774c:	08025534 	.word	0x08025534
 8017750:	08017455 	.word	0x08017455
 8017754:	08025558 	.word	0x08025558

08017758 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8017758:	b480      	push	{r7}
 801775a:	b083      	sub	sp, #12
 801775c:	af00      	add	r7, sp, #0
 801775e:	4603      	mov	r3, r0
 8017760:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8017762:	88fb      	ldrh	r3, [r7, #6]
 8017764:	021b      	lsls	r3, r3, #8
 8017766:	b21a      	sxth	r2, r3
 8017768:	88fb      	ldrh	r3, [r7, #6]
 801776a:	0a1b      	lsrs	r3, r3, #8
 801776c:	b29b      	uxth	r3, r3
 801776e:	b21b      	sxth	r3, r3
 8017770:	4313      	orrs	r3, r2
 8017772:	b21b      	sxth	r3, r3
 8017774:	b29b      	uxth	r3, r3
}
 8017776:	4618      	mov	r0, r3
 8017778:	370c      	adds	r7, #12
 801777a:	46bd      	mov	sp, r7
 801777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017780:	4770      	bx	lr

08017782 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8017782:	b480      	push	{r7}
 8017784:	b083      	sub	sp, #12
 8017786:	af00      	add	r7, sp, #0
 8017788:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	061a      	lsls	r2, r3, #24
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	021b      	lsls	r3, r3, #8
 8017792:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8017796:	431a      	orrs	r2, r3
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	0a1b      	lsrs	r3, r3, #8
 801779c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80177a0:	431a      	orrs	r2, r3
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	0e1b      	lsrs	r3, r3, #24
 80177a6:	4313      	orrs	r3, r2
}
 80177a8:	4618      	mov	r0, r3
 80177aa:	370c      	adds	r7, #12
 80177ac:	46bd      	mov	sp, r7
 80177ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b2:	4770      	bx	lr

080177b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80177ba:	2300      	movs	r3, #0
 80177bc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80177be:	f00b f98d 	bl	8022adc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80177c2:	f000 f8d9 	bl	8017978 <mem_init>
  memp_init();
 80177c6:	f000 fc41 	bl	801804c <memp_init>
  pbuf_init();
  netif_init();
 80177ca:	f000 fd4d 	bl	8018268 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80177ce:	f008 f9d7 	bl	801fb80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80177d2:	f001 ff7d 	bl	80196d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80177d6:	f008 f919 	bl	801fa0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80177da:	bf00      	nop
 80177dc:	3708      	adds	r7, #8
 80177de:	46bd      	mov	sp, r7
 80177e0:	bd80      	pop	{r7, pc}
	...

080177e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80177e4:	b480      	push	{r7}
 80177e6:	b083      	sub	sp, #12
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	4603      	mov	r3, r0
 80177ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80177ee:	4b05      	ldr	r3, [pc, #20]	@ (8017804 <ptr_to_mem+0x20>)
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	88fb      	ldrh	r3, [r7, #6]
 80177f4:	4413      	add	r3, r2
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	370c      	adds	r7, #12
 80177fa:	46bd      	mov	sp, r7
 80177fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017800:	4770      	bx	lr
 8017802:	bf00      	nop
 8017804:	20011bc8 	.word	0x20011bc8

08017808 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8017808:	b480      	push	{r7}
 801780a:	b083      	sub	sp, #12
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8017810:	4b05      	ldr	r3, [pc, #20]	@ (8017828 <mem_to_ptr+0x20>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	687a      	ldr	r2, [r7, #4]
 8017816:	1ad3      	subs	r3, r2, r3
 8017818:	b29b      	uxth	r3, r3
}
 801781a:	4618      	mov	r0, r3
 801781c:	370c      	adds	r7, #12
 801781e:	46bd      	mov	sp, r7
 8017820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017824:	4770      	bx	lr
 8017826:	bf00      	nop
 8017828:	20011bc8 	.word	0x20011bc8

0801782c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801782c:	b590      	push	{r4, r7, lr}
 801782e:	b085      	sub	sp, #20
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017834:	4b47      	ldr	r3, [pc, #284]	@ (8017954 <plug_holes+0x128>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	687a      	ldr	r2, [r7, #4]
 801783a:	429a      	cmp	r2, r3
 801783c:	d206      	bcs.n	801784c <plug_holes+0x20>
 801783e:	4b46      	ldr	r3, [pc, #280]	@ (8017958 <plug_holes+0x12c>)
 8017840:	f240 12df 	movw	r2, #479	@ 0x1df
 8017844:	4945      	ldr	r1, [pc, #276]	@ (801795c <plug_holes+0x130>)
 8017846:	4846      	ldr	r0, [pc, #280]	@ (8017960 <plug_holes+0x134>)
 8017848:	f00b ff0e 	bl	8023668 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801784c:	4b45      	ldr	r3, [pc, #276]	@ (8017964 <plug_holes+0x138>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	687a      	ldr	r2, [r7, #4]
 8017852:	429a      	cmp	r2, r3
 8017854:	d306      	bcc.n	8017864 <plug_holes+0x38>
 8017856:	4b40      	ldr	r3, [pc, #256]	@ (8017958 <plug_holes+0x12c>)
 8017858:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801785c:	4942      	ldr	r1, [pc, #264]	@ (8017968 <plug_holes+0x13c>)
 801785e:	4840      	ldr	r0, [pc, #256]	@ (8017960 <plug_holes+0x134>)
 8017860:	f00b ff02 	bl	8023668 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	791b      	ldrb	r3, [r3, #4]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d006      	beq.n	801787a <plug_holes+0x4e>
 801786c:	4b3a      	ldr	r3, [pc, #232]	@ (8017958 <plug_holes+0x12c>)
 801786e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8017872:	493e      	ldr	r1, [pc, #248]	@ (801796c <plug_holes+0x140>)
 8017874:	483a      	ldr	r0, [pc, #232]	@ (8017960 <plug_holes+0x134>)
 8017876:	f00b fef7 	bl	8023668 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	881b      	ldrh	r3, [r3, #0]
 801787e:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017882:	4293      	cmp	r3, r2
 8017884:	d906      	bls.n	8017894 <plug_holes+0x68>
 8017886:	4b34      	ldr	r3, [pc, #208]	@ (8017958 <plug_holes+0x12c>)
 8017888:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801788c:	4938      	ldr	r1, [pc, #224]	@ (8017970 <plug_holes+0x144>)
 801788e:	4834      	ldr	r0, [pc, #208]	@ (8017960 <plug_holes+0x134>)
 8017890:	f00b feea 	bl	8023668 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	881b      	ldrh	r3, [r3, #0]
 8017898:	4618      	mov	r0, r3
 801789a:	f7ff ffa3 	bl	80177e4 <ptr_to_mem>
 801789e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80178a0:	687a      	ldr	r2, [r7, #4]
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d025      	beq.n	80178f4 <plug_holes+0xc8>
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	791b      	ldrb	r3, [r3, #4]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d121      	bne.n	80178f4 <plug_holes+0xc8>
 80178b0:	4b2c      	ldr	r3, [pc, #176]	@ (8017964 <plug_holes+0x138>)
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	68fa      	ldr	r2, [r7, #12]
 80178b6:	429a      	cmp	r2, r3
 80178b8:	d01c      	beq.n	80178f4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80178ba:	4b2e      	ldr	r3, [pc, #184]	@ (8017974 <plug_holes+0x148>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	68fa      	ldr	r2, [r7, #12]
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d102      	bne.n	80178ca <plug_holes+0x9e>
      lfree = mem;
 80178c4:	4a2b      	ldr	r2, [pc, #172]	@ (8017974 <plug_holes+0x148>)
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	881a      	ldrh	r2, [r3, #0]
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	881b      	ldrh	r3, [r3, #0]
 80178d6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80178da:	4293      	cmp	r3, r2
 80178dc:	d00a      	beq.n	80178f4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	881b      	ldrh	r3, [r3, #0]
 80178e2:	4618      	mov	r0, r3
 80178e4:	f7ff ff7e 	bl	80177e4 <ptr_to_mem>
 80178e8:	4604      	mov	r4, r0
 80178ea:	6878      	ldr	r0, [r7, #4]
 80178ec:	f7ff ff8c 	bl	8017808 <mem_to_ptr>
 80178f0:	4603      	mov	r3, r0
 80178f2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	885b      	ldrh	r3, [r3, #2]
 80178f8:	4618      	mov	r0, r3
 80178fa:	f7ff ff73 	bl	80177e4 <ptr_to_mem>
 80178fe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8017900:	68ba      	ldr	r2, [r7, #8]
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	429a      	cmp	r2, r3
 8017906:	d020      	beq.n	801794a <plug_holes+0x11e>
 8017908:	68bb      	ldr	r3, [r7, #8]
 801790a:	791b      	ldrb	r3, [r3, #4]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d11c      	bne.n	801794a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017910:	4b18      	ldr	r3, [pc, #96]	@ (8017974 <plug_holes+0x148>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	687a      	ldr	r2, [r7, #4]
 8017916:	429a      	cmp	r2, r3
 8017918:	d102      	bne.n	8017920 <plug_holes+0xf4>
      lfree = pmem;
 801791a:	4a16      	ldr	r2, [pc, #88]	@ (8017974 <plug_holes+0x148>)
 801791c:	68bb      	ldr	r3, [r7, #8]
 801791e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	881a      	ldrh	r2, [r3, #0]
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	881b      	ldrh	r3, [r3, #0]
 801792c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017930:	4293      	cmp	r3, r2
 8017932:	d00a      	beq.n	801794a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	881b      	ldrh	r3, [r3, #0]
 8017938:	4618      	mov	r0, r3
 801793a:	f7ff ff53 	bl	80177e4 <ptr_to_mem>
 801793e:	4604      	mov	r4, r0
 8017940:	68b8      	ldr	r0, [r7, #8]
 8017942:	f7ff ff61 	bl	8017808 <mem_to_ptr>
 8017946:	4603      	mov	r3, r0
 8017948:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801794a:	bf00      	nop
 801794c:	3714      	adds	r7, #20
 801794e:	46bd      	mov	sp, r7
 8017950:	bd90      	pop	{r4, r7, pc}
 8017952:	bf00      	nop
 8017954:	20011bc8 	.word	0x20011bc8
 8017958:	08025568 	.word	0x08025568
 801795c:	08025598 	.word	0x08025598
 8017960:	080255b0 	.word	0x080255b0
 8017964:	20011bcc 	.word	0x20011bcc
 8017968:	080255d8 	.word	0x080255d8
 801796c:	080255f4 	.word	0x080255f4
 8017970:	08025610 	.word	0x08025610
 8017974:	20011bd4 	.word	0x20011bd4

08017978 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b082      	sub	sp, #8
 801797c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801797e:	4b1f      	ldr	r3, [pc, #124]	@ (80179fc <mem_init+0x84>)
 8017980:	3303      	adds	r3, #3
 8017982:	f023 0303 	bic.w	r3, r3, #3
 8017986:	461a      	mov	r2, r3
 8017988:	4b1d      	ldr	r3, [pc, #116]	@ (8017a00 <mem_init+0x88>)
 801798a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801798c:	4b1c      	ldr	r3, [pc, #112]	@ (8017a00 <mem_init+0x88>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017998:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2200      	movs	r2, #0
 801799e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2200      	movs	r2, #0
 80179a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80179a6:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 80179aa:	f7ff ff1b 	bl	80177e4 <ptr_to_mem>
 80179ae:	4603      	mov	r3, r0
 80179b0:	4a14      	ldr	r2, [pc, #80]	@ (8017a04 <mem_init+0x8c>)
 80179b2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80179b4:	4b13      	ldr	r3, [pc, #76]	@ (8017a04 <mem_init+0x8c>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	2201      	movs	r2, #1
 80179ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80179bc:	4b11      	ldr	r3, [pc, #68]	@ (8017a04 <mem_init+0x8c>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80179c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80179c6:	4b0f      	ldr	r3, [pc, #60]	@ (8017a04 <mem_init+0x8c>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 80179ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80179d0:	4b0b      	ldr	r3, [pc, #44]	@ (8017a00 <mem_init+0x88>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	4a0c      	ldr	r2, [pc, #48]	@ (8017a08 <mem_init+0x90>)
 80179d6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80179d8:	480c      	ldr	r0, [pc, #48]	@ (8017a0c <mem_init+0x94>)
 80179da:	f00b f88d 	bl	8022af8 <sys_mutex_new>
 80179de:	4603      	mov	r3, r0
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d006      	beq.n	80179f2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80179e4:	4b0a      	ldr	r3, [pc, #40]	@ (8017a10 <mem_init+0x98>)
 80179e6:	f240 221f 	movw	r2, #543	@ 0x21f
 80179ea:	490a      	ldr	r1, [pc, #40]	@ (8017a14 <mem_init+0x9c>)
 80179ec:	480a      	ldr	r0, [pc, #40]	@ (8017a18 <mem_init+0xa0>)
 80179ee:	f00b fe3b 	bl	8023668 <iprintf>
  }
}
 80179f2:	bf00      	nop
 80179f4:	3708      	adds	r7, #8
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
 80179fa:	bf00      	nop
 80179fc:	2000dbcc 	.word	0x2000dbcc
 8017a00:	20011bc8 	.word	0x20011bc8
 8017a04:	20011bcc 	.word	0x20011bcc
 8017a08:	20011bd4 	.word	0x20011bd4
 8017a0c:	20011bd0 	.word	0x20011bd0
 8017a10:	08025568 	.word	0x08025568
 8017a14:	0802563c 	.word	0x0802563c
 8017a18:	080255b0 	.word	0x080255b0

08017a1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b086      	sub	sp, #24
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8017a24:	6878      	ldr	r0, [r7, #4]
 8017a26:	f7ff feef 	bl	8017808 <mem_to_ptr>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	881b      	ldrh	r3, [r3, #0]
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7ff fed6 	bl	80177e4 <ptr_to_mem>
 8017a38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	885b      	ldrh	r3, [r3, #2]
 8017a3e:	4618      	mov	r0, r3
 8017a40:	f7ff fed0 	bl	80177e4 <ptr_to_mem>
 8017a44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	881b      	ldrh	r3, [r3, #0]
 8017a4a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	d819      	bhi.n	8017a86 <mem_link_valid+0x6a>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	885b      	ldrh	r3, [r3, #2]
 8017a56:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017a5a:	4293      	cmp	r3, r2
 8017a5c:	d813      	bhi.n	8017a86 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017a62:	8afa      	ldrh	r2, [r7, #22]
 8017a64:	429a      	cmp	r2, r3
 8017a66:	d004      	beq.n	8017a72 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	881b      	ldrh	r3, [r3, #0]
 8017a6c:	8afa      	ldrh	r2, [r7, #22]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d109      	bne.n	8017a86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017a72:	4b08      	ldr	r3, [pc, #32]	@ (8017a94 <mem_link_valid+0x78>)
 8017a74:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017a76:	693a      	ldr	r2, [r7, #16]
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d006      	beq.n	8017a8a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017a7c:	693b      	ldr	r3, [r7, #16]
 8017a7e:	885b      	ldrh	r3, [r3, #2]
 8017a80:	8afa      	ldrh	r2, [r7, #22]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d001      	beq.n	8017a8a <mem_link_valid+0x6e>
    return 0;
 8017a86:	2300      	movs	r3, #0
 8017a88:	e000      	b.n	8017a8c <mem_link_valid+0x70>
  }
  return 1;
 8017a8a:	2301      	movs	r3, #1
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3718      	adds	r7, #24
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}
 8017a94:	20011bcc 	.word	0x20011bcc

08017a98 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b088      	sub	sp, #32
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d070      	beq.n	8017b88 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f003 0303 	and.w	r3, r3, #3
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d00d      	beq.n	8017acc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8017ab0:	4b37      	ldr	r3, [pc, #220]	@ (8017b90 <mem_free+0xf8>)
 8017ab2:	f240 2273 	movw	r2, #627	@ 0x273
 8017ab6:	4937      	ldr	r1, [pc, #220]	@ (8017b94 <mem_free+0xfc>)
 8017ab8:	4837      	ldr	r0, [pc, #220]	@ (8017b98 <mem_free+0x100>)
 8017aba:	f00b fdd5 	bl	8023668 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017abe:	f00b f879 	bl	8022bb4 <sys_arch_protect>
 8017ac2:	60f8      	str	r0, [r7, #12]
 8017ac4:	68f8      	ldr	r0, [r7, #12]
 8017ac6:	f00b f883 	bl	8022bd0 <sys_arch_unprotect>
    return;
 8017aca:	e05e      	b.n	8017b8a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	3b08      	subs	r3, #8
 8017ad0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8017ad2:	4b32      	ldr	r3, [pc, #200]	@ (8017b9c <mem_free+0x104>)
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	69fa      	ldr	r2, [r7, #28]
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d306      	bcc.n	8017aea <mem_free+0x52>
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f103 020c 	add.w	r2, r3, #12
 8017ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8017ba0 <mem_free+0x108>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d90d      	bls.n	8017b06 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8017aea:	4b29      	ldr	r3, [pc, #164]	@ (8017b90 <mem_free+0xf8>)
 8017aec:	f240 227f 	movw	r2, #639	@ 0x27f
 8017af0:	492c      	ldr	r1, [pc, #176]	@ (8017ba4 <mem_free+0x10c>)
 8017af2:	4829      	ldr	r0, [pc, #164]	@ (8017b98 <mem_free+0x100>)
 8017af4:	f00b fdb8 	bl	8023668 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017af8:	f00b f85c 	bl	8022bb4 <sys_arch_protect>
 8017afc:	6138      	str	r0, [r7, #16]
 8017afe:	6938      	ldr	r0, [r7, #16]
 8017b00:	f00b f866 	bl	8022bd0 <sys_arch_unprotect>
    return;
 8017b04:	e041      	b.n	8017b8a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017b06:	4828      	ldr	r0, [pc, #160]	@ (8017ba8 <mem_free+0x110>)
 8017b08:	f00b f812 	bl	8022b30 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	791b      	ldrb	r3, [r3, #4]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d110      	bne.n	8017b36 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8017b14:	4b1e      	ldr	r3, [pc, #120]	@ (8017b90 <mem_free+0xf8>)
 8017b16:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8017b1a:	4924      	ldr	r1, [pc, #144]	@ (8017bac <mem_free+0x114>)
 8017b1c:	481e      	ldr	r0, [pc, #120]	@ (8017b98 <mem_free+0x100>)
 8017b1e:	f00b fda3 	bl	8023668 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017b22:	4821      	ldr	r0, [pc, #132]	@ (8017ba8 <mem_free+0x110>)
 8017b24:	f00b f813 	bl	8022b4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017b28:	f00b f844 	bl	8022bb4 <sys_arch_protect>
 8017b2c:	6178      	str	r0, [r7, #20]
 8017b2e:	6978      	ldr	r0, [r7, #20]
 8017b30:	f00b f84e 	bl	8022bd0 <sys_arch_unprotect>
    return;
 8017b34:	e029      	b.n	8017b8a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8017b36:	69f8      	ldr	r0, [r7, #28]
 8017b38:	f7ff ff70 	bl	8017a1c <mem_link_valid>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d110      	bne.n	8017b64 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8017b42:	4b13      	ldr	r3, [pc, #76]	@ (8017b90 <mem_free+0xf8>)
 8017b44:	f240 2295 	movw	r2, #661	@ 0x295
 8017b48:	4919      	ldr	r1, [pc, #100]	@ (8017bb0 <mem_free+0x118>)
 8017b4a:	4813      	ldr	r0, [pc, #76]	@ (8017b98 <mem_free+0x100>)
 8017b4c:	f00b fd8c 	bl	8023668 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017b50:	4815      	ldr	r0, [pc, #84]	@ (8017ba8 <mem_free+0x110>)
 8017b52:	f00a fffc 	bl	8022b4e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017b56:	f00b f82d 	bl	8022bb4 <sys_arch_protect>
 8017b5a:	61b8      	str	r0, [r7, #24]
 8017b5c:	69b8      	ldr	r0, [r7, #24]
 8017b5e:	f00b f837 	bl	8022bd0 <sys_arch_unprotect>
    return;
 8017b62:	e012      	b.n	8017b8a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8017b64:	69fb      	ldr	r3, [r7, #28]
 8017b66:	2200      	movs	r2, #0
 8017b68:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8017b6a:	4b12      	ldr	r3, [pc, #72]	@ (8017bb4 <mem_free+0x11c>)
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	69fa      	ldr	r2, [r7, #28]
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d202      	bcs.n	8017b7a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017b74:	4a0f      	ldr	r2, [pc, #60]	@ (8017bb4 <mem_free+0x11c>)
 8017b76:	69fb      	ldr	r3, [r7, #28]
 8017b78:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017b7a:	69f8      	ldr	r0, [r7, #28]
 8017b7c:	f7ff fe56 	bl	801782c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017b80:	4809      	ldr	r0, [pc, #36]	@ (8017ba8 <mem_free+0x110>)
 8017b82:	f00a ffe4 	bl	8022b4e <sys_mutex_unlock>
 8017b86:	e000      	b.n	8017b8a <mem_free+0xf2>
    return;
 8017b88:	bf00      	nop
}
 8017b8a:	3720      	adds	r7, #32
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	08025568 	.word	0x08025568
 8017b94:	08025658 	.word	0x08025658
 8017b98:	080255b0 	.word	0x080255b0
 8017b9c:	20011bc8 	.word	0x20011bc8
 8017ba0:	20011bcc 	.word	0x20011bcc
 8017ba4:	0802567c 	.word	0x0802567c
 8017ba8:	20011bd0 	.word	0x20011bd0
 8017bac:	08025698 	.word	0x08025698
 8017bb0:	080256c0 	.word	0x080256c0
 8017bb4:	20011bd4 	.word	0x20011bd4

08017bb8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b088      	sub	sp, #32
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	460b      	mov	r3, r1
 8017bc2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8017bc4:	887b      	ldrh	r3, [r7, #2]
 8017bc6:	3303      	adds	r3, #3
 8017bc8:	b29b      	uxth	r3, r3
 8017bca:	f023 0303 	bic.w	r3, r3, #3
 8017bce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017bd0:	8bfb      	ldrh	r3, [r7, #30]
 8017bd2:	2b0b      	cmp	r3, #11
 8017bd4:	d801      	bhi.n	8017bda <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017bd6:	230c      	movs	r3, #12
 8017bd8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8017bda:	8bfb      	ldrh	r3, [r7, #30]
 8017bdc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017be0:	4293      	cmp	r3, r2
 8017be2:	d803      	bhi.n	8017bec <mem_trim+0x34>
 8017be4:	8bfa      	ldrh	r2, [r7, #30]
 8017be6:	887b      	ldrh	r3, [r7, #2]
 8017be8:	429a      	cmp	r2, r3
 8017bea:	d201      	bcs.n	8017bf0 <mem_trim+0x38>
    return NULL;
 8017bec:	2300      	movs	r3, #0
 8017bee:	e0dc      	b.n	8017daa <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017bf0:	4b70      	ldr	r3, [pc, #448]	@ (8017db4 <mem_trim+0x1fc>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	687a      	ldr	r2, [r7, #4]
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d304      	bcc.n	8017c04 <mem_trim+0x4c>
 8017bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8017db8 <mem_trim+0x200>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d306      	bcc.n	8017c12 <mem_trim+0x5a>
 8017c04:	4b6d      	ldr	r3, [pc, #436]	@ (8017dbc <mem_trim+0x204>)
 8017c06:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017c0a:	496d      	ldr	r1, [pc, #436]	@ (8017dc0 <mem_trim+0x208>)
 8017c0c:	486d      	ldr	r0, [pc, #436]	@ (8017dc4 <mem_trim+0x20c>)
 8017c0e:	f00b fd2b 	bl	8023668 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017c12:	4b68      	ldr	r3, [pc, #416]	@ (8017db4 <mem_trim+0x1fc>)
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	687a      	ldr	r2, [r7, #4]
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d304      	bcc.n	8017c26 <mem_trim+0x6e>
 8017c1c:	4b66      	ldr	r3, [pc, #408]	@ (8017db8 <mem_trim+0x200>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d307      	bcc.n	8017c36 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017c26:	f00a ffc5 	bl	8022bb4 <sys_arch_protect>
 8017c2a:	60b8      	str	r0, [r7, #8]
 8017c2c:	68b8      	ldr	r0, [r7, #8]
 8017c2e:	f00a ffcf 	bl	8022bd0 <sys_arch_unprotect>
    return rmem;
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	e0b9      	b.n	8017daa <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	3b08      	subs	r3, #8
 8017c3a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017c3c:	69b8      	ldr	r0, [r7, #24]
 8017c3e:	f7ff fde3 	bl	8017808 <mem_to_ptr>
 8017c42:	4603      	mov	r3, r0
 8017c44:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	881a      	ldrh	r2, [r3, #0]
 8017c4a:	8afb      	ldrh	r3, [r7, #22]
 8017c4c:	1ad3      	subs	r3, r2, r3
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	3b08      	subs	r3, #8
 8017c52:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017c54:	8bfa      	ldrh	r2, [r7, #30]
 8017c56:	8abb      	ldrh	r3, [r7, #20]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d906      	bls.n	8017c6a <mem_trim+0xb2>
 8017c5c:	4b57      	ldr	r3, [pc, #348]	@ (8017dbc <mem_trim+0x204>)
 8017c5e:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8017c62:	4959      	ldr	r1, [pc, #356]	@ (8017dc8 <mem_trim+0x210>)
 8017c64:	4857      	ldr	r0, [pc, #348]	@ (8017dc4 <mem_trim+0x20c>)
 8017c66:	f00b fcff 	bl	8023668 <iprintf>
  if (newsize > size) {
 8017c6a:	8bfa      	ldrh	r2, [r7, #30]
 8017c6c:	8abb      	ldrh	r3, [r7, #20]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d901      	bls.n	8017c76 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8017c72:	2300      	movs	r3, #0
 8017c74:	e099      	b.n	8017daa <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8017c76:	8bfa      	ldrh	r2, [r7, #30]
 8017c78:	8abb      	ldrh	r3, [r7, #20]
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d101      	bne.n	8017c82 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	e093      	b.n	8017daa <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017c82:	4852      	ldr	r0, [pc, #328]	@ (8017dcc <mem_trim+0x214>)
 8017c84:	f00a ff54 	bl	8022b30 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8017c88:	69bb      	ldr	r3, [r7, #24]
 8017c8a:	881b      	ldrh	r3, [r3, #0]
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f7ff fda9 	bl	80177e4 <ptr_to_mem>
 8017c92:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8017c94:	693b      	ldr	r3, [r7, #16]
 8017c96:	791b      	ldrb	r3, [r3, #4]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d141      	bne.n	8017d20 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017c9c:	69bb      	ldr	r3, [r7, #24]
 8017c9e:	881b      	ldrh	r3, [r3, #0]
 8017ca0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017ca4:	4293      	cmp	r3, r2
 8017ca6:	d106      	bne.n	8017cb6 <mem_trim+0xfe>
 8017ca8:	4b44      	ldr	r3, [pc, #272]	@ (8017dbc <mem_trim+0x204>)
 8017caa:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8017cae:	4948      	ldr	r1, [pc, #288]	@ (8017dd0 <mem_trim+0x218>)
 8017cb0:	4844      	ldr	r0, [pc, #272]	@ (8017dc4 <mem_trim+0x20c>)
 8017cb2:	f00b fcd9 	bl	8023668 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8017cb6:	693b      	ldr	r3, [r7, #16]
 8017cb8:	881b      	ldrh	r3, [r3, #0]
 8017cba:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017cbc:	8afa      	ldrh	r2, [r7, #22]
 8017cbe:	8bfb      	ldrh	r3, [r7, #30]
 8017cc0:	4413      	add	r3, r2
 8017cc2:	b29b      	uxth	r3, r3
 8017cc4:	3308      	adds	r3, #8
 8017cc6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8017cc8:	4b42      	ldr	r3, [pc, #264]	@ (8017dd4 <mem_trim+0x21c>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	693a      	ldr	r2, [r7, #16]
 8017cce:	429a      	cmp	r2, r3
 8017cd0:	d106      	bne.n	8017ce0 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8017cd2:	89fb      	ldrh	r3, [r7, #14]
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7ff fd85 	bl	80177e4 <ptr_to_mem>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8017dd4 <mem_trim+0x21c>)
 8017cde:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017ce0:	89fb      	ldrh	r3, [r7, #14]
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f7ff fd7e 	bl	80177e4 <ptr_to_mem>
 8017ce8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	2200      	movs	r2, #0
 8017cee:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017cf0:	693b      	ldr	r3, [r7, #16]
 8017cf2:	89ba      	ldrh	r2, [r7, #12]
 8017cf4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8017cf6:	693b      	ldr	r3, [r7, #16]
 8017cf8:	8afa      	ldrh	r2, [r7, #22]
 8017cfa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017cfc:	69bb      	ldr	r3, [r7, #24]
 8017cfe:	89fa      	ldrh	r2, [r7, #14]
 8017d00:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017d02:	693b      	ldr	r3, [r7, #16]
 8017d04:	881b      	ldrh	r3, [r3, #0]
 8017d06:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	d049      	beq.n	8017da2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	881b      	ldrh	r3, [r3, #0]
 8017d12:	4618      	mov	r0, r3
 8017d14:	f7ff fd66 	bl	80177e4 <ptr_to_mem>
 8017d18:	4602      	mov	r2, r0
 8017d1a:	89fb      	ldrh	r3, [r7, #14]
 8017d1c:	8053      	strh	r3, [r2, #2]
 8017d1e:	e040      	b.n	8017da2 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017d20:	8bfb      	ldrh	r3, [r7, #30]
 8017d22:	f103 0214 	add.w	r2, r3, #20
 8017d26:	8abb      	ldrh	r3, [r7, #20]
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d83a      	bhi.n	8017da2 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017d2c:	8afa      	ldrh	r2, [r7, #22]
 8017d2e:	8bfb      	ldrh	r3, [r7, #30]
 8017d30:	4413      	add	r3, r2
 8017d32:	b29b      	uxth	r3, r3
 8017d34:	3308      	adds	r3, #8
 8017d36:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017d38:	69bb      	ldr	r3, [r7, #24]
 8017d3a:	881b      	ldrh	r3, [r3, #0]
 8017d3c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017d40:	4293      	cmp	r3, r2
 8017d42:	d106      	bne.n	8017d52 <mem_trim+0x19a>
 8017d44:	4b1d      	ldr	r3, [pc, #116]	@ (8017dbc <mem_trim+0x204>)
 8017d46:	f240 3216 	movw	r2, #790	@ 0x316
 8017d4a:	4921      	ldr	r1, [pc, #132]	@ (8017dd0 <mem_trim+0x218>)
 8017d4c:	481d      	ldr	r0, [pc, #116]	@ (8017dc4 <mem_trim+0x20c>)
 8017d4e:	f00b fc8b 	bl	8023668 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017d52:	89fb      	ldrh	r3, [r7, #14]
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7ff fd45 	bl	80177e4 <ptr_to_mem>
 8017d5a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8017d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8017dd4 <mem_trim+0x21c>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	693a      	ldr	r2, [r7, #16]
 8017d62:	429a      	cmp	r2, r3
 8017d64:	d202      	bcs.n	8017d6c <mem_trim+0x1b4>
      lfree = mem2;
 8017d66:	4a1b      	ldr	r2, [pc, #108]	@ (8017dd4 <mem_trim+0x21c>)
 8017d68:	693b      	ldr	r3, [r7, #16]
 8017d6a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8017d6c:	693b      	ldr	r3, [r7, #16]
 8017d6e:	2200      	movs	r2, #0
 8017d70:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	881a      	ldrh	r2, [r3, #0]
 8017d76:	693b      	ldr	r3, [r7, #16]
 8017d78:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8017d7a:	693b      	ldr	r3, [r7, #16]
 8017d7c:	8afa      	ldrh	r2, [r7, #22]
 8017d7e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8017d80:	69bb      	ldr	r3, [r7, #24]
 8017d82:	89fa      	ldrh	r2, [r7, #14]
 8017d84:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017d86:	693b      	ldr	r3, [r7, #16]
 8017d88:	881b      	ldrh	r3, [r3, #0]
 8017d8a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017d8e:	4293      	cmp	r3, r2
 8017d90:	d007      	beq.n	8017da2 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	881b      	ldrh	r3, [r3, #0]
 8017d96:	4618      	mov	r0, r3
 8017d98:	f7ff fd24 	bl	80177e4 <ptr_to_mem>
 8017d9c:	4602      	mov	r2, r0
 8017d9e:	89fb      	ldrh	r3, [r7, #14]
 8017da0:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017da2:	480a      	ldr	r0, [pc, #40]	@ (8017dcc <mem_trim+0x214>)
 8017da4:	f00a fed3 	bl	8022b4e <sys_mutex_unlock>
  return rmem;
 8017da8:	687b      	ldr	r3, [r7, #4]
}
 8017daa:	4618      	mov	r0, r3
 8017dac:	3720      	adds	r7, #32
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
 8017db2:	bf00      	nop
 8017db4:	20011bc8 	.word	0x20011bc8
 8017db8:	20011bcc 	.word	0x20011bcc
 8017dbc:	08025568 	.word	0x08025568
 8017dc0:	080256f4 	.word	0x080256f4
 8017dc4:	080255b0 	.word	0x080255b0
 8017dc8:	0802570c 	.word	0x0802570c
 8017dcc:	20011bd0 	.word	0x20011bd0
 8017dd0:	0802572c 	.word	0x0802572c
 8017dd4:	20011bd4 	.word	0x20011bd4

08017dd8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b088      	sub	sp, #32
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	4603      	mov	r3, r0
 8017de0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8017de2:	88fb      	ldrh	r3, [r7, #6]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d101      	bne.n	8017dec <mem_malloc+0x14>
    return NULL;
 8017de8:	2300      	movs	r3, #0
 8017dea:	e0e6      	b.n	8017fba <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8017dec:	88fb      	ldrh	r3, [r7, #6]
 8017dee:	3303      	adds	r3, #3
 8017df0:	b29b      	uxth	r3, r3
 8017df2:	f023 0303 	bic.w	r3, r3, #3
 8017df6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017df8:	8bbb      	ldrh	r3, [r7, #28]
 8017dfa:	2b0b      	cmp	r3, #11
 8017dfc:	d801      	bhi.n	8017e02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017dfe:	230c      	movs	r3, #12
 8017e00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8017e02:	8bbb      	ldrh	r3, [r7, #28]
 8017e04:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017e08:	4293      	cmp	r3, r2
 8017e0a:	d803      	bhi.n	8017e14 <mem_malloc+0x3c>
 8017e0c:	8bba      	ldrh	r2, [r7, #28]
 8017e0e:	88fb      	ldrh	r3, [r7, #6]
 8017e10:	429a      	cmp	r2, r3
 8017e12:	d201      	bcs.n	8017e18 <mem_malloc+0x40>
    return NULL;
 8017e14:	2300      	movs	r3, #0
 8017e16:	e0d0      	b.n	8017fba <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017e18:	486a      	ldr	r0, [pc, #424]	@ (8017fc4 <mem_malloc+0x1ec>)
 8017e1a:	f00a fe89 	bl	8022b30 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8017fc8 <mem_malloc+0x1f0>)
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7ff fcf0 	bl	8017808 <mem_to_ptr>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	83fb      	strh	r3, [r7, #30]
 8017e2c:	e0b9      	b.n	8017fa2 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017e2e:	8bfb      	ldrh	r3, [r7, #30]
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7ff fcd7 	bl	80177e4 <ptr_to_mem>
 8017e36:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017e38:	697b      	ldr	r3, [r7, #20]
 8017e3a:	791b      	ldrb	r3, [r3, #4]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f040 80a9 	bne.w	8017f94 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	881b      	ldrh	r3, [r3, #0]
 8017e46:	461a      	mov	r2, r3
 8017e48:	8bfb      	ldrh	r3, [r7, #30]
 8017e4a:	1ad3      	subs	r3, r2, r3
 8017e4c:	f1a3 0208 	sub.w	r2, r3, #8
 8017e50:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017e52:	429a      	cmp	r2, r3
 8017e54:	f0c0 809e 	bcc.w	8017f94 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	881b      	ldrh	r3, [r3, #0]
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	8bfb      	ldrh	r3, [r7, #30]
 8017e60:	1ad3      	subs	r3, r2, r3
 8017e62:	f1a3 0208 	sub.w	r2, r3, #8
 8017e66:	8bbb      	ldrh	r3, [r7, #28]
 8017e68:	3314      	adds	r3, #20
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d335      	bcc.n	8017eda <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017e6e:	8bfa      	ldrh	r2, [r7, #30]
 8017e70:	8bbb      	ldrh	r3, [r7, #28]
 8017e72:	4413      	add	r3, r2
 8017e74:	b29b      	uxth	r3, r3
 8017e76:	3308      	adds	r3, #8
 8017e78:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017e7a:	8a7b      	ldrh	r3, [r7, #18]
 8017e7c:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017e80:	4293      	cmp	r3, r2
 8017e82:	d106      	bne.n	8017e92 <mem_malloc+0xba>
 8017e84:	4b51      	ldr	r3, [pc, #324]	@ (8017fcc <mem_malloc+0x1f4>)
 8017e86:	f240 3287 	movw	r2, #903	@ 0x387
 8017e8a:	4951      	ldr	r1, [pc, #324]	@ (8017fd0 <mem_malloc+0x1f8>)
 8017e8c:	4851      	ldr	r0, [pc, #324]	@ (8017fd4 <mem_malloc+0x1fc>)
 8017e8e:	f00b fbeb 	bl	8023668 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8017e92:	8a7b      	ldrh	r3, [r7, #18]
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7ff fca5 	bl	80177e4 <ptr_to_mem>
 8017e9a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	881a      	ldrh	r2, [r3, #0]
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	8bfa      	ldrh	r2, [r7, #30]
 8017eae:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	8a7a      	ldrh	r2, [r7, #18]
 8017eb4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8017eb6:	697b      	ldr	r3, [r7, #20]
 8017eb8:	2201      	movs	r2, #1
 8017eba:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	881b      	ldrh	r3, [r3, #0]
 8017ec0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 8017ec4:	4293      	cmp	r3, r2
 8017ec6:	d00b      	beq.n	8017ee0 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	881b      	ldrh	r3, [r3, #0]
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f7ff fc89 	bl	80177e4 <ptr_to_mem>
 8017ed2:	4602      	mov	r2, r0
 8017ed4:	8a7b      	ldrh	r3, [r7, #18]
 8017ed6:	8053      	strh	r3, [r2, #2]
 8017ed8:	e002      	b.n	8017ee0 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	2201      	movs	r2, #1
 8017ede:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017ee0:	4b39      	ldr	r3, [pc, #228]	@ (8017fc8 <mem_malloc+0x1f0>)
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	697a      	ldr	r2, [r7, #20]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d127      	bne.n	8017f3a <mem_malloc+0x162>
          struct mem *cur = lfree;
 8017eea:	4b37      	ldr	r3, [pc, #220]	@ (8017fc8 <mem_malloc+0x1f0>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8017ef0:	e005      	b.n	8017efe <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8017ef2:	69bb      	ldr	r3, [r7, #24]
 8017ef4:	881b      	ldrh	r3, [r3, #0]
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7ff fc74 	bl	80177e4 <ptr_to_mem>
 8017efc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8017efe:	69bb      	ldr	r3, [r7, #24]
 8017f00:	791b      	ldrb	r3, [r3, #4]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d004      	beq.n	8017f10 <mem_malloc+0x138>
 8017f06:	4b34      	ldr	r3, [pc, #208]	@ (8017fd8 <mem_malloc+0x200>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	69ba      	ldr	r2, [r7, #24]
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d1f0      	bne.n	8017ef2 <mem_malloc+0x11a>
          }
          lfree = cur;
 8017f10:	4a2d      	ldr	r2, [pc, #180]	@ (8017fc8 <mem_malloc+0x1f0>)
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017f16:	4b2c      	ldr	r3, [pc, #176]	@ (8017fc8 <mem_malloc+0x1f0>)
 8017f18:	681a      	ldr	r2, [r3, #0]
 8017f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8017fd8 <mem_malloc+0x200>)
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d00b      	beq.n	8017f3a <mem_malloc+0x162>
 8017f22:	4b29      	ldr	r3, [pc, #164]	@ (8017fc8 <mem_malloc+0x1f0>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	791b      	ldrb	r3, [r3, #4]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d006      	beq.n	8017f3a <mem_malloc+0x162>
 8017f2c:	4b27      	ldr	r3, [pc, #156]	@ (8017fcc <mem_malloc+0x1f4>)
 8017f2e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8017f32:	492a      	ldr	r1, [pc, #168]	@ (8017fdc <mem_malloc+0x204>)
 8017f34:	4827      	ldr	r0, [pc, #156]	@ (8017fd4 <mem_malloc+0x1fc>)
 8017f36:	f00b fb97 	bl	8023668 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017f3a:	4822      	ldr	r0, [pc, #136]	@ (8017fc4 <mem_malloc+0x1ec>)
 8017f3c:	f00a fe07 	bl	8022b4e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017f40:	8bba      	ldrh	r2, [r7, #28]
 8017f42:	697b      	ldr	r3, [r7, #20]
 8017f44:	4413      	add	r3, r2
 8017f46:	3308      	adds	r3, #8
 8017f48:	4a23      	ldr	r2, [pc, #140]	@ (8017fd8 <mem_malloc+0x200>)
 8017f4a:	6812      	ldr	r2, [r2, #0]
 8017f4c:	4293      	cmp	r3, r2
 8017f4e:	d906      	bls.n	8017f5e <mem_malloc+0x186>
 8017f50:	4b1e      	ldr	r3, [pc, #120]	@ (8017fcc <mem_malloc+0x1f4>)
 8017f52:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8017f56:	4922      	ldr	r1, [pc, #136]	@ (8017fe0 <mem_malloc+0x208>)
 8017f58:	481e      	ldr	r0, [pc, #120]	@ (8017fd4 <mem_malloc+0x1fc>)
 8017f5a:	f00b fb85 	bl	8023668 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	f003 0303 	and.w	r3, r3, #3
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d006      	beq.n	8017f76 <mem_malloc+0x19e>
 8017f68:	4b18      	ldr	r3, [pc, #96]	@ (8017fcc <mem_malloc+0x1f4>)
 8017f6a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8017f6e:	491d      	ldr	r1, [pc, #116]	@ (8017fe4 <mem_malloc+0x20c>)
 8017f70:	4818      	ldr	r0, [pc, #96]	@ (8017fd4 <mem_malloc+0x1fc>)
 8017f72:	f00b fb79 	bl	8023668 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017f76:	697b      	ldr	r3, [r7, #20]
 8017f78:	f003 0303 	and.w	r3, r3, #3
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d006      	beq.n	8017f8e <mem_malloc+0x1b6>
 8017f80:	4b12      	ldr	r3, [pc, #72]	@ (8017fcc <mem_malloc+0x1f4>)
 8017f82:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8017f86:	4918      	ldr	r1, [pc, #96]	@ (8017fe8 <mem_malloc+0x210>)
 8017f88:	4812      	ldr	r0, [pc, #72]	@ (8017fd4 <mem_malloc+0x1fc>)
 8017f8a:	f00b fb6d 	bl	8023668 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017f8e:	697b      	ldr	r3, [r7, #20]
 8017f90:	3308      	adds	r3, #8
 8017f92:	e012      	b.n	8017fba <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8017f94:	8bfb      	ldrh	r3, [r7, #30]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7ff fc24 	bl	80177e4 <ptr_to_mem>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	881b      	ldrh	r3, [r3, #0]
 8017fa0:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017fa2:	8bfa      	ldrh	r2, [r7, #30]
 8017fa4:	8bb9      	ldrh	r1, [r7, #28]
 8017fa6:	f643 73e8 	movw	r3, #16360	@ 0x3fe8
 8017faa:	1a5b      	subs	r3, r3, r1
 8017fac:	429a      	cmp	r2, r3
 8017fae:	f4ff af3e 	bcc.w	8017e2e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017fb2:	4804      	ldr	r0, [pc, #16]	@ (8017fc4 <mem_malloc+0x1ec>)
 8017fb4:	f00a fdcb 	bl	8022b4e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017fb8:	2300      	movs	r3, #0
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3720      	adds	r7, #32
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	20011bd0 	.word	0x20011bd0
 8017fc8:	20011bd4 	.word	0x20011bd4
 8017fcc:	08025568 	.word	0x08025568
 8017fd0:	0802572c 	.word	0x0802572c
 8017fd4:	080255b0 	.word	0x080255b0
 8017fd8:	20011bcc 	.word	0x20011bcc
 8017fdc:	08025740 	.word	0x08025740
 8017fe0:	0802575c 	.word	0x0802575c
 8017fe4:	0802578c 	.word	0x0802578c
 8017fe8:	080257bc 	.word	0x080257bc

08017fec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8017fec:	b480      	push	{r7}
 8017fee:	b085      	sub	sp, #20
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	689b      	ldr	r3, [r3, #8]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	685b      	ldr	r3, [r3, #4]
 8018000:	3303      	adds	r3, #3
 8018002:	f023 0303 	bic.w	r3, r3, #3
 8018006:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8018008:	2300      	movs	r3, #0
 801800a:	60fb      	str	r3, [r7, #12]
 801800c:	e011      	b.n	8018032 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	689b      	ldr	r3, [r3, #8]
 8018012:	681a      	ldr	r2, [r3, #0]
 8018014:	68bb      	ldr	r3, [r7, #8]
 8018016:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	689b      	ldr	r3, [r3, #8]
 801801c:	68ba      	ldr	r2, [r7, #8]
 801801e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	881b      	ldrh	r3, [r3, #0]
 8018024:	461a      	mov	r2, r3
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	4413      	add	r3, r2
 801802a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	3301      	adds	r3, #1
 8018030:	60fb      	str	r3, [r7, #12]
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	885b      	ldrh	r3, [r3, #2]
 8018036:	461a      	mov	r2, r3
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	4293      	cmp	r3, r2
 801803c:	dbe7      	blt.n	801800e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801803e:	bf00      	nop
 8018040:	bf00      	nop
 8018042:	3714      	adds	r7, #20
 8018044:	46bd      	mov	sp, r7
 8018046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804a:	4770      	bx	lr

0801804c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018052:	2300      	movs	r3, #0
 8018054:	80fb      	strh	r3, [r7, #6]
 8018056:	e009      	b.n	801806c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8018058:	88fb      	ldrh	r3, [r7, #6]
 801805a:	4a08      	ldr	r2, [pc, #32]	@ (801807c <memp_init+0x30>)
 801805c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018060:	4618      	mov	r0, r3
 8018062:	f7ff ffc3 	bl	8017fec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018066:	88fb      	ldrh	r3, [r7, #6]
 8018068:	3301      	adds	r3, #1
 801806a:	80fb      	strh	r3, [r7, #6]
 801806c:	88fb      	ldrh	r3, [r7, #6]
 801806e:	2b0c      	cmp	r3, #12
 8018070:	d9f2      	bls.n	8018058 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8018072:	bf00      	nop
 8018074:	bf00      	nop
 8018076:	3708      	adds	r7, #8
 8018078:	46bd      	mov	sp, r7
 801807a:	bd80      	pop	{r7, pc}
 801807c:	08027fe8 	.word	0x08027fe8

08018080 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b084      	sub	sp, #16
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8018088:	f00a fd94 	bl	8022bb4 <sys_arch_protect>
 801808c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	689b      	ldr	r3, [r3, #8]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d015      	beq.n	80180c8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	689b      	ldr	r3, [r3, #8]
 80180a0:	68ba      	ldr	r2, [r7, #8]
 80180a2:	6812      	ldr	r2, [r2, #0]
 80180a4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	f003 0303 	and.w	r3, r3, #3
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d006      	beq.n	80180be <do_memp_malloc_pool+0x3e>
 80180b0:	4b09      	ldr	r3, [pc, #36]	@ (80180d8 <do_memp_malloc_pool+0x58>)
 80180b2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80180b6:	4909      	ldr	r1, [pc, #36]	@ (80180dc <do_memp_malloc_pool+0x5c>)
 80180b8:	4809      	ldr	r0, [pc, #36]	@ (80180e0 <do_memp_malloc_pool+0x60>)
 80180ba:	f00b fad5 	bl	8023668 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80180be:	68f8      	ldr	r0, [r7, #12]
 80180c0:	f00a fd86 	bl	8022bd0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	e003      	b.n	80180d0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80180c8:	68f8      	ldr	r0, [r7, #12]
 80180ca:	f00a fd81 	bl	8022bd0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80180ce:	2300      	movs	r3, #0
}
 80180d0:	4618      	mov	r0, r3
 80180d2:	3710      	adds	r7, #16
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}
 80180d8:	080257e0 	.word	0x080257e0
 80180dc:	08025810 	.word	0x08025810
 80180e0:	08025834 	.word	0x08025834

080180e4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d106      	bne.n	8018100 <memp_malloc_pool+0x1c>
 80180f2:	4b0a      	ldr	r3, [pc, #40]	@ (801811c <memp_malloc_pool+0x38>)
 80180f4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80180f8:	4909      	ldr	r1, [pc, #36]	@ (8018120 <memp_malloc_pool+0x3c>)
 80180fa:	480a      	ldr	r0, [pc, #40]	@ (8018124 <memp_malloc_pool+0x40>)
 80180fc:	f00b fab4 	bl	8023668 <iprintf>
  if (desc == NULL) {
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d101      	bne.n	801810a <memp_malloc_pool+0x26>
    return NULL;
 8018106:	2300      	movs	r3, #0
 8018108:	e003      	b.n	8018112 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801810a:	6878      	ldr	r0, [r7, #4]
 801810c:	f7ff ffb8 	bl	8018080 <do_memp_malloc_pool>
 8018110:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8018112:	4618      	mov	r0, r3
 8018114:	3708      	adds	r7, #8
 8018116:	46bd      	mov	sp, r7
 8018118:	bd80      	pop	{r7, pc}
 801811a:	bf00      	nop
 801811c:	080257e0 	.word	0x080257e0
 8018120:	0802585c 	.word	0x0802585c
 8018124:	08025834 	.word	0x08025834

08018128 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	4603      	mov	r3, r0
 8018130:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8018132:	79fb      	ldrb	r3, [r7, #7]
 8018134:	2b0c      	cmp	r3, #12
 8018136:	d908      	bls.n	801814a <memp_malloc+0x22>
 8018138:	4b0a      	ldr	r3, [pc, #40]	@ (8018164 <memp_malloc+0x3c>)
 801813a:	f240 1257 	movw	r2, #343	@ 0x157
 801813e:	490a      	ldr	r1, [pc, #40]	@ (8018168 <memp_malloc+0x40>)
 8018140:	480a      	ldr	r0, [pc, #40]	@ (801816c <memp_malloc+0x44>)
 8018142:	f00b fa91 	bl	8023668 <iprintf>
 8018146:	2300      	movs	r3, #0
 8018148:	e008      	b.n	801815c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801814a:	79fb      	ldrb	r3, [r7, #7]
 801814c:	4a08      	ldr	r2, [pc, #32]	@ (8018170 <memp_malloc+0x48>)
 801814e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018152:	4618      	mov	r0, r3
 8018154:	f7ff ff94 	bl	8018080 <do_memp_malloc_pool>
 8018158:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801815a:	68fb      	ldr	r3, [r7, #12]
}
 801815c:	4618      	mov	r0, r3
 801815e:	3710      	adds	r7, #16
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}
 8018164:	080257e0 	.word	0x080257e0
 8018168:	08025870 	.word	0x08025870
 801816c:	08025834 	.word	0x08025834
 8018170:	08027fe8 	.word	0x08027fe8

08018174 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b084      	sub	sp, #16
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	f003 0303 	and.w	r3, r3, #3
 8018184:	2b00      	cmp	r3, #0
 8018186:	d006      	beq.n	8018196 <do_memp_free_pool+0x22>
 8018188:	4b0d      	ldr	r3, [pc, #52]	@ (80181c0 <do_memp_free_pool+0x4c>)
 801818a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801818e:	490d      	ldr	r1, [pc, #52]	@ (80181c4 <do_memp_free_pool+0x50>)
 8018190:	480d      	ldr	r0, [pc, #52]	@ (80181c8 <do_memp_free_pool+0x54>)
 8018192:	f00b fa69 	bl	8023668 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801819a:	f00a fd0b 	bl	8022bb4 <sys_arch_protect>
 801819e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	689b      	ldr	r3, [r3, #8]
 80181a4:	681a      	ldr	r2, [r3, #0]
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	689b      	ldr	r3, [r3, #8]
 80181ae:	68fa      	ldr	r2, [r7, #12]
 80181b0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80181b2:	68b8      	ldr	r0, [r7, #8]
 80181b4:	f00a fd0c 	bl	8022bd0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80181b8:	bf00      	nop
 80181ba:	3710      	adds	r7, #16
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}
 80181c0:	080257e0 	.word	0x080257e0
 80181c4:	08025890 	.word	0x08025890
 80181c8:	08025834 	.word	0x08025834

080181cc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d106      	bne.n	80181ea <memp_free_pool+0x1e>
 80181dc:	4b0a      	ldr	r3, [pc, #40]	@ (8018208 <memp_free_pool+0x3c>)
 80181de:	f240 1295 	movw	r2, #405	@ 0x195
 80181e2:	490a      	ldr	r1, [pc, #40]	@ (801820c <memp_free_pool+0x40>)
 80181e4:	480a      	ldr	r0, [pc, #40]	@ (8018210 <memp_free_pool+0x44>)
 80181e6:	f00b fa3f 	bl	8023668 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d007      	beq.n	8018200 <memp_free_pool+0x34>
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d004      	beq.n	8018200 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80181f6:	6839      	ldr	r1, [r7, #0]
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	f7ff ffbb 	bl	8018174 <do_memp_free_pool>
 80181fe:	e000      	b.n	8018202 <memp_free_pool+0x36>
    return;
 8018200:	bf00      	nop
}
 8018202:	3708      	adds	r7, #8
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}
 8018208:	080257e0 	.word	0x080257e0
 801820c:	0802585c 	.word	0x0802585c
 8018210:	08025834 	.word	0x08025834

08018214 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	4603      	mov	r3, r0
 801821c:	6039      	str	r1, [r7, #0]
 801821e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8018220:	79fb      	ldrb	r3, [r7, #7]
 8018222:	2b0c      	cmp	r3, #12
 8018224:	d907      	bls.n	8018236 <memp_free+0x22>
 8018226:	4b0c      	ldr	r3, [pc, #48]	@ (8018258 <memp_free+0x44>)
 8018228:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801822c:	490b      	ldr	r1, [pc, #44]	@ (801825c <memp_free+0x48>)
 801822e:	480c      	ldr	r0, [pc, #48]	@ (8018260 <memp_free+0x4c>)
 8018230:	f00b fa1a 	bl	8023668 <iprintf>
 8018234:	e00c      	b.n	8018250 <memp_free+0x3c>

  if (mem == NULL) {
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d008      	beq.n	801824e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801823c:	79fb      	ldrb	r3, [r7, #7]
 801823e:	4a09      	ldr	r2, [pc, #36]	@ (8018264 <memp_free+0x50>)
 8018240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018244:	6839      	ldr	r1, [r7, #0]
 8018246:	4618      	mov	r0, r3
 8018248:	f7ff ff94 	bl	8018174 <do_memp_free_pool>
 801824c:	e000      	b.n	8018250 <memp_free+0x3c>
    return;
 801824e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8018250:	3708      	adds	r7, #8
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	080257e0 	.word	0x080257e0
 801825c:	080258b0 	.word	0x080258b0
 8018260:	08025834 	.word	0x08025834
 8018264:	08027fe8 	.word	0x08027fe8

08018268 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8018268:	b480      	push	{r7}
 801826a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801826c:	bf00      	nop
 801826e:	46bd      	mov	sp, r7
 8018270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018274:	4770      	bx	lr
	...

08018278 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b086      	sub	sp, #24
 801827c:	af00      	add	r7, sp, #0
 801827e:	60f8      	str	r0, [r7, #12]
 8018280:	60b9      	str	r1, [r7, #8]
 8018282:	607a      	str	r2, [r7, #4]
 8018284:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d108      	bne.n	801829e <netif_add+0x26>
 801828c:	4b57      	ldr	r3, [pc, #348]	@ (80183ec <netif_add+0x174>)
 801828e:	f240 1227 	movw	r2, #295	@ 0x127
 8018292:	4957      	ldr	r1, [pc, #348]	@ (80183f0 <netif_add+0x178>)
 8018294:	4857      	ldr	r0, [pc, #348]	@ (80183f4 <netif_add+0x17c>)
 8018296:	f00b f9e7 	bl	8023668 <iprintf>
 801829a:	2300      	movs	r3, #0
 801829c:	e0a2      	b.n	80183e4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d108      	bne.n	80182b6 <netif_add+0x3e>
 80182a4:	4b51      	ldr	r3, [pc, #324]	@ (80183ec <netif_add+0x174>)
 80182a6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80182aa:	4953      	ldr	r1, [pc, #332]	@ (80183f8 <netif_add+0x180>)
 80182ac:	4851      	ldr	r0, [pc, #324]	@ (80183f4 <netif_add+0x17c>)
 80182ae:	f00b f9db 	bl	8023668 <iprintf>
 80182b2:	2300      	movs	r3, #0
 80182b4:	e096      	b.n	80183e4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d101      	bne.n	80182c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80182bc:	4b4f      	ldr	r3, [pc, #316]	@ (80183fc <netif_add+0x184>)
 80182be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d101      	bne.n	80182ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80182c6:	4b4d      	ldr	r3, [pc, #308]	@ (80183fc <netif_add+0x184>)
 80182c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d101      	bne.n	80182d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80182d0:	4b4a      	ldr	r3, [pc, #296]	@ (80183fc <netif_add+0x184>)
 80182d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	2200      	movs	r2, #0
 80182d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	2200      	movs	r2, #0
 80182de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	2200      	movs	r2, #0
 80182e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	4a45      	ldr	r2, [pc, #276]	@ (8018400 <netif_add+0x188>)
 80182ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	2200      	movs	r2, #0
 80182f0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	2200      	movs	r2, #0
 80182f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	2200      	movs	r2, #0
 80182fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	6a3a      	ldr	r2, [r7, #32]
 8018304:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8018306:	4b3f      	ldr	r3, [pc, #252]	@ (8018404 <netif_add+0x18c>)
 8018308:	781a      	ldrb	r2, [r3, #0]
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018314:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	687a      	ldr	r2, [r7, #4]
 801831a:	68b9      	ldr	r1, [r7, #8]
 801831c:	68f8      	ldr	r0, [r7, #12]
 801831e:	f000 f913 	bl	8018548 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8018322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018324:	68f8      	ldr	r0, [r7, #12]
 8018326:	4798      	blx	r3
 8018328:	4603      	mov	r3, r0
 801832a:	2b00      	cmp	r3, #0
 801832c:	d001      	beq.n	8018332 <netif_add+0xba>
    return NULL;
 801832e:	2300      	movs	r3, #0
 8018330:	e058      	b.n	80183e4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018338:	2bff      	cmp	r3, #255	@ 0xff
 801833a:	d103      	bne.n	8018344 <netif_add+0xcc>
        netif->num = 0;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	2200      	movs	r2, #0
 8018340:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8018344:	2300      	movs	r3, #0
 8018346:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018348:	4b2f      	ldr	r3, [pc, #188]	@ (8018408 <netif_add+0x190>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	617b      	str	r3, [r7, #20]
 801834e:	e02b      	b.n	80183a8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018350:	697a      	ldr	r2, [r7, #20]
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	429a      	cmp	r2, r3
 8018356:	d106      	bne.n	8018366 <netif_add+0xee>
 8018358:	4b24      	ldr	r3, [pc, #144]	@ (80183ec <netif_add+0x174>)
 801835a:	f240 128b 	movw	r2, #395	@ 0x18b
 801835e:	492b      	ldr	r1, [pc, #172]	@ (801840c <netif_add+0x194>)
 8018360:	4824      	ldr	r0, [pc, #144]	@ (80183f4 <netif_add+0x17c>)
 8018362:	f00b f981 	bl	8023668 <iprintf>
        num_netifs++;
 8018366:	693b      	ldr	r3, [r7, #16]
 8018368:	3301      	adds	r3, #1
 801836a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801836c:	693b      	ldr	r3, [r7, #16]
 801836e:	2bff      	cmp	r3, #255	@ 0xff
 8018370:	dd06      	ble.n	8018380 <netif_add+0x108>
 8018372:	4b1e      	ldr	r3, [pc, #120]	@ (80183ec <netif_add+0x174>)
 8018374:	f240 128d 	movw	r2, #397	@ 0x18d
 8018378:	4925      	ldr	r1, [pc, #148]	@ (8018410 <netif_add+0x198>)
 801837a:	481e      	ldr	r0, [pc, #120]	@ (80183f4 <netif_add+0x17c>)
 801837c:	f00b f974 	bl	8023668 <iprintf>
        if (netif2->num == netif->num) {
 8018380:	697b      	ldr	r3, [r7, #20]
 8018382:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801838c:	429a      	cmp	r2, r3
 801838e:	d108      	bne.n	80183a2 <netif_add+0x12a>
          netif->num++;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018396:	3301      	adds	r3, #1
 8018398:	b2da      	uxtb	r2, r3
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80183a0:	e005      	b.n	80183ae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	617b      	str	r3, [r7, #20]
 80183a8:	697b      	ldr	r3, [r7, #20]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d1d0      	bne.n	8018350 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80183ae:	697b      	ldr	r3, [r7, #20]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d1be      	bne.n	8018332 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80183ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80183bc:	d103      	bne.n	80183c6 <netif_add+0x14e>
    netif_num = 0;
 80183be:	4b11      	ldr	r3, [pc, #68]	@ (8018404 <netif_add+0x18c>)
 80183c0:	2200      	movs	r2, #0
 80183c2:	701a      	strb	r2, [r3, #0]
 80183c4:	e006      	b.n	80183d4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80183cc:	3301      	adds	r3, #1
 80183ce:	b2da      	uxtb	r2, r3
 80183d0:	4b0c      	ldr	r3, [pc, #48]	@ (8018404 <netif_add+0x18c>)
 80183d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80183d4:	4b0c      	ldr	r3, [pc, #48]	@ (8018408 <netif_add+0x190>)
 80183d6:	681a      	ldr	r2, [r3, #0]
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80183dc:	4a0a      	ldr	r2, [pc, #40]	@ (8018408 <netif_add+0x190>)
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80183e2:	68fb      	ldr	r3, [r7, #12]
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3718      	adds	r7, #24
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	080258cc 	.word	0x080258cc
 80183f0:	08025960 	.word	0x08025960
 80183f4:	0802591c 	.word	0x0802591c
 80183f8:	0802597c 	.word	0x0802597c
 80183fc:	0802805c 	.word	0x0802805c
 8018400:	08018823 	.word	0x08018823
 8018404:	20018bac 	.word	0x20018bac
 8018408:	20018ba4 	.word	0x20018ba4
 801840c:	080259a0 	.word	0x080259a0
 8018410:	080259b4 	.word	0x080259b4

08018414 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b082      	sub	sp, #8
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801841e:	6839      	ldr	r1, [r7, #0]
 8018420:	6878      	ldr	r0, [r7, #4]
 8018422:	f002 ffcb 	bl	801b3bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8018426:	6839      	ldr	r1, [r7, #0]
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	f007 fe79 	bl	8020120 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801842e:	bf00      	nop
 8018430:	3708      	adds	r7, #8
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
	...

08018438 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b086      	sub	sp, #24
 801843c:	af00      	add	r7, sp, #0
 801843e:	60f8      	str	r0, [r7, #12]
 8018440:	60b9      	str	r1, [r7, #8]
 8018442:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d106      	bne.n	8018458 <netif_do_set_ipaddr+0x20>
 801844a:	4b1d      	ldr	r3, [pc, #116]	@ (80184c0 <netif_do_set_ipaddr+0x88>)
 801844c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8018450:	491c      	ldr	r1, [pc, #112]	@ (80184c4 <netif_do_set_ipaddr+0x8c>)
 8018452:	481d      	ldr	r0, [pc, #116]	@ (80184c8 <netif_do_set_ipaddr+0x90>)
 8018454:	f00b f908 	bl	8023668 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d106      	bne.n	801846c <netif_do_set_ipaddr+0x34>
 801845e:	4b18      	ldr	r3, [pc, #96]	@ (80184c0 <netif_do_set_ipaddr+0x88>)
 8018460:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8018464:	4917      	ldr	r1, [pc, #92]	@ (80184c4 <netif_do_set_ipaddr+0x8c>)
 8018466:	4818      	ldr	r0, [pc, #96]	@ (80184c8 <netif_do_set_ipaddr+0x90>)
 8018468:	f00b f8fe 	bl	8023668 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801846c:	68bb      	ldr	r3, [r7, #8]
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	3304      	adds	r3, #4
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	429a      	cmp	r2, r3
 8018478:	d01c      	beq.n	80184b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801847a:	68bb      	ldr	r3, [r7, #8]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	3304      	adds	r3, #4
 8018484:	681a      	ldr	r2, [r3, #0]
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801848a:	f107 0314 	add.w	r3, r7, #20
 801848e:	4619      	mov	r1, r3
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f7ff ffbf 	bl	8018414 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d002      	beq.n	80184a2 <netif_do_set_ipaddr+0x6a>
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	e000      	b.n	80184a4 <netif_do_set_ipaddr+0x6c>
 80184a2:	2300      	movs	r3, #0
 80184a4:	68fa      	ldr	r2, [r7, #12]
 80184a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80184a8:	2101      	movs	r1, #1
 80184aa:	68f8      	ldr	r0, [r7, #12]
 80184ac:	f000 f8d2 	bl	8018654 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80184b0:	2301      	movs	r3, #1
 80184b2:	e000      	b.n	80184b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80184b4:	2300      	movs	r3, #0
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3718      	adds	r7, #24
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	080258cc 	.word	0x080258cc
 80184c4:	080259e4 	.word	0x080259e4
 80184c8:	0802591c 	.word	0x0802591c

080184cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80184cc:	b480      	push	{r7}
 80184ce:	b085      	sub	sp, #20
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	60f8      	str	r0, [r7, #12]
 80184d4:	60b9      	str	r1, [r7, #8]
 80184d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80184d8:	68bb      	ldr	r3, [r7, #8]
 80184da:	681a      	ldr	r2, [r3, #0]
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	3308      	adds	r3, #8
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d00a      	beq.n	80184fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d002      	beq.n	80184f2 <netif_do_set_netmask+0x26>
 80184ec:	68bb      	ldr	r3, [r7, #8]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	e000      	b.n	80184f4 <netif_do_set_netmask+0x28>
 80184f2:	2300      	movs	r3, #0
 80184f4:	68fa      	ldr	r2, [r7, #12]
 80184f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80184f8:	2301      	movs	r3, #1
 80184fa:	e000      	b.n	80184fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80184fc:	2300      	movs	r3, #0
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3714      	adds	r7, #20
 8018502:	46bd      	mov	sp, r7
 8018504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018508:	4770      	bx	lr

0801850a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801850a:	b480      	push	{r7}
 801850c:	b085      	sub	sp, #20
 801850e:	af00      	add	r7, sp, #0
 8018510:	60f8      	str	r0, [r7, #12]
 8018512:	60b9      	str	r1, [r7, #8]
 8018514:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8018516:	68bb      	ldr	r3, [r7, #8]
 8018518:	681a      	ldr	r2, [r3, #0]
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	330c      	adds	r3, #12
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	429a      	cmp	r2, r3
 8018522:	d00a      	beq.n	801853a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018524:	68bb      	ldr	r3, [r7, #8]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d002      	beq.n	8018530 <netif_do_set_gw+0x26>
 801852a:	68bb      	ldr	r3, [r7, #8]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	e000      	b.n	8018532 <netif_do_set_gw+0x28>
 8018530:	2300      	movs	r3, #0
 8018532:	68fa      	ldr	r2, [r7, #12]
 8018534:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8018536:	2301      	movs	r3, #1
 8018538:	e000      	b.n	801853c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801853a:	2300      	movs	r3, #0
}
 801853c:	4618      	mov	r0, r3
 801853e:	3714      	adds	r7, #20
 8018540:	46bd      	mov	sp, r7
 8018542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018546:	4770      	bx	lr

08018548 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b088      	sub	sp, #32
 801854c:	af00      	add	r7, sp, #0
 801854e:	60f8      	str	r0, [r7, #12]
 8018550:	60b9      	str	r1, [r7, #8]
 8018552:	607a      	str	r2, [r7, #4]
 8018554:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8018556:	2300      	movs	r3, #0
 8018558:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801855a:	2300      	movs	r3, #0
 801855c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801855e:	68bb      	ldr	r3, [r7, #8]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d101      	bne.n	8018568 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8018564:	4b1c      	ldr	r3, [pc, #112]	@ (80185d8 <netif_set_addr+0x90>)
 8018566:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d101      	bne.n	8018572 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801856e:	4b1a      	ldr	r3, [pc, #104]	@ (80185d8 <netif_set_addr+0x90>)
 8018570:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018572:	683b      	ldr	r3, [r7, #0]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d101      	bne.n	801857c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8018578:	4b17      	ldr	r3, [pc, #92]	@ (80185d8 <netif_set_addr+0x90>)
 801857a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d003      	beq.n	801858a <netif_set_addr+0x42>
 8018582:	68bb      	ldr	r3, [r7, #8]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d101      	bne.n	801858e <netif_set_addr+0x46>
 801858a:	2301      	movs	r3, #1
 801858c:	e000      	b.n	8018590 <netif_set_addr+0x48>
 801858e:	2300      	movs	r3, #0
 8018590:	617b      	str	r3, [r7, #20]
  if (remove) {
 8018592:	697b      	ldr	r3, [r7, #20]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d006      	beq.n	80185a6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018598:	f107 0310 	add.w	r3, r7, #16
 801859c:	461a      	mov	r2, r3
 801859e:	68b9      	ldr	r1, [r7, #8]
 80185a0:	68f8      	ldr	r0, [r7, #12]
 80185a2:	f7ff ff49 	bl	8018438 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80185a6:	69fa      	ldr	r2, [r7, #28]
 80185a8:	6879      	ldr	r1, [r7, #4]
 80185aa:	68f8      	ldr	r0, [r7, #12]
 80185ac:	f7ff ff8e 	bl	80184cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80185b0:	69ba      	ldr	r2, [r7, #24]
 80185b2:	6839      	ldr	r1, [r7, #0]
 80185b4:	68f8      	ldr	r0, [r7, #12]
 80185b6:	f7ff ffa8 	bl	801850a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80185ba:	697b      	ldr	r3, [r7, #20]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d106      	bne.n	80185ce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80185c0:	f107 0310 	add.w	r3, r7, #16
 80185c4:	461a      	mov	r2, r3
 80185c6:	68b9      	ldr	r1, [r7, #8]
 80185c8:	68f8      	ldr	r0, [r7, #12]
 80185ca:	f7ff ff35 	bl	8018438 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80185ce:	bf00      	nop
 80185d0:	3720      	adds	r7, #32
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd80      	pop	{r7, pc}
 80185d6:	bf00      	nop
 80185d8:	0802805c 	.word	0x0802805c

080185dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80185dc:	b480      	push	{r7}
 80185de:	b083      	sub	sp, #12
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80185e4:	4a04      	ldr	r2, [pc, #16]	@ (80185f8 <netif_set_default+0x1c>)
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80185ea:	bf00      	nop
 80185ec:	370c      	adds	r7, #12
 80185ee:	46bd      	mov	sp, r7
 80185f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f4:	4770      	bx	lr
 80185f6:	bf00      	nop
 80185f8:	20018ba8 	.word	0x20018ba8

080185fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d107      	bne.n	801861a <netif_set_up+0x1e>
 801860a:	4b0f      	ldr	r3, [pc, #60]	@ (8018648 <netif_set_up+0x4c>)
 801860c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8018610:	490e      	ldr	r1, [pc, #56]	@ (801864c <netif_set_up+0x50>)
 8018612:	480f      	ldr	r0, [pc, #60]	@ (8018650 <netif_set_up+0x54>)
 8018614:	f00b f828 	bl	8023668 <iprintf>
 8018618:	e013      	b.n	8018642 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018620:	f003 0301 	and.w	r3, r3, #1
 8018624:	2b00      	cmp	r3, #0
 8018626:	d10c      	bne.n	8018642 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801862e:	f043 0301 	orr.w	r3, r3, #1
 8018632:	b2da      	uxtb	r2, r3
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801863a:	2103      	movs	r1, #3
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f000 f809 	bl	8018654 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8018642:	3708      	adds	r7, #8
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}
 8018648:	080258cc 	.word	0x080258cc
 801864c:	08025a54 	.word	0x08025a54
 8018650:	0802591c 	.word	0x0802591c

08018654 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8018654:	b580      	push	{r7, lr}
 8018656:	b082      	sub	sp, #8
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
 801865c:	460b      	mov	r3, r1
 801865e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d106      	bne.n	8018674 <netif_issue_reports+0x20>
 8018666:	4b18      	ldr	r3, [pc, #96]	@ (80186c8 <netif_issue_reports+0x74>)
 8018668:	f240 326d 	movw	r2, #877	@ 0x36d
 801866c:	4917      	ldr	r1, [pc, #92]	@ (80186cc <netif_issue_reports+0x78>)
 801866e:	4818      	ldr	r0, [pc, #96]	@ (80186d0 <netif_issue_reports+0x7c>)
 8018670:	f00a fffa 	bl	8023668 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801867a:	f003 0304 	and.w	r3, r3, #4
 801867e:	2b00      	cmp	r3, #0
 8018680:	d01e      	beq.n	80186c0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018688:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801868c:	2b00      	cmp	r3, #0
 801868e:	d017      	beq.n	80186c0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018690:	78fb      	ldrb	r3, [r7, #3]
 8018692:	f003 0301 	and.w	r3, r3, #1
 8018696:	2b00      	cmp	r3, #0
 8018698:	d013      	beq.n	80186c2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	3304      	adds	r3, #4
 801869e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d00e      	beq.n	80186c2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80186aa:	f003 0308 	and.w	r3, r3, #8
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d007      	beq.n	80186c2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	3304      	adds	r3, #4
 80186b6:	4619      	mov	r1, r3
 80186b8:	6878      	ldr	r0, [r7, #4]
 80186ba:	f008 fc9b 	bl	8020ff4 <etharp_request>
 80186be:	e000      	b.n	80186c2 <netif_issue_reports+0x6e>
    return;
 80186c0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80186c2:	3708      	adds	r7, #8
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	080258cc 	.word	0x080258cc
 80186cc:	08025a70 	.word	0x08025a70
 80186d0:	0802591c 	.word	0x0802591c

080186d4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80186d4:	b580      	push	{r7, lr}
 80186d6:	b082      	sub	sp, #8
 80186d8:	af00      	add	r7, sp, #0
 80186da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d107      	bne.n	80186f2 <netif_set_down+0x1e>
 80186e2:	4b12      	ldr	r3, [pc, #72]	@ (801872c <netif_set_down+0x58>)
 80186e4:	f240 329b 	movw	r2, #923	@ 0x39b
 80186e8:	4911      	ldr	r1, [pc, #68]	@ (8018730 <netif_set_down+0x5c>)
 80186ea:	4812      	ldr	r0, [pc, #72]	@ (8018734 <netif_set_down+0x60>)
 80186ec:	f00a ffbc 	bl	8023668 <iprintf>
 80186f0:	e019      	b.n	8018726 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80186f8:	f003 0301 	and.w	r3, r3, #1
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d012      	beq.n	8018726 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018706:	f023 0301 	bic.w	r3, r3, #1
 801870a:	b2da      	uxtb	r2, r3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018718:	f003 0308 	and.w	r3, r3, #8
 801871c:	2b00      	cmp	r3, #0
 801871e:	d002      	beq.n	8018726 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8018720:	6878      	ldr	r0, [r7, #4]
 8018722:	f008 f825 	bl	8020770 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8018726:	3708      	adds	r7, #8
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}
 801872c:	080258cc 	.word	0x080258cc
 8018730:	08025a94 	.word	0x08025a94
 8018734:	0802591c 	.word	0x0802591c

08018738 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b082      	sub	sp, #8
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d107      	bne.n	8018756 <netif_set_link_up+0x1e>
 8018746:	4b13      	ldr	r3, [pc, #76]	@ (8018794 <netif_set_link_up+0x5c>)
 8018748:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801874c:	4912      	ldr	r1, [pc, #72]	@ (8018798 <netif_set_link_up+0x60>)
 801874e:	4813      	ldr	r0, [pc, #76]	@ (801879c <netif_set_link_up+0x64>)
 8018750:	f00a ff8a 	bl	8023668 <iprintf>
 8018754:	e01b      	b.n	801878e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801875c:	f003 0304 	and.w	r3, r3, #4
 8018760:	2b00      	cmp	r3, #0
 8018762:	d114      	bne.n	801878e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801876a:	f043 0304 	orr.w	r3, r3, #4
 801876e:	b2da      	uxtb	r2, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018776:	2103      	movs	r1, #3
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f7ff ff6b 	bl	8018654 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	69db      	ldr	r3, [r3, #28]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d003      	beq.n	801878e <netif_set_link_up+0x56>
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	69db      	ldr	r3, [r3, #28]
 801878a:	6878      	ldr	r0, [r7, #4]
 801878c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801878e:	3708      	adds	r7, #8
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	080258cc 	.word	0x080258cc
 8018798:	08025ab4 	.word	0x08025ab4
 801879c:	0802591c 	.word	0x0802591c

080187a0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b082      	sub	sp, #8
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d107      	bne.n	80187be <netif_set_link_down+0x1e>
 80187ae:	4b11      	ldr	r3, [pc, #68]	@ (80187f4 <netif_set_link_down+0x54>)
 80187b0:	f240 4206 	movw	r2, #1030	@ 0x406
 80187b4:	4910      	ldr	r1, [pc, #64]	@ (80187f8 <netif_set_link_down+0x58>)
 80187b6:	4811      	ldr	r0, [pc, #68]	@ (80187fc <netif_set_link_down+0x5c>)
 80187b8:	f00a ff56 	bl	8023668 <iprintf>
 80187bc:	e017      	b.n	80187ee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80187c4:	f003 0304 	and.w	r3, r3, #4
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d010      	beq.n	80187ee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80187d2:	f023 0304 	bic.w	r3, r3, #4
 80187d6:	b2da      	uxtb	r2, r3
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	69db      	ldr	r3, [r3, #28]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d003      	beq.n	80187ee <netif_set_link_down+0x4e>
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	69db      	ldr	r3, [r3, #28]
 80187ea:	6878      	ldr	r0, [r7, #4]
 80187ec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	080258cc 	.word	0x080258cc
 80187f8:	08025ad8 	.word	0x08025ad8
 80187fc:	0802591c 	.word	0x0802591c

08018800 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8018800:	b480      	push	{r7}
 8018802:	b083      	sub	sp, #12
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
 8018808:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d002      	beq.n	8018816 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	683a      	ldr	r2, [r7, #0]
 8018814:	61da      	str	r2, [r3, #28]
  }
}
 8018816:	bf00      	nop
 8018818:	370c      	adds	r7, #12
 801881a:	46bd      	mov	sp, r7
 801881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018820:	4770      	bx	lr

08018822 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018822:	b480      	push	{r7}
 8018824:	b085      	sub	sp, #20
 8018826:	af00      	add	r7, sp, #0
 8018828:	60f8      	str	r0, [r7, #12]
 801882a:	60b9      	str	r1, [r7, #8]
 801882c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801882e:	f06f 030b 	mvn.w	r3, #11
}
 8018832:	4618      	mov	r0, r3
 8018834:	3714      	adds	r7, #20
 8018836:	46bd      	mov	sp, r7
 8018838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883c:	4770      	bx	lr
	...

08018840 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8018840:	b480      	push	{r7}
 8018842:	b085      	sub	sp, #20
 8018844:	af00      	add	r7, sp, #0
 8018846:	4603      	mov	r3, r0
 8018848:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801884a:	79fb      	ldrb	r3, [r7, #7]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d013      	beq.n	8018878 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018850:	4b0d      	ldr	r3, [pc, #52]	@ (8018888 <netif_get_by_index+0x48>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	60fb      	str	r3, [r7, #12]
 8018856:	e00c      	b.n	8018872 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801885e:	3301      	adds	r3, #1
 8018860:	b2db      	uxtb	r3, r3
 8018862:	79fa      	ldrb	r2, [r7, #7]
 8018864:	429a      	cmp	r2, r3
 8018866:	d101      	bne.n	801886c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	e006      	b.n	801887a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	60fb      	str	r3, [r7, #12]
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d1ef      	bne.n	8018858 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8018878:	2300      	movs	r3, #0
}
 801887a:	4618      	mov	r0, r3
 801887c:	3714      	adds	r7, #20
 801887e:	46bd      	mov	sp, r7
 8018880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018884:	4770      	bx	lr
 8018886:	bf00      	nop
 8018888:	20018ba4 	.word	0x20018ba4

0801888c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018892:	f00a f98f 	bl	8022bb4 <sys_arch_protect>
 8018896:	6038      	str	r0, [r7, #0]
 8018898:	4b0d      	ldr	r3, [pc, #52]	@ (80188d0 <pbuf_free_ooseq+0x44>)
 801889a:	2200      	movs	r2, #0
 801889c:	701a      	strb	r2, [r3, #0]
 801889e:	6838      	ldr	r0, [r7, #0]
 80188a0:	f00a f996 	bl	8022bd0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80188a4:	4b0b      	ldr	r3, [pc, #44]	@ (80188d4 <pbuf_free_ooseq+0x48>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	607b      	str	r3, [r7, #4]
 80188aa:	e00a      	b.n	80188c2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d003      	beq.n	80188bc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80188b4:	6878      	ldr	r0, [r7, #4]
 80188b6:	f002 fdbf 	bl	801b438 <tcp_free_ooseq>
      return;
 80188ba:	e005      	b.n	80188c8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	68db      	ldr	r3, [r3, #12]
 80188c0:	607b      	str	r3, [r7, #4]
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d1f1      	bne.n	80188ac <pbuf_free_ooseq+0x20>
    }
  }
}
 80188c8:	3708      	adds	r7, #8
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	20018bad 	.word	0x20018bad
 80188d4:	20018bbc 	.word	0x20018bbc

080188d8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b082      	sub	sp, #8
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80188e0:	f7ff ffd4 	bl	801888c <pbuf_free_ooseq>
}
 80188e4:	bf00      	nop
 80188e6:	3708      	adds	r7, #8
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80188f2:	f00a f95f 	bl	8022bb4 <sys_arch_protect>
 80188f6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80188f8:	4b0f      	ldr	r3, [pc, #60]	@ (8018938 <pbuf_pool_is_empty+0x4c>)
 80188fa:	781b      	ldrb	r3, [r3, #0]
 80188fc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80188fe:	4b0e      	ldr	r3, [pc, #56]	@ (8018938 <pbuf_pool_is_empty+0x4c>)
 8018900:	2201      	movs	r2, #1
 8018902:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018904:	6878      	ldr	r0, [r7, #4]
 8018906:	f00a f963 	bl	8022bd0 <sys_arch_unprotect>

  if (!queued) {
 801890a:	78fb      	ldrb	r3, [r7, #3]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d10f      	bne.n	8018930 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018910:	2100      	movs	r1, #0
 8018912:	480a      	ldr	r0, [pc, #40]	@ (801893c <pbuf_pool_is_empty+0x50>)
 8018914:	f7fe fe80 	bl	8017618 <tcpip_try_callback>
 8018918:	4603      	mov	r3, r0
 801891a:	2b00      	cmp	r3, #0
 801891c:	d008      	beq.n	8018930 <pbuf_pool_is_empty+0x44>
 801891e:	f00a f949 	bl	8022bb4 <sys_arch_protect>
 8018922:	6078      	str	r0, [r7, #4]
 8018924:	4b04      	ldr	r3, [pc, #16]	@ (8018938 <pbuf_pool_is_empty+0x4c>)
 8018926:	2200      	movs	r2, #0
 8018928:	701a      	strb	r2, [r3, #0]
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	f00a f950 	bl	8022bd0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8018930:	bf00      	nop
 8018932:	3708      	adds	r7, #8
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}
 8018938:	20018bad 	.word	0x20018bad
 801893c:	080188d9 	.word	0x080188d9

08018940 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8018940:	b480      	push	{r7}
 8018942:	b085      	sub	sp, #20
 8018944:	af00      	add	r7, sp, #0
 8018946:	60f8      	str	r0, [r7, #12]
 8018948:	60b9      	str	r1, [r7, #8]
 801894a:	4611      	mov	r1, r2
 801894c:	461a      	mov	r2, r3
 801894e:	460b      	mov	r3, r1
 8018950:	80fb      	strh	r3, [r7, #6]
 8018952:	4613      	mov	r3, r2
 8018954:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	2200      	movs	r2, #0
 801895a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	68ba      	ldr	r2, [r7, #8]
 8018960:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	88fa      	ldrh	r2, [r7, #6]
 8018966:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	88ba      	ldrh	r2, [r7, #4]
 801896c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801896e:	8b3b      	ldrh	r3, [r7, #24]
 8018970:	b2da      	uxtb	r2, r3
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	7f3a      	ldrb	r2, [r7, #28]
 801897a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	2201      	movs	r2, #1
 8018980:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	2200      	movs	r2, #0
 8018986:	73da      	strb	r2, [r3, #15]
}
 8018988:	bf00      	nop
 801898a:	3714      	adds	r7, #20
 801898c:	46bd      	mov	sp, r7
 801898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018992:	4770      	bx	lr

08018994 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b08c      	sub	sp, #48	@ 0x30
 8018998:	af02      	add	r7, sp, #8
 801899a:	4603      	mov	r3, r0
 801899c:	71fb      	strb	r3, [r7, #7]
 801899e:	460b      	mov	r3, r1
 80189a0:	80bb      	strh	r3, [r7, #4]
 80189a2:	4613      	mov	r3, r2
 80189a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80189a6:	79fb      	ldrb	r3, [r7, #7]
 80189a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80189aa:	887b      	ldrh	r3, [r7, #2]
 80189ac:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80189b0:	d07f      	beq.n	8018ab2 <pbuf_alloc+0x11e>
 80189b2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80189b6:	f300 80c8 	bgt.w	8018b4a <pbuf_alloc+0x1b6>
 80189ba:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80189be:	d010      	beq.n	80189e2 <pbuf_alloc+0x4e>
 80189c0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80189c4:	f300 80c1 	bgt.w	8018b4a <pbuf_alloc+0x1b6>
 80189c8:	2b01      	cmp	r3, #1
 80189ca:	d002      	beq.n	80189d2 <pbuf_alloc+0x3e>
 80189cc:	2b41      	cmp	r3, #65	@ 0x41
 80189ce:	f040 80bc 	bne.w	8018b4a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80189d2:	887a      	ldrh	r2, [r7, #2]
 80189d4:	88bb      	ldrh	r3, [r7, #4]
 80189d6:	4619      	mov	r1, r3
 80189d8:	2000      	movs	r0, #0
 80189da:	f000 f8d1 	bl	8018b80 <pbuf_alloc_reference>
 80189de:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80189e0:	e0bd      	b.n	8018b5e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80189e2:	2300      	movs	r3, #0
 80189e4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80189e6:	2300      	movs	r3, #0
 80189e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80189ea:	88bb      	ldrh	r3, [r7, #4]
 80189ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80189ee:	200c      	movs	r0, #12
 80189f0:	f7ff fb9a 	bl	8018128 <memp_malloc>
 80189f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d109      	bne.n	8018a10 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80189fc:	f7ff ff76 	bl	80188ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8018a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d002      	beq.n	8018a0c <pbuf_alloc+0x78>
            pbuf_free(p);
 8018a06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018a08:	f000 fada 	bl	8018fc0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	e0a7      	b.n	8018b60 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018a10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a12:	3303      	adds	r3, #3
 8018a14:	b29b      	uxth	r3, r3
 8018a16:	f023 0303 	bic.w	r3, r3, #3
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	8b7a      	ldrh	r2, [r7, #26]
 8018a24:	4293      	cmp	r3, r2
 8018a26:	bf28      	it	cs
 8018a28:	4613      	movcs	r3, r2
 8018a2a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018a2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a2e:	3310      	adds	r3, #16
 8018a30:	693a      	ldr	r2, [r7, #16]
 8018a32:	4413      	add	r3, r2
 8018a34:	3303      	adds	r3, #3
 8018a36:	f023 0303 	bic.w	r3, r3, #3
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	89f9      	ldrh	r1, [r7, #14]
 8018a3e:	8b7a      	ldrh	r2, [r7, #26]
 8018a40:	2300      	movs	r3, #0
 8018a42:	9301      	str	r3, [sp, #4]
 8018a44:	887b      	ldrh	r3, [r7, #2]
 8018a46:	9300      	str	r3, [sp, #0]
 8018a48:	460b      	mov	r3, r1
 8018a4a:	4601      	mov	r1, r0
 8018a4c:	6938      	ldr	r0, [r7, #16]
 8018a4e:	f7ff ff77 	bl	8018940 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	f003 0303 	and.w	r3, r3, #3
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d006      	beq.n	8018a6c <pbuf_alloc+0xd8>
 8018a5e:	4b42      	ldr	r3, [pc, #264]	@ (8018b68 <pbuf_alloc+0x1d4>)
 8018a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018a64:	4941      	ldr	r1, [pc, #260]	@ (8018b6c <pbuf_alloc+0x1d8>)
 8018a66:	4842      	ldr	r0, [pc, #264]	@ (8018b70 <pbuf_alloc+0x1dc>)
 8018a68:	f00a fdfe 	bl	8023668 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8018a6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a6e:	3303      	adds	r3, #3
 8018a70:	f023 0303 	bic.w	r3, r3, #3
 8018a74:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8018a78:	d106      	bne.n	8018a88 <pbuf_alloc+0xf4>
 8018a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8018b68 <pbuf_alloc+0x1d4>)
 8018a7c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8018a80:	493c      	ldr	r1, [pc, #240]	@ (8018b74 <pbuf_alloc+0x1e0>)
 8018a82:	483b      	ldr	r0, [pc, #236]	@ (8018b70 <pbuf_alloc+0x1dc>)
 8018a84:	f00a fdf0 	bl	8023668 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8018a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d102      	bne.n	8018a94 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8018a8e:	693b      	ldr	r3, [r7, #16]
 8018a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8018a92:	e002      	b.n	8018a9a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8018a94:	69fb      	ldr	r3, [r7, #28]
 8018a96:	693a      	ldr	r2, [r7, #16]
 8018a98:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8018a9a:	693b      	ldr	r3, [r7, #16]
 8018a9c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018a9e:	8b7a      	ldrh	r2, [r7, #26]
 8018aa0:	89fb      	ldrh	r3, [r7, #14]
 8018aa2:	1ad3      	subs	r3, r2, r3
 8018aa4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8018aaa:	8b7b      	ldrh	r3, [r7, #26]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d19e      	bne.n	80189ee <pbuf_alloc+0x5a>
      break;
 8018ab0:	e055      	b.n	8018b5e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018ab2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018ab4:	3303      	adds	r3, #3
 8018ab6:	b29b      	uxth	r3, r3
 8018ab8:	f023 0303 	bic.w	r3, r3, #3
 8018abc:	b29a      	uxth	r2, r3
 8018abe:	88bb      	ldrh	r3, [r7, #4]
 8018ac0:	3303      	adds	r3, #3
 8018ac2:	b29b      	uxth	r3, r3
 8018ac4:	f023 0303 	bic.w	r3, r3, #3
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	4413      	add	r3, r2
 8018acc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018ace:	8b3b      	ldrh	r3, [r7, #24]
 8018ad0:	3310      	adds	r3, #16
 8018ad2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018ad4:	8b3a      	ldrh	r2, [r7, #24]
 8018ad6:	88bb      	ldrh	r3, [r7, #4]
 8018ad8:	3303      	adds	r3, #3
 8018ada:	f023 0303 	bic.w	r3, r3, #3
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d306      	bcc.n	8018af0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018ae2:	8afa      	ldrh	r2, [r7, #22]
 8018ae4:	88bb      	ldrh	r3, [r7, #4]
 8018ae6:	3303      	adds	r3, #3
 8018ae8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d201      	bcs.n	8018af4 <pbuf_alloc+0x160>
        return NULL;
 8018af0:	2300      	movs	r3, #0
 8018af2:	e035      	b.n	8018b60 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018af4:	8afb      	ldrh	r3, [r7, #22]
 8018af6:	4618      	mov	r0, r3
 8018af8:	f7ff f96e 	bl	8017dd8 <mem_malloc>
 8018afc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8018afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d101      	bne.n	8018b08 <pbuf_alloc+0x174>
        return NULL;
 8018b04:	2300      	movs	r3, #0
 8018b06:	e02b      	b.n	8018b60 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018b08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b0a:	3310      	adds	r3, #16
 8018b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b0e:	4413      	add	r3, r2
 8018b10:	3303      	adds	r3, #3
 8018b12:	f023 0303 	bic.w	r3, r3, #3
 8018b16:	4618      	mov	r0, r3
 8018b18:	88b9      	ldrh	r1, [r7, #4]
 8018b1a:	88ba      	ldrh	r2, [r7, #4]
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	9301      	str	r3, [sp, #4]
 8018b20:	887b      	ldrh	r3, [r7, #2]
 8018b22:	9300      	str	r3, [sp, #0]
 8018b24:	460b      	mov	r3, r1
 8018b26:	4601      	mov	r1, r0
 8018b28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b2a:	f7ff ff09 	bl	8018940 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	f003 0303 	and.w	r3, r3, #3
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d010      	beq.n	8018b5c <pbuf_alloc+0x1c8>
 8018b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8018b68 <pbuf_alloc+0x1d4>)
 8018b3c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8018b40:	490d      	ldr	r1, [pc, #52]	@ (8018b78 <pbuf_alloc+0x1e4>)
 8018b42:	480b      	ldr	r0, [pc, #44]	@ (8018b70 <pbuf_alloc+0x1dc>)
 8018b44:	f00a fd90 	bl	8023668 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8018b48:	e008      	b.n	8018b5c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018b4a:	4b07      	ldr	r3, [pc, #28]	@ (8018b68 <pbuf_alloc+0x1d4>)
 8018b4c:	f240 1227 	movw	r2, #295	@ 0x127
 8018b50:	490a      	ldr	r1, [pc, #40]	@ (8018b7c <pbuf_alloc+0x1e8>)
 8018b52:	4807      	ldr	r0, [pc, #28]	@ (8018b70 <pbuf_alloc+0x1dc>)
 8018b54:	f00a fd88 	bl	8023668 <iprintf>
      return NULL;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	e001      	b.n	8018b60 <pbuf_alloc+0x1cc>
      break;
 8018b5c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018b60:	4618      	mov	r0, r3
 8018b62:	3728      	adds	r7, #40	@ 0x28
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bd80      	pop	{r7, pc}
 8018b68:	08025afc 	.word	0x08025afc
 8018b6c:	08025b2c 	.word	0x08025b2c
 8018b70:	08025b5c 	.word	0x08025b5c
 8018b74:	08025b84 	.word	0x08025b84
 8018b78:	08025bb8 	.word	0x08025bb8
 8018b7c:	08025be4 	.word	0x08025be4

08018b80 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b086      	sub	sp, #24
 8018b84:	af02      	add	r7, sp, #8
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	460b      	mov	r3, r1
 8018b8a:	807b      	strh	r3, [r7, #2]
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018b90:	883b      	ldrh	r3, [r7, #0]
 8018b92:	2b41      	cmp	r3, #65	@ 0x41
 8018b94:	d009      	beq.n	8018baa <pbuf_alloc_reference+0x2a>
 8018b96:	883b      	ldrh	r3, [r7, #0]
 8018b98:	2b01      	cmp	r3, #1
 8018b9a:	d006      	beq.n	8018baa <pbuf_alloc_reference+0x2a>
 8018b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8018bdc <pbuf_alloc_reference+0x5c>)
 8018b9e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8018ba2:	490f      	ldr	r1, [pc, #60]	@ (8018be0 <pbuf_alloc_reference+0x60>)
 8018ba4:	480f      	ldr	r0, [pc, #60]	@ (8018be4 <pbuf_alloc_reference+0x64>)
 8018ba6:	f00a fd5f 	bl	8023668 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018baa:	200b      	movs	r0, #11
 8018bac:	f7ff fabc 	bl	8018128 <memp_malloc>
 8018bb0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d101      	bne.n	8018bbc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	e00b      	b.n	8018bd4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018bbc:	8879      	ldrh	r1, [r7, #2]
 8018bbe:	887a      	ldrh	r2, [r7, #2]
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	9301      	str	r3, [sp, #4]
 8018bc4:	883b      	ldrh	r3, [r7, #0]
 8018bc6:	9300      	str	r3, [sp, #0]
 8018bc8:	460b      	mov	r3, r1
 8018bca:	6879      	ldr	r1, [r7, #4]
 8018bcc:	68f8      	ldr	r0, [r7, #12]
 8018bce:	f7ff feb7 	bl	8018940 <pbuf_init_alloced_pbuf>
  return p;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	3710      	adds	r7, #16
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd80      	pop	{r7, pc}
 8018bdc:	08025afc 	.word	0x08025afc
 8018be0:	08025c00 	.word	0x08025c00
 8018be4:	08025b5c 	.word	0x08025b5c

08018be8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b088      	sub	sp, #32
 8018bec:	af02      	add	r7, sp, #8
 8018bee:	607b      	str	r3, [r7, #4]
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	73fb      	strb	r3, [r7, #15]
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	81bb      	strh	r3, [r7, #12]
 8018bf8:	4613      	mov	r3, r2
 8018bfa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8018bfc:	7bfb      	ldrb	r3, [r7, #15]
 8018bfe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018c00:	8a7b      	ldrh	r3, [r7, #18]
 8018c02:	3303      	adds	r3, #3
 8018c04:	f023 0203 	bic.w	r2, r3, #3
 8018c08:	89bb      	ldrh	r3, [r7, #12]
 8018c0a:	441a      	add	r2, r3
 8018c0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018c0e:	429a      	cmp	r2, r3
 8018c10:	d901      	bls.n	8018c16 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8018c12:	2300      	movs	r3, #0
 8018c14:	e018      	b.n	8018c48 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8018c16:	6a3b      	ldr	r3, [r7, #32]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d007      	beq.n	8018c2c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018c1c:	8a7b      	ldrh	r3, [r7, #18]
 8018c1e:	3303      	adds	r3, #3
 8018c20:	f023 0303 	bic.w	r3, r3, #3
 8018c24:	6a3a      	ldr	r2, [r7, #32]
 8018c26:	4413      	add	r3, r2
 8018c28:	617b      	str	r3, [r7, #20]
 8018c2a:	e001      	b.n	8018c30 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	89b9      	ldrh	r1, [r7, #12]
 8018c34:	89ba      	ldrh	r2, [r7, #12]
 8018c36:	2302      	movs	r3, #2
 8018c38:	9301      	str	r3, [sp, #4]
 8018c3a:	897b      	ldrh	r3, [r7, #10]
 8018c3c:	9300      	str	r3, [sp, #0]
 8018c3e:	460b      	mov	r3, r1
 8018c40:	6979      	ldr	r1, [r7, #20]
 8018c42:	f7ff fe7d 	bl	8018940 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8018c46:	687b      	ldr	r3, [r7, #4]
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	3718      	adds	r7, #24
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}

08018c50 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b084      	sub	sp, #16
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	460b      	mov	r3, r1
 8018c5a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d106      	bne.n	8018c70 <pbuf_realloc+0x20>
 8018c62:	4b3a      	ldr	r3, [pc, #232]	@ (8018d4c <pbuf_realloc+0xfc>)
 8018c64:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8018c68:	4939      	ldr	r1, [pc, #228]	@ (8018d50 <pbuf_realloc+0x100>)
 8018c6a:	483a      	ldr	r0, [pc, #232]	@ (8018d54 <pbuf_realloc+0x104>)
 8018c6c:	f00a fcfc 	bl	8023668 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	891b      	ldrh	r3, [r3, #8]
 8018c74:	887a      	ldrh	r2, [r7, #2]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d263      	bcs.n	8018d42 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	891a      	ldrh	r2, [r3, #8]
 8018c7e:	887b      	ldrh	r3, [r7, #2]
 8018c80:	1ad3      	subs	r3, r2, r3
 8018c82:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8018c84:	887b      	ldrh	r3, [r7, #2]
 8018c86:	817b      	strh	r3, [r7, #10]
  q = p;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018c8c:	e018      	b.n	8018cc0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	895b      	ldrh	r3, [r3, #10]
 8018c92:	897a      	ldrh	r2, [r7, #10]
 8018c94:	1ad3      	subs	r3, r2, r3
 8018c96:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	891a      	ldrh	r2, [r3, #8]
 8018c9c:	893b      	ldrh	r3, [r7, #8]
 8018c9e:	1ad3      	subs	r3, r2, r3
 8018ca0:	b29a      	uxth	r2, r3
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d106      	bne.n	8018cc0 <pbuf_realloc+0x70>
 8018cb2:	4b26      	ldr	r3, [pc, #152]	@ (8018d4c <pbuf_realloc+0xfc>)
 8018cb4:	f240 12af 	movw	r2, #431	@ 0x1af
 8018cb8:	4927      	ldr	r1, [pc, #156]	@ (8018d58 <pbuf_realloc+0x108>)
 8018cba:	4826      	ldr	r0, [pc, #152]	@ (8018d54 <pbuf_realloc+0x104>)
 8018cbc:	f00a fcd4 	bl	8023668 <iprintf>
  while (rem_len > q->len) {
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	895b      	ldrh	r3, [r3, #10]
 8018cc4:	897a      	ldrh	r2, [r7, #10]
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d8e1      	bhi.n	8018c8e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	7b1b      	ldrb	r3, [r3, #12]
 8018cce:	f003 030f 	and.w	r3, r3, #15
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d121      	bne.n	8018d1a <pbuf_realloc+0xca>
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	895b      	ldrh	r3, [r3, #10]
 8018cda:	897a      	ldrh	r2, [r7, #10]
 8018cdc:	429a      	cmp	r2, r3
 8018cde:	d01c      	beq.n	8018d1a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	7b5b      	ldrb	r3, [r3, #13]
 8018ce4:	f003 0302 	and.w	r3, r3, #2
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d116      	bne.n	8018d1a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	685a      	ldr	r2, [r3, #4]
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	1ad3      	subs	r3, r2, r3
 8018cf4:	b29a      	uxth	r2, r3
 8018cf6:	897b      	ldrh	r3, [r7, #10]
 8018cf8:	4413      	add	r3, r2
 8018cfa:	b29b      	uxth	r3, r3
 8018cfc:	4619      	mov	r1, r3
 8018cfe:	68f8      	ldr	r0, [r7, #12]
 8018d00:	f7fe ff5a 	bl	8017bb8 <mem_trim>
 8018d04:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d106      	bne.n	8018d1a <pbuf_realloc+0xca>
 8018d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8018d4c <pbuf_realloc+0xfc>)
 8018d0e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8018d12:	4912      	ldr	r1, [pc, #72]	@ (8018d5c <pbuf_realloc+0x10c>)
 8018d14:	480f      	ldr	r0, [pc, #60]	@ (8018d54 <pbuf_realloc+0x104>)
 8018d16:	f00a fca7 	bl	8023668 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	897a      	ldrh	r2, [r7, #10]
 8018d1e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	895a      	ldrh	r2, [r3, #10]
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d004      	beq.n	8018d3a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	4618      	mov	r0, r3
 8018d36:	f000 f943 	bl	8018fc0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	601a      	str	r2, [r3, #0]
 8018d40:	e000      	b.n	8018d44 <pbuf_realloc+0xf4>
    return;
 8018d42:	bf00      	nop

}
 8018d44:	3710      	adds	r7, #16
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}
 8018d4a:	bf00      	nop
 8018d4c:	08025afc 	.word	0x08025afc
 8018d50:	08025c14 	.word	0x08025c14
 8018d54:	08025b5c 	.word	0x08025b5c
 8018d58:	08025c2c 	.word	0x08025c2c
 8018d5c:	08025c44 	.word	0x08025c44

08018d60 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b086      	sub	sp, #24
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	60f8      	str	r0, [r7, #12]
 8018d68:	60b9      	str	r1, [r7, #8]
 8018d6a:	4613      	mov	r3, r2
 8018d6c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d106      	bne.n	8018d82 <pbuf_add_header_impl+0x22>
 8018d74:	4b2b      	ldr	r3, [pc, #172]	@ (8018e24 <pbuf_add_header_impl+0xc4>)
 8018d76:	f240 12df 	movw	r2, #479	@ 0x1df
 8018d7a:	492b      	ldr	r1, [pc, #172]	@ (8018e28 <pbuf_add_header_impl+0xc8>)
 8018d7c:	482b      	ldr	r0, [pc, #172]	@ (8018e2c <pbuf_add_header_impl+0xcc>)
 8018d7e:	f00a fc73 	bl	8023668 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d003      	beq.n	8018d90 <pbuf_add_header_impl+0x30>
 8018d88:	68bb      	ldr	r3, [r7, #8]
 8018d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018d8e:	d301      	bcc.n	8018d94 <pbuf_add_header_impl+0x34>
    return 1;
 8018d90:	2301      	movs	r3, #1
 8018d92:	e043      	b.n	8018e1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d101      	bne.n	8018d9e <pbuf_add_header_impl+0x3e>
    return 0;
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	e03e      	b.n	8018e1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	891a      	ldrh	r2, [r3, #8]
 8018da6:	8a7b      	ldrh	r3, [r7, #18]
 8018da8:	4413      	add	r3, r2
 8018daa:	b29b      	uxth	r3, r3
 8018dac:	8a7a      	ldrh	r2, [r7, #18]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d901      	bls.n	8018db6 <pbuf_add_header_impl+0x56>
    return 1;
 8018db2:	2301      	movs	r3, #1
 8018db4:	e032      	b.n	8018e1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	7b1b      	ldrb	r3, [r3, #12]
 8018dba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018dbc:	8a3b      	ldrh	r3, [r7, #16]
 8018dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d00c      	beq.n	8018de0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	685a      	ldr	r2, [r3, #4]
 8018dca:	68bb      	ldr	r3, [r7, #8]
 8018dcc:	425b      	negs	r3, r3
 8018dce:	4413      	add	r3, r2
 8018dd0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	3310      	adds	r3, #16
 8018dd6:	697a      	ldr	r2, [r7, #20]
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d20d      	bcs.n	8018df8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8018ddc:	2301      	movs	r3, #1
 8018dde:	e01d      	b.n	8018e1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018de0:	79fb      	ldrb	r3, [r7, #7]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d006      	beq.n	8018df4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	685a      	ldr	r2, [r3, #4]
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	425b      	negs	r3, r3
 8018dee:	4413      	add	r3, r2
 8018df0:	617b      	str	r3, [r7, #20]
 8018df2:	e001      	b.n	8018df8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8018df4:	2301      	movs	r3, #1
 8018df6:	e011      	b.n	8018e1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	697a      	ldr	r2, [r7, #20]
 8018dfc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	895a      	ldrh	r2, [r3, #10]
 8018e02:	8a7b      	ldrh	r3, [r7, #18]
 8018e04:	4413      	add	r3, r2
 8018e06:	b29a      	uxth	r2, r3
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	891a      	ldrh	r2, [r3, #8]
 8018e10:	8a7b      	ldrh	r3, [r7, #18]
 8018e12:	4413      	add	r3, r2
 8018e14:	b29a      	uxth	r2, r3
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	811a      	strh	r2, [r3, #8]


  return 0;
 8018e1a:	2300      	movs	r3, #0
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	3718      	adds	r7, #24
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}
 8018e24:	08025afc 	.word	0x08025afc
 8018e28:	08025c60 	.word	0x08025c60
 8018e2c:	08025b5c 	.word	0x08025b5c

08018e30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b082      	sub	sp, #8
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	6839      	ldr	r1, [r7, #0]
 8018e3e:	6878      	ldr	r0, [r7, #4]
 8018e40:	f7ff ff8e 	bl	8018d60 <pbuf_add_header_impl>
 8018e44:	4603      	mov	r3, r0
}
 8018e46:	4618      	mov	r0, r3
 8018e48:	3708      	adds	r7, #8
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}
	...

08018e50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b084      	sub	sp, #16
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	6078      	str	r0, [r7, #4]
 8018e58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d106      	bne.n	8018e6e <pbuf_remove_header+0x1e>
 8018e60:	4b20      	ldr	r3, [pc, #128]	@ (8018ee4 <pbuf_remove_header+0x94>)
 8018e62:	f240 224b 	movw	r2, #587	@ 0x24b
 8018e66:	4920      	ldr	r1, [pc, #128]	@ (8018ee8 <pbuf_remove_header+0x98>)
 8018e68:	4820      	ldr	r0, [pc, #128]	@ (8018eec <pbuf_remove_header+0x9c>)
 8018e6a:	f00a fbfd 	bl	8023668 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d003      	beq.n	8018e7c <pbuf_remove_header+0x2c>
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018e7a:	d301      	bcc.n	8018e80 <pbuf_remove_header+0x30>
    return 1;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	e02c      	b.n	8018eda <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d101      	bne.n	8018e8a <pbuf_remove_header+0x3a>
    return 0;
 8018e86:	2300      	movs	r3, #0
 8018e88:	e027      	b.n	8018eda <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	895b      	ldrh	r3, [r3, #10]
 8018e92:	89fa      	ldrh	r2, [r7, #14]
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d908      	bls.n	8018eaa <pbuf_remove_header+0x5a>
 8018e98:	4b12      	ldr	r3, [pc, #72]	@ (8018ee4 <pbuf_remove_header+0x94>)
 8018e9a:	f240 2255 	movw	r2, #597	@ 0x255
 8018e9e:	4914      	ldr	r1, [pc, #80]	@ (8018ef0 <pbuf_remove_header+0xa0>)
 8018ea0:	4812      	ldr	r0, [pc, #72]	@ (8018eec <pbuf_remove_header+0x9c>)
 8018ea2:	f00a fbe1 	bl	8023668 <iprintf>
 8018ea6:	2301      	movs	r3, #1
 8018ea8:	e017      	b.n	8018eda <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	685b      	ldr	r3, [r3, #4]
 8018eae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	685a      	ldr	r2, [r3, #4]
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	441a      	add	r2, r3
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	895a      	ldrh	r2, [r3, #10]
 8018ec0:	89fb      	ldrh	r3, [r7, #14]
 8018ec2:	1ad3      	subs	r3, r2, r3
 8018ec4:	b29a      	uxth	r2, r3
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	891a      	ldrh	r2, [r3, #8]
 8018ece:	89fb      	ldrh	r3, [r7, #14]
 8018ed0:	1ad3      	subs	r3, r2, r3
 8018ed2:	b29a      	uxth	r2, r3
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018ed8:	2300      	movs	r3, #0
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	3710      	adds	r7, #16
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	08025afc 	.word	0x08025afc
 8018ee8:	08025c60 	.word	0x08025c60
 8018eec:	08025b5c 	.word	0x08025b5c
 8018ef0:	08025c6c 	.word	0x08025c6c

08018ef4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b082      	sub	sp, #8
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
 8018efc:	460b      	mov	r3, r1
 8018efe:	807b      	strh	r3, [r7, #2]
 8018f00:	4613      	mov	r3, r2
 8018f02:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8018f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	da08      	bge.n	8018f1e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8018f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018f10:	425b      	negs	r3, r3
 8018f12:	4619      	mov	r1, r3
 8018f14:	6878      	ldr	r0, [r7, #4]
 8018f16:	f7ff ff9b 	bl	8018e50 <pbuf_remove_header>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	e007      	b.n	8018f2e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8018f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018f22:	787a      	ldrb	r2, [r7, #1]
 8018f24:	4619      	mov	r1, r3
 8018f26:	6878      	ldr	r0, [r7, #4]
 8018f28:	f7ff ff1a 	bl	8018d60 <pbuf_add_header_impl>
 8018f2c:	4603      	mov	r3, r0
  }
}
 8018f2e:	4618      	mov	r0, r3
 8018f30:	3708      	adds	r7, #8
 8018f32:	46bd      	mov	sp, r7
 8018f34:	bd80      	pop	{r7, pc}

08018f36 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018f36:	b580      	push	{r7, lr}
 8018f38:	b082      	sub	sp, #8
 8018f3a:	af00      	add	r7, sp, #0
 8018f3c:	6078      	str	r0, [r7, #4]
 8018f3e:	460b      	mov	r3, r1
 8018f40:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8018f42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018f46:	2201      	movs	r2, #1
 8018f48:	4619      	mov	r1, r3
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f7ff ffd2 	bl	8018ef4 <pbuf_header_impl>
 8018f50:	4603      	mov	r3, r0
}
 8018f52:	4618      	mov	r0, r3
 8018f54:	3708      	adds	r7, #8
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}

08018f5a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8018f5a:	b580      	push	{r7, lr}
 8018f5c:	b086      	sub	sp, #24
 8018f5e:	af00      	add	r7, sp, #0
 8018f60:	6078      	str	r0, [r7, #4]
 8018f62:	460b      	mov	r3, r1
 8018f64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8018f6a:	887b      	ldrh	r3, [r7, #2]
 8018f6c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8018f6e:	e01c      	b.n	8018faa <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	895b      	ldrh	r3, [r3, #10]
 8018f74:	8a7a      	ldrh	r2, [r7, #18]
 8018f76:	429a      	cmp	r2, r3
 8018f78:	d310      	bcc.n	8018f9c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8018f7a:	697b      	ldr	r3, [r7, #20]
 8018f7c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	895b      	ldrh	r3, [r3, #10]
 8018f82:	8a7a      	ldrh	r2, [r7, #18]
 8018f84:	1ad3      	subs	r3, r2, r3
 8018f86:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	2200      	movs	r2, #0
 8018f92:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8018f94:	68f8      	ldr	r0, [r7, #12]
 8018f96:	f000 f813 	bl	8018fc0 <pbuf_free>
 8018f9a:	e006      	b.n	8018faa <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8018f9c:	8a7b      	ldrh	r3, [r7, #18]
 8018f9e:	4619      	mov	r1, r3
 8018fa0:	6978      	ldr	r0, [r7, #20]
 8018fa2:	f7ff ff55 	bl	8018e50 <pbuf_remove_header>
      free_left = 0;
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8018faa:	8a7b      	ldrh	r3, [r7, #18]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d002      	beq.n	8018fb6 <pbuf_free_header+0x5c>
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d1dc      	bne.n	8018f70 <pbuf_free_header+0x16>
    }
  }
  return p;
 8018fb6:	697b      	ldr	r3, [r7, #20]
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	3718      	adds	r7, #24
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b088      	sub	sp, #32
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d10b      	bne.n	8018fe6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d106      	bne.n	8018fe2 <pbuf_free+0x22>
 8018fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80190c4 <pbuf_free+0x104>)
 8018fd6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8018fda:	493b      	ldr	r1, [pc, #236]	@ (80190c8 <pbuf_free+0x108>)
 8018fdc:	483b      	ldr	r0, [pc, #236]	@ (80190cc <pbuf_free+0x10c>)
 8018fde:	f00a fb43 	bl	8023668 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	e069      	b.n	80190ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8018fea:	e062      	b.n	80190b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8018fec:	f009 fde2 	bl	8022bb4 <sys_arch_protect>
 8018ff0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	7b9b      	ldrb	r3, [r3, #14]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d106      	bne.n	8019008 <pbuf_free+0x48>
 8018ffa:	4b32      	ldr	r3, [pc, #200]	@ (80190c4 <pbuf_free+0x104>)
 8018ffc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8019000:	4933      	ldr	r1, [pc, #204]	@ (80190d0 <pbuf_free+0x110>)
 8019002:	4832      	ldr	r0, [pc, #200]	@ (80190cc <pbuf_free+0x10c>)
 8019004:	f00a fb30 	bl	8023668 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	7b9b      	ldrb	r3, [r3, #14]
 801900c:	3b01      	subs	r3, #1
 801900e:	b2da      	uxtb	r2, r3
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	739a      	strb	r2, [r3, #14]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	7b9b      	ldrb	r3, [r3, #14]
 8019018:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801901a:	69b8      	ldr	r0, [r7, #24]
 801901c:	f009 fdd8 	bl	8022bd0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8019020:	7dfb      	ldrb	r3, [r7, #23]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d143      	bne.n	80190ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	7b1b      	ldrb	r3, [r3, #12]
 8019030:	f003 030f 	and.w	r3, r3, #15
 8019034:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	7b5b      	ldrb	r3, [r3, #13]
 801903a:	f003 0302 	and.w	r3, r3, #2
 801903e:	2b00      	cmp	r3, #0
 8019040:	d011      	beq.n	8019066 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019046:	68bb      	ldr	r3, [r7, #8]
 8019048:	691b      	ldr	r3, [r3, #16]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d106      	bne.n	801905c <pbuf_free+0x9c>
 801904e:	4b1d      	ldr	r3, [pc, #116]	@ (80190c4 <pbuf_free+0x104>)
 8019050:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8019054:	491f      	ldr	r1, [pc, #124]	@ (80190d4 <pbuf_free+0x114>)
 8019056:	481d      	ldr	r0, [pc, #116]	@ (80190cc <pbuf_free+0x10c>)
 8019058:	f00a fb06 	bl	8023668 <iprintf>
        pc->custom_free_function(p);
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	691b      	ldr	r3, [r3, #16]
 8019060:	6878      	ldr	r0, [r7, #4]
 8019062:	4798      	blx	r3
 8019064:	e01d      	b.n	80190a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8019066:	7bfb      	ldrb	r3, [r7, #15]
 8019068:	2b02      	cmp	r3, #2
 801906a:	d104      	bne.n	8019076 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801906c:	6879      	ldr	r1, [r7, #4]
 801906e:	200c      	movs	r0, #12
 8019070:	f7ff f8d0 	bl	8018214 <memp_free>
 8019074:	e015      	b.n	80190a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8019076:	7bfb      	ldrb	r3, [r7, #15]
 8019078:	2b01      	cmp	r3, #1
 801907a:	d104      	bne.n	8019086 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801907c:	6879      	ldr	r1, [r7, #4]
 801907e:	200b      	movs	r0, #11
 8019080:	f7ff f8c8 	bl	8018214 <memp_free>
 8019084:	e00d      	b.n	80190a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8019086:	7bfb      	ldrb	r3, [r7, #15]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d103      	bne.n	8019094 <pbuf_free+0xd4>
          mem_free(p);
 801908c:	6878      	ldr	r0, [r7, #4]
 801908e:	f7fe fd03 	bl	8017a98 <mem_free>
 8019092:	e006      	b.n	80190a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8019094:	4b0b      	ldr	r3, [pc, #44]	@ (80190c4 <pbuf_free+0x104>)
 8019096:	f240 320f 	movw	r2, #783	@ 0x30f
 801909a:	490f      	ldr	r1, [pc, #60]	@ (80190d8 <pbuf_free+0x118>)
 801909c:	480b      	ldr	r0, [pc, #44]	@ (80190cc <pbuf_free+0x10c>)
 801909e:	f00a fae3 	bl	8023668 <iprintf>
        }
      }
      count++;
 80190a2:	7ffb      	ldrb	r3, [r7, #31]
 80190a4:	3301      	adds	r3, #1
 80190a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80190a8:	693b      	ldr	r3, [r7, #16]
 80190aa:	607b      	str	r3, [r7, #4]
 80190ac:	e001      	b.n	80190b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80190ae:	2300      	movs	r3, #0
 80190b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d199      	bne.n	8018fec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80190b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	3720      	adds	r7, #32
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd80      	pop	{r7, pc}
 80190c2:	bf00      	nop
 80190c4:	08025afc 	.word	0x08025afc
 80190c8:	08025c60 	.word	0x08025c60
 80190cc:	08025b5c 	.word	0x08025b5c
 80190d0:	08025c8c 	.word	0x08025c8c
 80190d4:	08025ca4 	.word	0x08025ca4
 80190d8:	08025cc8 	.word	0x08025cc8

080190dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80190dc:	b480      	push	{r7}
 80190de:	b085      	sub	sp, #20
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80190e4:	2300      	movs	r3, #0
 80190e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80190e8:	e005      	b.n	80190f6 <pbuf_clen+0x1a>
    ++len;
 80190ea:	89fb      	ldrh	r3, [r7, #14]
 80190ec:	3301      	adds	r3, #1
 80190ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d1f6      	bne.n	80190ea <pbuf_clen+0xe>
  }
  return len;
 80190fc:	89fb      	ldrh	r3, [r7, #14]
}
 80190fe:	4618      	mov	r0, r3
 8019100:	3714      	adds	r7, #20
 8019102:	46bd      	mov	sp, r7
 8019104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019108:	4770      	bx	lr
	...

0801910c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b084      	sub	sp, #16
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d016      	beq.n	8019148 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801911a:	f009 fd4b 	bl	8022bb4 <sys_arch_protect>
 801911e:	60f8      	str	r0, [r7, #12]
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	7b9b      	ldrb	r3, [r3, #14]
 8019124:	3301      	adds	r3, #1
 8019126:	b2da      	uxtb	r2, r3
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	739a      	strb	r2, [r3, #14]
 801912c:	68f8      	ldr	r0, [r7, #12]
 801912e:	f009 fd4f 	bl	8022bd0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	7b9b      	ldrb	r3, [r3, #14]
 8019136:	2b00      	cmp	r3, #0
 8019138:	d106      	bne.n	8019148 <pbuf_ref+0x3c>
 801913a:	4b05      	ldr	r3, [pc, #20]	@ (8019150 <pbuf_ref+0x44>)
 801913c:	f240 3242 	movw	r2, #834	@ 0x342
 8019140:	4904      	ldr	r1, [pc, #16]	@ (8019154 <pbuf_ref+0x48>)
 8019142:	4805      	ldr	r0, [pc, #20]	@ (8019158 <pbuf_ref+0x4c>)
 8019144:	f00a fa90 	bl	8023668 <iprintf>
  }
}
 8019148:	bf00      	nop
 801914a:	3710      	adds	r7, #16
 801914c:	46bd      	mov	sp, r7
 801914e:	bd80      	pop	{r7, pc}
 8019150:	08025afc 	.word	0x08025afc
 8019154:	08025cdc 	.word	0x08025cdc
 8019158:	08025b5c 	.word	0x08025b5c

0801915c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b084      	sub	sp, #16
 8019160:	af00      	add	r7, sp, #0
 8019162:	6078      	str	r0, [r7, #4]
 8019164:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d002      	beq.n	8019172 <pbuf_cat+0x16>
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d107      	bne.n	8019182 <pbuf_cat+0x26>
 8019172:	4b20      	ldr	r3, [pc, #128]	@ (80191f4 <pbuf_cat+0x98>)
 8019174:	f240 3259 	movw	r2, #857	@ 0x359
 8019178:	491f      	ldr	r1, [pc, #124]	@ (80191f8 <pbuf_cat+0x9c>)
 801917a:	4820      	ldr	r0, [pc, #128]	@ (80191fc <pbuf_cat+0xa0>)
 801917c:	f00a fa74 	bl	8023668 <iprintf>
 8019180:	e034      	b.n	80191ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	60fb      	str	r3, [r7, #12]
 8019186:	e00a      	b.n	801919e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	891a      	ldrh	r2, [r3, #8]
 801918c:	683b      	ldr	r3, [r7, #0]
 801918e:	891b      	ldrh	r3, [r3, #8]
 8019190:	4413      	add	r3, r2
 8019192:	b29a      	uxth	r2, r3
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	60fb      	str	r3, [r7, #12]
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d1f0      	bne.n	8019188 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	891a      	ldrh	r2, [r3, #8]
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	895b      	ldrh	r3, [r3, #10]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	d006      	beq.n	80191c0 <pbuf_cat+0x64>
 80191b2:	4b10      	ldr	r3, [pc, #64]	@ (80191f4 <pbuf_cat+0x98>)
 80191b4:	f240 3262 	movw	r2, #866	@ 0x362
 80191b8:	4911      	ldr	r1, [pc, #68]	@ (8019200 <pbuf_cat+0xa4>)
 80191ba:	4810      	ldr	r0, [pc, #64]	@ (80191fc <pbuf_cat+0xa0>)
 80191bc:	f00a fa54 	bl	8023668 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d006      	beq.n	80191d6 <pbuf_cat+0x7a>
 80191c8:	4b0a      	ldr	r3, [pc, #40]	@ (80191f4 <pbuf_cat+0x98>)
 80191ca:	f240 3263 	movw	r2, #867	@ 0x363
 80191ce:	490d      	ldr	r1, [pc, #52]	@ (8019204 <pbuf_cat+0xa8>)
 80191d0:	480a      	ldr	r0, [pc, #40]	@ (80191fc <pbuf_cat+0xa0>)
 80191d2:	f00a fa49 	bl	8023668 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	891a      	ldrh	r2, [r3, #8]
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	891b      	ldrh	r3, [r3, #8]
 80191de:	4413      	add	r3, r2
 80191e0:	b29a      	uxth	r2, r3
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	683a      	ldr	r2, [r7, #0]
 80191ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80191ec:	3710      	adds	r7, #16
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}
 80191f2:	bf00      	nop
 80191f4:	08025afc 	.word	0x08025afc
 80191f8:	08025cf0 	.word	0x08025cf0
 80191fc:	08025b5c 	.word	0x08025b5c
 8019200:	08025d28 	.word	0x08025d28
 8019204:	08025d58 	.word	0x08025d58

08019208 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b086      	sub	sp, #24
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
 8019210:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8019212:	2300      	movs	r3, #0
 8019214:	617b      	str	r3, [r7, #20]
 8019216:	2300      	movs	r3, #0
 8019218:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d008      	beq.n	8019232 <pbuf_copy+0x2a>
 8019220:	683b      	ldr	r3, [r7, #0]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d005      	beq.n	8019232 <pbuf_copy+0x2a>
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	891a      	ldrh	r2, [r3, #8]
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	891b      	ldrh	r3, [r3, #8]
 801922e:	429a      	cmp	r2, r3
 8019230:	d209      	bcs.n	8019246 <pbuf_copy+0x3e>
 8019232:	4b57      	ldr	r3, [pc, #348]	@ (8019390 <pbuf_copy+0x188>)
 8019234:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8019238:	4956      	ldr	r1, [pc, #344]	@ (8019394 <pbuf_copy+0x18c>)
 801923a:	4857      	ldr	r0, [pc, #348]	@ (8019398 <pbuf_copy+0x190>)
 801923c:	f00a fa14 	bl	8023668 <iprintf>
 8019240:	f06f 030f 	mvn.w	r3, #15
 8019244:	e09f      	b.n	8019386 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	895b      	ldrh	r3, [r3, #10]
 801924a:	461a      	mov	r2, r3
 801924c:	697b      	ldr	r3, [r7, #20]
 801924e:	1ad2      	subs	r2, r2, r3
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	895b      	ldrh	r3, [r3, #10]
 8019254:	4619      	mov	r1, r3
 8019256:	693b      	ldr	r3, [r7, #16]
 8019258:	1acb      	subs	r3, r1, r3
 801925a:	429a      	cmp	r2, r3
 801925c:	d306      	bcc.n	801926c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801925e:	683b      	ldr	r3, [r7, #0]
 8019260:	895b      	ldrh	r3, [r3, #10]
 8019262:	461a      	mov	r2, r3
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	1ad3      	subs	r3, r2, r3
 8019268:	60fb      	str	r3, [r7, #12]
 801926a:	e005      	b.n	8019278 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	895b      	ldrh	r3, [r3, #10]
 8019270:	461a      	mov	r2, r3
 8019272:	697b      	ldr	r3, [r7, #20]
 8019274:	1ad3      	subs	r3, r2, r3
 8019276:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	685a      	ldr	r2, [r3, #4]
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	18d0      	adds	r0, r2, r3
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	685a      	ldr	r2, [r3, #4]
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	4413      	add	r3, r2
 8019288:	68fa      	ldr	r2, [r7, #12]
 801928a:	4619      	mov	r1, r3
 801928c:	f00a fb93 	bl	80239b6 <memcpy>
    offset_to += len;
 8019290:	697a      	ldr	r2, [r7, #20]
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	4413      	add	r3, r2
 8019296:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8019298:	693a      	ldr	r2, [r7, #16]
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	4413      	add	r3, r2
 801929e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	895b      	ldrh	r3, [r3, #10]
 80192a4:	461a      	mov	r2, r3
 80192a6:	697b      	ldr	r3, [r7, #20]
 80192a8:	4293      	cmp	r3, r2
 80192aa:	d906      	bls.n	80192ba <pbuf_copy+0xb2>
 80192ac:	4b38      	ldr	r3, [pc, #224]	@ (8019390 <pbuf_copy+0x188>)
 80192ae:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80192b2:	493a      	ldr	r1, [pc, #232]	@ (801939c <pbuf_copy+0x194>)
 80192b4:	4838      	ldr	r0, [pc, #224]	@ (8019398 <pbuf_copy+0x190>)
 80192b6:	f00a f9d7 	bl	8023668 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	895b      	ldrh	r3, [r3, #10]
 80192be:	461a      	mov	r2, r3
 80192c0:	693b      	ldr	r3, [r7, #16]
 80192c2:	4293      	cmp	r3, r2
 80192c4:	d906      	bls.n	80192d4 <pbuf_copy+0xcc>
 80192c6:	4b32      	ldr	r3, [pc, #200]	@ (8019390 <pbuf_copy+0x188>)
 80192c8:	f240 32da 	movw	r2, #986	@ 0x3da
 80192cc:	4934      	ldr	r1, [pc, #208]	@ (80193a0 <pbuf_copy+0x198>)
 80192ce:	4832      	ldr	r0, [pc, #200]	@ (8019398 <pbuf_copy+0x190>)
 80192d0:	f00a f9ca 	bl	8023668 <iprintf>
    if (offset_from >= p_from->len) {
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	895b      	ldrh	r3, [r3, #10]
 80192d8:	461a      	mov	r2, r3
 80192da:	693b      	ldr	r3, [r7, #16]
 80192dc:	4293      	cmp	r3, r2
 80192de:	d304      	bcc.n	80192ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80192e0:	2300      	movs	r3, #0
 80192e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	895b      	ldrh	r3, [r3, #10]
 80192ee:	461a      	mov	r2, r3
 80192f0:	697b      	ldr	r3, [r7, #20]
 80192f2:	4293      	cmp	r3, r2
 80192f4:	d114      	bne.n	8019320 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80192f6:	2300      	movs	r3, #0
 80192f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d10c      	bne.n	8019320 <pbuf_copy+0x118>
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d009      	beq.n	8019320 <pbuf_copy+0x118>
 801930c:	4b20      	ldr	r3, [pc, #128]	@ (8019390 <pbuf_copy+0x188>)
 801930e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8019312:	4924      	ldr	r1, [pc, #144]	@ (80193a4 <pbuf_copy+0x19c>)
 8019314:	4820      	ldr	r0, [pc, #128]	@ (8019398 <pbuf_copy+0x190>)
 8019316:	f00a f9a7 	bl	8023668 <iprintf>
 801931a:	f06f 030f 	mvn.w	r3, #15
 801931e:	e032      	b.n	8019386 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d013      	beq.n	801934e <pbuf_copy+0x146>
 8019326:	683b      	ldr	r3, [r7, #0]
 8019328:	895a      	ldrh	r2, [r3, #10]
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	891b      	ldrh	r3, [r3, #8]
 801932e:	429a      	cmp	r2, r3
 8019330:	d10d      	bne.n	801934e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d009      	beq.n	801934e <pbuf_copy+0x146>
 801933a:	4b15      	ldr	r3, [pc, #84]	@ (8019390 <pbuf_copy+0x188>)
 801933c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8019340:	4919      	ldr	r1, [pc, #100]	@ (80193a8 <pbuf_copy+0x1a0>)
 8019342:	4815      	ldr	r0, [pc, #84]	@ (8019398 <pbuf_copy+0x190>)
 8019344:	f00a f990 	bl	8023668 <iprintf>
 8019348:	f06f 0305 	mvn.w	r3, #5
 801934c:	e01b      	b.n	8019386 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d013      	beq.n	801937c <pbuf_copy+0x174>
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	895a      	ldrh	r2, [r3, #10]
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	891b      	ldrh	r3, [r3, #8]
 801935c:	429a      	cmp	r2, r3
 801935e:	d10d      	bne.n	801937c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d009      	beq.n	801937c <pbuf_copy+0x174>
 8019368:	4b09      	ldr	r3, [pc, #36]	@ (8019390 <pbuf_copy+0x188>)
 801936a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801936e:	490e      	ldr	r1, [pc, #56]	@ (80193a8 <pbuf_copy+0x1a0>)
 8019370:	4809      	ldr	r0, [pc, #36]	@ (8019398 <pbuf_copy+0x190>)
 8019372:	f00a f979 	bl	8023668 <iprintf>
 8019376:	f06f 0305 	mvn.w	r3, #5
 801937a:	e004      	b.n	8019386 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	2b00      	cmp	r3, #0
 8019380:	f47f af61 	bne.w	8019246 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8019384:	2300      	movs	r3, #0
}
 8019386:	4618      	mov	r0, r3
 8019388:	3718      	adds	r7, #24
 801938a:	46bd      	mov	sp, r7
 801938c:	bd80      	pop	{r7, pc}
 801938e:	bf00      	nop
 8019390:	08025afc 	.word	0x08025afc
 8019394:	08025da4 	.word	0x08025da4
 8019398:	08025b5c 	.word	0x08025b5c
 801939c:	08025dd4 	.word	0x08025dd4
 80193a0:	08025dec 	.word	0x08025dec
 80193a4:	08025e08 	.word	0x08025e08
 80193a8:	08025e18 	.word	0x08025e18

080193ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b088      	sub	sp, #32
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	60b9      	str	r1, [r7, #8]
 80193b6:	4611      	mov	r1, r2
 80193b8:	461a      	mov	r2, r3
 80193ba:	460b      	mov	r3, r1
 80193bc:	80fb      	strh	r3, [r7, #6]
 80193be:	4613      	mov	r3, r2
 80193c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80193c2:	2300      	movs	r3, #0
 80193c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80193c6:	2300      	movs	r3, #0
 80193c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d108      	bne.n	80193e2 <pbuf_copy_partial+0x36>
 80193d0:	4b2b      	ldr	r3, [pc, #172]	@ (8019480 <pbuf_copy_partial+0xd4>)
 80193d2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80193d6:	492b      	ldr	r1, [pc, #172]	@ (8019484 <pbuf_copy_partial+0xd8>)
 80193d8:	482b      	ldr	r0, [pc, #172]	@ (8019488 <pbuf_copy_partial+0xdc>)
 80193da:	f00a f945 	bl	8023668 <iprintf>
 80193de:	2300      	movs	r3, #0
 80193e0:	e04a      	b.n	8019478 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80193e2:	68bb      	ldr	r3, [r7, #8]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d108      	bne.n	80193fa <pbuf_copy_partial+0x4e>
 80193e8:	4b25      	ldr	r3, [pc, #148]	@ (8019480 <pbuf_copy_partial+0xd4>)
 80193ea:	f240 420b 	movw	r2, #1035	@ 0x40b
 80193ee:	4927      	ldr	r1, [pc, #156]	@ (801948c <pbuf_copy_partial+0xe0>)
 80193f0:	4825      	ldr	r0, [pc, #148]	@ (8019488 <pbuf_copy_partial+0xdc>)
 80193f2:	f00a f939 	bl	8023668 <iprintf>
 80193f6:	2300      	movs	r3, #0
 80193f8:	e03e      	b.n	8019478 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	61fb      	str	r3, [r7, #28]
 80193fe:	e034      	b.n	801946a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019400:	88bb      	ldrh	r3, [r7, #4]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d00a      	beq.n	801941c <pbuf_copy_partial+0x70>
 8019406:	69fb      	ldr	r3, [r7, #28]
 8019408:	895b      	ldrh	r3, [r3, #10]
 801940a:	88ba      	ldrh	r2, [r7, #4]
 801940c:	429a      	cmp	r2, r3
 801940e:	d305      	bcc.n	801941c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	895b      	ldrh	r3, [r3, #10]
 8019414:	88ba      	ldrh	r2, [r7, #4]
 8019416:	1ad3      	subs	r3, r2, r3
 8019418:	80bb      	strh	r3, [r7, #4]
 801941a:	e023      	b.n	8019464 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801941c:	69fb      	ldr	r3, [r7, #28]
 801941e:	895a      	ldrh	r2, [r3, #10]
 8019420:	88bb      	ldrh	r3, [r7, #4]
 8019422:	1ad3      	subs	r3, r2, r3
 8019424:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8019426:	8b3a      	ldrh	r2, [r7, #24]
 8019428:	88fb      	ldrh	r3, [r7, #6]
 801942a:	429a      	cmp	r2, r3
 801942c:	d901      	bls.n	8019432 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801942e:	88fb      	ldrh	r3, [r7, #6]
 8019430:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019432:	8b7b      	ldrh	r3, [r7, #26]
 8019434:	68ba      	ldr	r2, [r7, #8]
 8019436:	18d0      	adds	r0, r2, r3
 8019438:	69fb      	ldr	r3, [r7, #28]
 801943a:	685a      	ldr	r2, [r3, #4]
 801943c:	88bb      	ldrh	r3, [r7, #4]
 801943e:	4413      	add	r3, r2
 8019440:	8b3a      	ldrh	r2, [r7, #24]
 8019442:	4619      	mov	r1, r3
 8019444:	f00a fab7 	bl	80239b6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8019448:	8afa      	ldrh	r2, [r7, #22]
 801944a:	8b3b      	ldrh	r3, [r7, #24]
 801944c:	4413      	add	r3, r2
 801944e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8019450:	8b7a      	ldrh	r2, [r7, #26]
 8019452:	8b3b      	ldrh	r3, [r7, #24]
 8019454:	4413      	add	r3, r2
 8019456:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8019458:	88fa      	ldrh	r2, [r7, #6]
 801945a:	8b3b      	ldrh	r3, [r7, #24]
 801945c:	1ad3      	subs	r3, r2, r3
 801945e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8019460:	2300      	movs	r3, #0
 8019462:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019464:	69fb      	ldr	r3, [r7, #28]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	61fb      	str	r3, [r7, #28]
 801946a:	88fb      	ldrh	r3, [r7, #6]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d002      	beq.n	8019476 <pbuf_copy_partial+0xca>
 8019470:	69fb      	ldr	r3, [r7, #28]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d1c4      	bne.n	8019400 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8019476:	8afb      	ldrh	r3, [r7, #22]
}
 8019478:	4618      	mov	r0, r3
 801947a:	3720      	adds	r7, #32
 801947c:	46bd      	mov	sp, r7
 801947e:	bd80      	pop	{r7, pc}
 8019480:	08025afc 	.word	0x08025afc
 8019484:	08025e44 	.word	0x08025e44
 8019488:	08025b5c 	.word	0x08025b5c
 801948c:	08025e64 	.word	0x08025e64

08019490 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8019490:	b480      	push	{r7}
 8019492:	b087      	sub	sp, #28
 8019494:	af00      	add	r7, sp, #0
 8019496:	60f8      	str	r0, [r7, #12]
 8019498:	460b      	mov	r3, r1
 801949a:	607a      	str	r2, [r7, #4]
 801949c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801949e:	897b      	ldrh	r3, [r7, #10]
 80194a0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80194a6:	e007      	b.n	80194b8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	895b      	ldrh	r3, [r3, #10]
 80194ac:	8afa      	ldrh	r2, [r7, #22]
 80194ae:	1ad3      	subs	r3, r2, r3
 80194b0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80194b2:	693b      	ldr	r3, [r7, #16]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80194b8:	693b      	ldr	r3, [r7, #16]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d004      	beq.n	80194c8 <pbuf_skip_const+0x38>
 80194be:	693b      	ldr	r3, [r7, #16]
 80194c0:	895b      	ldrh	r3, [r3, #10]
 80194c2:	8afa      	ldrh	r2, [r7, #22]
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d2ef      	bcs.n	80194a8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d002      	beq.n	80194d4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	8afa      	ldrh	r2, [r7, #22]
 80194d2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80194d4:	693b      	ldr	r3, [r7, #16]
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	371c      	adds	r7, #28
 80194da:	46bd      	mov	sp, r7
 80194dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e0:	4770      	bx	lr
	...

080194e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	4603      	mov	r3, r0
 80194ec:	603a      	str	r2, [r7, #0]
 80194ee:	71fb      	strb	r3, [r7, #7]
 80194f0:	460b      	mov	r3, r1
 80194f2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	8919      	ldrh	r1, [r3, #8]
 80194f8:	88ba      	ldrh	r2, [r7, #4]
 80194fa:	79fb      	ldrb	r3, [r7, #7]
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7ff fa49 	bl	8018994 <pbuf_alloc>
 8019502:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d101      	bne.n	801950e <pbuf_clone+0x2a>
    return NULL;
 801950a:	2300      	movs	r3, #0
 801950c:	e011      	b.n	8019532 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801950e:	6839      	ldr	r1, [r7, #0]
 8019510:	68f8      	ldr	r0, [r7, #12]
 8019512:	f7ff fe79 	bl	8019208 <pbuf_copy>
 8019516:	4603      	mov	r3, r0
 8019518:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801951a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d006      	beq.n	8019530 <pbuf_clone+0x4c>
 8019522:	4b06      	ldr	r3, [pc, #24]	@ (801953c <pbuf_clone+0x58>)
 8019524:	f240 5224 	movw	r2, #1316	@ 0x524
 8019528:	4905      	ldr	r1, [pc, #20]	@ (8019540 <pbuf_clone+0x5c>)
 801952a:	4806      	ldr	r0, [pc, #24]	@ (8019544 <pbuf_clone+0x60>)
 801952c:	f00a f89c 	bl	8023668 <iprintf>
  return q;
 8019530:	68fb      	ldr	r3, [r7, #12]
}
 8019532:	4618      	mov	r0, r3
 8019534:	3710      	adds	r7, #16
 8019536:	46bd      	mov	sp, r7
 8019538:	bd80      	pop	{r7, pc}
 801953a:	bf00      	nop
 801953c:	08025afc 	.word	0x08025afc
 8019540:	08025f70 	.word	0x08025f70
 8019544:	08025b5c 	.word	0x08025b5c

08019548 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b084      	sub	sp, #16
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
 8019550:	460b      	mov	r3, r1
 8019552:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8019554:	887b      	ldrh	r3, [r7, #2]
 8019556:	4619      	mov	r1, r3
 8019558:	6878      	ldr	r0, [r7, #4]
 801955a:	f000 f80c 	bl	8019576 <pbuf_try_get_at>
 801955e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	2b00      	cmp	r3, #0
 8019564:	db02      	blt.n	801956c <pbuf_get_at+0x24>
    return (u8_t)ret;
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	b2db      	uxtb	r3, r3
 801956a:	e000      	b.n	801956e <pbuf_get_at+0x26>
  }
  return 0;
 801956c:	2300      	movs	r3, #0
}
 801956e:	4618      	mov	r0, r3
 8019570:	3710      	adds	r7, #16
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}

08019576 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8019576:	b580      	push	{r7, lr}
 8019578:	b084      	sub	sp, #16
 801957a:	af00      	add	r7, sp, #0
 801957c:	6078      	str	r0, [r7, #4]
 801957e:	460b      	mov	r3, r1
 8019580:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8019582:	f107 020a 	add.w	r2, r7, #10
 8019586:	887b      	ldrh	r3, [r7, #2]
 8019588:	4619      	mov	r1, r3
 801958a:	6878      	ldr	r0, [r7, #4]
 801958c:	f7ff ff80 	bl	8019490 <pbuf_skip_const>
 8019590:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d00a      	beq.n	80195ae <pbuf_try_get_at+0x38>
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	895a      	ldrh	r2, [r3, #10]
 801959c:	897b      	ldrh	r3, [r7, #10]
 801959e:	429a      	cmp	r2, r3
 80195a0:	d905      	bls.n	80195ae <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	685b      	ldr	r3, [r3, #4]
 80195a6:	897a      	ldrh	r2, [r7, #10]
 80195a8:	4413      	add	r3, r2
 80195aa:	781b      	ldrb	r3, [r3, #0]
 80195ac:	e001      	b.n	80195b2 <pbuf_try_get_at+0x3c>
  }
  return -1;
 80195ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80195b2:	4618      	mov	r0, r3
 80195b4:	3710      	adds	r7, #16
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bd80      	pop	{r7, pc}

080195ba <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 80195ba:	b580      	push	{r7, lr}
 80195bc:	b088      	sub	sp, #32
 80195be:	af00      	add	r7, sp, #0
 80195c0:	60f8      	str	r0, [r7, #12]
 80195c2:	607a      	str	r2, [r7, #4]
 80195c4:	461a      	mov	r2, r3
 80195c6:	460b      	mov	r3, r1
 80195c8:	817b      	strh	r3, [r7, #10]
 80195ca:	4613      	mov	r3, r2
 80195cc:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 80195ce:	897b      	ldrh	r3, [r7, #10]
 80195d0:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	891b      	ldrh	r3, [r3, #8]
 80195da:	4619      	mov	r1, r3
 80195dc:	897a      	ldrh	r2, [r7, #10]
 80195de:	893b      	ldrh	r3, [r7, #8]
 80195e0:	4413      	add	r3, r2
 80195e2:	4299      	cmp	r1, r3
 80195e4:	da0a      	bge.n	80195fc <pbuf_memcmp+0x42>
    return 0xffff;
 80195e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80195ea:	e037      	b.n	801965c <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80195ec:	69bb      	ldr	r3, [r7, #24]
 80195ee:	895b      	ldrh	r3, [r3, #10]
 80195f0:	8bfa      	ldrh	r2, [r7, #30]
 80195f2:	1ad3      	subs	r3, r2, r3
 80195f4:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 80195f6:	69bb      	ldr	r3, [r7, #24]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 80195fc:	69bb      	ldr	r3, [r7, #24]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d004      	beq.n	801960c <pbuf_memcmp+0x52>
 8019602:	69bb      	ldr	r3, [r7, #24]
 8019604:	895b      	ldrh	r3, [r3, #10]
 8019606:	8bfa      	ldrh	r2, [r7, #30]
 8019608:	429a      	cmp	r2, r3
 801960a:	d2ef      	bcs.n	80195ec <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801960c:	2300      	movs	r3, #0
 801960e:	82fb      	strh	r3, [r7, #22]
 8019610:	e01f      	b.n	8019652 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8019612:	8bfa      	ldrh	r2, [r7, #30]
 8019614:	8afb      	ldrh	r3, [r7, #22]
 8019616:	4413      	add	r3, r2
 8019618:	b29b      	uxth	r3, r3
 801961a:	4619      	mov	r1, r3
 801961c:	69b8      	ldr	r0, [r7, #24]
 801961e:	f7ff ff93 	bl	8019548 <pbuf_get_at>
 8019622:	4603      	mov	r3, r0
 8019624:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8019626:	8afb      	ldrh	r3, [r7, #22]
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	4413      	add	r3, r2
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8019630:	7d7a      	ldrb	r2, [r7, #21]
 8019632:	7d3b      	ldrb	r3, [r7, #20]
 8019634:	429a      	cmp	r2, r3
 8019636:	d009      	beq.n	801964c <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8019638:	8afb      	ldrh	r3, [r7, #22]
 801963a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801963e:	4293      	cmp	r3, r2
 8019640:	bf28      	it	cs
 8019642:	4613      	movcs	r3, r2
 8019644:	b29b      	uxth	r3, r3
 8019646:	3301      	adds	r3, #1
 8019648:	b29b      	uxth	r3, r3
 801964a:	e007      	b.n	801965c <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 801964c:	8afb      	ldrh	r3, [r7, #22]
 801964e:	3301      	adds	r3, #1
 8019650:	82fb      	strh	r3, [r7, #22]
 8019652:	8afa      	ldrh	r2, [r7, #22]
 8019654:	893b      	ldrh	r3, [r7, #8]
 8019656:	429a      	cmp	r2, r3
 8019658:	d3db      	bcc.n	8019612 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 801965a:	2300      	movs	r3, #0
}
 801965c:	4618      	mov	r0, r3
 801965e:	3720      	adds	r7, #32
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}

08019664 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b086      	sub	sp, #24
 8019668:	af00      	add	r7, sp, #0
 801966a:	60f8      	str	r0, [r7, #12]
 801966c:	60b9      	str	r1, [r7, #8]
 801966e:	4611      	mov	r1, r2
 8019670:	461a      	mov	r2, r3
 8019672:	460b      	mov	r3, r1
 8019674:	80fb      	strh	r3, [r7, #6]
 8019676:	4613      	mov	r3, r2
 8019678:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	891a      	ldrh	r2, [r3, #8]
 801967e:	88fb      	ldrh	r3, [r7, #6]
 8019680:	1ad3      	subs	r3, r2, r3
 8019682:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	891b      	ldrh	r3, [r3, #8]
 8019688:	4619      	mov	r1, r3
 801968a:	88fa      	ldrh	r2, [r7, #6]
 801968c:	88bb      	ldrh	r3, [r7, #4]
 801968e:	4413      	add	r3, r2
 8019690:	4299      	cmp	r1, r3
 8019692:	db16      	blt.n	80196c2 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 8019694:	88bb      	ldrh	r3, [r7, #4]
 8019696:	82fb      	strh	r3, [r7, #22]
 8019698:	e00f      	b.n	80196ba <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801969a:	88fb      	ldrh	r3, [r7, #6]
 801969c:	8af9      	ldrh	r1, [r7, #22]
 801969e:	68ba      	ldr	r2, [r7, #8]
 80196a0:	68f8      	ldr	r0, [r7, #12]
 80196a2:	f7ff ff8a 	bl	80195ba <pbuf_memcmp>
 80196a6:	4603      	mov	r3, r0
 80196a8:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 80196aa:	8a7b      	ldrh	r3, [r7, #18]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d101      	bne.n	80196b4 <pbuf_memfind+0x50>
        return i;
 80196b0:	8afb      	ldrh	r3, [r7, #22]
 80196b2:	e008      	b.n	80196c6 <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 80196b4:	8afb      	ldrh	r3, [r7, #22]
 80196b6:	3301      	adds	r3, #1
 80196b8:	82fb      	strh	r3, [r7, #22]
 80196ba:	8afa      	ldrh	r2, [r7, #22]
 80196bc:	8abb      	ldrh	r3, [r7, #20]
 80196be:	429a      	cmp	r2, r3
 80196c0:	d9eb      	bls.n	801969a <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 80196c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80196c6:	4618      	mov	r0, r3
 80196c8:	3718      	adds	r7, #24
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd80      	pop	{r7, pc}
	...

080196d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80196d4:	f009 fe44 	bl	8023360 <rand>
 80196d8:	4603      	mov	r3, r0
 80196da:	b29b      	uxth	r3, r3
 80196dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80196e0:	b29b      	uxth	r3, r3
 80196e2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80196e6:	b29a      	uxth	r2, r3
 80196e8:	4b01      	ldr	r3, [pc, #4]	@ (80196f0 <tcp_init+0x20>)
 80196ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80196ec:	bf00      	nop
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	20000044 	.word	0x20000044

080196f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	7d1b      	ldrb	r3, [r3, #20]
 8019700:	2b01      	cmp	r3, #1
 8019702:	d105      	bne.n	8019710 <tcp_free+0x1c>
 8019704:	4b06      	ldr	r3, [pc, #24]	@ (8019720 <tcp_free+0x2c>)
 8019706:	22d4      	movs	r2, #212	@ 0xd4
 8019708:	4906      	ldr	r1, [pc, #24]	@ (8019724 <tcp_free+0x30>)
 801970a:	4807      	ldr	r0, [pc, #28]	@ (8019728 <tcp_free+0x34>)
 801970c:	f009 ffac 	bl	8023668 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8019710:	6879      	ldr	r1, [r7, #4]
 8019712:	2001      	movs	r0, #1
 8019714:	f7fe fd7e 	bl	8018214 <memp_free>
}
 8019718:	bf00      	nop
 801971a:	3708      	adds	r7, #8
 801971c:	46bd      	mov	sp, r7
 801971e:	bd80      	pop	{r7, pc}
 8019720:	08025ffc 	.word	0x08025ffc
 8019724:	0802602c 	.word	0x0802602c
 8019728:	08026040 	.word	0x08026040

0801972c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b082      	sub	sp, #8
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	7d1b      	ldrb	r3, [r3, #20]
 8019738:	2b01      	cmp	r3, #1
 801973a:	d105      	bne.n	8019748 <tcp_free_listen+0x1c>
 801973c:	4b06      	ldr	r3, [pc, #24]	@ (8019758 <tcp_free_listen+0x2c>)
 801973e:	22df      	movs	r2, #223	@ 0xdf
 8019740:	4906      	ldr	r1, [pc, #24]	@ (801975c <tcp_free_listen+0x30>)
 8019742:	4807      	ldr	r0, [pc, #28]	@ (8019760 <tcp_free_listen+0x34>)
 8019744:	f009 ff90 	bl	8023668 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019748:	6879      	ldr	r1, [r7, #4]
 801974a:	2002      	movs	r0, #2
 801974c:	f7fe fd62 	bl	8018214 <memp_free>
}
 8019750:	bf00      	nop
 8019752:	3708      	adds	r7, #8
 8019754:	46bd      	mov	sp, r7
 8019756:	bd80      	pop	{r7, pc}
 8019758:	08025ffc 	.word	0x08025ffc
 801975c:	08026068 	.word	0x08026068
 8019760:	08026040 	.word	0x08026040

08019764 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019764:	b580      	push	{r7, lr}
 8019766:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8019768:	f001 f8f8 	bl	801a95c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801976c:	4b07      	ldr	r3, [pc, #28]	@ (801978c <tcp_tmr+0x28>)
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	3301      	adds	r3, #1
 8019772:	b2da      	uxtb	r2, r3
 8019774:	4b05      	ldr	r3, [pc, #20]	@ (801978c <tcp_tmr+0x28>)
 8019776:	701a      	strb	r2, [r3, #0]
 8019778:	4b04      	ldr	r3, [pc, #16]	@ (801978c <tcp_tmr+0x28>)
 801977a:	781b      	ldrb	r3, [r3, #0]
 801977c:	f003 0301 	and.w	r3, r3, #1
 8019780:	2b00      	cmp	r3, #0
 8019782:	d001      	beq.n	8019788 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8019784:	f000 fda8 	bl	801a2d8 <tcp_slowtmr>
  }
}
 8019788:	bf00      	nop
 801978a:	bd80      	pop	{r7, pc}
 801978c:	20018bc5 	.word	0x20018bc5

08019790 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b084      	sub	sp, #16
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
 8019798:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d105      	bne.n	80197ac <tcp_remove_listener+0x1c>
 80197a0:	4b0d      	ldr	r3, [pc, #52]	@ (80197d8 <tcp_remove_listener+0x48>)
 80197a2:	22ff      	movs	r2, #255	@ 0xff
 80197a4:	490d      	ldr	r1, [pc, #52]	@ (80197dc <tcp_remove_listener+0x4c>)
 80197a6:	480e      	ldr	r0, [pc, #56]	@ (80197e0 <tcp_remove_listener+0x50>)
 80197a8:	f009 ff5e 	bl	8023668 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	60fb      	str	r3, [r7, #12]
 80197b0:	e00a      	b.n	80197c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80197b6:	683a      	ldr	r2, [r7, #0]
 80197b8:	429a      	cmp	r2, r3
 80197ba:	d102      	bne.n	80197c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	2200      	movs	r2, #0
 80197c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	68db      	ldr	r3, [r3, #12]
 80197c6:	60fb      	str	r3, [r7, #12]
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d1f1      	bne.n	80197b2 <tcp_remove_listener+0x22>
    }
  }
}
 80197ce:	bf00      	nop
 80197d0:	bf00      	nop
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}
 80197d8:	08025ffc 	.word	0x08025ffc
 80197dc:	08026084 	.word	0x08026084
 80197e0:	08026040 	.word	0x08026040

080197e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b084      	sub	sp, #16
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d106      	bne.n	8019800 <tcp_listen_closed+0x1c>
 80197f2:	4b14      	ldr	r3, [pc, #80]	@ (8019844 <tcp_listen_closed+0x60>)
 80197f4:	f240 1211 	movw	r2, #273	@ 0x111
 80197f8:	4913      	ldr	r1, [pc, #76]	@ (8019848 <tcp_listen_closed+0x64>)
 80197fa:	4814      	ldr	r0, [pc, #80]	@ (801984c <tcp_listen_closed+0x68>)
 80197fc:	f009 ff34 	bl	8023668 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	7d1b      	ldrb	r3, [r3, #20]
 8019804:	2b01      	cmp	r3, #1
 8019806:	d006      	beq.n	8019816 <tcp_listen_closed+0x32>
 8019808:	4b0e      	ldr	r3, [pc, #56]	@ (8019844 <tcp_listen_closed+0x60>)
 801980a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801980e:	4910      	ldr	r1, [pc, #64]	@ (8019850 <tcp_listen_closed+0x6c>)
 8019810:	480e      	ldr	r0, [pc, #56]	@ (801984c <tcp_listen_closed+0x68>)
 8019812:	f009 ff29 	bl	8023668 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019816:	2301      	movs	r3, #1
 8019818:	60fb      	str	r3, [r7, #12]
 801981a:	e00b      	b.n	8019834 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801981c:	4a0d      	ldr	r2, [pc, #52]	@ (8019854 <tcp_listen_closed+0x70>)
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	6879      	ldr	r1, [r7, #4]
 8019828:	4618      	mov	r0, r3
 801982a:	f7ff ffb1 	bl	8019790 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	3301      	adds	r3, #1
 8019832:	60fb      	str	r3, [r7, #12]
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	2b03      	cmp	r3, #3
 8019838:	d9f0      	bls.n	801981c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801983a:	bf00      	nop
 801983c:	bf00      	nop
 801983e:	3710      	adds	r7, #16
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}
 8019844:	08025ffc 	.word	0x08025ffc
 8019848:	080260ac 	.word	0x080260ac
 801984c:	08026040 	.word	0x08026040
 8019850:	080260b8 	.word	0x080260b8
 8019854:	08028034 	.word	0x08028034

08019858 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8019858:	b5b0      	push	{r4, r5, r7, lr}
 801985a:	b088      	sub	sp, #32
 801985c:	af04      	add	r7, sp, #16
 801985e:	6078      	str	r0, [r7, #4]
 8019860:	460b      	mov	r3, r1
 8019862:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d106      	bne.n	8019878 <tcp_close_shutdown+0x20>
 801986a:	4b63      	ldr	r3, [pc, #396]	@ (80199f8 <tcp_close_shutdown+0x1a0>)
 801986c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8019870:	4962      	ldr	r1, [pc, #392]	@ (80199fc <tcp_close_shutdown+0x1a4>)
 8019872:	4863      	ldr	r0, [pc, #396]	@ (8019a00 <tcp_close_shutdown+0x1a8>)
 8019874:	f009 fef8 	bl	8023668 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019878:	78fb      	ldrb	r3, [r7, #3]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d067      	beq.n	801994e <tcp_close_shutdown+0xf6>
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	7d1b      	ldrb	r3, [r3, #20]
 8019882:	2b04      	cmp	r3, #4
 8019884:	d003      	beq.n	801988e <tcp_close_shutdown+0x36>
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	7d1b      	ldrb	r3, [r3, #20]
 801988a:	2b07      	cmp	r3, #7
 801988c:	d15f      	bne.n	801994e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019892:	2b00      	cmp	r3, #0
 8019894:	d105      	bne.n	80198a2 <tcp_close_shutdown+0x4a>
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801989a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801989e:	4293      	cmp	r3, r2
 80198a0:	d055      	beq.n	801994e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	8b5b      	ldrh	r3, [r3, #26]
 80198a6:	f003 0310 	and.w	r3, r3, #16
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d106      	bne.n	80198bc <tcp_close_shutdown+0x64>
 80198ae:	4b52      	ldr	r3, [pc, #328]	@ (80199f8 <tcp_close_shutdown+0x1a0>)
 80198b0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80198b4:	4953      	ldr	r1, [pc, #332]	@ (8019a04 <tcp_close_shutdown+0x1ac>)
 80198b6:	4852      	ldr	r0, [pc, #328]	@ (8019a00 <tcp_close_shutdown+0x1a8>)
 80198b8:	f009 fed6 	bl	8023668 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80198c4:	687d      	ldr	r5, [r7, #4]
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	3304      	adds	r3, #4
 80198ca:	687a      	ldr	r2, [r7, #4]
 80198cc:	8ad2      	ldrh	r2, [r2, #22]
 80198ce:	6879      	ldr	r1, [r7, #4]
 80198d0:	8b09      	ldrh	r1, [r1, #24]
 80198d2:	9102      	str	r1, [sp, #8]
 80198d4:	9201      	str	r2, [sp, #4]
 80198d6:	9300      	str	r3, [sp, #0]
 80198d8:	462b      	mov	r3, r5
 80198da:	4622      	mov	r2, r4
 80198dc:	4601      	mov	r1, r0
 80198de:	6878      	ldr	r0, [r7, #4]
 80198e0:	f005 fe12 	bl	801f508 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80198e4:	6878      	ldr	r0, [r7, #4]
 80198e6:	f001 fbf3 	bl	801b0d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80198ea:	4b47      	ldr	r3, [pc, #284]	@ (8019a08 <tcp_close_shutdown+0x1b0>)
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d105      	bne.n	8019900 <tcp_close_shutdown+0xa8>
 80198f4:	4b44      	ldr	r3, [pc, #272]	@ (8019a08 <tcp_close_shutdown+0x1b0>)
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	68db      	ldr	r3, [r3, #12]
 80198fa:	4a43      	ldr	r2, [pc, #268]	@ (8019a08 <tcp_close_shutdown+0x1b0>)
 80198fc:	6013      	str	r3, [r2, #0]
 80198fe:	e013      	b.n	8019928 <tcp_close_shutdown+0xd0>
 8019900:	4b41      	ldr	r3, [pc, #260]	@ (8019a08 <tcp_close_shutdown+0x1b0>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	60fb      	str	r3, [r7, #12]
 8019906:	e00c      	b.n	8019922 <tcp_close_shutdown+0xca>
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	68db      	ldr	r3, [r3, #12]
 801990c:	687a      	ldr	r2, [r7, #4]
 801990e:	429a      	cmp	r2, r3
 8019910:	d104      	bne.n	801991c <tcp_close_shutdown+0xc4>
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	68da      	ldr	r2, [r3, #12]
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	60da      	str	r2, [r3, #12]
 801991a:	e005      	b.n	8019928 <tcp_close_shutdown+0xd0>
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	68db      	ldr	r3, [r3, #12]
 8019920:	60fb      	str	r3, [r7, #12]
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	2b00      	cmp	r3, #0
 8019926:	d1ef      	bne.n	8019908 <tcp_close_shutdown+0xb0>
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	2200      	movs	r2, #0
 801992c:	60da      	str	r2, [r3, #12]
 801992e:	4b37      	ldr	r3, [pc, #220]	@ (8019a0c <tcp_close_shutdown+0x1b4>)
 8019930:	2201      	movs	r2, #1
 8019932:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8019934:	4b36      	ldr	r3, [pc, #216]	@ (8019a10 <tcp_close_shutdown+0x1b8>)
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	687a      	ldr	r2, [r7, #4]
 801993a:	429a      	cmp	r2, r3
 801993c:	d102      	bne.n	8019944 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801993e:	f004 f889 	bl	801da54 <tcp_trigger_input_pcb_close>
 8019942:	e002      	b.n	801994a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8019944:	6878      	ldr	r0, [r7, #4]
 8019946:	f7ff fed5 	bl	80196f4 <tcp_free>
      }
      return ERR_OK;
 801994a:	2300      	movs	r3, #0
 801994c:	e050      	b.n	80199f0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	7d1b      	ldrb	r3, [r3, #20]
 8019952:	2b02      	cmp	r3, #2
 8019954:	d03b      	beq.n	80199ce <tcp_close_shutdown+0x176>
 8019956:	2b02      	cmp	r3, #2
 8019958:	dc44      	bgt.n	80199e4 <tcp_close_shutdown+0x18c>
 801995a:	2b00      	cmp	r3, #0
 801995c:	d002      	beq.n	8019964 <tcp_close_shutdown+0x10c>
 801995e:	2b01      	cmp	r3, #1
 8019960:	d02a      	beq.n	80199b8 <tcp_close_shutdown+0x160>
 8019962:	e03f      	b.n	80199e4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	8adb      	ldrh	r3, [r3, #22]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d021      	beq.n	80199b0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801996c:	4b29      	ldr	r3, [pc, #164]	@ (8019a14 <tcp_close_shutdown+0x1bc>)
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	687a      	ldr	r2, [r7, #4]
 8019972:	429a      	cmp	r2, r3
 8019974:	d105      	bne.n	8019982 <tcp_close_shutdown+0x12a>
 8019976:	4b27      	ldr	r3, [pc, #156]	@ (8019a14 <tcp_close_shutdown+0x1bc>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	68db      	ldr	r3, [r3, #12]
 801997c:	4a25      	ldr	r2, [pc, #148]	@ (8019a14 <tcp_close_shutdown+0x1bc>)
 801997e:	6013      	str	r3, [r2, #0]
 8019980:	e013      	b.n	80199aa <tcp_close_shutdown+0x152>
 8019982:	4b24      	ldr	r3, [pc, #144]	@ (8019a14 <tcp_close_shutdown+0x1bc>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	60bb      	str	r3, [r7, #8]
 8019988:	e00c      	b.n	80199a4 <tcp_close_shutdown+0x14c>
 801998a:	68bb      	ldr	r3, [r7, #8]
 801998c:	68db      	ldr	r3, [r3, #12]
 801998e:	687a      	ldr	r2, [r7, #4]
 8019990:	429a      	cmp	r2, r3
 8019992:	d104      	bne.n	801999e <tcp_close_shutdown+0x146>
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	68da      	ldr	r2, [r3, #12]
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	60da      	str	r2, [r3, #12]
 801999c:	e005      	b.n	80199aa <tcp_close_shutdown+0x152>
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	68db      	ldr	r3, [r3, #12]
 80199a2:	60bb      	str	r3, [r7, #8]
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d1ef      	bne.n	801998a <tcp_close_shutdown+0x132>
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	2200      	movs	r2, #0
 80199ae:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80199b0:	6878      	ldr	r0, [r7, #4]
 80199b2:	f7ff fe9f 	bl	80196f4 <tcp_free>
      break;
 80199b6:	e01a      	b.n	80199ee <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80199b8:	6878      	ldr	r0, [r7, #4]
 80199ba:	f7ff ff13 	bl	80197e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80199be:	6879      	ldr	r1, [r7, #4]
 80199c0:	4815      	ldr	r0, [pc, #84]	@ (8019a18 <tcp_close_shutdown+0x1c0>)
 80199c2:	f001 fbd5 	bl	801b170 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80199c6:	6878      	ldr	r0, [r7, #4]
 80199c8:	f7ff feb0 	bl	801972c <tcp_free_listen>
      break;
 80199cc:	e00f      	b.n	80199ee <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80199ce:	6879      	ldr	r1, [r7, #4]
 80199d0:	480d      	ldr	r0, [pc, #52]	@ (8019a08 <tcp_close_shutdown+0x1b0>)
 80199d2:	f001 fbcd 	bl	801b170 <tcp_pcb_remove>
 80199d6:	4b0d      	ldr	r3, [pc, #52]	@ (8019a0c <tcp_close_shutdown+0x1b4>)
 80199d8:	2201      	movs	r2, #1
 80199da:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80199dc:	6878      	ldr	r0, [r7, #4]
 80199de:	f7ff fe89 	bl	80196f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80199e2:	e004      	b.n	80199ee <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80199e4:	6878      	ldr	r0, [r7, #4]
 80199e6:	f000 f819 	bl	8019a1c <tcp_close_shutdown_fin>
 80199ea:	4603      	mov	r3, r0
 80199ec:	e000      	b.n	80199f0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80199ee:	2300      	movs	r3, #0
}
 80199f0:	4618      	mov	r0, r3
 80199f2:	3710      	adds	r7, #16
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bdb0      	pop	{r4, r5, r7, pc}
 80199f8:	08025ffc 	.word	0x08025ffc
 80199fc:	080260d0 	.word	0x080260d0
 8019a00:	08026040 	.word	0x08026040
 8019a04:	080260f0 	.word	0x080260f0
 8019a08:	20018bbc 	.word	0x20018bbc
 8019a0c:	20018bc4 	.word	0x20018bc4
 8019a10:	20018bfc 	.word	0x20018bfc
 8019a14:	20018bb4 	.word	0x20018bb4
 8019a18:	20018bb8 	.word	0x20018bb8

08019a1c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b084      	sub	sp, #16
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d106      	bne.n	8019a38 <tcp_close_shutdown_fin+0x1c>
 8019a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8019ae4 <tcp_close_shutdown_fin+0xc8>)
 8019a2c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8019a30:	492d      	ldr	r1, [pc, #180]	@ (8019ae8 <tcp_close_shutdown_fin+0xcc>)
 8019a32:	482e      	ldr	r0, [pc, #184]	@ (8019aec <tcp_close_shutdown_fin+0xd0>)
 8019a34:	f009 fe18 	bl	8023668 <iprintf>

  switch (pcb->state) {
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	7d1b      	ldrb	r3, [r3, #20]
 8019a3c:	2b07      	cmp	r3, #7
 8019a3e:	d020      	beq.n	8019a82 <tcp_close_shutdown_fin+0x66>
 8019a40:	2b07      	cmp	r3, #7
 8019a42:	dc2b      	bgt.n	8019a9c <tcp_close_shutdown_fin+0x80>
 8019a44:	2b03      	cmp	r3, #3
 8019a46:	d002      	beq.n	8019a4e <tcp_close_shutdown_fin+0x32>
 8019a48:	2b04      	cmp	r3, #4
 8019a4a:	d00d      	beq.n	8019a68 <tcp_close_shutdown_fin+0x4c>
 8019a4c:	e026      	b.n	8019a9c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019a4e:	6878      	ldr	r0, [r7, #4]
 8019a50:	f004 fe68 	bl	801e724 <tcp_send_fin>
 8019a54:	4603      	mov	r3, r0
 8019a56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d11f      	bne.n	8019aa0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	2205      	movs	r2, #5
 8019a64:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019a66:	e01b      	b.n	8019aa0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f004 fe5b 	bl	801e724 <tcp_send_fin>
 8019a6e:	4603      	mov	r3, r0
 8019a70:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d114      	bne.n	8019aa4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	2205      	movs	r2, #5
 8019a7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019a80:	e010      	b.n	8019aa4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019a82:	6878      	ldr	r0, [r7, #4]
 8019a84:	f004 fe4e 	bl	801e724 <tcp_send_fin>
 8019a88:	4603      	mov	r3, r0
 8019a8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d109      	bne.n	8019aa8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	2209      	movs	r2, #9
 8019a98:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019a9a:	e005      	b.n	8019aa8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	e01c      	b.n	8019ada <tcp_close_shutdown_fin+0xbe>
      break;
 8019aa0:	bf00      	nop
 8019aa2:	e002      	b.n	8019aaa <tcp_close_shutdown_fin+0x8e>
      break;
 8019aa4:	bf00      	nop
 8019aa6:	e000      	b.n	8019aaa <tcp_close_shutdown_fin+0x8e>
      break;
 8019aa8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8019aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d103      	bne.n	8019aba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019ab2:	6878      	ldr	r0, [r7, #4]
 8019ab4:	f004 ff74 	bl	801e9a0 <tcp_output>
 8019ab8:	e00d      	b.n	8019ad6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8019aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ac2:	d108      	bne.n	8019ad6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	8b5b      	ldrh	r3, [r3, #26]
 8019ac8:	f043 0308 	orr.w	r3, r3, #8
 8019acc:	b29a      	uxth	r2, r3
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	e001      	b.n	8019ada <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8019ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3710      	adds	r7, #16
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	08025ffc 	.word	0x08025ffc
 8019ae8:	080260ac 	.word	0x080260ac
 8019aec:	08026040 	.word	0x08026040

08019af0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b082      	sub	sp, #8
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d109      	bne.n	8019b12 <tcp_close+0x22>
 8019afe:	4b0f      	ldr	r3, [pc, #60]	@ (8019b3c <tcp_close+0x4c>)
 8019b00:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8019b04:	490e      	ldr	r1, [pc, #56]	@ (8019b40 <tcp_close+0x50>)
 8019b06:	480f      	ldr	r0, [pc, #60]	@ (8019b44 <tcp_close+0x54>)
 8019b08:	f009 fdae 	bl	8023668 <iprintf>
 8019b0c:	f06f 030f 	mvn.w	r3, #15
 8019b10:	e00f      	b.n	8019b32 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	7d1b      	ldrb	r3, [r3, #20]
 8019b16:	2b01      	cmp	r3, #1
 8019b18:	d006      	beq.n	8019b28 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	8b5b      	ldrh	r3, [r3, #26]
 8019b1e:	f043 0310 	orr.w	r3, r3, #16
 8019b22:	b29a      	uxth	r2, r3
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019b28:	2101      	movs	r1, #1
 8019b2a:	6878      	ldr	r0, [r7, #4]
 8019b2c:	f7ff fe94 	bl	8019858 <tcp_close_shutdown>
 8019b30:	4603      	mov	r3, r0
}
 8019b32:	4618      	mov	r0, r3
 8019b34:	3708      	adds	r7, #8
 8019b36:	46bd      	mov	sp, r7
 8019b38:	bd80      	pop	{r7, pc}
 8019b3a:	bf00      	nop
 8019b3c:	08025ffc 	.word	0x08025ffc
 8019b40:	0802610c 	.word	0x0802610c
 8019b44:	08026040 	.word	0x08026040

08019b48 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b084      	sub	sp, #16
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	60f8      	str	r0, [r7, #12]
 8019b50:	60b9      	str	r1, [r7, #8]
 8019b52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d109      	bne.n	8019b6e <tcp_shutdown+0x26>
 8019b5a:	4b26      	ldr	r3, [pc, #152]	@ (8019bf4 <tcp_shutdown+0xac>)
 8019b5c:	f240 2207 	movw	r2, #519	@ 0x207
 8019b60:	4925      	ldr	r1, [pc, #148]	@ (8019bf8 <tcp_shutdown+0xb0>)
 8019b62:	4826      	ldr	r0, [pc, #152]	@ (8019bfc <tcp_shutdown+0xb4>)
 8019b64:	f009 fd80 	bl	8023668 <iprintf>
 8019b68:	f06f 030f 	mvn.w	r3, #15
 8019b6c:	e03d      	b.n	8019bea <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	7d1b      	ldrb	r3, [r3, #20]
 8019b72:	2b01      	cmp	r3, #1
 8019b74:	d102      	bne.n	8019b7c <tcp_shutdown+0x34>
    return ERR_CONN;
 8019b76:	f06f 030a 	mvn.w	r3, #10
 8019b7a:	e036      	b.n	8019bea <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d01b      	beq.n	8019bba <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	8b5b      	ldrh	r3, [r3, #26]
 8019b86:	f043 0310 	orr.w	r3, r3, #16
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d005      	beq.n	8019ba2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8019b96:	2101      	movs	r1, #1
 8019b98:	68f8      	ldr	r0, [r7, #12]
 8019b9a:	f7ff fe5d 	bl	8019858 <tcp_close_shutdown>
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	e023      	b.n	8019bea <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d007      	beq.n	8019bba <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f7ff fa06 	bl	8018fc0 <pbuf_free>
      pcb->refused_data = NULL;
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d013      	beq.n	8019be8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	7d1b      	ldrb	r3, [r3, #20]
 8019bc4:	2b04      	cmp	r3, #4
 8019bc6:	dc02      	bgt.n	8019bce <tcp_shutdown+0x86>
 8019bc8:	2b03      	cmp	r3, #3
 8019bca:	da02      	bge.n	8019bd2 <tcp_shutdown+0x8a>
 8019bcc:	e009      	b.n	8019be2 <tcp_shutdown+0x9a>
 8019bce:	2b07      	cmp	r3, #7
 8019bd0:	d107      	bne.n	8019be2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8019bd2:	68bb      	ldr	r3, [r7, #8]
 8019bd4:	b2db      	uxtb	r3, r3
 8019bd6:	4619      	mov	r1, r3
 8019bd8:	68f8      	ldr	r0, [r7, #12]
 8019bda:	f7ff fe3d 	bl	8019858 <tcp_close_shutdown>
 8019bde:	4603      	mov	r3, r0
 8019be0:	e003      	b.n	8019bea <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8019be2:	f06f 030a 	mvn.w	r3, #10
 8019be6:	e000      	b.n	8019bea <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8019be8:	2300      	movs	r3, #0
}
 8019bea:	4618      	mov	r0, r3
 8019bec:	3710      	adds	r7, #16
 8019bee:	46bd      	mov	sp, r7
 8019bf0:	bd80      	pop	{r7, pc}
 8019bf2:	bf00      	nop
 8019bf4:	08025ffc 	.word	0x08025ffc
 8019bf8:	08026124 	.word	0x08026124
 8019bfc:	08026040 	.word	0x08026040

08019c00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b08e      	sub	sp, #56	@ 0x38
 8019c04:	af04      	add	r7, sp, #16
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d107      	bne.n	8019c20 <tcp_abandon+0x20>
 8019c10:	4b52      	ldr	r3, [pc, #328]	@ (8019d5c <tcp_abandon+0x15c>)
 8019c12:	f240 223d 	movw	r2, #573	@ 0x23d
 8019c16:	4952      	ldr	r1, [pc, #328]	@ (8019d60 <tcp_abandon+0x160>)
 8019c18:	4852      	ldr	r0, [pc, #328]	@ (8019d64 <tcp_abandon+0x164>)
 8019c1a:	f009 fd25 	bl	8023668 <iprintf>
 8019c1e:	e099      	b.n	8019d54 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	7d1b      	ldrb	r3, [r3, #20]
 8019c24:	2b01      	cmp	r3, #1
 8019c26:	d106      	bne.n	8019c36 <tcp_abandon+0x36>
 8019c28:	4b4c      	ldr	r3, [pc, #304]	@ (8019d5c <tcp_abandon+0x15c>)
 8019c2a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8019c2e:	494e      	ldr	r1, [pc, #312]	@ (8019d68 <tcp_abandon+0x168>)
 8019c30:	484c      	ldr	r0, [pc, #304]	@ (8019d64 <tcp_abandon+0x164>)
 8019c32:	f009 fd19 	bl	8023668 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	7d1b      	ldrb	r3, [r3, #20]
 8019c3a:	2b0a      	cmp	r3, #10
 8019c3c:	d107      	bne.n	8019c4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019c3e:	6879      	ldr	r1, [r7, #4]
 8019c40:	484a      	ldr	r0, [pc, #296]	@ (8019d6c <tcp_abandon+0x16c>)
 8019c42:	f001 fa95 	bl	801b170 <tcp_pcb_remove>
    tcp_free(pcb);
 8019c46:	6878      	ldr	r0, [r7, #4]
 8019c48:	f7ff fd54 	bl	80196f4 <tcp_free>
 8019c4c:	e082      	b.n	8019d54 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8019c52:	2300      	movs	r3, #0
 8019c54:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019c68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	691b      	ldr	r3, [r3, #16]
 8019c6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	7d1b      	ldrb	r3, [r3, #20]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d126      	bne.n	8019cc6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	8adb      	ldrh	r3, [r3, #22]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d02e      	beq.n	8019cde <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019c80:	4b3b      	ldr	r3, [pc, #236]	@ (8019d70 <tcp_abandon+0x170>)
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	687a      	ldr	r2, [r7, #4]
 8019c86:	429a      	cmp	r2, r3
 8019c88:	d105      	bne.n	8019c96 <tcp_abandon+0x96>
 8019c8a:	4b39      	ldr	r3, [pc, #228]	@ (8019d70 <tcp_abandon+0x170>)
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	68db      	ldr	r3, [r3, #12]
 8019c90:	4a37      	ldr	r2, [pc, #220]	@ (8019d70 <tcp_abandon+0x170>)
 8019c92:	6013      	str	r3, [r2, #0]
 8019c94:	e013      	b.n	8019cbe <tcp_abandon+0xbe>
 8019c96:	4b36      	ldr	r3, [pc, #216]	@ (8019d70 <tcp_abandon+0x170>)
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	61fb      	str	r3, [r7, #28]
 8019c9c:	e00c      	b.n	8019cb8 <tcp_abandon+0xb8>
 8019c9e:	69fb      	ldr	r3, [r7, #28]
 8019ca0:	68db      	ldr	r3, [r3, #12]
 8019ca2:	687a      	ldr	r2, [r7, #4]
 8019ca4:	429a      	cmp	r2, r3
 8019ca6:	d104      	bne.n	8019cb2 <tcp_abandon+0xb2>
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	68da      	ldr	r2, [r3, #12]
 8019cac:	69fb      	ldr	r3, [r7, #28]
 8019cae:	60da      	str	r2, [r3, #12]
 8019cb0:	e005      	b.n	8019cbe <tcp_abandon+0xbe>
 8019cb2:	69fb      	ldr	r3, [r7, #28]
 8019cb4:	68db      	ldr	r3, [r3, #12]
 8019cb6:	61fb      	str	r3, [r7, #28]
 8019cb8:	69fb      	ldr	r3, [r7, #28]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d1ef      	bne.n	8019c9e <tcp_abandon+0x9e>
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	60da      	str	r2, [r3, #12]
 8019cc4:	e00b      	b.n	8019cde <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8019cc6:	683b      	ldr	r3, [r7, #0]
 8019cc8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	8adb      	ldrh	r3, [r3, #22]
 8019cce:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019cd0:	6879      	ldr	r1, [r7, #4]
 8019cd2:	4828      	ldr	r0, [pc, #160]	@ (8019d74 <tcp_abandon+0x174>)
 8019cd4:	f001 fa4c 	bl	801b170 <tcp_pcb_remove>
 8019cd8:	4b27      	ldr	r3, [pc, #156]	@ (8019d78 <tcp_abandon+0x178>)
 8019cda:	2201      	movs	r2, #1
 8019cdc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d004      	beq.n	8019cf0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cea:	4618      	mov	r0, r3
 8019cec:	f000 ff18 	bl	801ab20 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d004      	beq.n	8019d02 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f000 ff0f 	bl	801ab20 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d004      	beq.n	8019d14 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f000 ff06 	bl	801ab20 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d00e      	beq.n	8019d38 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8019d1a:	6879      	ldr	r1, [r7, #4]
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	3304      	adds	r3, #4
 8019d20:	687a      	ldr	r2, [r7, #4]
 8019d22:	8b12      	ldrh	r2, [r2, #24]
 8019d24:	9202      	str	r2, [sp, #8]
 8019d26:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019d28:	9201      	str	r2, [sp, #4]
 8019d2a:	9300      	str	r3, [sp, #0]
 8019d2c:	460b      	mov	r3, r1
 8019d2e:	697a      	ldr	r2, [r7, #20]
 8019d30:	69b9      	ldr	r1, [r7, #24]
 8019d32:	6878      	ldr	r0, [r7, #4]
 8019d34:	f005 fbe8 	bl	801f508 <tcp_rst>
    }
    last_state = pcb->state;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	7d1b      	ldrb	r3, [r3, #20]
 8019d3c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019d3e:	6878      	ldr	r0, [r7, #4]
 8019d40:	f7ff fcd8 	bl	80196f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019d44:	693b      	ldr	r3, [r7, #16]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d004      	beq.n	8019d54 <tcp_abandon+0x154>
 8019d4a:	693b      	ldr	r3, [r7, #16]
 8019d4c:	f06f 010c 	mvn.w	r1, #12
 8019d50:	68f8      	ldr	r0, [r7, #12]
 8019d52:	4798      	blx	r3
  }
}
 8019d54:	3728      	adds	r7, #40	@ 0x28
 8019d56:	46bd      	mov	sp, r7
 8019d58:	bd80      	pop	{r7, pc}
 8019d5a:	bf00      	nop
 8019d5c:	08025ffc 	.word	0x08025ffc
 8019d60:	08026140 	.word	0x08026140
 8019d64:	08026040 	.word	0x08026040
 8019d68:	0802615c 	.word	0x0802615c
 8019d6c:	20018bc0 	.word	0x20018bc0
 8019d70:	20018bb4 	.word	0x20018bb4
 8019d74:	20018bbc 	.word	0x20018bbc
 8019d78:	20018bc4 	.word	0x20018bc4

08019d7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b082      	sub	sp, #8
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8019d84:	2101      	movs	r1, #1
 8019d86:	6878      	ldr	r0, [r7, #4]
 8019d88:	f7ff ff3a 	bl	8019c00 <tcp_abandon>
}
 8019d8c:	bf00      	nop
 8019d8e:	3708      	adds	r7, #8
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}

08019d94 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b088      	sub	sp, #32
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	60f8      	str	r0, [r7, #12]
 8019d9c:	60b9      	str	r1, [r7, #8]
 8019d9e:	4613      	mov	r3, r2
 8019da0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8019da2:	2304      	movs	r3, #4
 8019da4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d101      	bne.n	8019db0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8019dac:	4b3e      	ldr	r3, [pc, #248]	@ (8019ea8 <tcp_bind+0x114>)
 8019dae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d109      	bne.n	8019dca <tcp_bind+0x36>
 8019db6:	4b3d      	ldr	r3, [pc, #244]	@ (8019eac <tcp_bind+0x118>)
 8019db8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8019dbc:	493c      	ldr	r1, [pc, #240]	@ (8019eb0 <tcp_bind+0x11c>)
 8019dbe:	483d      	ldr	r0, [pc, #244]	@ (8019eb4 <tcp_bind+0x120>)
 8019dc0:	f009 fc52 	bl	8023668 <iprintf>
 8019dc4:	f06f 030f 	mvn.w	r3, #15
 8019dc8:	e06a      	b.n	8019ea0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	7d1b      	ldrb	r3, [r3, #20]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d009      	beq.n	8019de6 <tcp_bind+0x52>
 8019dd2:	4b36      	ldr	r3, [pc, #216]	@ (8019eac <tcp_bind+0x118>)
 8019dd4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019dd8:	4937      	ldr	r1, [pc, #220]	@ (8019eb8 <tcp_bind+0x124>)
 8019dda:	4836      	ldr	r0, [pc, #216]	@ (8019eb4 <tcp_bind+0x120>)
 8019ddc:	f009 fc44 	bl	8023668 <iprintf>
 8019de0:	f06f 0305 	mvn.w	r3, #5
 8019de4:	e05c      	b.n	8019ea0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8019de6:	88fb      	ldrh	r3, [r7, #6]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d109      	bne.n	8019e00 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019dec:	f000 f916 	bl	801a01c <tcp_new_port>
 8019df0:	4603      	mov	r3, r0
 8019df2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019df4:	88fb      	ldrh	r3, [r7, #6]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d135      	bne.n	8019e66 <tcp_bind+0xd2>
      return ERR_BUF;
 8019dfa:	f06f 0301 	mvn.w	r3, #1
 8019dfe:	e04f      	b.n	8019ea0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019e00:	2300      	movs	r3, #0
 8019e02:	61fb      	str	r3, [r7, #28]
 8019e04:	e02b      	b.n	8019e5e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019e06:	4a2d      	ldr	r2, [pc, #180]	@ (8019ebc <tcp_bind+0x128>)
 8019e08:	69fb      	ldr	r3, [r7, #28]
 8019e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	61bb      	str	r3, [r7, #24]
 8019e12:	e01e      	b.n	8019e52 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019e14:	69bb      	ldr	r3, [r7, #24]
 8019e16:	8adb      	ldrh	r3, [r3, #22]
 8019e18:	88fa      	ldrh	r2, [r7, #6]
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	d116      	bne.n	8019e4c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019e1e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d010      	beq.n	8019e46 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019e24:	69bb      	ldr	r3, [r7, #24]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d00c      	beq.n	8019e46 <tcp_bind+0xb2>
 8019e2c:	68bb      	ldr	r3, [r7, #8]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d009      	beq.n	8019e46 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d005      	beq.n	8019e46 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8019e3a:	69bb      	ldr	r3, [r7, #24]
 8019e3c:	681a      	ldr	r2, [r3, #0]
 8019e3e:	68bb      	ldr	r3, [r7, #8]
 8019e40:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019e42:	429a      	cmp	r2, r3
 8019e44:	d102      	bne.n	8019e4c <tcp_bind+0xb8>
              return ERR_USE;
 8019e46:	f06f 0307 	mvn.w	r3, #7
 8019e4a:	e029      	b.n	8019ea0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019e4c:	69bb      	ldr	r3, [r7, #24]
 8019e4e:	68db      	ldr	r3, [r3, #12]
 8019e50:	61bb      	str	r3, [r7, #24]
 8019e52:	69bb      	ldr	r3, [r7, #24]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d1dd      	bne.n	8019e14 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	3301      	adds	r3, #1
 8019e5c:	61fb      	str	r3, [r7, #28]
 8019e5e:	69fa      	ldr	r2, [r7, #28]
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	429a      	cmp	r2, r3
 8019e64:	dbcf      	blt.n	8019e06 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8019e66:	68bb      	ldr	r3, [r7, #8]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d00c      	beq.n	8019e86 <tcp_bind+0xf2>
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d008      	beq.n	8019e86 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d002      	beq.n	8019e80 <tcp_bind+0xec>
 8019e7a:	68bb      	ldr	r3, [r7, #8]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	e000      	b.n	8019e82 <tcp_bind+0xee>
 8019e80:	2300      	movs	r3, #0
 8019e82:	68fa      	ldr	r2, [r7, #12]
 8019e84:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	88fa      	ldrh	r2, [r7, #6]
 8019e8a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8019e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8019ec0 <tcp_bind+0x12c>)
 8019e8e:	681a      	ldr	r2, [r3, #0]
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	60da      	str	r2, [r3, #12]
 8019e94:	4a0a      	ldr	r2, [pc, #40]	@ (8019ec0 <tcp_bind+0x12c>)
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	6013      	str	r3, [r2, #0]
 8019e9a:	f005 fcf7 	bl	801f88c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8019e9e:	2300      	movs	r3, #0
}
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	3720      	adds	r7, #32
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bd80      	pop	{r7, pc}
 8019ea8:	0802805c 	.word	0x0802805c
 8019eac:	08025ffc 	.word	0x08025ffc
 8019eb0:	08026190 	.word	0x08026190
 8019eb4:	08026040 	.word	0x08026040
 8019eb8:	080261a8 	.word	0x080261a8
 8019ebc:	08028034 	.word	0x08028034
 8019ec0:	20018bb4 	.word	0x20018bb4

08019ec4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b084      	sub	sp, #16
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d106      	bne.n	8019ee0 <tcp_update_rcv_ann_wnd+0x1c>
 8019ed2:	4b25      	ldr	r3, [pc, #148]	@ (8019f68 <tcp_update_rcv_ann_wnd+0xa4>)
 8019ed4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8019ed8:	4924      	ldr	r1, [pc, #144]	@ (8019f6c <tcp_update_rcv_ann_wnd+0xa8>)
 8019eda:	4825      	ldr	r0, [pc, #148]	@ (8019f70 <tcp_update_rcv_ann_wnd+0xac>)
 8019edc:	f009 fbc4 	bl	8023668 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ee4:	687a      	ldr	r2, [r7, #4]
 8019ee6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8019ee8:	4413      	add	r3, r2
 8019eea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8019ef4:	f640 3168 	movw	r1, #2920	@ 0xb68
 8019ef8:	428a      	cmp	r2, r1
 8019efa:	bf28      	it	cs
 8019efc:	460a      	movcs	r2, r1
 8019efe:	b292      	uxth	r2, r2
 8019f00:	4413      	add	r3, r2
 8019f02:	68fa      	ldr	r2, [r7, #12]
 8019f04:	1ad3      	subs	r3, r2, r3
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	db08      	blt.n	8019f1c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f16:	68fa      	ldr	r2, [r7, #12]
 8019f18:	1ad3      	subs	r3, r2, r3
 8019f1a:	e020      	b.n	8019f5e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f24:	1ad3      	subs	r3, r2, r3
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	dd03      	ble.n	8019f32 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	2200      	movs	r2, #0
 8019f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8019f30:	e014      	b.n	8019f5c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f3a:	1ad3      	subs	r3, r2, r3
 8019f3c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019f3e:	68bb      	ldr	r3, [r7, #8]
 8019f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019f44:	d306      	bcc.n	8019f54 <tcp_update_rcv_ann_wnd+0x90>
 8019f46:	4b08      	ldr	r3, [pc, #32]	@ (8019f68 <tcp_update_rcv_ann_wnd+0xa4>)
 8019f48:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8019f4c:	4909      	ldr	r1, [pc, #36]	@ (8019f74 <tcp_update_rcv_ann_wnd+0xb0>)
 8019f4e:	4808      	ldr	r0, [pc, #32]	@ (8019f70 <tcp_update_rcv_ann_wnd+0xac>)
 8019f50:	f009 fb8a 	bl	8023668 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	b29a      	uxth	r2, r3
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8019f5c:	2300      	movs	r3, #0
  }
}
 8019f5e:	4618      	mov	r0, r3
 8019f60:	3710      	adds	r7, #16
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	08025ffc 	.word	0x08025ffc
 8019f6c:	08026258 	.word	0x08026258
 8019f70:	08026040 	.word	0x08026040
 8019f74:	0802627c 	.word	0x0802627c

08019f78 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b084      	sub	sp, #16
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
 8019f80:	460b      	mov	r3, r1
 8019f82:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d107      	bne.n	8019f9a <tcp_recved+0x22>
 8019f8a:	4b20      	ldr	r3, [pc, #128]	@ (801a00c <tcp_recved+0x94>)
 8019f8c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8019f90:	491f      	ldr	r1, [pc, #124]	@ (801a010 <tcp_recved+0x98>)
 8019f92:	4820      	ldr	r0, [pc, #128]	@ (801a014 <tcp_recved+0x9c>)
 8019f94:	f009 fb68 	bl	8023668 <iprintf>
 8019f98:	e034      	b.n	801a004 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	7d1b      	ldrb	r3, [r3, #20]
 8019f9e:	2b01      	cmp	r3, #1
 8019fa0:	d106      	bne.n	8019fb0 <tcp_recved+0x38>
 8019fa2:	4b1a      	ldr	r3, [pc, #104]	@ (801a00c <tcp_recved+0x94>)
 8019fa4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8019fa8:	491b      	ldr	r1, [pc, #108]	@ (801a018 <tcp_recved+0xa0>)
 8019faa:	481a      	ldr	r0, [pc, #104]	@ (801a014 <tcp_recved+0x9c>)
 8019fac:	f009 fb5c 	bl	8023668 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019fb4:	887b      	ldrh	r3, [r7, #2]
 8019fb6:	4413      	add	r3, r2
 8019fb8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8019fba:	89fb      	ldrh	r3, [r7, #14]
 8019fbc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8019fc0:	4293      	cmp	r3, r2
 8019fc2:	d804      	bhi.n	8019fce <tcp_recved+0x56>
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019fc8:	89fa      	ldrh	r2, [r7, #14]
 8019fca:	429a      	cmp	r2, r3
 8019fcc:	d204      	bcs.n	8019fd8 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8019fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8019fd6:	e002      	b.n	8019fde <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	89fa      	ldrh	r2, [r7, #14]
 8019fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019fde:	6878      	ldr	r0, [r7, #4]
 8019fe0:	f7ff ff70 	bl	8019ec4 <tcp_update_rcv_ann_wnd>
 8019fe4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019fe6:	68bb      	ldr	r3, [r7, #8]
 8019fe8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8019fec:	4293      	cmp	r3, r2
 8019fee:	d909      	bls.n	801a004 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	8b5b      	ldrh	r3, [r3, #26]
 8019ff4:	f043 0302 	orr.w	r3, r3, #2
 8019ff8:	b29a      	uxth	r2, r3
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019ffe:	6878      	ldr	r0, [r7, #4]
 801a000:	f004 fcce 	bl	801e9a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801a004:	3710      	adds	r7, #16
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}
 801a00a:	bf00      	nop
 801a00c:	08025ffc 	.word	0x08025ffc
 801a010:	08026298 	.word	0x08026298
 801a014:	08026040 	.word	0x08026040
 801a018:	080262b0 	.word	0x080262b0

0801a01c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801a01c:	b480      	push	{r7}
 801a01e:	b083      	sub	sp, #12
 801a020:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801a022:	2300      	movs	r3, #0
 801a024:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801a026:	4b1e      	ldr	r3, [pc, #120]	@ (801a0a0 <tcp_new_port+0x84>)
 801a028:	881b      	ldrh	r3, [r3, #0]
 801a02a:	3301      	adds	r3, #1
 801a02c:	b29a      	uxth	r2, r3
 801a02e:	4b1c      	ldr	r3, [pc, #112]	@ (801a0a0 <tcp_new_port+0x84>)
 801a030:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801a032:	4b1b      	ldr	r3, [pc, #108]	@ (801a0a0 <tcp_new_port+0x84>)
 801a034:	881b      	ldrh	r3, [r3, #0]
 801a036:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a03a:	4293      	cmp	r3, r2
 801a03c:	d103      	bne.n	801a046 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a03e:	4b18      	ldr	r3, [pc, #96]	@ (801a0a0 <tcp_new_port+0x84>)
 801a040:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a044:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a046:	2300      	movs	r3, #0
 801a048:	71fb      	strb	r3, [r7, #7]
 801a04a:	e01e      	b.n	801a08a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a04c:	79fb      	ldrb	r3, [r7, #7]
 801a04e:	4a15      	ldr	r2, [pc, #84]	@ (801a0a4 <tcp_new_port+0x88>)
 801a050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	603b      	str	r3, [r7, #0]
 801a058:	e011      	b.n	801a07e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	8ada      	ldrh	r2, [r3, #22]
 801a05e:	4b10      	ldr	r3, [pc, #64]	@ (801a0a0 <tcp_new_port+0x84>)
 801a060:	881b      	ldrh	r3, [r3, #0]
 801a062:	429a      	cmp	r2, r3
 801a064:	d108      	bne.n	801a078 <tcp_new_port+0x5c>
        n++;
 801a066:	88bb      	ldrh	r3, [r7, #4]
 801a068:	3301      	adds	r3, #1
 801a06a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801a06c:	88bb      	ldrh	r3, [r7, #4]
 801a06e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a072:	d3d8      	bcc.n	801a026 <tcp_new_port+0xa>
          return 0;
 801a074:	2300      	movs	r3, #0
 801a076:	e00d      	b.n	801a094 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	68db      	ldr	r3, [r3, #12]
 801a07c:	603b      	str	r3, [r7, #0]
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d1ea      	bne.n	801a05a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a084:	79fb      	ldrb	r3, [r7, #7]
 801a086:	3301      	adds	r3, #1
 801a088:	71fb      	strb	r3, [r7, #7]
 801a08a:	79fb      	ldrb	r3, [r7, #7]
 801a08c:	2b03      	cmp	r3, #3
 801a08e:	d9dd      	bls.n	801a04c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801a090:	4b03      	ldr	r3, [pc, #12]	@ (801a0a0 <tcp_new_port+0x84>)
 801a092:	881b      	ldrh	r3, [r3, #0]
}
 801a094:	4618      	mov	r0, r3
 801a096:	370c      	adds	r7, #12
 801a098:	46bd      	mov	sp, r7
 801a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09e:	4770      	bx	lr
 801a0a0:	20000044 	.word	0x20000044
 801a0a4:	08028034 	.word	0x08028034

0801a0a8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b08a      	sub	sp, #40	@ 0x28
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	60f8      	str	r0, [r7, #12]
 801a0b0:	60b9      	str	r1, [r7, #8]
 801a0b2:	603b      	str	r3, [r7, #0]
 801a0b4:	4613      	mov	r3, r2
 801a0b6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d109      	bne.n	801a0d6 <tcp_connect+0x2e>
 801a0c2:	4b7d      	ldr	r3, [pc, #500]	@ (801a2b8 <tcp_connect+0x210>)
 801a0c4:	f240 4235 	movw	r2, #1077	@ 0x435
 801a0c8:	497c      	ldr	r1, [pc, #496]	@ (801a2bc <tcp_connect+0x214>)
 801a0ca:	487d      	ldr	r0, [pc, #500]	@ (801a2c0 <tcp_connect+0x218>)
 801a0cc:	f009 facc 	bl	8023668 <iprintf>
 801a0d0:	f06f 030f 	mvn.w	r3, #15
 801a0d4:	e0ec      	b.n	801a2b0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d109      	bne.n	801a0f0 <tcp_connect+0x48>
 801a0dc:	4b76      	ldr	r3, [pc, #472]	@ (801a2b8 <tcp_connect+0x210>)
 801a0de:	f240 4236 	movw	r2, #1078	@ 0x436
 801a0e2:	4978      	ldr	r1, [pc, #480]	@ (801a2c4 <tcp_connect+0x21c>)
 801a0e4:	4876      	ldr	r0, [pc, #472]	@ (801a2c0 <tcp_connect+0x218>)
 801a0e6:	f009 fabf 	bl	8023668 <iprintf>
 801a0ea:	f06f 030f 	mvn.w	r3, #15
 801a0ee:	e0df      	b.n	801a2b0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	7d1b      	ldrb	r3, [r3, #20]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d009      	beq.n	801a10c <tcp_connect+0x64>
 801a0f8:	4b6f      	ldr	r3, [pc, #444]	@ (801a2b8 <tcp_connect+0x210>)
 801a0fa:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 801a0fe:	4972      	ldr	r1, [pc, #456]	@ (801a2c8 <tcp_connect+0x220>)
 801a100:	486f      	ldr	r0, [pc, #444]	@ (801a2c0 <tcp_connect+0x218>)
 801a102:	f009 fab1 	bl	8023668 <iprintf>
 801a106:	f06f 0309 	mvn.w	r3, #9
 801a10a:	e0d1      	b.n	801a2b0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d002      	beq.n	801a118 <tcp_connect+0x70>
 801a112:	68bb      	ldr	r3, [r7, #8]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	e000      	b.n	801a11a <tcp_connect+0x72>
 801a118:	2300      	movs	r3, #0
 801a11a:	68fa      	ldr	r2, [r7, #12]
 801a11c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	88fa      	ldrh	r2, [r7, #6]
 801a122:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	7a1b      	ldrb	r3, [r3, #8]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d006      	beq.n	801a13a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	7a1b      	ldrb	r3, [r3, #8]
 801a130:	4618      	mov	r0, r3
 801a132:	f7fe fb85 	bl	8018840 <netif_get_by_index>
 801a136:	6278      	str	r0, [r7, #36]	@ 0x24
 801a138:	e005      	b.n	801a146 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	3304      	adds	r3, #4
 801a13e:	4618      	mov	r0, r3
 801a140:	f007 f8f8 	bl	8021334 <ip4_route>
 801a144:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 801a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d102      	bne.n	801a152 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801a14c:	f06f 0303 	mvn.w	r3, #3
 801a150:	e0ae      	b.n	801a2b0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d003      	beq.n	801a160 <tcp_connect+0xb8>
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d111      	bne.n	801a184 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801a160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a162:	2b00      	cmp	r3, #0
 801a164:	d002      	beq.n	801a16c <tcp_connect+0xc4>
 801a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a168:	3304      	adds	r3, #4
 801a16a:	e000      	b.n	801a16e <tcp_connect+0xc6>
 801a16c:	2300      	movs	r3, #0
 801a16e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801a170:	69fb      	ldr	r3, [r7, #28]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d102      	bne.n	801a17c <tcp_connect+0xd4>
      return ERR_RTE;
 801a176:	f06f 0303 	mvn.w	r3, #3
 801a17a:	e099      	b.n	801a2b0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a17c:	69fb      	ldr	r3, [r7, #28]
 801a17e:	681a      	ldr	r2, [r3, #0]
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	8adb      	ldrh	r3, [r3, #22]
 801a188:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	8adb      	ldrh	r3, [r3, #22]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d10c      	bne.n	801a1ac <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801a192:	f7ff ff43 	bl	801a01c <tcp_new_port>
 801a196:	4603      	mov	r3, r0
 801a198:	461a      	mov	r2, r3
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	8adb      	ldrh	r3, [r3, #22]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d102      	bne.n	801a1ac <tcp_connect+0x104>
      return ERR_BUF;
 801a1a6:	f06f 0301 	mvn.w	r3, #1
 801a1aa:	e081      	b.n	801a2b0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801a1ac:	68f8      	ldr	r0, [r7, #12]
 801a1ae:	f001 f873 	bl	801b298 <tcp_next_iss>
 801a1b2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	697a      	ldr	r2, [r7, #20]
 801a1be:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 801a1c0:	697b      	ldr	r3, [r7, #20]
 801a1c2:	1e5a      	subs	r2, r3, #1
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 801a1c8:	697b      	ldr	r3, [r7, #20]
 801a1ca:	1e5a      	subs	r2, r3, #1
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 801a1d0:	697b      	ldr	r3, [r7, #20]
 801a1d2:	1e5a      	subs	r2, r3, #1
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801a1de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801a1f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a200:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	3304      	adds	r3, #4
 801a20a:	461a      	mov	r2, r3
 801a20c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a20e:	f001 f869 	bl	801b2e4 <tcp_eff_send_mss_netif>
 801a212:	4603      	mov	r3, r0
 801a214:	461a      	mov	r2, r3
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	2201      	movs	r2, #1
 801a21e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	683a      	ldr	r2, [r7, #0]
 801a226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a22a:	2102      	movs	r1, #2
 801a22c:	68f8      	ldr	r0, [r7, #12]
 801a22e:	f004 fac9 	bl	801e7c4 <tcp_enqueue_flags>
 801a232:	4603      	mov	r3, r0
 801a234:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801a236:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d136      	bne.n	801a2ac <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	2202      	movs	r2, #2
 801a242:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801a244:	8b7b      	ldrh	r3, [r7, #26]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d021      	beq.n	801a28e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a24a:	4b20      	ldr	r3, [pc, #128]	@ (801a2cc <tcp_connect+0x224>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	68fa      	ldr	r2, [r7, #12]
 801a250:	429a      	cmp	r2, r3
 801a252:	d105      	bne.n	801a260 <tcp_connect+0x1b8>
 801a254:	4b1d      	ldr	r3, [pc, #116]	@ (801a2cc <tcp_connect+0x224>)
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	68db      	ldr	r3, [r3, #12]
 801a25a:	4a1c      	ldr	r2, [pc, #112]	@ (801a2cc <tcp_connect+0x224>)
 801a25c:	6013      	str	r3, [r2, #0]
 801a25e:	e013      	b.n	801a288 <tcp_connect+0x1e0>
 801a260:	4b1a      	ldr	r3, [pc, #104]	@ (801a2cc <tcp_connect+0x224>)
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	623b      	str	r3, [r7, #32]
 801a266:	e00c      	b.n	801a282 <tcp_connect+0x1da>
 801a268:	6a3b      	ldr	r3, [r7, #32]
 801a26a:	68db      	ldr	r3, [r3, #12]
 801a26c:	68fa      	ldr	r2, [r7, #12]
 801a26e:	429a      	cmp	r2, r3
 801a270:	d104      	bne.n	801a27c <tcp_connect+0x1d4>
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	68da      	ldr	r2, [r3, #12]
 801a276:	6a3b      	ldr	r3, [r7, #32]
 801a278:	60da      	str	r2, [r3, #12]
 801a27a:	e005      	b.n	801a288 <tcp_connect+0x1e0>
 801a27c:	6a3b      	ldr	r3, [r7, #32]
 801a27e:	68db      	ldr	r3, [r3, #12]
 801a280:	623b      	str	r3, [r7, #32]
 801a282:	6a3b      	ldr	r3, [r7, #32]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d1ef      	bne.n	801a268 <tcp_connect+0x1c0>
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	2200      	movs	r2, #0
 801a28c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801a28e:	4b10      	ldr	r3, [pc, #64]	@ (801a2d0 <tcp_connect+0x228>)
 801a290:	681a      	ldr	r2, [r3, #0]
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	60da      	str	r2, [r3, #12]
 801a296:	4a0e      	ldr	r2, [pc, #56]	@ (801a2d0 <tcp_connect+0x228>)
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	6013      	str	r3, [r2, #0]
 801a29c:	f005 faf6 	bl	801f88c <tcp_timer_needed>
 801a2a0:	4b0c      	ldr	r3, [pc, #48]	@ (801a2d4 <tcp_connect+0x22c>)
 801a2a2:	2201      	movs	r2, #1
 801a2a4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801a2a6:	68f8      	ldr	r0, [r7, #12]
 801a2a8:	f004 fb7a 	bl	801e9a0 <tcp_output>
  }
  return ret;
 801a2ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3728      	adds	r7, #40	@ 0x28
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}
 801a2b8:	08025ffc 	.word	0x08025ffc
 801a2bc:	080262d8 	.word	0x080262d8
 801a2c0:	08026040 	.word	0x08026040
 801a2c4:	080262f4 	.word	0x080262f4
 801a2c8:	08026310 	.word	0x08026310
 801a2cc:	20018bb4 	.word	0x20018bb4
 801a2d0:	20018bbc 	.word	0x20018bbc
 801a2d4:	20018bc4 	.word	0x20018bc4

0801a2d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801a2d8:	b5b0      	push	{r4, r5, r7, lr}
 801a2da:	b090      	sub	sp, #64	@ 0x40
 801a2dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801a2e4:	4b95      	ldr	r3, [pc, #596]	@ (801a53c <tcp_slowtmr+0x264>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	3301      	adds	r3, #1
 801a2ea:	4a94      	ldr	r2, [pc, #592]	@ (801a53c <tcp_slowtmr+0x264>)
 801a2ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801a2ee:	4b94      	ldr	r3, [pc, #592]	@ (801a540 <tcp_slowtmr+0x268>)
 801a2f0:	781b      	ldrb	r3, [r3, #0]
 801a2f2:	3301      	adds	r3, #1
 801a2f4:	b2da      	uxtb	r2, r3
 801a2f6:	4b92      	ldr	r3, [pc, #584]	@ (801a540 <tcp_slowtmr+0x268>)
 801a2f8:	701a      	strb	r2, [r3, #0]
 801a2fa:	e000      	b.n	801a2fe <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801a2fc:	bf00      	nop
  prev = NULL;
 801a2fe:	2300      	movs	r3, #0
 801a300:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801a302:	4b90      	ldr	r3, [pc, #576]	@ (801a544 <tcp_slowtmr+0x26c>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801a308:	e29d      	b.n	801a846 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801a30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a30c:	7d1b      	ldrb	r3, [r3, #20]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d106      	bne.n	801a320 <tcp_slowtmr+0x48>
 801a312:	4b8d      	ldr	r3, [pc, #564]	@ (801a548 <tcp_slowtmr+0x270>)
 801a314:	f240 42be 	movw	r2, #1214	@ 0x4be
 801a318:	498c      	ldr	r1, [pc, #560]	@ (801a54c <tcp_slowtmr+0x274>)
 801a31a:	488d      	ldr	r0, [pc, #564]	@ (801a550 <tcp_slowtmr+0x278>)
 801a31c:	f009 f9a4 	bl	8023668 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a322:	7d1b      	ldrb	r3, [r3, #20]
 801a324:	2b01      	cmp	r3, #1
 801a326:	d106      	bne.n	801a336 <tcp_slowtmr+0x5e>
 801a328:	4b87      	ldr	r3, [pc, #540]	@ (801a548 <tcp_slowtmr+0x270>)
 801a32a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801a32e:	4989      	ldr	r1, [pc, #548]	@ (801a554 <tcp_slowtmr+0x27c>)
 801a330:	4887      	ldr	r0, [pc, #540]	@ (801a550 <tcp_slowtmr+0x278>)
 801a332:	f009 f999 	bl	8023668 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a338:	7d1b      	ldrb	r3, [r3, #20]
 801a33a:	2b0a      	cmp	r3, #10
 801a33c:	d106      	bne.n	801a34c <tcp_slowtmr+0x74>
 801a33e:	4b82      	ldr	r3, [pc, #520]	@ (801a548 <tcp_slowtmr+0x270>)
 801a340:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801a344:	4984      	ldr	r1, [pc, #528]	@ (801a558 <tcp_slowtmr+0x280>)
 801a346:	4882      	ldr	r0, [pc, #520]	@ (801a550 <tcp_slowtmr+0x278>)
 801a348:	f009 f98e 	bl	8023668 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801a34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a34e:	7f9a      	ldrb	r2, [r3, #30]
 801a350:	4b7b      	ldr	r3, [pc, #492]	@ (801a540 <tcp_slowtmr+0x268>)
 801a352:	781b      	ldrb	r3, [r3, #0]
 801a354:	429a      	cmp	r2, r3
 801a356:	d105      	bne.n	801a364 <tcp_slowtmr+0x8c>
      prev = pcb;
 801a358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a35a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801a35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a35e:	68db      	ldr	r3, [r3, #12]
 801a360:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801a362:	e270      	b.n	801a846 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801a364:	4b76      	ldr	r3, [pc, #472]	@ (801a540 <tcp_slowtmr+0x268>)
 801a366:	781a      	ldrb	r2, [r3, #0]
 801a368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a36a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801a36c:	2300      	movs	r3, #0
 801a36e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801a372:	2300      	movs	r3, #0
 801a374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801a378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a37a:	7d1b      	ldrb	r3, [r3, #20]
 801a37c:	2b02      	cmp	r3, #2
 801a37e:	d10a      	bne.n	801a396 <tcp_slowtmr+0xbe>
 801a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a386:	2b05      	cmp	r3, #5
 801a388:	d905      	bls.n	801a396 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801a38a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a38e:	3301      	adds	r3, #1
 801a390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a394:	e11e      	b.n	801a5d4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801a396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a398:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a39c:	2b0b      	cmp	r3, #11
 801a39e:	d905      	bls.n	801a3ac <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801a3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3a4:	3301      	adds	r3, #1
 801a3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a3aa:	e113      	b.n	801a5d4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801a3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d075      	beq.n	801a4a2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801a3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d006      	beq.n	801a3cc <tcp_slowtmr+0xf4>
 801a3be:	4b62      	ldr	r3, [pc, #392]	@ (801a548 <tcp_slowtmr+0x270>)
 801a3c0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801a3c4:	4965      	ldr	r1, [pc, #404]	@ (801a55c <tcp_slowtmr+0x284>)
 801a3c6:	4862      	ldr	r0, [pc, #392]	@ (801a550 <tcp_slowtmr+0x278>)
 801a3c8:	f009 f94e 	bl	8023668 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d106      	bne.n	801a3e2 <tcp_slowtmr+0x10a>
 801a3d4:	4b5c      	ldr	r3, [pc, #368]	@ (801a548 <tcp_slowtmr+0x270>)
 801a3d6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801a3da:	4961      	ldr	r1, [pc, #388]	@ (801a560 <tcp_slowtmr+0x288>)
 801a3dc:	485c      	ldr	r0, [pc, #368]	@ (801a550 <tcp_slowtmr+0x278>)
 801a3de:	f009 f943 	bl	8023668 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801a3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3e4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a3e8:	2b0b      	cmp	r3, #11
 801a3ea:	d905      	bls.n	801a3f8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801a3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3f0:	3301      	adds	r3, #1
 801a3f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a3f6:	e0ed      	b.n	801a5d4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a3fe:	3b01      	subs	r3, #1
 801a400:	4a58      	ldr	r2, [pc, #352]	@ (801a564 <tcp_slowtmr+0x28c>)
 801a402:	5cd3      	ldrb	r3, [r2, r3]
 801a404:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801a406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a408:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801a40c:	7c7a      	ldrb	r2, [r7, #17]
 801a40e:	429a      	cmp	r2, r3
 801a410:	d907      	bls.n	801a422 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801a412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a414:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801a418:	3301      	adds	r3, #1
 801a41a:	b2da      	uxtb	r2, r3
 801a41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a41e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801a422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a424:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801a428:	7c7a      	ldrb	r2, [r7, #17]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	f200 80d2 	bhi.w	801a5d4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801a430:	2301      	movs	r3, #1
 801a432:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801a434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d108      	bne.n	801a450 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a43e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a440:	f005 f956 	bl	801f6f0 <tcp_zero_window_probe>
 801a444:	4603      	mov	r3, r0
 801a446:	2b00      	cmp	r3, #0
 801a448:	d014      	beq.n	801a474 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801a44a:	2300      	movs	r3, #0
 801a44c:	623b      	str	r3, [r7, #32]
 801a44e:	e011      	b.n	801a474 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a456:	4619      	mov	r1, r3
 801a458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a45a:	f004 f81b 	bl	801e494 <tcp_split_unsent_seg>
 801a45e:	4603      	mov	r3, r0
 801a460:	2b00      	cmp	r3, #0
 801a462:	d107      	bne.n	801a474 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801a464:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a466:	f004 fa9b 	bl	801e9a0 <tcp_output>
 801a46a:	4603      	mov	r3, r0
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d101      	bne.n	801a474 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801a470:	2300      	movs	r3, #0
 801a472:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801a474:	6a3b      	ldr	r3, [r7, #32]
 801a476:	2b00      	cmp	r3, #0
 801a478:	f000 80ac 	beq.w	801a5d4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801a47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a47e:	2200      	movs	r2, #0
 801a480:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a486:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a48a:	2b06      	cmp	r3, #6
 801a48c:	f200 80a2 	bhi.w	801a5d4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a492:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a496:	3301      	adds	r3, #1
 801a498:	b2da      	uxtb	r2, r3
 801a49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a49c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801a4a0:	e098      	b.n	801a5d4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	db0f      	blt.n	801a4cc <tcp_slowtmr+0x1f4>
 801a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a4b2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a4b6:	4293      	cmp	r3, r2
 801a4b8:	d008      	beq.n	801a4cc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	3301      	adds	r3, #1
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	b21a      	sxth	r2, r3
 801a4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ca:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801a4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801a4d8:	429a      	cmp	r2, r3
 801a4da:	db7b      	blt.n	801a5d4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a4dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4de:	f004 fd53 	bl	801ef88 <tcp_rexmit_rto_prepare>
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d007      	beq.n	801a4f8 <tcp_slowtmr+0x220>
 801a4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d171      	bne.n	801a5d4 <tcp_slowtmr+0x2fc>
 801a4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d06d      	beq.n	801a5d4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801a4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4fa:	7d1b      	ldrb	r3, [r3, #20]
 801a4fc:	2b02      	cmp	r3, #2
 801a4fe:	d03a      	beq.n	801a576 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a502:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a506:	2b0c      	cmp	r3, #12
 801a508:	bf28      	it	cs
 801a50a:	230c      	movcs	r3, #12
 801a50c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a510:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801a514:	10db      	asrs	r3, r3, #3
 801a516:	b21b      	sxth	r3, r3
 801a518:	461a      	mov	r2, r3
 801a51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a51c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801a520:	4413      	add	r3, r2
 801a522:	7efa      	ldrb	r2, [r7, #27]
 801a524:	4910      	ldr	r1, [pc, #64]	@ (801a568 <tcp_slowtmr+0x290>)
 801a526:	5c8a      	ldrb	r2, [r1, r2]
 801a528:	4093      	lsls	r3, r2
 801a52a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a52c:	697b      	ldr	r3, [r7, #20]
 801a52e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801a532:	4293      	cmp	r3, r2
 801a534:	dc1a      	bgt.n	801a56c <tcp_slowtmr+0x294>
 801a536:	697b      	ldr	r3, [r7, #20]
 801a538:	b21a      	sxth	r2, r3
 801a53a:	e019      	b.n	801a570 <tcp_slowtmr+0x298>
 801a53c:	20018bb0 	.word	0x20018bb0
 801a540:	20018bc6 	.word	0x20018bc6
 801a544:	20018bbc 	.word	0x20018bbc
 801a548:	08025ffc 	.word	0x08025ffc
 801a54c:	08026340 	.word	0x08026340
 801a550:	08026040 	.word	0x08026040
 801a554:	0802636c 	.word	0x0802636c
 801a558:	08026398 	.word	0x08026398
 801a55c:	080263c8 	.word	0x080263c8
 801a560:	080263fc 	.word	0x080263fc
 801a564:	0802802c 	.word	0x0802802c
 801a568:	0802801c 	.word	0x0802801c
 801a56c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a572:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801a576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a578:	2200      	movs	r2, #0
 801a57a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a57e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801a582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a584:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801a588:	4293      	cmp	r3, r2
 801a58a:	bf28      	it	cs
 801a58c:	4613      	movcs	r3, r2
 801a58e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a590:	8a7b      	ldrh	r3, [r7, #18]
 801a592:	085b      	lsrs	r3, r3, #1
 801a594:	b29a      	uxth	r2, r3
 801a596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a598:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a59e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a5a6:	005b      	lsls	r3, r3, #1
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	429a      	cmp	r2, r3
 801a5ac:	d206      	bcs.n	801a5bc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a5b2:	005b      	lsls	r3, r3, #1
 801a5b4:	b29a      	uxth	r2, r3
 801a5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5b8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801a5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5be:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801a5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801a5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801a5ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a5d0:	f004 fd4a 	bl	801f068 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801a5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5d6:	7d1b      	ldrb	r3, [r3, #20]
 801a5d8:	2b06      	cmp	r3, #6
 801a5da:	d111      	bne.n	801a600 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5de:	8b5b      	ldrh	r3, [r3, #26]
 801a5e0:	f003 0310 	and.w	r3, r3, #16
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d00b      	beq.n	801a600 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a5e8:	4b9c      	ldr	r3, [pc, #624]	@ (801a85c <tcp_slowtmr+0x584>)
 801a5ea:	681a      	ldr	r2, [r3, #0]
 801a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5ee:	6a1b      	ldr	r3, [r3, #32]
 801a5f0:	1ad3      	subs	r3, r2, r3
 801a5f2:	2b28      	cmp	r3, #40	@ 0x28
 801a5f4:	d904      	bls.n	801a600 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801a5f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5fa:	3301      	adds	r3, #1
 801a5fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a602:	7a5b      	ldrb	r3, [r3, #9]
 801a604:	f003 0308 	and.w	r3, r3, #8
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d04a      	beq.n	801a6a2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801a60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a60e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a610:	2b04      	cmp	r3, #4
 801a612:	d003      	beq.n	801a61c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801a614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a616:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a618:	2b07      	cmp	r3, #7
 801a61a:	d142      	bne.n	801a6a2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a61c:	4b8f      	ldr	r3, [pc, #572]	@ (801a85c <tcp_slowtmr+0x584>)
 801a61e:	681a      	ldr	r2, [r3, #0]
 801a620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a622:	6a1b      	ldr	r3, [r3, #32]
 801a624:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a628:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801a62c:	4b8c      	ldr	r3, [pc, #560]	@ (801a860 <tcp_slowtmr+0x588>)
 801a62e:	440b      	add	r3, r1
 801a630:	498c      	ldr	r1, [pc, #560]	@ (801a864 <tcp_slowtmr+0x58c>)
 801a632:	fba1 1303 	umull	r1, r3, r1, r3
 801a636:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a638:	429a      	cmp	r2, r3
 801a63a:	d90a      	bls.n	801a652 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801a63c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a640:	3301      	adds	r3, #1
 801a642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801a646:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a64a:	3301      	adds	r3, #1
 801a64c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801a650:	e027      	b.n	801a6a2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a652:	4b82      	ldr	r3, [pc, #520]	@ (801a85c <tcp_slowtmr+0x584>)
 801a654:	681a      	ldr	r2, [r3, #0]
 801a656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a658:	6a1b      	ldr	r3, [r3, #32]
 801a65a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a65e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801a662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a664:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801a668:	4618      	mov	r0, r3
 801a66a:	4b7f      	ldr	r3, [pc, #508]	@ (801a868 <tcp_slowtmr+0x590>)
 801a66c:	fb00 f303 	mul.w	r3, r0, r3
 801a670:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a672:	497c      	ldr	r1, [pc, #496]	@ (801a864 <tcp_slowtmr+0x58c>)
 801a674:	fba1 1303 	umull	r1, r3, r1, r3
 801a678:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a67a:	429a      	cmp	r2, r3
 801a67c:	d911      	bls.n	801a6a2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801a67e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a680:	f004 fff6 	bl	801f670 <tcp_keepalive>
 801a684:	4603      	mov	r3, r0
 801a686:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801a68a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d107      	bne.n	801a6a2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801a692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a694:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801a698:	3301      	adds	r3, #1
 801a69a:	b2da      	uxtb	r2, r3
 801a69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a69e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801a6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d011      	beq.n	801a6ce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a6aa:	4b6c      	ldr	r3, [pc, #432]	@ (801a85c <tcp_slowtmr+0x584>)
 801a6ac:	681a      	ldr	r2, [r3, #0]
 801a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6b0:	6a1b      	ldr	r3, [r3, #32]
 801a6b2:	1ad2      	subs	r2, r2, r3
 801a6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801a6ba:	4619      	mov	r1, r3
 801a6bc:	460b      	mov	r3, r1
 801a6be:	005b      	lsls	r3, r3, #1
 801a6c0:	440b      	add	r3, r1
 801a6c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a6c4:	429a      	cmp	r2, r3
 801a6c6:	d302      	bcc.n	801a6ce <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801a6c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a6ca:	f000 feb5 	bl	801b438 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6d0:	7d1b      	ldrb	r3, [r3, #20]
 801a6d2:	2b03      	cmp	r3, #3
 801a6d4:	d10b      	bne.n	801a6ee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a6d6:	4b61      	ldr	r3, [pc, #388]	@ (801a85c <tcp_slowtmr+0x584>)
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6dc:	6a1b      	ldr	r3, [r3, #32]
 801a6de:	1ad3      	subs	r3, r2, r3
 801a6e0:	2b28      	cmp	r3, #40	@ 0x28
 801a6e2:	d904      	bls.n	801a6ee <tcp_slowtmr+0x416>
        ++pcb_remove;
 801a6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6e8:	3301      	adds	r3, #1
 801a6ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801a6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6f0:	7d1b      	ldrb	r3, [r3, #20]
 801a6f2:	2b09      	cmp	r3, #9
 801a6f4:	d10b      	bne.n	801a70e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a6f6:	4b59      	ldr	r3, [pc, #356]	@ (801a85c <tcp_slowtmr+0x584>)
 801a6f8:	681a      	ldr	r2, [r3, #0]
 801a6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6fc:	6a1b      	ldr	r3, [r3, #32]
 801a6fe:	1ad3      	subs	r3, r2, r3
 801a700:	2bf0      	cmp	r3, #240	@ 0xf0
 801a702:	d904      	bls.n	801a70e <tcp_slowtmr+0x436>
        ++pcb_remove;
 801a704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a708:	3301      	adds	r3, #1
 801a70a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801a70e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a712:	2b00      	cmp	r3, #0
 801a714:	d060      	beq.n	801a7d8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801a716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a71c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801a71e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a720:	f000 fcd6 	bl	801b0d0 <tcp_pcb_purge>
      if (prev != NULL) {
 801a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a726:	2b00      	cmp	r3, #0
 801a728:	d010      	beq.n	801a74c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a72a:	4b50      	ldr	r3, [pc, #320]	@ (801a86c <tcp_slowtmr+0x594>)
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a730:	429a      	cmp	r2, r3
 801a732:	d106      	bne.n	801a742 <tcp_slowtmr+0x46a>
 801a734:	4b4e      	ldr	r3, [pc, #312]	@ (801a870 <tcp_slowtmr+0x598>)
 801a736:	f240 526d 	movw	r2, #1389	@ 0x56d
 801a73a:	494e      	ldr	r1, [pc, #312]	@ (801a874 <tcp_slowtmr+0x59c>)
 801a73c:	484e      	ldr	r0, [pc, #312]	@ (801a878 <tcp_slowtmr+0x5a0>)
 801a73e:	f008 ff93 	bl	8023668 <iprintf>
        prev->next = pcb->next;
 801a742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a744:	68da      	ldr	r2, [r3, #12]
 801a746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a748:	60da      	str	r2, [r3, #12]
 801a74a:	e00f      	b.n	801a76c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a74c:	4b47      	ldr	r3, [pc, #284]	@ (801a86c <tcp_slowtmr+0x594>)
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a752:	429a      	cmp	r2, r3
 801a754:	d006      	beq.n	801a764 <tcp_slowtmr+0x48c>
 801a756:	4b46      	ldr	r3, [pc, #280]	@ (801a870 <tcp_slowtmr+0x598>)
 801a758:	f240 5271 	movw	r2, #1393	@ 0x571
 801a75c:	4947      	ldr	r1, [pc, #284]	@ (801a87c <tcp_slowtmr+0x5a4>)
 801a75e:	4846      	ldr	r0, [pc, #280]	@ (801a878 <tcp_slowtmr+0x5a0>)
 801a760:	f008 ff82 	bl	8023668 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a766:	68db      	ldr	r3, [r3, #12]
 801a768:	4a40      	ldr	r2, [pc, #256]	@ (801a86c <tcp_slowtmr+0x594>)
 801a76a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801a76c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a770:	2b00      	cmp	r3, #0
 801a772:	d013      	beq.n	801a79c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a776:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801a778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a77a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801a77c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801a77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a780:	3304      	adds	r3, #4
 801a782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a784:	8ad2      	ldrh	r2, [r2, #22]
 801a786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a788:	8b09      	ldrh	r1, [r1, #24]
 801a78a:	9102      	str	r1, [sp, #8]
 801a78c:	9201      	str	r2, [sp, #4]
 801a78e:	9300      	str	r3, [sp, #0]
 801a790:	462b      	mov	r3, r5
 801a792:	4622      	mov	r2, r4
 801a794:	4601      	mov	r1, r0
 801a796:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a798:	f004 feb6 	bl	801f508 <tcp_rst>
      err_arg = pcb->callback_arg;
 801a79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a79e:	691b      	ldr	r3, [r3, #16]
 801a7a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7a4:	7d1b      	ldrb	r3, [r3, #20]
 801a7a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ae:	68db      	ldr	r3, [r3, #12]
 801a7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801a7b2:	6838      	ldr	r0, [r7, #0]
 801a7b4:	f7fe ff9e 	bl	80196f4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801a7b8:	4b31      	ldr	r3, [pc, #196]	@ (801a880 <tcp_slowtmr+0x5a8>)
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d004      	beq.n	801a7ce <tcp_slowtmr+0x4f6>
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	f06f 010c 	mvn.w	r1, #12
 801a7ca:	68b8      	ldr	r0, [r7, #8]
 801a7cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a7ce:	4b2c      	ldr	r3, [pc, #176]	@ (801a880 <tcp_slowtmr+0x5a8>)
 801a7d0:	781b      	ldrb	r3, [r3, #0]
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d037      	beq.n	801a846 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801a7d6:	e592      	b.n	801a2fe <tcp_slowtmr+0x26>
      prev = pcb;
 801a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7da:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801a7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7de:	68db      	ldr	r3, [r3, #12]
 801a7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801a7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7e4:	7f1b      	ldrb	r3, [r3, #28]
 801a7e6:	3301      	adds	r3, #1
 801a7e8:	b2da      	uxtb	r2, r3
 801a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7f0:	7f1a      	ldrb	r2, [r3, #28]
 801a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7f4:	7f5b      	ldrb	r3, [r3, #29]
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	d325      	bcc.n	801a846 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801a800:	4b1f      	ldr	r3, [pc, #124]	@ (801a880 <tcp_slowtmr+0x5a8>)
 801a802:	2200      	movs	r2, #0
 801a804:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d00b      	beq.n	801a828 <tcp_slowtmr+0x550>
 801a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a818:	6912      	ldr	r2, [r2, #16]
 801a81a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a81c:	4610      	mov	r0, r2
 801a81e:	4798      	blx	r3
 801a820:	4603      	mov	r3, r0
 801a822:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801a826:	e002      	b.n	801a82e <tcp_slowtmr+0x556>
 801a828:	2300      	movs	r3, #0
 801a82a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801a82e:	4b14      	ldr	r3, [pc, #80]	@ (801a880 <tcp_slowtmr+0x5a8>)
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	2b00      	cmp	r3, #0
 801a834:	f47f ad62 	bne.w	801a2fc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a838:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d102      	bne.n	801a846 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801a840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a842:	f004 f8ad 	bl	801e9a0 <tcp_output>
  while (pcb != NULL) {
 801a846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a848:	2b00      	cmp	r3, #0
 801a84a:	f47f ad5e 	bne.w	801a30a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a84e:	2300      	movs	r3, #0
 801a850:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801a852:	4b0c      	ldr	r3, [pc, #48]	@ (801a884 <tcp_slowtmr+0x5ac>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801a858:	e069      	b.n	801a92e <tcp_slowtmr+0x656>
 801a85a:	bf00      	nop
 801a85c:	20018bb0 	.word	0x20018bb0
 801a860:	000a4cb8 	.word	0x000a4cb8
 801a864:	10624dd3 	.word	0x10624dd3
 801a868:	000124f8 	.word	0x000124f8
 801a86c:	20018bbc 	.word	0x20018bbc
 801a870:	08025ffc 	.word	0x08025ffc
 801a874:	08026434 	.word	0x08026434
 801a878:	08026040 	.word	0x08026040
 801a87c:	08026460 	.word	0x08026460
 801a880:	20018bc4 	.word	0x20018bc4
 801a884:	20018bc0 	.word	0x20018bc0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a88a:	7d1b      	ldrb	r3, [r3, #20]
 801a88c:	2b0a      	cmp	r3, #10
 801a88e:	d006      	beq.n	801a89e <tcp_slowtmr+0x5c6>
 801a890:	4b2b      	ldr	r3, [pc, #172]	@ (801a940 <tcp_slowtmr+0x668>)
 801a892:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801a896:	492b      	ldr	r1, [pc, #172]	@ (801a944 <tcp_slowtmr+0x66c>)
 801a898:	482b      	ldr	r0, [pc, #172]	@ (801a948 <tcp_slowtmr+0x670>)
 801a89a:	f008 fee5 	bl	8023668 <iprintf>
    pcb_remove = 0;
 801a89e:	2300      	movs	r3, #0
 801a8a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a8a4:	4b29      	ldr	r3, [pc, #164]	@ (801a94c <tcp_slowtmr+0x674>)
 801a8a6:	681a      	ldr	r2, [r3, #0]
 801a8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8aa:	6a1b      	ldr	r3, [r3, #32]
 801a8ac:	1ad3      	subs	r3, r2, r3
 801a8ae:	2bf0      	cmp	r3, #240	@ 0xf0
 801a8b0:	d904      	bls.n	801a8bc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801a8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a8b6:	3301      	adds	r3, #1
 801a8b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d02f      	beq.n	801a924 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a8c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a8c6:	f000 fc03 	bl	801b0d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d010      	beq.n	801a8f2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a8d0:	4b1f      	ldr	r3, [pc, #124]	@ (801a950 <tcp_slowtmr+0x678>)
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	d106      	bne.n	801a8e8 <tcp_slowtmr+0x610>
 801a8da:	4b19      	ldr	r3, [pc, #100]	@ (801a940 <tcp_slowtmr+0x668>)
 801a8dc:	f240 52af 	movw	r2, #1455	@ 0x5af
 801a8e0:	491c      	ldr	r1, [pc, #112]	@ (801a954 <tcp_slowtmr+0x67c>)
 801a8e2:	4819      	ldr	r0, [pc, #100]	@ (801a948 <tcp_slowtmr+0x670>)
 801a8e4:	f008 fec0 	bl	8023668 <iprintf>
        prev->next = pcb->next;
 801a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8ea:	68da      	ldr	r2, [r3, #12]
 801a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8ee:	60da      	str	r2, [r3, #12]
 801a8f0:	e00f      	b.n	801a912 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a8f2:	4b17      	ldr	r3, [pc, #92]	@ (801a950 <tcp_slowtmr+0x678>)
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d006      	beq.n	801a90a <tcp_slowtmr+0x632>
 801a8fc:	4b10      	ldr	r3, [pc, #64]	@ (801a940 <tcp_slowtmr+0x668>)
 801a8fe:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801a902:	4915      	ldr	r1, [pc, #84]	@ (801a958 <tcp_slowtmr+0x680>)
 801a904:	4810      	ldr	r0, [pc, #64]	@ (801a948 <tcp_slowtmr+0x670>)
 801a906:	f008 feaf 	bl	8023668 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a90c:	68db      	ldr	r3, [r3, #12]
 801a90e:	4a10      	ldr	r2, [pc, #64]	@ (801a950 <tcp_slowtmr+0x678>)
 801a910:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a914:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a918:	68db      	ldr	r3, [r3, #12]
 801a91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801a91c:	69f8      	ldr	r0, [r7, #28]
 801a91e:	f7fe fee9 	bl	80196f4 <tcp_free>
 801a922:	e004      	b.n	801a92e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801a924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a926:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801a928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a92a:	68db      	ldr	r3, [r3, #12]
 801a92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a930:	2b00      	cmp	r3, #0
 801a932:	d1a9      	bne.n	801a888 <tcp_slowtmr+0x5b0>
    }
  }
}
 801a934:	bf00      	nop
 801a936:	bf00      	nop
 801a938:	3730      	adds	r7, #48	@ 0x30
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bdb0      	pop	{r4, r5, r7, pc}
 801a93e:	bf00      	nop
 801a940:	08025ffc 	.word	0x08025ffc
 801a944:	0802648c 	.word	0x0802648c
 801a948:	08026040 	.word	0x08026040
 801a94c:	20018bb0 	.word	0x20018bb0
 801a950:	20018bc0 	.word	0x20018bc0
 801a954:	080264bc 	.word	0x080264bc
 801a958:	080264e4 	.word	0x080264e4

0801a95c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b082      	sub	sp, #8
 801a960:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a962:	4b2d      	ldr	r3, [pc, #180]	@ (801aa18 <tcp_fasttmr+0xbc>)
 801a964:	781b      	ldrb	r3, [r3, #0]
 801a966:	3301      	adds	r3, #1
 801a968:	b2da      	uxtb	r2, r3
 801a96a:	4b2b      	ldr	r3, [pc, #172]	@ (801aa18 <tcp_fasttmr+0xbc>)
 801a96c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a96e:	4b2b      	ldr	r3, [pc, #172]	@ (801aa1c <tcp_fasttmr+0xc0>)
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a974:	e048      	b.n	801aa08 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	7f9a      	ldrb	r2, [r3, #30]
 801a97a:	4b27      	ldr	r3, [pc, #156]	@ (801aa18 <tcp_fasttmr+0xbc>)
 801a97c:	781b      	ldrb	r3, [r3, #0]
 801a97e:	429a      	cmp	r2, r3
 801a980:	d03f      	beq.n	801aa02 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a982:	4b25      	ldr	r3, [pc, #148]	@ (801aa18 <tcp_fasttmr+0xbc>)
 801a984:	781a      	ldrb	r2, [r3, #0]
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	8b5b      	ldrh	r3, [r3, #26]
 801a98e:	f003 0301 	and.w	r3, r3, #1
 801a992:	2b00      	cmp	r3, #0
 801a994:	d010      	beq.n	801a9b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	8b5b      	ldrh	r3, [r3, #26]
 801a99a:	f043 0302 	orr.w	r3, r3, #2
 801a99e:	b29a      	uxth	r2, r3
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a9a4:	6878      	ldr	r0, [r7, #4]
 801a9a6:	f003 fffb 	bl	801e9a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	8b5b      	ldrh	r3, [r3, #26]
 801a9ae:	f023 0303 	bic.w	r3, r3, #3
 801a9b2:	b29a      	uxth	r2, r3
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	8b5b      	ldrh	r3, [r3, #26]
 801a9bc:	f003 0308 	and.w	r3, r3, #8
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d009      	beq.n	801a9d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	8b5b      	ldrh	r3, [r3, #26]
 801a9c8:	f023 0308 	bic.w	r3, r3, #8
 801a9cc:	b29a      	uxth	r2, r3
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a9d2:	6878      	ldr	r0, [r7, #4]
 801a9d4:	f7ff f822 	bl	8019a1c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	68db      	ldr	r3, [r3, #12]
 801a9dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d00a      	beq.n	801a9fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a9e6:	4b0e      	ldr	r3, [pc, #56]	@ (801aa20 <tcp_fasttmr+0xc4>)
 801a9e8:	2200      	movs	r2, #0
 801a9ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a9ec:	6878      	ldr	r0, [r7, #4]
 801a9ee:	f000 f819 	bl	801aa24 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a9f2:	4b0b      	ldr	r3, [pc, #44]	@ (801aa20 <tcp_fasttmr+0xc4>)
 801a9f4:	781b      	ldrb	r3, [r3, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d000      	beq.n	801a9fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a9fa:	e7b8      	b.n	801a96e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a9fc:	683b      	ldr	r3, [r7, #0]
 801a9fe:	607b      	str	r3, [r7, #4]
 801aa00:	e002      	b.n	801aa08 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	68db      	ldr	r3, [r3, #12]
 801aa06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d1b3      	bne.n	801a976 <tcp_fasttmr+0x1a>
    }
  }
}
 801aa0e:	bf00      	nop
 801aa10:	bf00      	nop
 801aa12:	3708      	adds	r7, #8
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bd80      	pop	{r7, pc}
 801aa18:	20018bc6 	.word	0x20018bc6
 801aa1c:	20018bbc 	.word	0x20018bbc
 801aa20:	20018bc4 	.word	0x20018bc4

0801aa24 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801aa24:	b590      	push	{r4, r7, lr}
 801aa26:	b085      	sub	sp, #20
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d109      	bne.n	801aa46 <tcp_process_refused_data+0x22>
 801aa32:	4b38      	ldr	r3, [pc, #224]	@ (801ab14 <tcp_process_refused_data+0xf0>)
 801aa34:	f240 6209 	movw	r2, #1545	@ 0x609
 801aa38:	4937      	ldr	r1, [pc, #220]	@ (801ab18 <tcp_process_refused_data+0xf4>)
 801aa3a:	4838      	ldr	r0, [pc, #224]	@ (801ab1c <tcp_process_refused_data+0xf8>)
 801aa3c:	f008 fe14 	bl	8023668 <iprintf>
 801aa40:	f06f 030f 	mvn.w	r3, #15
 801aa44:	e061      	b.n	801ab0a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801aa4a:	7b5b      	ldrb	r3, [r3, #13]
 801aa4c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801aa52:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	2200      	movs	r2, #0
 801aa58:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d00b      	beq.n	801aa7c <tcp_process_refused_data+0x58>
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	6918      	ldr	r0, [r3, #16]
 801aa6e:	2300      	movs	r3, #0
 801aa70:	68ba      	ldr	r2, [r7, #8]
 801aa72:	6879      	ldr	r1, [r7, #4]
 801aa74:	47a0      	blx	r4
 801aa76:	4603      	mov	r3, r0
 801aa78:	73fb      	strb	r3, [r7, #15]
 801aa7a:	e007      	b.n	801aa8c <tcp_process_refused_data+0x68>
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	68ba      	ldr	r2, [r7, #8]
 801aa80:	6879      	ldr	r1, [r7, #4]
 801aa82:	2000      	movs	r0, #0
 801aa84:	f000 f8a6 	bl	801abd4 <tcp_recv_null>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801aa8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d12b      	bne.n	801aaec <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801aa94:	7bbb      	ldrb	r3, [r7, #14]
 801aa96:	f003 0320 	and.w	r3, r3, #32
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d034      	beq.n	801ab08 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801aaa2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801aaa6:	4293      	cmp	r3, r2
 801aaa8:	d005      	beq.n	801aab6 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801aaae:	3301      	adds	r3, #1
 801aab0:	b29a      	uxth	r2, r3
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d00b      	beq.n	801aad8 <tcp_process_refused_data+0xb4>
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	6918      	ldr	r0, [r3, #16]
 801aaca:	2300      	movs	r3, #0
 801aacc:	2200      	movs	r2, #0
 801aace:	6879      	ldr	r1, [r7, #4]
 801aad0:	47a0      	blx	r4
 801aad2:	4603      	mov	r3, r0
 801aad4:	73fb      	strb	r3, [r7, #15]
 801aad6:	e001      	b.n	801aadc <tcp_process_refused_data+0xb8>
 801aad8:	2300      	movs	r3, #0
 801aada:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801aadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aae0:	f113 0f0d 	cmn.w	r3, #13
 801aae4:	d110      	bne.n	801ab08 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801aae6:	f06f 030c 	mvn.w	r3, #12
 801aaea:	e00e      	b.n	801ab0a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 801aaec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aaf0:	f113 0f0d 	cmn.w	r3, #13
 801aaf4:	d102      	bne.n	801aafc <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801aaf6:	f06f 030c 	mvn.w	r3, #12
 801aafa:	e006      	b.n	801ab0a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	68ba      	ldr	r2, [r7, #8]
 801ab00:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801ab02:	f06f 0304 	mvn.w	r3, #4
 801ab06:	e000      	b.n	801ab0a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 801ab08:	2300      	movs	r3, #0
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	3714      	adds	r7, #20
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd90      	pop	{r4, r7, pc}
 801ab12:	bf00      	nop
 801ab14:	08025ffc 	.word	0x08025ffc
 801ab18:	0802650c 	.word	0x0802650c
 801ab1c:	08026040 	.word	0x08026040

0801ab20 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b084      	sub	sp, #16
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801ab28:	e007      	b.n	801ab3a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801ab30:	6878      	ldr	r0, [r7, #4]
 801ab32:	f000 f80a 	bl	801ab4a <tcp_seg_free>
    seg = next;
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d1f4      	bne.n	801ab2a <tcp_segs_free+0xa>
  }
}
 801ab40:	bf00      	nop
 801ab42:	bf00      	nop
 801ab44:	3710      	adds	r7, #16
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}

0801ab4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801ab4a:	b580      	push	{r7, lr}
 801ab4c:	b082      	sub	sp, #8
 801ab4e:	af00      	add	r7, sp, #0
 801ab50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d00c      	beq.n	801ab72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	685b      	ldr	r3, [r3, #4]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d004      	beq.n	801ab6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	685b      	ldr	r3, [r3, #4]
 801ab64:	4618      	mov	r0, r3
 801ab66:	f7fe fa2b 	bl	8018fc0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801ab6a:	6879      	ldr	r1, [r7, #4]
 801ab6c:	2003      	movs	r0, #3
 801ab6e:	f7fd fb51 	bl	8018214 <memp_free>
  }
}
 801ab72:	bf00      	nop
 801ab74:	3708      	adds	r7, #8
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}
	...

0801ab7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b084      	sub	sp, #16
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d106      	bne.n	801ab98 <tcp_seg_copy+0x1c>
 801ab8a:	4b0f      	ldr	r3, [pc, #60]	@ (801abc8 <tcp_seg_copy+0x4c>)
 801ab8c:	f240 6282 	movw	r2, #1666	@ 0x682
 801ab90:	490e      	ldr	r1, [pc, #56]	@ (801abcc <tcp_seg_copy+0x50>)
 801ab92:	480f      	ldr	r0, [pc, #60]	@ (801abd0 <tcp_seg_copy+0x54>)
 801ab94:	f008 fd68 	bl	8023668 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801ab98:	2003      	movs	r0, #3
 801ab9a:	f7fd fac5 	bl	8018128 <memp_malloc>
 801ab9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d101      	bne.n	801abaa <tcp_seg_copy+0x2e>
    return NULL;
 801aba6:	2300      	movs	r3, #0
 801aba8:	e00a      	b.n	801abc0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801abaa:	2210      	movs	r2, #16
 801abac:	6879      	ldr	r1, [r7, #4]
 801abae:	68f8      	ldr	r0, [r7, #12]
 801abb0:	f008 ff01 	bl	80239b6 <memcpy>
  pbuf_ref(cseg->p);
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	685b      	ldr	r3, [r3, #4]
 801abb8:	4618      	mov	r0, r3
 801abba:	f7fe faa7 	bl	801910c <pbuf_ref>
  return cseg;
 801abbe:	68fb      	ldr	r3, [r7, #12]
}
 801abc0:	4618      	mov	r0, r3
 801abc2:	3710      	adds	r7, #16
 801abc4:	46bd      	mov	sp, r7
 801abc6:	bd80      	pop	{r7, pc}
 801abc8:	08025ffc 	.word	0x08025ffc
 801abcc:	08026550 	.word	0x08026550
 801abd0:	08026040 	.word	0x08026040

0801abd4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b084      	sub	sp, #16
 801abd8:	af00      	add	r7, sp, #0
 801abda:	60f8      	str	r0, [r7, #12]
 801abdc:	60b9      	str	r1, [r7, #8]
 801abde:	607a      	str	r2, [r7, #4]
 801abe0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d109      	bne.n	801abfc <tcp_recv_null+0x28>
 801abe8:	4b12      	ldr	r3, [pc, #72]	@ (801ac34 <tcp_recv_null+0x60>)
 801abea:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801abee:	4912      	ldr	r1, [pc, #72]	@ (801ac38 <tcp_recv_null+0x64>)
 801abf0:	4812      	ldr	r0, [pc, #72]	@ (801ac3c <tcp_recv_null+0x68>)
 801abf2:	f008 fd39 	bl	8023668 <iprintf>
 801abf6:	f06f 030f 	mvn.w	r3, #15
 801abfa:	e016      	b.n	801ac2a <tcp_recv_null+0x56>

  if (p != NULL) {
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d009      	beq.n	801ac16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	891b      	ldrh	r3, [r3, #8]
 801ac06:	4619      	mov	r1, r3
 801ac08:	68b8      	ldr	r0, [r7, #8]
 801ac0a:	f7ff f9b5 	bl	8019f78 <tcp_recved>
    pbuf_free(p);
 801ac0e:	6878      	ldr	r0, [r7, #4]
 801ac10:	f7fe f9d6 	bl	8018fc0 <pbuf_free>
 801ac14:	e008      	b.n	801ac28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801ac16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d104      	bne.n	801ac28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801ac1e:	68b8      	ldr	r0, [r7, #8]
 801ac20:	f7fe ff66 	bl	8019af0 <tcp_close>
 801ac24:	4603      	mov	r3, r0
 801ac26:	e000      	b.n	801ac2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801ac28:	2300      	movs	r3, #0
}
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	3710      	adds	r7, #16
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	bd80      	pop	{r7, pc}
 801ac32:	bf00      	nop
 801ac34:	08025ffc 	.word	0x08025ffc
 801ac38:	0802656c 	.word	0x0802656c
 801ac3c:	08026040 	.word	0x08026040

0801ac40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b086      	sub	sp, #24
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	4603      	mov	r3, r0
 801ac48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801ac4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	db01      	blt.n	801ac56 <tcp_kill_prio+0x16>
 801ac52:	79fb      	ldrb	r3, [r7, #7]
 801ac54:	e000      	b.n	801ac58 <tcp_kill_prio+0x18>
 801ac56:	237f      	movs	r3, #127	@ 0x7f
 801ac58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801ac5a:	7afb      	ldrb	r3, [r7, #11]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d034      	beq.n	801acca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801ac60:	7afb      	ldrb	r3, [r7, #11]
 801ac62:	3b01      	subs	r3, #1
 801ac64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801ac66:	2300      	movs	r3, #0
 801ac68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac6e:	4b19      	ldr	r3, [pc, #100]	@ (801acd4 <tcp_kill_prio+0x94>)
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	617b      	str	r3, [r7, #20]
 801ac74:	e01f      	b.n	801acb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	7d5b      	ldrb	r3, [r3, #21]
 801ac7a:	7afa      	ldrb	r2, [r7, #11]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d80c      	bhi.n	801ac9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801ac80:	697b      	ldr	r3, [r7, #20]
 801ac82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801ac84:	7afa      	ldrb	r2, [r7, #11]
 801ac86:	429a      	cmp	r2, r3
 801ac88:	d112      	bne.n	801acb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801ac8a:	4b13      	ldr	r3, [pc, #76]	@ (801acd8 <tcp_kill_prio+0x98>)
 801ac8c:	681a      	ldr	r2, [r3, #0]
 801ac8e:	697b      	ldr	r3, [r7, #20]
 801ac90:	6a1b      	ldr	r3, [r3, #32]
 801ac92:	1ad3      	subs	r3, r2, r3
 801ac94:	68fa      	ldr	r2, [r7, #12]
 801ac96:	429a      	cmp	r2, r3
 801ac98:	d80a      	bhi.n	801acb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801ac9a:	4b0f      	ldr	r3, [pc, #60]	@ (801acd8 <tcp_kill_prio+0x98>)
 801ac9c:	681a      	ldr	r2, [r3, #0]
 801ac9e:	697b      	ldr	r3, [r7, #20]
 801aca0:	6a1b      	ldr	r3, [r3, #32]
 801aca2:	1ad3      	subs	r3, r2, r3
 801aca4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801aca6:	697b      	ldr	r3, [r7, #20]
 801aca8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801acaa:	697b      	ldr	r3, [r7, #20]
 801acac:	7d5b      	ldrb	r3, [r3, #21]
 801acae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	68db      	ldr	r3, [r3, #12]
 801acb4:	617b      	str	r3, [r7, #20]
 801acb6:	697b      	ldr	r3, [r7, #20]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d1dc      	bne.n	801ac76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801acbc:	693b      	ldr	r3, [r7, #16]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d004      	beq.n	801accc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801acc2:	6938      	ldr	r0, [r7, #16]
 801acc4:	f7ff f85a 	bl	8019d7c <tcp_abort>
 801acc8:	e000      	b.n	801accc <tcp_kill_prio+0x8c>
    return;
 801acca:	bf00      	nop
  }
}
 801accc:	3718      	adds	r7, #24
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}
 801acd2:	bf00      	nop
 801acd4:	20018bbc 	.word	0x20018bbc
 801acd8:	20018bb0 	.word	0x20018bb0

0801acdc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b086      	sub	sp, #24
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	4603      	mov	r3, r0
 801ace4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801ace6:	79fb      	ldrb	r3, [r7, #7]
 801ace8:	2b08      	cmp	r3, #8
 801acea:	d009      	beq.n	801ad00 <tcp_kill_state+0x24>
 801acec:	79fb      	ldrb	r3, [r7, #7]
 801acee:	2b09      	cmp	r3, #9
 801acf0:	d006      	beq.n	801ad00 <tcp_kill_state+0x24>
 801acf2:	4b1a      	ldr	r3, [pc, #104]	@ (801ad5c <tcp_kill_state+0x80>)
 801acf4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801acf8:	4919      	ldr	r1, [pc, #100]	@ (801ad60 <tcp_kill_state+0x84>)
 801acfa:	481a      	ldr	r0, [pc, #104]	@ (801ad64 <tcp_kill_state+0x88>)
 801acfc:	f008 fcb4 	bl	8023668 <iprintf>

  inactivity = 0;
 801ad00:	2300      	movs	r3, #0
 801ad02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ad04:	2300      	movs	r3, #0
 801ad06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad08:	4b17      	ldr	r3, [pc, #92]	@ (801ad68 <tcp_kill_state+0x8c>)
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	617b      	str	r3, [r7, #20]
 801ad0e:	e017      	b.n	801ad40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801ad10:	697b      	ldr	r3, [r7, #20]
 801ad12:	7d1b      	ldrb	r3, [r3, #20]
 801ad14:	79fa      	ldrb	r2, [r7, #7]
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d10f      	bne.n	801ad3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801ad1a:	4b14      	ldr	r3, [pc, #80]	@ (801ad6c <tcp_kill_state+0x90>)
 801ad1c:	681a      	ldr	r2, [r3, #0]
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	6a1b      	ldr	r3, [r3, #32]
 801ad22:	1ad3      	subs	r3, r2, r3
 801ad24:	68fa      	ldr	r2, [r7, #12]
 801ad26:	429a      	cmp	r2, r3
 801ad28:	d807      	bhi.n	801ad3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801ad2a:	4b10      	ldr	r3, [pc, #64]	@ (801ad6c <tcp_kill_state+0x90>)
 801ad2c:	681a      	ldr	r2, [r3, #0]
 801ad2e:	697b      	ldr	r3, [r7, #20]
 801ad30:	6a1b      	ldr	r3, [r3, #32]
 801ad32:	1ad3      	subs	r3, r2, r3
 801ad34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801ad36:	697b      	ldr	r3, [r7, #20]
 801ad38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad3a:	697b      	ldr	r3, [r7, #20]
 801ad3c:	68db      	ldr	r3, [r3, #12]
 801ad3e:	617b      	str	r3, [r7, #20]
 801ad40:	697b      	ldr	r3, [r7, #20]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d1e4      	bne.n	801ad10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801ad46:	693b      	ldr	r3, [r7, #16]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d003      	beq.n	801ad54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801ad4c:	2100      	movs	r1, #0
 801ad4e:	6938      	ldr	r0, [r7, #16]
 801ad50:	f7fe ff56 	bl	8019c00 <tcp_abandon>
  }
}
 801ad54:	bf00      	nop
 801ad56:	3718      	adds	r7, #24
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bd80      	pop	{r7, pc}
 801ad5c:	08025ffc 	.word	0x08025ffc
 801ad60:	08026588 	.word	0x08026588
 801ad64:	08026040 	.word	0x08026040
 801ad68:	20018bbc 	.word	0x20018bbc
 801ad6c:	20018bb0 	.word	0x20018bb0

0801ad70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b084      	sub	sp, #16
 801ad74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801ad76:	2300      	movs	r3, #0
 801ad78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad7e:	4b12      	ldr	r3, [pc, #72]	@ (801adc8 <tcp_kill_timewait+0x58>)
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	60fb      	str	r3, [r7, #12]
 801ad84:	e012      	b.n	801adac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801ad86:	4b11      	ldr	r3, [pc, #68]	@ (801adcc <tcp_kill_timewait+0x5c>)
 801ad88:	681a      	ldr	r2, [r3, #0]
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	6a1b      	ldr	r3, [r3, #32]
 801ad8e:	1ad3      	subs	r3, r2, r3
 801ad90:	687a      	ldr	r2, [r7, #4]
 801ad92:	429a      	cmp	r2, r3
 801ad94:	d807      	bhi.n	801ada6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801ad96:	4b0d      	ldr	r3, [pc, #52]	@ (801adcc <tcp_kill_timewait+0x5c>)
 801ad98:	681a      	ldr	r2, [r3, #0]
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	6a1b      	ldr	r3, [r3, #32]
 801ad9e:	1ad3      	subs	r3, r2, r3
 801ada0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	68db      	ldr	r3, [r3, #12]
 801adaa:	60fb      	str	r3, [r7, #12]
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d1e9      	bne.n	801ad86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801adb2:	68bb      	ldr	r3, [r7, #8]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d002      	beq.n	801adbe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801adb8:	68b8      	ldr	r0, [r7, #8]
 801adba:	f7fe ffdf 	bl	8019d7c <tcp_abort>
  }
}
 801adbe:	bf00      	nop
 801adc0:	3710      	adds	r7, #16
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}
 801adc6:	bf00      	nop
 801adc8:	20018bc0 	.word	0x20018bc0
 801adcc:	20018bb0 	.word	0x20018bb0

0801add0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b082      	sub	sp, #8
 801add4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801add6:	4b10      	ldr	r3, [pc, #64]	@ (801ae18 <tcp_handle_closepend+0x48>)
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801addc:	e014      	b.n	801ae08 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	68db      	ldr	r3, [r3, #12]
 801ade2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	8b5b      	ldrh	r3, [r3, #26]
 801ade8:	f003 0308 	and.w	r3, r3, #8
 801adec:	2b00      	cmp	r3, #0
 801adee:	d009      	beq.n	801ae04 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	8b5b      	ldrh	r3, [r3, #26]
 801adf4:	f023 0308 	bic.w	r3, r3, #8
 801adf8:	b29a      	uxth	r2, r3
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f7fe fe0c 	bl	8019a1c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801ae04:	683b      	ldr	r3, [r7, #0]
 801ae06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d1e7      	bne.n	801adde <tcp_handle_closepend+0xe>
  }
}
 801ae0e:	bf00      	nop
 801ae10:	bf00      	nop
 801ae12:	3708      	adds	r7, #8
 801ae14:	46bd      	mov	sp, r7
 801ae16:	bd80      	pop	{r7, pc}
 801ae18:	20018bbc 	.word	0x20018bbc

0801ae1c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b084      	sub	sp, #16
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	4603      	mov	r3, r0
 801ae24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae26:	2001      	movs	r0, #1
 801ae28:	f7fd f97e 	bl	8018128 <memp_malloc>
 801ae2c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d126      	bne.n	801ae82 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801ae34:	f7ff ffcc 	bl	801add0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801ae38:	f7ff ff9a 	bl	801ad70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae3c:	2001      	movs	r0, #1
 801ae3e:	f7fd f973 	bl	8018128 <memp_malloc>
 801ae42:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d11b      	bne.n	801ae82 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801ae4a:	2009      	movs	r0, #9
 801ae4c:	f7ff ff46 	bl	801acdc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae50:	2001      	movs	r0, #1
 801ae52:	f7fd f969 	bl	8018128 <memp_malloc>
 801ae56:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d111      	bne.n	801ae82 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801ae5e:	2008      	movs	r0, #8
 801ae60:	f7ff ff3c 	bl	801acdc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae64:	2001      	movs	r0, #1
 801ae66:	f7fd f95f 	bl	8018128 <memp_malloc>
 801ae6a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d107      	bne.n	801ae82 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801ae72:	79fb      	ldrb	r3, [r7, #7]
 801ae74:	4618      	mov	r0, r3
 801ae76:	f7ff fee3 	bl	801ac40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ae7a:	2001      	movs	r0, #1
 801ae7c:	f7fd f954 	bl	8018128 <memp_malloc>
 801ae80:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d03f      	beq.n	801af08 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801ae88:	229c      	movs	r2, #156	@ 0x9c
 801ae8a:	2100      	movs	r1, #0
 801ae8c:	68f8      	ldr	r0, [r7, #12]
 801ae8e:	f008 fc9e 	bl	80237ce <memset>
    pcb->prio = prio;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	79fa      	ldrb	r2, [r7, #7]
 801ae96:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801ae9e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801aea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	22ff      	movs	r2, #255	@ 0xff
 801aeb6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801aebe:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	2206      	movs	r2, #6
 801aec4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	2206      	movs	r2, #6
 801aecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801aed4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	2201      	movs	r2, #1
 801aeda:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801aede:	4b0d      	ldr	r3, [pc, #52]	@ (801af14 <tcp_alloc+0xf8>)
 801aee0:	681a      	ldr	r2, [r3, #0]
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801aee6:	4b0c      	ldr	r3, [pc, #48]	@ (801af18 <tcp_alloc+0xfc>)
 801aee8:	781a      	ldrb	r2, [r3, #0]
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801aef4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	4a08      	ldr	r2, [pc, #32]	@ (801af1c <tcp_alloc+0x100>)
 801aefc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	4a07      	ldr	r2, [pc, #28]	@ (801af20 <tcp_alloc+0x104>)
 801af04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801af08:	68fb      	ldr	r3, [r7, #12]
}
 801af0a:	4618      	mov	r0, r3
 801af0c:	3710      	adds	r7, #16
 801af0e:	46bd      	mov	sp, r7
 801af10:	bd80      	pop	{r7, pc}
 801af12:	bf00      	nop
 801af14:	20018bb0 	.word	0x20018bb0
 801af18:	20018bc6 	.word	0x20018bc6
 801af1c:	0801abd5 	.word	0x0801abd5
 801af20:	006ddd00 	.word	0x006ddd00

0801af24 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 801af24:	b580      	push	{r7, lr}
 801af26:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801af28:	2040      	movs	r0, #64	@ 0x40
 801af2a:	f7ff ff77 	bl	801ae1c <tcp_alloc>
 801af2e:	4603      	mov	r3, r0
}
 801af30:	4618      	mov	r0, r3
 801af32:	bd80      	pop	{r7, pc}

0801af34 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b084      	sub	sp, #16
 801af38:	af00      	add	r7, sp, #0
 801af3a:	4603      	mov	r3, r0
 801af3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801af3e:	2040      	movs	r0, #64	@ 0x40
 801af40:	f7ff ff6c 	bl	801ae1c <tcp_alloc>
 801af44:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801af46:	68fb      	ldr	r3, [r7, #12]
}
 801af48:	4618      	mov	r0, r3
 801af4a:	3710      	adds	r7, #16
 801af4c:	46bd      	mov	sp, r7
 801af4e:	bd80      	pop	{r7, pc}

0801af50 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801af50:	b480      	push	{r7}
 801af52:	b083      	sub	sp, #12
 801af54:	af00      	add	r7, sp, #0
 801af56:	6078      	str	r0, [r7, #4]
 801af58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d002      	beq.n	801af66 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	683a      	ldr	r2, [r7, #0]
 801af64:	611a      	str	r2, [r3, #16]
  }
}
 801af66:	bf00      	nop
 801af68:	370c      	adds	r7, #12
 801af6a:	46bd      	mov	sp, r7
 801af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af70:	4770      	bx	lr
	...

0801af74 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d00e      	beq.n	801afa2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	7d1b      	ldrb	r3, [r3, #20]
 801af88:	2b01      	cmp	r3, #1
 801af8a:	d106      	bne.n	801af9a <tcp_recv+0x26>
 801af8c:	4b07      	ldr	r3, [pc, #28]	@ (801afac <tcp_recv+0x38>)
 801af8e:	f240 72df 	movw	r2, #2015	@ 0x7df
 801af92:	4907      	ldr	r1, [pc, #28]	@ (801afb0 <tcp_recv+0x3c>)
 801af94:	4807      	ldr	r0, [pc, #28]	@ (801afb4 <tcp_recv+0x40>)
 801af96:	f008 fb67 	bl	8023668 <iprintf>
    pcb->recv = recv;
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	683a      	ldr	r2, [r7, #0]
 801af9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801afa2:	bf00      	nop
 801afa4:	3708      	adds	r7, #8
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bd80      	pop	{r7, pc}
 801afaa:	bf00      	nop
 801afac:	08025ffc 	.word	0x08025ffc
 801afb0:	08026598 	.word	0x08026598
 801afb4:	08026040 	.word	0x08026040

0801afb8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b082      	sub	sp, #8
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d00e      	beq.n	801afe6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	7d1b      	ldrb	r3, [r3, #20]
 801afcc:	2b01      	cmp	r3, #1
 801afce:	d106      	bne.n	801afde <tcp_sent+0x26>
 801afd0:	4b07      	ldr	r3, [pc, #28]	@ (801aff0 <tcp_sent+0x38>)
 801afd2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801afd6:	4907      	ldr	r1, [pc, #28]	@ (801aff4 <tcp_sent+0x3c>)
 801afd8:	4807      	ldr	r0, [pc, #28]	@ (801aff8 <tcp_sent+0x40>)
 801afda:	f008 fb45 	bl	8023668 <iprintf>
    pcb->sent = sent;
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	683a      	ldr	r2, [r7, #0]
 801afe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801afe6:	bf00      	nop
 801afe8:	3708      	adds	r7, #8
 801afea:	46bd      	mov	sp, r7
 801afec:	bd80      	pop	{r7, pc}
 801afee:	bf00      	nop
 801aff0:	08025ffc 	.word	0x08025ffc
 801aff4:	080265c0 	.word	0x080265c0
 801aff8:	08026040 	.word	0x08026040

0801affc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b082      	sub	sp, #8
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
 801b004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d00e      	beq.n	801b02a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	7d1b      	ldrb	r3, [r3, #20]
 801b010:	2b01      	cmp	r3, #1
 801b012:	d106      	bne.n	801b022 <tcp_err+0x26>
 801b014:	4b07      	ldr	r3, [pc, #28]	@ (801b034 <tcp_err+0x38>)
 801b016:	f640 020d 	movw	r2, #2061	@ 0x80d
 801b01a:	4907      	ldr	r1, [pc, #28]	@ (801b038 <tcp_err+0x3c>)
 801b01c:	4807      	ldr	r0, [pc, #28]	@ (801b03c <tcp_err+0x40>)
 801b01e:	f008 fb23 	bl	8023668 <iprintf>
    pcb->errf = err;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	683a      	ldr	r2, [r7, #0]
 801b026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801b02a:	bf00      	nop
 801b02c:	3708      	adds	r7, #8
 801b02e:	46bd      	mov	sp, r7
 801b030:	bd80      	pop	{r7, pc}
 801b032:	bf00      	nop
 801b034:	08025ffc 	.word	0x08025ffc
 801b038:	080265e8 	.word	0x080265e8
 801b03c:	08026040 	.word	0x08026040

0801b040 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801b040:	b480      	push	{r7}
 801b042:	b085      	sub	sp, #20
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
 801b048:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d008      	beq.n	801b062 <tcp_accept+0x22>
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	7d1b      	ldrb	r3, [r3, #20]
 801b054:	2b01      	cmp	r3, #1
 801b056:	d104      	bne.n	801b062 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	683a      	ldr	r2, [r7, #0]
 801b060:	619a      	str	r2, [r3, #24]
  }
}
 801b062:	bf00      	nop
 801b064:	3714      	adds	r7, #20
 801b066:	46bd      	mov	sp, r7
 801b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b06c:	4770      	bx	lr
	...

0801b070 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b084      	sub	sp, #16
 801b074:	af00      	add	r7, sp, #0
 801b076:	60f8      	str	r0, [r7, #12]
 801b078:	60b9      	str	r1, [r7, #8]
 801b07a:	4613      	mov	r3, r2
 801b07c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d107      	bne.n	801b094 <tcp_poll+0x24>
 801b084:	4b0e      	ldr	r3, [pc, #56]	@ (801b0c0 <tcp_poll+0x50>)
 801b086:	f640 023d 	movw	r2, #2109	@ 0x83d
 801b08a:	490e      	ldr	r1, [pc, #56]	@ (801b0c4 <tcp_poll+0x54>)
 801b08c:	480e      	ldr	r0, [pc, #56]	@ (801b0c8 <tcp_poll+0x58>)
 801b08e:	f008 faeb 	bl	8023668 <iprintf>
 801b092:	e011      	b.n	801b0b8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	7d1b      	ldrb	r3, [r3, #20]
 801b098:	2b01      	cmp	r3, #1
 801b09a:	d106      	bne.n	801b0aa <tcp_poll+0x3a>
 801b09c:	4b08      	ldr	r3, [pc, #32]	@ (801b0c0 <tcp_poll+0x50>)
 801b09e:	f640 023e 	movw	r2, #2110	@ 0x83e
 801b0a2:	490a      	ldr	r1, [pc, #40]	@ (801b0cc <tcp_poll+0x5c>)
 801b0a4:	4808      	ldr	r0, [pc, #32]	@ (801b0c8 <tcp_poll+0x58>)
 801b0a6:	f008 fadf 	bl	8023668 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	68ba      	ldr	r2, [r7, #8]
 801b0ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	79fa      	ldrb	r2, [r7, #7]
 801b0b6:	775a      	strb	r2, [r3, #29]
}
 801b0b8:	3710      	adds	r7, #16
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	bd80      	pop	{r7, pc}
 801b0be:	bf00      	nop
 801b0c0:	08025ffc 	.word	0x08025ffc
 801b0c4:	08026610 	.word	0x08026610
 801b0c8:	08026040 	.word	0x08026040
 801b0cc:	08026628 	.word	0x08026628

0801b0d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b082      	sub	sp, #8
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d107      	bne.n	801b0ee <tcp_pcb_purge+0x1e>
 801b0de:	4b21      	ldr	r3, [pc, #132]	@ (801b164 <tcp_pcb_purge+0x94>)
 801b0e0:	f640 0251 	movw	r2, #2129	@ 0x851
 801b0e4:	4920      	ldr	r1, [pc, #128]	@ (801b168 <tcp_pcb_purge+0x98>)
 801b0e6:	4821      	ldr	r0, [pc, #132]	@ (801b16c <tcp_pcb_purge+0x9c>)
 801b0e8:	f008 fabe 	bl	8023668 <iprintf>
 801b0ec:	e037      	b.n	801b15e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	7d1b      	ldrb	r3, [r3, #20]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d033      	beq.n	801b15e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801b0fa:	2b0a      	cmp	r3, #10
 801b0fc:	d02f      	beq.n	801b15e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801b102:	2b01      	cmp	r3, #1
 801b104:	d02b      	beq.n	801b15e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d007      	beq.n	801b11e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b112:	4618      	mov	r0, r3
 801b114:	f7fd ff54 	bl	8018fc0 <pbuf_free>
      pcb->refused_data = NULL;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2200      	movs	r2, #0
 801b11c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b122:	2b00      	cmp	r3, #0
 801b124:	d002      	beq.n	801b12c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801b126:	6878      	ldr	r0, [r7, #4]
 801b128:	f000 f986 	bl	801b438 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b132:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b138:	4618      	mov	r0, r3
 801b13a:	f7ff fcf1 	bl	801ab20 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b142:	4618      	mov	r0, r3
 801b144:	f7ff fcec 	bl	801ab20 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	2200      	movs	r2, #0
 801b14c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	2200      	movs	r2, #0
 801b15a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801b15e:	3708      	adds	r7, #8
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}
 801b164:	08025ffc 	.word	0x08025ffc
 801b168:	08026648 	.word	0x08026648
 801b16c:	08026040 	.word	0x08026040

0801b170 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b084      	sub	sp, #16
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
 801b178:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b17a:	683b      	ldr	r3, [r7, #0]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d106      	bne.n	801b18e <tcp_pcb_remove+0x1e>
 801b180:	4b3e      	ldr	r3, [pc, #248]	@ (801b27c <tcp_pcb_remove+0x10c>)
 801b182:	f640 0283 	movw	r2, #2179	@ 0x883
 801b186:	493e      	ldr	r1, [pc, #248]	@ (801b280 <tcp_pcb_remove+0x110>)
 801b188:	483e      	ldr	r0, [pc, #248]	@ (801b284 <tcp_pcb_remove+0x114>)
 801b18a:	f008 fa6d 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d106      	bne.n	801b1a2 <tcp_pcb_remove+0x32>
 801b194:	4b39      	ldr	r3, [pc, #228]	@ (801b27c <tcp_pcb_remove+0x10c>)
 801b196:	f640 0284 	movw	r2, #2180	@ 0x884
 801b19a:	493b      	ldr	r1, [pc, #236]	@ (801b288 <tcp_pcb_remove+0x118>)
 801b19c:	4839      	ldr	r0, [pc, #228]	@ (801b284 <tcp_pcb_remove+0x114>)
 801b19e:	f008 fa63 	bl	8023668 <iprintf>

  TCP_RMV(pcblist, pcb);
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	681b      	ldr	r3, [r3, #0]
 801b1a6:	683a      	ldr	r2, [r7, #0]
 801b1a8:	429a      	cmp	r2, r3
 801b1aa:	d105      	bne.n	801b1b8 <tcp_pcb_remove+0x48>
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	68da      	ldr	r2, [r3, #12]
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	601a      	str	r2, [r3, #0]
 801b1b6:	e013      	b.n	801b1e0 <tcp_pcb_remove+0x70>
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	60fb      	str	r3, [r7, #12]
 801b1be:	e00c      	b.n	801b1da <tcp_pcb_remove+0x6a>
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	683a      	ldr	r2, [r7, #0]
 801b1c6:	429a      	cmp	r2, r3
 801b1c8:	d104      	bne.n	801b1d4 <tcp_pcb_remove+0x64>
 801b1ca:	683b      	ldr	r3, [r7, #0]
 801b1cc:	68da      	ldr	r2, [r3, #12]
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	60da      	str	r2, [r3, #12]
 801b1d2:	e005      	b.n	801b1e0 <tcp_pcb_remove+0x70>
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	68db      	ldr	r3, [r3, #12]
 801b1d8:	60fb      	str	r3, [r7, #12]
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d1ef      	bne.n	801b1c0 <tcp_pcb_remove+0x50>
 801b1e0:	683b      	ldr	r3, [r7, #0]
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801b1e6:	6838      	ldr	r0, [r7, #0]
 801b1e8:	f7ff ff72 	bl	801b0d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801b1ec:	683b      	ldr	r3, [r7, #0]
 801b1ee:	7d1b      	ldrb	r3, [r3, #20]
 801b1f0:	2b0a      	cmp	r3, #10
 801b1f2:	d013      	beq.n	801b21c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801b1f4:	683b      	ldr	r3, [r7, #0]
 801b1f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801b1f8:	2b01      	cmp	r3, #1
 801b1fa:	d00f      	beq.n	801b21c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801b1fc:	683b      	ldr	r3, [r7, #0]
 801b1fe:	8b5b      	ldrh	r3, [r3, #26]
 801b200:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801b204:	2b00      	cmp	r3, #0
 801b206:	d009      	beq.n	801b21c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801b208:	683b      	ldr	r3, [r7, #0]
 801b20a:	8b5b      	ldrh	r3, [r3, #26]
 801b20c:	f043 0302 	orr.w	r3, r3, #2
 801b210:	b29a      	uxth	r2, r3
 801b212:	683b      	ldr	r3, [r7, #0]
 801b214:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b216:	6838      	ldr	r0, [r7, #0]
 801b218:	f003 fbc2 	bl	801e9a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801b21c:	683b      	ldr	r3, [r7, #0]
 801b21e:	7d1b      	ldrb	r3, [r3, #20]
 801b220:	2b01      	cmp	r3, #1
 801b222:	d020      	beq.n	801b266 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b224:	683b      	ldr	r3, [r7, #0]
 801b226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d006      	beq.n	801b23a <tcp_pcb_remove+0xca>
 801b22c:	4b13      	ldr	r3, [pc, #76]	@ (801b27c <tcp_pcb_remove+0x10c>)
 801b22e:	f640 0293 	movw	r2, #2195	@ 0x893
 801b232:	4916      	ldr	r1, [pc, #88]	@ (801b28c <tcp_pcb_remove+0x11c>)
 801b234:	4813      	ldr	r0, [pc, #76]	@ (801b284 <tcp_pcb_remove+0x114>)
 801b236:	f008 fa17 	bl	8023668 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d006      	beq.n	801b250 <tcp_pcb_remove+0xe0>
 801b242:	4b0e      	ldr	r3, [pc, #56]	@ (801b27c <tcp_pcb_remove+0x10c>)
 801b244:	f640 0294 	movw	r2, #2196	@ 0x894
 801b248:	4911      	ldr	r1, [pc, #68]	@ (801b290 <tcp_pcb_remove+0x120>)
 801b24a:	480e      	ldr	r0, [pc, #56]	@ (801b284 <tcp_pcb_remove+0x114>)
 801b24c:	f008 fa0c 	bl	8023668 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b250:	683b      	ldr	r3, [r7, #0]
 801b252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b254:	2b00      	cmp	r3, #0
 801b256:	d006      	beq.n	801b266 <tcp_pcb_remove+0xf6>
 801b258:	4b08      	ldr	r3, [pc, #32]	@ (801b27c <tcp_pcb_remove+0x10c>)
 801b25a:	f640 0296 	movw	r2, #2198	@ 0x896
 801b25e:	490d      	ldr	r1, [pc, #52]	@ (801b294 <tcp_pcb_remove+0x124>)
 801b260:	4808      	ldr	r0, [pc, #32]	@ (801b284 <tcp_pcb_remove+0x114>)
 801b262:	f008 fa01 	bl	8023668 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801b266:	683b      	ldr	r3, [r7, #0]
 801b268:	2200      	movs	r2, #0
 801b26a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	2200      	movs	r2, #0
 801b270:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801b272:	bf00      	nop
 801b274:	3710      	adds	r7, #16
 801b276:	46bd      	mov	sp, r7
 801b278:	bd80      	pop	{r7, pc}
 801b27a:	bf00      	nop
 801b27c:	08025ffc 	.word	0x08025ffc
 801b280:	08026664 	.word	0x08026664
 801b284:	08026040 	.word	0x08026040
 801b288:	08026680 	.word	0x08026680
 801b28c:	080266a0 	.word	0x080266a0
 801b290:	080266b8 	.word	0x080266b8
 801b294:	080266d4 	.word	0x080266d4

0801b298 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b082      	sub	sp, #8
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d106      	bne.n	801b2b4 <tcp_next_iss+0x1c>
 801b2a6:	4b0a      	ldr	r3, [pc, #40]	@ (801b2d0 <tcp_next_iss+0x38>)
 801b2a8:	f640 02af 	movw	r2, #2223	@ 0x8af
 801b2ac:	4909      	ldr	r1, [pc, #36]	@ (801b2d4 <tcp_next_iss+0x3c>)
 801b2ae:	480a      	ldr	r0, [pc, #40]	@ (801b2d8 <tcp_next_iss+0x40>)
 801b2b0:	f008 f9da 	bl	8023668 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b2b4:	4b09      	ldr	r3, [pc, #36]	@ (801b2dc <tcp_next_iss+0x44>)
 801b2b6:	681a      	ldr	r2, [r3, #0]
 801b2b8:	4b09      	ldr	r3, [pc, #36]	@ (801b2e0 <tcp_next_iss+0x48>)
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	4413      	add	r3, r2
 801b2be:	4a07      	ldr	r2, [pc, #28]	@ (801b2dc <tcp_next_iss+0x44>)
 801b2c0:	6013      	str	r3, [r2, #0]
  return iss;
 801b2c2:	4b06      	ldr	r3, [pc, #24]	@ (801b2dc <tcp_next_iss+0x44>)
 801b2c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	3708      	adds	r7, #8
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}
 801b2ce:	bf00      	nop
 801b2d0:	08025ffc 	.word	0x08025ffc
 801b2d4:	080266ec 	.word	0x080266ec
 801b2d8:	08026040 	.word	0x08026040
 801b2dc:	20000048 	.word	0x20000048
 801b2e0:	20018bb0 	.word	0x20018bb0

0801b2e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b086      	sub	sp, #24
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	4603      	mov	r3, r0
 801b2ec:	60b9      	str	r1, [r7, #8]
 801b2ee:	607a      	str	r2, [r7, #4]
 801b2f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d106      	bne.n	801b306 <tcp_eff_send_mss_netif+0x22>
 801b2f8:	4b14      	ldr	r3, [pc, #80]	@ (801b34c <tcp_eff_send_mss_netif+0x68>)
 801b2fa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801b2fe:	4914      	ldr	r1, [pc, #80]	@ (801b350 <tcp_eff_send_mss_netif+0x6c>)
 801b300:	4814      	ldr	r0, [pc, #80]	@ (801b354 <tcp_eff_send_mss_netif+0x70>)
 801b302:	f008 f9b1 	bl	8023668 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d101      	bne.n	801b310 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801b30c:	89fb      	ldrh	r3, [r7, #14]
 801b30e:	e019      	b.n	801b344 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801b310:	68bb      	ldr	r3, [r7, #8]
 801b312:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b314:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b316:	8afb      	ldrh	r3, [r7, #22]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d012      	beq.n	801b342 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801b31c:	2328      	movs	r3, #40	@ 0x28
 801b31e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b320:	8afa      	ldrh	r2, [r7, #22]
 801b322:	8abb      	ldrh	r3, [r7, #20]
 801b324:	429a      	cmp	r2, r3
 801b326:	d904      	bls.n	801b332 <tcp_eff_send_mss_netif+0x4e>
 801b328:	8afa      	ldrh	r2, [r7, #22]
 801b32a:	8abb      	ldrh	r3, [r7, #20]
 801b32c:	1ad3      	subs	r3, r2, r3
 801b32e:	b29b      	uxth	r3, r3
 801b330:	e000      	b.n	801b334 <tcp_eff_send_mss_netif+0x50>
 801b332:	2300      	movs	r3, #0
 801b334:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b336:	8a7a      	ldrh	r2, [r7, #18]
 801b338:	89fb      	ldrh	r3, [r7, #14]
 801b33a:	4293      	cmp	r3, r2
 801b33c:	bf28      	it	cs
 801b33e:	4613      	movcs	r3, r2
 801b340:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801b342:	89fb      	ldrh	r3, [r7, #14]
}
 801b344:	4618      	mov	r0, r3
 801b346:	3718      	adds	r7, #24
 801b348:	46bd      	mov	sp, r7
 801b34a:	bd80      	pop	{r7, pc}
 801b34c:	08025ffc 	.word	0x08025ffc
 801b350:	08026708 	.word	0x08026708
 801b354:	08026040 	.word	0x08026040

0801b358 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801b358:	b580      	push	{r7, lr}
 801b35a:	b084      	sub	sp, #16
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	6078      	str	r0, [r7, #4]
 801b360:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801b362:	683b      	ldr	r3, [r7, #0]
 801b364:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d119      	bne.n	801b3a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801b36c:	4b10      	ldr	r3, [pc, #64]	@ (801b3b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801b36e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801b372:	4910      	ldr	r1, [pc, #64]	@ (801b3b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801b374:	4810      	ldr	r0, [pc, #64]	@ (801b3b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801b376:	f008 f977 	bl	8023668 <iprintf>

  while (pcb != NULL) {
 801b37a:	e011      	b.n	801b3a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	681a      	ldr	r2, [r3, #0]
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	429a      	cmp	r2, r3
 801b386:	d108      	bne.n	801b39a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	68db      	ldr	r3, [r3, #12]
 801b38c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801b38e:	68f8      	ldr	r0, [r7, #12]
 801b390:	f7fe fcf4 	bl	8019d7c <tcp_abort>
      pcb = next;
 801b394:	68bb      	ldr	r3, [r7, #8]
 801b396:	60fb      	str	r3, [r7, #12]
 801b398:	e002      	b.n	801b3a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	68db      	ldr	r3, [r3, #12]
 801b39e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d1ea      	bne.n	801b37c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801b3a6:	bf00      	nop
 801b3a8:	bf00      	nop
 801b3aa:	3710      	adds	r7, #16
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	bd80      	pop	{r7, pc}
 801b3b0:	08025ffc 	.word	0x08025ffc
 801b3b4:	08026730 	.word	0x08026730
 801b3b8:	08026040 	.word	0x08026040

0801b3bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b084      	sub	sp, #16
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
 801b3c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d02a      	beq.n	801b422 <tcp_netif_ip_addr_changed+0x66>
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d026      	beq.n	801b422 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801b3d4:	4b15      	ldr	r3, [pc, #84]	@ (801b42c <tcp_netif_ip_addr_changed+0x70>)
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	4619      	mov	r1, r3
 801b3da:	6878      	ldr	r0, [r7, #4]
 801b3dc:	f7ff ffbc 	bl	801b358 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801b3e0:	4b13      	ldr	r3, [pc, #76]	@ (801b430 <tcp_netif_ip_addr_changed+0x74>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	4619      	mov	r1, r3
 801b3e6:	6878      	ldr	r0, [r7, #4]
 801b3e8:	f7ff ffb6 	bl	801b358 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801b3ec:	683b      	ldr	r3, [r7, #0]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d017      	beq.n	801b422 <tcp_netif_ip_addr_changed+0x66>
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d013      	beq.n	801b422 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b3fa:	4b0e      	ldr	r3, [pc, #56]	@ (801b434 <tcp_netif_ip_addr_changed+0x78>)
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	60fb      	str	r3, [r7, #12]
 801b400:	e00c      	b.n	801b41c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	681a      	ldr	r2, [r3, #0]
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	429a      	cmp	r2, r3
 801b40c:	d103      	bne.n	801b416 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801b40e:	683b      	ldr	r3, [r7, #0]
 801b410:	681a      	ldr	r2, [r3, #0]
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	68db      	ldr	r3, [r3, #12]
 801b41a:	60fb      	str	r3, [r7, #12]
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d1ef      	bne.n	801b402 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801b422:	bf00      	nop
 801b424:	3710      	adds	r7, #16
 801b426:	46bd      	mov	sp, r7
 801b428:	bd80      	pop	{r7, pc}
 801b42a:	bf00      	nop
 801b42c:	20018bbc 	.word	0x20018bbc
 801b430:	20018bb4 	.word	0x20018bb4
 801b434:	20018bb8 	.word	0x20018bb8

0801b438 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b444:	2b00      	cmp	r3, #0
 801b446:	d007      	beq.n	801b458 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b44c:	4618      	mov	r0, r3
 801b44e:	f7ff fb67 	bl	801ab20 <tcp_segs_free>
    pcb->ooseq = NULL;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	2200      	movs	r2, #0
 801b456:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b458:	bf00      	nop
 801b45a:	3708      	adds	r7, #8
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}

0801b460 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801b460:	b590      	push	{r4, r7, lr}
 801b462:	b08d      	sub	sp, #52	@ 0x34
 801b464:	af04      	add	r7, sp, #16
 801b466:	6078      	str	r0, [r7, #4]
 801b468:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d105      	bne.n	801b47c <tcp_input+0x1c>
 801b470:	4b9b      	ldr	r3, [pc, #620]	@ (801b6e0 <tcp_input+0x280>)
 801b472:	2283      	movs	r2, #131	@ 0x83
 801b474:	499b      	ldr	r1, [pc, #620]	@ (801b6e4 <tcp_input+0x284>)
 801b476:	489c      	ldr	r0, [pc, #624]	@ (801b6e8 <tcp_input+0x288>)
 801b478:	f008 f8f6 	bl	8023668 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	685b      	ldr	r3, [r3, #4]
 801b480:	4a9a      	ldr	r2, [pc, #616]	@ (801b6ec <tcp_input+0x28c>)
 801b482:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	895b      	ldrh	r3, [r3, #10]
 801b488:	2b13      	cmp	r3, #19
 801b48a:	f240 83d1 	bls.w	801bc30 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b48e:	4b98      	ldr	r3, [pc, #608]	@ (801b6f0 <tcp_input+0x290>)
 801b490:	695b      	ldr	r3, [r3, #20]
 801b492:	4a97      	ldr	r2, [pc, #604]	@ (801b6f0 <tcp_input+0x290>)
 801b494:	6812      	ldr	r2, [r2, #0]
 801b496:	4611      	mov	r1, r2
 801b498:	4618      	mov	r0, r3
 801b49a:	f006 f9e1 	bl	8021860 <ip4_addr_isbroadcast_u32>
 801b49e:	4603      	mov	r3, r0
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	f040 83c7 	bne.w	801bc34 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b4a6:	4b92      	ldr	r3, [pc, #584]	@ (801b6f0 <tcp_input+0x290>)
 801b4a8:	695b      	ldr	r3, [r3, #20]
 801b4aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b4ae:	2be0      	cmp	r3, #224	@ 0xe0
 801b4b0:	f000 83c0 	beq.w	801bc34 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b4b4:	4b8d      	ldr	r3, [pc, #564]	@ (801b6ec <tcp_input+0x28c>)
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	899b      	ldrh	r3, [r3, #12]
 801b4ba:	b29b      	uxth	r3, r3
 801b4bc:	4618      	mov	r0, r3
 801b4be:	f7fc f94b 	bl	8017758 <lwip_htons>
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	0b1b      	lsrs	r3, r3, #12
 801b4c6:	b29b      	uxth	r3, r3
 801b4c8:	b2db      	uxtb	r3, r3
 801b4ca:	009b      	lsls	r3, r3, #2
 801b4cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b4ce:	7cbb      	ldrb	r3, [r7, #18]
 801b4d0:	2b13      	cmp	r3, #19
 801b4d2:	f240 83b1 	bls.w	801bc38 <tcp_input+0x7d8>
 801b4d6:	7cbb      	ldrb	r3, [r7, #18]
 801b4d8:	b29a      	uxth	r2, r3
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	891b      	ldrh	r3, [r3, #8]
 801b4de:	429a      	cmp	r2, r3
 801b4e0:	f200 83aa 	bhi.w	801bc38 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b4e4:	7cbb      	ldrb	r3, [r7, #18]
 801b4e6:	b29b      	uxth	r3, r3
 801b4e8:	3b14      	subs	r3, #20
 801b4ea:	b29a      	uxth	r2, r3
 801b4ec:	4b81      	ldr	r3, [pc, #516]	@ (801b6f4 <tcp_input+0x294>)
 801b4ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801b4f0:	4b81      	ldr	r3, [pc, #516]	@ (801b6f8 <tcp_input+0x298>)
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	895a      	ldrh	r2, [r3, #10]
 801b4fa:	7cbb      	ldrb	r3, [r7, #18]
 801b4fc:	b29b      	uxth	r3, r3
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d309      	bcc.n	801b516 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801b502:	4b7c      	ldr	r3, [pc, #496]	@ (801b6f4 <tcp_input+0x294>)
 801b504:	881a      	ldrh	r2, [r3, #0]
 801b506:	4b7d      	ldr	r3, [pc, #500]	@ (801b6fc <tcp_input+0x29c>)
 801b508:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b50a:	7cbb      	ldrb	r3, [r7, #18]
 801b50c:	4619      	mov	r1, r3
 801b50e:	6878      	ldr	r0, [r7, #4]
 801b510:	f7fd fc9e 	bl	8018e50 <pbuf_remove_header>
 801b514:	e04e      	b.n	801b5b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d105      	bne.n	801b52a <tcp_input+0xca>
 801b51e:	4b70      	ldr	r3, [pc, #448]	@ (801b6e0 <tcp_input+0x280>)
 801b520:	22c2      	movs	r2, #194	@ 0xc2
 801b522:	4977      	ldr	r1, [pc, #476]	@ (801b700 <tcp_input+0x2a0>)
 801b524:	4870      	ldr	r0, [pc, #448]	@ (801b6e8 <tcp_input+0x288>)
 801b526:	f008 f89f 	bl	8023668 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801b52a:	2114      	movs	r1, #20
 801b52c:	6878      	ldr	r0, [r7, #4]
 801b52e:	f7fd fc8f 	bl	8018e50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	895a      	ldrh	r2, [r3, #10]
 801b536:	4b71      	ldr	r3, [pc, #452]	@ (801b6fc <tcp_input+0x29c>)
 801b538:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b53a:	4b6e      	ldr	r3, [pc, #440]	@ (801b6f4 <tcp_input+0x294>)
 801b53c:	881a      	ldrh	r2, [r3, #0]
 801b53e:	4b6f      	ldr	r3, [pc, #444]	@ (801b6fc <tcp_input+0x29c>)
 801b540:	881b      	ldrh	r3, [r3, #0]
 801b542:	1ad3      	subs	r3, r2, r3
 801b544:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801b546:	4b6d      	ldr	r3, [pc, #436]	@ (801b6fc <tcp_input+0x29c>)
 801b548:	881b      	ldrh	r3, [r3, #0]
 801b54a:	4619      	mov	r1, r3
 801b54c:	6878      	ldr	r0, [r7, #4]
 801b54e:	f7fd fc7f 	bl	8018e50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	895b      	ldrh	r3, [r3, #10]
 801b558:	8a3a      	ldrh	r2, [r7, #16]
 801b55a:	429a      	cmp	r2, r3
 801b55c:	f200 836e 	bhi.w	801bc3c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	685b      	ldr	r3, [r3, #4]
 801b566:	4a64      	ldr	r2, [pc, #400]	@ (801b6f8 <tcp_input+0x298>)
 801b568:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	8a3a      	ldrh	r2, [r7, #16]
 801b570:	4611      	mov	r1, r2
 801b572:	4618      	mov	r0, r3
 801b574:	f7fd fc6c 	bl	8018e50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	891a      	ldrh	r2, [r3, #8]
 801b57c:	8a3b      	ldrh	r3, [r7, #16]
 801b57e:	1ad3      	subs	r3, r2, r3
 801b580:	b29a      	uxth	r2, r3
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	895b      	ldrh	r3, [r3, #10]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d005      	beq.n	801b59a <tcp_input+0x13a>
 801b58e:	4b54      	ldr	r3, [pc, #336]	@ (801b6e0 <tcp_input+0x280>)
 801b590:	22df      	movs	r2, #223	@ 0xdf
 801b592:	495c      	ldr	r1, [pc, #368]	@ (801b704 <tcp_input+0x2a4>)
 801b594:	4854      	ldr	r0, [pc, #336]	@ (801b6e8 <tcp_input+0x288>)
 801b596:	f008 f867 	bl	8023668 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	891a      	ldrh	r2, [r3, #8]
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	891b      	ldrh	r3, [r3, #8]
 801b5a4:	429a      	cmp	r2, r3
 801b5a6:	d005      	beq.n	801b5b4 <tcp_input+0x154>
 801b5a8:	4b4d      	ldr	r3, [pc, #308]	@ (801b6e0 <tcp_input+0x280>)
 801b5aa:	22e0      	movs	r2, #224	@ 0xe0
 801b5ac:	4956      	ldr	r1, [pc, #344]	@ (801b708 <tcp_input+0x2a8>)
 801b5ae:	484e      	ldr	r0, [pc, #312]	@ (801b6e8 <tcp_input+0x288>)
 801b5b0:	f008 f85a 	bl	8023668 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b5b4:	4b4d      	ldr	r3, [pc, #308]	@ (801b6ec <tcp_input+0x28c>)
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	881b      	ldrh	r3, [r3, #0]
 801b5ba:	b29b      	uxth	r3, r3
 801b5bc:	4a4b      	ldr	r2, [pc, #300]	@ (801b6ec <tcp_input+0x28c>)
 801b5be:	6814      	ldr	r4, [r2, #0]
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	f7fc f8c9 	bl	8017758 <lwip_htons>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b5ca:	4b48      	ldr	r3, [pc, #288]	@ (801b6ec <tcp_input+0x28c>)
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	885b      	ldrh	r3, [r3, #2]
 801b5d0:	b29b      	uxth	r3, r3
 801b5d2:	4a46      	ldr	r2, [pc, #280]	@ (801b6ec <tcp_input+0x28c>)
 801b5d4:	6814      	ldr	r4, [r2, #0]
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	f7fc f8be 	bl	8017758 <lwip_htons>
 801b5dc:	4603      	mov	r3, r0
 801b5de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b5e0:	4b42      	ldr	r3, [pc, #264]	@ (801b6ec <tcp_input+0x28c>)
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	685b      	ldr	r3, [r3, #4]
 801b5e6:	4a41      	ldr	r2, [pc, #260]	@ (801b6ec <tcp_input+0x28c>)
 801b5e8:	6814      	ldr	r4, [r2, #0]
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7fc f8c9 	bl	8017782 <lwip_htonl>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	6063      	str	r3, [r4, #4]
 801b5f4:	6863      	ldr	r3, [r4, #4]
 801b5f6:	4a45      	ldr	r2, [pc, #276]	@ (801b70c <tcp_input+0x2ac>)
 801b5f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b5fa:	4b3c      	ldr	r3, [pc, #240]	@ (801b6ec <tcp_input+0x28c>)
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	689b      	ldr	r3, [r3, #8]
 801b600:	4a3a      	ldr	r2, [pc, #232]	@ (801b6ec <tcp_input+0x28c>)
 801b602:	6814      	ldr	r4, [r2, #0]
 801b604:	4618      	mov	r0, r3
 801b606:	f7fc f8bc 	bl	8017782 <lwip_htonl>
 801b60a:	4603      	mov	r3, r0
 801b60c:	60a3      	str	r3, [r4, #8]
 801b60e:	68a3      	ldr	r3, [r4, #8]
 801b610:	4a3f      	ldr	r2, [pc, #252]	@ (801b710 <tcp_input+0x2b0>)
 801b612:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b614:	4b35      	ldr	r3, [pc, #212]	@ (801b6ec <tcp_input+0x28c>)
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	89db      	ldrh	r3, [r3, #14]
 801b61a:	b29b      	uxth	r3, r3
 801b61c:	4a33      	ldr	r2, [pc, #204]	@ (801b6ec <tcp_input+0x28c>)
 801b61e:	6814      	ldr	r4, [r2, #0]
 801b620:	4618      	mov	r0, r3
 801b622:	f7fc f899 	bl	8017758 <lwip_htons>
 801b626:	4603      	mov	r3, r0
 801b628:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b62a:	4b30      	ldr	r3, [pc, #192]	@ (801b6ec <tcp_input+0x28c>)
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	899b      	ldrh	r3, [r3, #12]
 801b630:	b29b      	uxth	r3, r3
 801b632:	4618      	mov	r0, r3
 801b634:	f7fc f890 	bl	8017758 <lwip_htons>
 801b638:	4603      	mov	r3, r0
 801b63a:	b2db      	uxtb	r3, r3
 801b63c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b640:	b2da      	uxtb	r2, r3
 801b642:	4b34      	ldr	r3, [pc, #208]	@ (801b714 <tcp_input+0x2b4>)
 801b644:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	891a      	ldrh	r2, [r3, #8]
 801b64a:	4b33      	ldr	r3, [pc, #204]	@ (801b718 <tcp_input+0x2b8>)
 801b64c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801b64e:	4b31      	ldr	r3, [pc, #196]	@ (801b714 <tcp_input+0x2b4>)
 801b650:	781b      	ldrb	r3, [r3, #0]
 801b652:	f003 0303 	and.w	r3, r3, #3
 801b656:	2b00      	cmp	r3, #0
 801b658:	d00c      	beq.n	801b674 <tcp_input+0x214>
    tcplen++;
 801b65a:	4b2f      	ldr	r3, [pc, #188]	@ (801b718 <tcp_input+0x2b8>)
 801b65c:	881b      	ldrh	r3, [r3, #0]
 801b65e:	3301      	adds	r3, #1
 801b660:	b29a      	uxth	r2, r3
 801b662:	4b2d      	ldr	r3, [pc, #180]	@ (801b718 <tcp_input+0x2b8>)
 801b664:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	891a      	ldrh	r2, [r3, #8]
 801b66a:	4b2b      	ldr	r3, [pc, #172]	@ (801b718 <tcp_input+0x2b8>)
 801b66c:	881b      	ldrh	r3, [r3, #0]
 801b66e:	429a      	cmp	r2, r3
 801b670:	f200 82e6 	bhi.w	801bc40 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801b674:	2300      	movs	r3, #0
 801b676:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b678:	4b28      	ldr	r3, [pc, #160]	@ (801b71c <tcp_input+0x2bc>)
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	61fb      	str	r3, [r7, #28]
 801b67e:	e09d      	b.n	801b7bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801b680:	69fb      	ldr	r3, [r7, #28]
 801b682:	7d1b      	ldrb	r3, [r3, #20]
 801b684:	2b00      	cmp	r3, #0
 801b686:	d105      	bne.n	801b694 <tcp_input+0x234>
 801b688:	4b15      	ldr	r3, [pc, #84]	@ (801b6e0 <tcp_input+0x280>)
 801b68a:	22fb      	movs	r2, #251	@ 0xfb
 801b68c:	4924      	ldr	r1, [pc, #144]	@ (801b720 <tcp_input+0x2c0>)
 801b68e:	4816      	ldr	r0, [pc, #88]	@ (801b6e8 <tcp_input+0x288>)
 801b690:	f007 ffea 	bl	8023668 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b694:	69fb      	ldr	r3, [r7, #28]
 801b696:	7d1b      	ldrb	r3, [r3, #20]
 801b698:	2b0a      	cmp	r3, #10
 801b69a:	d105      	bne.n	801b6a8 <tcp_input+0x248>
 801b69c:	4b10      	ldr	r3, [pc, #64]	@ (801b6e0 <tcp_input+0x280>)
 801b69e:	22fc      	movs	r2, #252	@ 0xfc
 801b6a0:	4920      	ldr	r1, [pc, #128]	@ (801b724 <tcp_input+0x2c4>)
 801b6a2:	4811      	ldr	r0, [pc, #68]	@ (801b6e8 <tcp_input+0x288>)
 801b6a4:	f007 ffe0 	bl	8023668 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b6a8:	69fb      	ldr	r3, [r7, #28]
 801b6aa:	7d1b      	ldrb	r3, [r3, #20]
 801b6ac:	2b01      	cmp	r3, #1
 801b6ae:	d105      	bne.n	801b6bc <tcp_input+0x25c>
 801b6b0:	4b0b      	ldr	r3, [pc, #44]	@ (801b6e0 <tcp_input+0x280>)
 801b6b2:	22fd      	movs	r2, #253	@ 0xfd
 801b6b4:	491c      	ldr	r1, [pc, #112]	@ (801b728 <tcp_input+0x2c8>)
 801b6b6:	480c      	ldr	r0, [pc, #48]	@ (801b6e8 <tcp_input+0x288>)
 801b6b8:	f007 ffd6 	bl	8023668 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b6bc:	69fb      	ldr	r3, [r7, #28]
 801b6be:	7a1b      	ldrb	r3, [r3, #8]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d033      	beq.n	801b72c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b6c4:	69fb      	ldr	r3, [r7, #28]
 801b6c6:	7a1a      	ldrb	r2, [r3, #8]
 801b6c8:	4b09      	ldr	r3, [pc, #36]	@ (801b6f0 <tcp_input+0x290>)
 801b6ca:	685b      	ldr	r3, [r3, #4]
 801b6cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b6d0:	3301      	adds	r3, #1
 801b6d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b6d4:	429a      	cmp	r2, r3
 801b6d6:	d029      	beq.n	801b72c <tcp_input+0x2cc>
      prev = pcb;
 801b6d8:	69fb      	ldr	r3, [r7, #28]
 801b6da:	61bb      	str	r3, [r7, #24]
      continue;
 801b6dc:	e06b      	b.n	801b7b6 <tcp_input+0x356>
 801b6de:	bf00      	nop
 801b6e0:	08026764 	.word	0x08026764
 801b6e4:	08026798 	.word	0x08026798
 801b6e8:	080267b0 	.word	0x080267b0
 801b6ec:	20018bd8 	.word	0x20018bd8
 801b6f0:	2000dbb4 	.word	0x2000dbb4
 801b6f4:	20018bdc 	.word	0x20018bdc
 801b6f8:	20018be0 	.word	0x20018be0
 801b6fc:	20018bde 	.word	0x20018bde
 801b700:	080267d8 	.word	0x080267d8
 801b704:	080267e8 	.word	0x080267e8
 801b708:	080267f4 	.word	0x080267f4
 801b70c:	20018be8 	.word	0x20018be8
 801b710:	20018bec 	.word	0x20018bec
 801b714:	20018bf4 	.word	0x20018bf4
 801b718:	20018bf2 	.word	0x20018bf2
 801b71c:	20018bbc 	.word	0x20018bbc
 801b720:	08026814 	.word	0x08026814
 801b724:	0802683c 	.word	0x0802683c
 801b728:	08026868 	.word	0x08026868
    }

    if (pcb->remote_port == tcphdr->src &&
 801b72c:	69fb      	ldr	r3, [r7, #28]
 801b72e:	8b1a      	ldrh	r2, [r3, #24]
 801b730:	4b72      	ldr	r3, [pc, #456]	@ (801b8fc <tcp_input+0x49c>)
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	881b      	ldrh	r3, [r3, #0]
 801b736:	b29b      	uxth	r3, r3
 801b738:	429a      	cmp	r2, r3
 801b73a:	d13a      	bne.n	801b7b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b73c:	69fb      	ldr	r3, [r7, #28]
 801b73e:	8ada      	ldrh	r2, [r3, #22]
 801b740:	4b6e      	ldr	r3, [pc, #440]	@ (801b8fc <tcp_input+0x49c>)
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	885b      	ldrh	r3, [r3, #2]
 801b746:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b748:	429a      	cmp	r2, r3
 801b74a:	d132      	bne.n	801b7b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b74c:	69fb      	ldr	r3, [r7, #28]
 801b74e:	685a      	ldr	r2, [r3, #4]
 801b750:	4b6b      	ldr	r3, [pc, #428]	@ (801b900 <tcp_input+0x4a0>)
 801b752:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b754:	429a      	cmp	r2, r3
 801b756:	d12c      	bne.n	801b7b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b758:	69fb      	ldr	r3, [r7, #28]
 801b75a:	681a      	ldr	r2, [r3, #0]
 801b75c:	4b68      	ldr	r3, [pc, #416]	@ (801b900 <tcp_input+0x4a0>)
 801b75e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b760:	429a      	cmp	r2, r3
 801b762:	d126      	bne.n	801b7b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b764:	69fb      	ldr	r3, [r7, #28]
 801b766:	68db      	ldr	r3, [r3, #12]
 801b768:	69fa      	ldr	r2, [r7, #28]
 801b76a:	429a      	cmp	r2, r3
 801b76c:	d106      	bne.n	801b77c <tcp_input+0x31c>
 801b76e:	4b65      	ldr	r3, [pc, #404]	@ (801b904 <tcp_input+0x4a4>)
 801b770:	f240 120d 	movw	r2, #269	@ 0x10d
 801b774:	4964      	ldr	r1, [pc, #400]	@ (801b908 <tcp_input+0x4a8>)
 801b776:	4865      	ldr	r0, [pc, #404]	@ (801b90c <tcp_input+0x4ac>)
 801b778:	f007 ff76 	bl	8023668 <iprintf>
      if (prev != NULL) {
 801b77c:	69bb      	ldr	r3, [r7, #24]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d00a      	beq.n	801b798 <tcp_input+0x338>
        prev->next = pcb->next;
 801b782:	69fb      	ldr	r3, [r7, #28]
 801b784:	68da      	ldr	r2, [r3, #12]
 801b786:	69bb      	ldr	r3, [r7, #24]
 801b788:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b78a:	4b61      	ldr	r3, [pc, #388]	@ (801b910 <tcp_input+0x4b0>)
 801b78c:	681a      	ldr	r2, [r3, #0]
 801b78e:	69fb      	ldr	r3, [r7, #28]
 801b790:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b792:	4a5f      	ldr	r2, [pc, #380]	@ (801b910 <tcp_input+0x4b0>)
 801b794:	69fb      	ldr	r3, [r7, #28]
 801b796:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b798:	69fb      	ldr	r3, [r7, #28]
 801b79a:	68db      	ldr	r3, [r3, #12]
 801b79c:	69fa      	ldr	r2, [r7, #28]
 801b79e:	429a      	cmp	r2, r3
 801b7a0:	d111      	bne.n	801b7c6 <tcp_input+0x366>
 801b7a2:	4b58      	ldr	r3, [pc, #352]	@ (801b904 <tcp_input+0x4a4>)
 801b7a4:	f240 1215 	movw	r2, #277	@ 0x115
 801b7a8:	495a      	ldr	r1, [pc, #360]	@ (801b914 <tcp_input+0x4b4>)
 801b7aa:	4858      	ldr	r0, [pc, #352]	@ (801b90c <tcp_input+0x4ac>)
 801b7ac:	f007 ff5c 	bl	8023668 <iprintf>
      break;
 801b7b0:	e009      	b.n	801b7c6 <tcp_input+0x366>
    }
    prev = pcb;
 801b7b2:	69fb      	ldr	r3, [r7, #28]
 801b7b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7b6:	69fb      	ldr	r3, [r7, #28]
 801b7b8:	68db      	ldr	r3, [r3, #12]
 801b7ba:	61fb      	str	r3, [r7, #28]
 801b7bc:	69fb      	ldr	r3, [r7, #28]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	f47f af5e 	bne.w	801b680 <tcp_input+0x220>
 801b7c4:	e000      	b.n	801b7c8 <tcp_input+0x368>
      break;
 801b7c6:	bf00      	nop
  }

  if (pcb == NULL) {
 801b7c8:	69fb      	ldr	r3, [r7, #28]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	f040 80aa 	bne.w	801b924 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7d0:	4b51      	ldr	r3, [pc, #324]	@ (801b918 <tcp_input+0x4b8>)
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	61fb      	str	r3, [r7, #28]
 801b7d6:	e03f      	b.n	801b858 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b7d8:	69fb      	ldr	r3, [r7, #28]
 801b7da:	7d1b      	ldrb	r3, [r3, #20]
 801b7dc:	2b0a      	cmp	r3, #10
 801b7de:	d006      	beq.n	801b7ee <tcp_input+0x38e>
 801b7e0:	4b48      	ldr	r3, [pc, #288]	@ (801b904 <tcp_input+0x4a4>)
 801b7e2:	f240 121f 	movw	r2, #287	@ 0x11f
 801b7e6:	494d      	ldr	r1, [pc, #308]	@ (801b91c <tcp_input+0x4bc>)
 801b7e8:	4848      	ldr	r0, [pc, #288]	@ (801b90c <tcp_input+0x4ac>)
 801b7ea:	f007 ff3d 	bl	8023668 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b7ee:	69fb      	ldr	r3, [r7, #28]
 801b7f0:	7a1b      	ldrb	r3, [r3, #8]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d009      	beq.n	801b80a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b7f6:	69fb      	ldr	r3, [r7, #28]
 801b7f8:	7a1a      	ldrb	r2, [r3, #8]
 801b7fa:	4b41      	ldr	r3, [pc, #260]	@ (801b900 <tcp_input+0x4a0>)
 801b7fc:	685b      	ldr	r3, [r3, #4]
 801b7fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b802:	3301      	adds	r3, #1
 801b804:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b806:	429a      	cmp	r2, r3
 801b808:	d122      	bne.n	801b850 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b80a:	69fb      	ldr	r3, [r7, #28]
 801b80c:	8b1a      	ldrh	r2, [r3, #24]
 801b80e:	4b3b      	ldr	r3, [pc, #236]	@ (801b8fc <tcp_input+0x49c>)
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	881b      	ldrh	r3, [r3, #0]
 801b814:	b29b      	uxth	r3, r3
 801b816:	429a      	cmp	r2, r3
 801b818:	d11b      	bne.n	801b852 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b81a:	69fb      	ldr	r3, [r7, #28]
 801b81c:	8ada      	ldrh	r2, [r3, #22]
 801b81e:	4b37      	ldr	r3, [pc, #220]	@ (801b8fc <tcp_input+0x49c>)
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	885b      	ldrh	r3, [r3, #2]
 801b824:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b826:	429a      	cmp	r2, r3
 801b828:	d113      	bne.n	801b852 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b82a:	69fb      	ldr	r3, [r7, #28]
 801b82c:	685a      	ldr	r2, [r3, #4]
 801b82e:	4b34      	ldr	r3, [pc, #208]	@ (801b900 <tcp_input+0x4a0>)
 801b830:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b832:	429a      	cmp	r2, r3
 801b834:	d10d      	bne.n	801b852 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b836:	69fb      	ldr	r3, [r7, #28]
 801b838:	681a      	ldr	r2, [r3, #0]
 801b83a:	4b31      	ldr	r3, [pc, #196]	@ (801b900 <tcp_input+0x4a0>)
 801b83c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b83e:	429a      	cmp	r2, r3
 801b840:	d107      	bne.n	801b852 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b842:	69f8      	ldr	r0, [r7, #28]
 801b844:	f000 fb56 	bl	801bef4 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b848:	6878      	ldr	r0, [r7, #4]
 801b84a:	f7fd fbb9 	bl	8018fc0 <pbuf_free>
        return;
 801b84e:	e1fd      	b.n	801bc4c <tcp_input+0x7ec>
        continue;
 801b850:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b852:	69fb      	ldr	r3, [r7, #28]
 801b854:	68db      	ldr	r3, [r3, #12]
 801b856:	61fb      	str	r3, [r7, #28]
 801b858:	69fb      	ldr	r3, [r7, #28]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d1bc      	bne.n	801b7d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b85e:	2300      	movs	r3, #0
 801b860:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b862:	4b2f      	ldr	r3, [pc, #188]	@ (801b920 <tcp_input+0x4c0>)
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	617b      	str	r3, [r7, #20]
 801b868:	e02a      	b.n	801b8c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b86a:	697b      	ldr	r3, [r7, #20]
 801b86c:	7a1b      	ldrb	r3, [r3, #8]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d00c      	beq.n	801b88c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b872:	697b      	ldr	r3, [r7, #20]
 801b874:	7a1a      	ldrb	r2, [r3, #8]
 801b876:	4b22      	ldr	r3, [pc, #136]	@ (801b900 <tcp_input+0x4a0>)
 801b878:	685b      	ldr	r3, [r3, #4]
 801b87a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b87e:	3301      	adds	r3, #1
 801b880:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b882:	429a      	cmp	r2, r3
 801b884:	d002      	beq.n	801b88c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b886:	697b      	ldr	r3, [r7, #20]
 801b888:	61bb      	str	r3, [r7, #24]
        continue;
 801b88a:	e016      	b.n	801b8ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	8ada      	ldrh	r2, [r3, #22]
 801b890:	4b1a      	ldr	r3, [pc, #104]	@ (801b8fc <tcp_input+0x49c>)
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	885b      	ldrh	r3, [r3, #2]
 801b896:	b29b      	uxth	r3, r3
 801b898:	429a      	cmp	r2, r3
 801b89a:	d10c      	bne.n	801b8b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b89c:	697b      	ldr	r3, [r7, #20]
 801b89e:	681a      	ldr	r2, [r3, #0]
 801b8a0:	4b17      	ldr	r3, [pc, #92]	@ (801b900 <tcp_input+0x4a0>)
 801b8a2:	695b      	ldr	r3, [r3, #20]
 801b8a4:	429a      	cmp	r2, r3
 801b8a6:	d00f      	beq.n	801b8c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b8a8:	697b      	ldr	r3, [r7, #20]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d00d      	beq.n	801b8ca <tcp_input+0x46a>
 801b8ae:	697b      	ldr	r3, [r7, #20]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d009      	beq.n	801b8ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b8b6:	697b      	ldr	r3, [r7, #20]
 801b8b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b8ba:	697b      	ldr	r3, [r7, #20]
 801b8bc:	68db      	ldr	r3, [r3, #12]
 801b8be:	617b      	str	r3, [r7, #20]
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d1d1      	bne.n	801b86a <tcp_input+0x40a>
 801b8c6:	e000      	b.n	801b8ca <tcp_input+0x46a>
            break;
 801b8c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b8ca:	697b      	ldr	r3, [r7, #20]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d029      	beq.n	801b924 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b8d0:	69bb      	ldr	r3, [r7, #24]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d00a      	beq.n	801b8ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b8d6:	697b      	ldr	r3, [r7, #20]
 801b8d8:	68da      	ldr	r2, [r3, #12]
 801b8da:	69bb      	ldr	r3, [r7, #24]
 801b8dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b8de:	4b10      	ldr	r3, [pc, #64]	@ (801b920 <tcp_input+0x4c0>)
 801b8e0:	681a      	ldr	r2, [r3, #0]
 801b8e2:	697b      	ldr	r3, [r7, #20]
 801b8e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b8e6:	4a0e      	ldr	r2, [pc, #56]	@ (801b920 <tcp_input+0x4c0>)
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b8ec:	6978      	ldr	r0, [r7, #20]
 801b8ee:	f000 fa03 	bl	801bcf8 <tcp_listen_input>
      }
      pbuf_free(p);
 801b8f2:	6878      	ldr	r0, [r7, #4]
 801b8f4:	f7fd fb64 	bl	8018fc0 <pbuf_free>
      return;
 801b8f8:	e1a8      	b.n	801bc4c <tcp_input+0x7ec>
 801b8fa:	bf00      	nop
 801b8fc:	20018bd8 	.word	0x20018bd8
 801b900:	2000dbb4 	.word	0x2000dbb4
 801b904:	08026764 	.word	0x08026764
 801b908:	08026890 	.word	0x08026890
 801b90c:	080267b0 	.word	0x080267b0
 801b910:	20018bbc 	.word	0x20018bbc
 801b914:	080268bc 	.word	0x080268bc
 801b918:	20018bc0 	.word	0x20018bc0
 801b91c:	080268e8 	.word	0x080268e8
 801b920:	20018bb8 	.word	0x20018bb8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b924:	69fb      	ldr	r3, [r7, #28]
 801b926:	2b00      	cmp	r3, #0
 801b928:	f000 8158 	beq.w	801bbdc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b92c:	4b95      	ldr	r3, [pc, #596]	@ (801bb84 <tcp_input+0x724>)
 801b92e:	2200      	movs	r2, #0
 801b930:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	891a      	ldrh	r2, [r3, #8]
 801b936:	4b93      	ldr	r3, [pc, #588]	@ (801bb84 <tcp_input+0x724>)
 801b938:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b93a:	4a92      	ldr	r2, [pc, #584]	@ (801bb84 <tcp_input+0x724>)
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b940:	4b91      	ldr	r3, [pc, #580]	@ (801bb88 <tcp_input+0x728>)
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	4a8f      	ldr	r2, [pc, #572]	@ (801bb84 <tcp_input+0x724>)
 801b946:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b948:	4b90      	ldr	r3, [pc, #576]	@ (801bb8c <tcp_input+0x72c>)
 801b94a:	2200      	movs	r2, #0
 801b94c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b94e:	4b90      	ldr	r3, [pc, #576]	@ (801bb90 <tcp_input+0x730>)
 801b950:	2200      	movs	r2, #0
 801b952:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b954:	4b8f      	ldr	r3, [pc, #572]	@ (801bb94 <tcp_input+0x734>)
 801b956:	2200      	movs	r2, #0
 801b958:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b95a:	4b8f      	ldr	r3, [pc, #572]	@ (801bb98 <tcp_input+0x738>)
 801b95c:	781b      	ldrb	r3, [r3, #0]
 801b95e:	f003 0308 	and.w	r3, r3, #8
 801b962:	2b00      	cmp	r3, #0
 801b964:	d006      	beq.n	801b974 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	7b5b      	ldrb	r3, [r3, #13]
 801b96a:	f043 0301 	orr.w	r3, r3, #1
 801b96e:	b2da      	uxtb	r2, r3
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b974:	69fb      	ldr	r3, [r7, #28]
 801b976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d017      	beq.n	801b9ac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b97c:	69f8      	ldr	r0, [r7, #28]
 801b97e:	f7ff f851 	bl	801aa24 <tcp_process_refused_data>
 801b982:	4603      	mov	r3, r0
 801b984:	f113 0f0d 	cmn.w	r3, #13
 801b988:	d007      	beq.n	801b99a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b98a:	69fb      	ldr	r3, [r7, #28]
 801b98c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d00c      	beq.n	801b9ac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b992:	4b82      	ldr	r3, [pc, #520]	@ (801bb9c <tcp_input+0x73c>)
 801b994:	881b      	ldrh	r3, [r3, #0]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d008      	beq.n	801b9ac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b99a:	69fb      	ldr	r3, [r7, #28]
 801b99c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	f040 80e4 	bne.w	801bb6c <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b9a4:	69f8      	ldr	r0, [r7, #28]
 801b9a6:	f003 fe01 	bl	801f5ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b9aa:	e0df      	b.n	801bb6c <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 801b9ac:	4a7c      	ldr	r2, [pc, #496]	@ (801bba0 <tcp_input+0x740>)
 801b9ae:	69fb      	ldr	r3, [r7, #28]
 801b9b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b9b2:	69f8      	ldr	r0, [r7, #28]
 801b9b4:	f000 fb18 	bl	801bfe8 <tcp_process>
 801b9b8:	4603      	mov	r3, r0
 801b9ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b9bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b9c0:	f113 0f0d 	cmn.w	r3, #13
 801b9c4:	f000 80d4 	beq.w	801bb70 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 801b9c8:	4b71      	ldr	r3, [pc, #452]	@ (801bb90 <tcp_input+0x730>)
 801b9ca:	781b      	ldrb	r3, [r3, #0]
 801b9cc:	f003 0308 	and.w	r3, r3, #8
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d015      	beq.n	801ba00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b9d4:	69fb      	ldr	r3, [r7, #28]
 801b9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d008      	beq.n	801b9f0 <tcp_input+0x590>
 801b9de:	69fb      	ldr	r3, [r7, #28]
 801b9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b9e4:	69fa      	ldr	r2, [r7, #28]
 801b9e6:	6912      	ldr	r2, [r2, #16]
 801b9e8:	f06f 010d 	mvn.w	r1, #13
 801b9ec:	4610      	mov	r0, r2
 801b9ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b9f0:	69f9      	ldr	r1, [r7, #28]
 801b9f2:	486c      	ldr	r0, [pc, #432]	@ (801bba4 <tcp_input+0x744>)
 801b9f4:	f7ff fbbc 	bl	801b170 <tcp_pcb_remove>
        tcp_free(pcb);
 801b9f8:	69f8      	ldr	r0, [r7, #28]
 801b9fa:	f7fd fe7b 	bl	80196f4 <tcp_free>
 801b9fe:	e0da      	b.n	801bbb6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801ba00:	2300      	movs	r3, #0
 801ba02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ba04:	4b63      	ldr	r3, [pc, #396]	@ (801bb94 <tcp_input+0x734>)
 801ba06:	881b      	ldrh	r3, [r3, #0]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d01d      	beq.n	801ba48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ba0c:	4b61      	ldr	r3, [pc, #388]	@ (801bb94 <tcp_input+0x734>)
 801ba0e:	881b      	ldrh	r3, [r3, #0]
 801ba10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ba12:	69fb      	ldr	r3, [r7, #28]
 801ba14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d00a      	beq.n	801ba32 <tcp_input+0x5d2>
 801ba1c:	69fb      	ldr	r3, [r7, #28]
 801ba1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ba22:	69fa      	ldr	r2, [r7, #28]
 801ba24:	6910      	ldr	r0, [r2, #16]
 801ba26:	89fa      	ldrh	r2, [r7, #14]
 801ba28:	69f9      	ldr	r1, [r7, #28]
 801ba2a:	4798      	blx	r3
 801ba2c:	4603      	mov	r3, r0
 801ba2e:	74fb      	strb	r3, [r7, #19]
 801ba30:	e001      	b.n	801ba36 <tcp_input+0x5d6>
 801ba32:	2300      	movs	r3, #0
 801ba34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ba36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ba3a:	f113 0f0d 	cmn.w	r3, #13
 801ba3e:	f000 8099 	beq.w	801bb74 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ba42:	4b54      	ldr	r3, [pc, #336]	@ (801bb94 <tcp_input+0x734>)
 801ba44:	2200      	movs	r2, #0
 801ba46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ba48:	69f8      	ldr	r0, [r7, #28]
 801ba4a:	f000 f915 	bl	801bc78 <tcp_input_delayed_close>
 801ba4e:	4603      	mov	r3, r0
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	f040 8091 	bne.w	801bb78 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801ba56:	4b4d      	ldr	r3, [pc, #308]	@ (801bb8c <tcp_input+0x72c>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d041      	beq.n	801bae2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801ba5e:	69fb      	ldr	r3, [r7, #28]
 801ba60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d006      	beq.n	801ba74 <tcp_input+0x614>
 801ba66:	4b50      	ldr	r3, [pc, #320]	@ (801bba8 <tcp_input+0x748>)
 801ba68:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801ba6c:	494f      	ldr	r1, [pc, #316]	@ (801bbac <tcp_input+0x74c>)
 801ba6e:	4850      	ldr	r0, [pc, #320]	@ (801bbb0 <tcp_input+0x750>)
 801ba70:	f007 fdfa 	bl	8023668 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801ba74:	69fb      	ldr	r3, [r7, #28]
 801ba76:	8b5b      	ldrh	r3, [r3, #26]
 801ba78:	f003 0310 	and.w	r3, r3, #16
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d008      	beq.n	801ba92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801ba80:	4b42      	ldr	r3, [pc, #264]	@ (801bb8c <tcp_input+0x72c>)
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4618      	mov	r0, r3
 801ba86:	f7fd fa9b 	bl	8018fc0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801ba8a:	69f8      	ldr	r0, [r7, #28]
 801ba8c:	f7fe f976 	bl	8019d7c <tcp_abort>
            goto aborted;
 801ba90:	e091      	b.n	801bbb6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801ba92:	69fb      	ldr	r3, [r7, #28]
 801ba94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d00c      	beq.n	801bab6 <tcp_input+0x656>
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801baa2:	69fb      	ldr	r3, [r7, #28]
 801baa4:	6918      	ldr	r0, [r3, #16]
 801baa6:	4b39      	ldr	r3, [pc, #228]	@ (801bb8c <tcp_input+0x72c>)
 801baa8:	681a      	ldr	r2, [r3, #0]
 801baaa:	2300      	movs	r3, #0
 801baac:	69f9      	ldr	r1, [r7, #28]
 801baae:	47a0      	blx	r4
 801bab0:	4603      	mov	r3, r0
 801bab2:	74fb      	strb	r3, [r7, #19]
 801bab4:	e008      	b.n	801bac8 <tcp_input+0x668>
 801bab6:	4b35      	ldr	r3, [pc, #212]	@ (801bb8c <tcp_input+0x72c>)
 801bab8:	681a      	ldr	r2, [r3, #0]
 801baba:	2300      	movs	r3, #0
 801babc:	69f9      	ldr	r1, [r7, #28]
 801babe:	2000      	movs	r0, #0
 801bac0:	f7ff f888 	bl	801abd4 <tcp_recv_null>
 801bac4:	4603      	mov	r3, r0
 801bac6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801bac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bacc:	f113 0f0d 	cmn.w	r3, #13
 801bad0:	d054      	beq.n	801bb7c <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801bad2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d003      	beq.n	801bae2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801bada:	4b2c      	ldr	r3, [pc, #176]	@ (801bb8c <tcp_input+0x72c>)
 801badc:	681a      	ldr	r2, [r3, #0]
 801bade:	69fb      	ldr	r3, [r7, #28]
 801bae0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801bae2:	4b2b      	ldr	r3, [pc, #172]	@ (801bb90 <tcp_input+0x730>)
 801bae4:	781b      	ldrb	r3, [r3, #0]
 801bae6:	f003 0320 	and.w	r3, r3, #32
 801baea:	2b00      	cmp	r3, #0
 801baec:	d031      	beq.n	801bb52 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801baee:	69fb      	ldr	r3, [r7, #28]
 801baf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d009      	beq.n	801bb0a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801baf6:	69fb      	ldr	r3, [r7, #28]
 801baf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bafa:	7b5a      	ldrb	r2, [r3, #13]
 801bafc:	69fb      	ldr	r3, [r7, #28]
 801bafe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bb00:	f042 0220 	orr.w	r2, r2, #32
 801bb04:	b2d2      	uxtb	r2, r2
 801bb06:	735a      	strb	r2, [r3, #13]
 801bb08:	e023      	b.n	801bb52 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801bb0a:	69fb      	ldr	r3, [r7, #28]
 801bb0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bb0e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801bb12:	4293      	cmp	r3, r2
 801bb14:	d005      	beq.n	801bb22 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801bb16:	69fb      	ldr	r3, [r7, #28]
 801bb18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bb1a:	3301      	adds	r3, #1
 801bb1c:	b29a      	uxth	r2, r3
 801bb1e:	69fb      	ldr	r3, [r7, #28]
 801bb20:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801bb22:	69fb      	ldr	r3, [r7, #28]
 801bb24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d00b      	beq.n	801bb44 <tcp_input+0x6e4>
 801bb2c:	69fb      	ldr	r3, [r7, #28]
 801bb2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801bb32:	69fb      	ldr	r3, [r7, #28]
 801bb34:	6918      	ldr	r0, [r3, #16]
 801bb36:	2300      	movs	r3, #0
 801bb38:	2200      	movs	r2, #0
 801bb3a:	69f9      	ldr	r1, [r7, #28]
 801bb3c:	47a0      	blx	r4
 801bb3e:	4603      	mov	r3, r0
 801bb40:	74fb      	strb	r3, [r7, #19]
 801bb42:	e001      	b.n	801bb48 <tcp_input+0x6e8>
 801bb44:	2300      	movs	r3, #0
 801bb46:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801bb48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bb4c:	f113 0f0d 	cmn.w	r3, #13
 801bb50:	d016      	beq.n	801bb80 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801bb52:	4b13      	ldr	r3, [pc, #76]	@ (801bba0 <tcp_input+0x740>)
 801bb54:	2200      	movs	r2, #0
 801bb56:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801bb58:	69f8      	ldr	r0, [r7, #28]
 801bb5a:	f000 f88d 	bl	801bc78 <tcp_input_delayed_close>
 801bb5e:	4603      	mov	r3, r0
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d127      	bne.n	801bbb4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801bb64:	69f8      	ldr	r0, [r7, #28]
 801bb66:	f002 ff1b 	bl	801e9a0 <tcp_output>
 801bb6a:	e024      	b.n	801bbb6 <tcp_input+0x756>
        goto aborted;
 801bb6c:	bf00      	nop
 801bb6e:	e022      	b.n	801bbb6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801bb70:	bf00      	nop
 801bb72:	e020      	b.n	801bbb6 <tcp_input+0x756>
              goto aborted;
 801bb74:	bf00      	nop
 801bb76:	e01e      	b.n	801bbb6 <tcp_input+0x756>
          goto aborted;
 801bb78:	bf00      	nop
 801bb7a:	e01c      	b.n	801bbb6 <tcp_input+0x756>
            goto aborted;
 801bb7c:	bf00      	nop
 801bb7e:	e01a      	b.n	801bbb6 <tcp_input+0x756>
              goto aborted;
 801bb80:	bf00      	nop
 801bb82:	e018      	b.n	801bbb6 <tcp_input+0x756>
 801bb84:	20018bc8 	.word	0x20018bc8
 801bb88:	20018bd8 	.word	0x20018bd8
 801bb8c:	20018bf8 	.word	0x20018bf8
 801bb90:	20018bf5 	.word	0x20018bf5
 801bb94:	20018bf0 	.word	0x20018bf0
 801bb98:	20018bf4 	.word	0x20018bf4
 801bb9c:	20018bf2 	.word	0x20018bf2
 801bba0:	20018bfc 	.word	0x20018bfc
 801bba4:	20018bbc 	.word	0x20018bbc
 801bba8:	08026764 	.word	0x08026764
 801bbac:	08026918 	.word	0x08026918
 801bbb0:	080267b0 	.word	0x080267b0
          goto aborted;
 801bbb4:	bf00      	nop
    tcp_input_pcb = NULL;
 801bbb6:	4b27      	ldr	r3, [pc, #156]	@ (801bc54 <tcp_input+0x7f4>)
 801bbb8:	2200      	movs	r2, #0
 801bbba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801bbbc:	4b26      	ldr	r3, [pc, #152]	@ (801bc58 <tcp_input+0x7f8>)
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801bbc2:	4b26      	ldr	r3, [pc, #152]	@ (801bc5c <tcp_input+0x7fc>)
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d03f      	beq.n	801bc4a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801bbca:	4b24      	ldr	r3, [pc, #144]	@ (801bc5c <tcp_input+0x7fc>)
 801bbcc:	685b      	ldr	r3, [r3, #4]
 801bbce:	4618      	mov	r0, r3
 801bbd0:	f7fd f9f6 	bl	8018fc0 <pbuf_free>
      inseg.p = NULL;
 801bbd4:	4b21      	ldr	r3, [pc, #132]	@ (801bc5c <tcp_input+0x7fc>)
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801bbda:	e036      	b.n	801bc4a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801bbdc:	4b20      	ldr	r3, [pc, #128]	@ (801bc60 <tcp_input+0x800>)
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	899b      	ldrh	r3, [r3, #12]
 801bbe2:	b29b      	uxth	r3, r3
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f7fb fdb7 	bl	8017758 <lwip_htons>
 801bbea:	4603      	mov	r3, r0
 801bbec:	b2db      	uxtb	r3, r3
 801bbee:	f003 0304 	and.w	r3, r3, #4
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d118      	bne.n	801bc28 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bbf6:	4b1b      	ldr	r3, [pc, #108]	@ (801bc64 <tcp_input+0x804>)
 801bbf8:	6819      	ldr	r1, [r3, #0]
 801bbfa:	4b1b      	ldr	r3, [pc, #108]	@ (801bc68 <tcp_input+0x808>)
 801bbfc:	881b      	ldrh	r3, [r3, #0]
 801bbfe:	461a      	mov	r2, r3
 801bc00:	4b1a      	ldr	r3, [pc, #104]	@ (801bc6c <tcp_input+0x80c>)
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc06:	4b16      	ldr	r3, [pc, #88]	@ (801bc60 <tcp_input+0x800>)
 801bc08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc0a:	885b      	ldrh	r3, [r3, #2]
 801bc0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc0e:	4a14      	ldr	r2, [pc, #80]	@ (801bc60 <tcp_input+0x800>)
 801bc10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc12:	8812      	ldrh	r2, [r2, #0]
 801bc14:	b292      	uxth	r2, r2
 801bc16:	9202      	str	r2, [sp, #8]
 801bc18:	9301      	str	r3, [sp, #4]
 801bc1a:	4b15      	ldr	r3, [pc, #84]	@ (801bc70 <tcp_input+0x810>)
 801bc1c:	9300      	str	r3, [sp, #0]
 801bc1e:	4b15      	ldr	r3, [pc, #84]	@ (801bc74 <tcp_input+0x814>)
 801bc20:	4602      	mov	r2, r0
 801bc22:	2000      	movs	r0, #0
 801bc24:	f003 fc70 	bl	801f508 <tcp_rst>
    pbuf_free(p);
 801bc28:	6878      	ldr	r0, [r7, #4]
 801bc2a:	f7fd f9c9 	bl	8018fc0 <pbuf_free>
  return;
 801bc2e:	e00c      	b.n	801bc4a <tcp_input+0x7ea>
    goto dropped;
 801bc30:	bf00      	nop
 801bc32:	e006      	b.n	801bc42 <tcp_input+0x7e2>
    goto dropped;
 801bc34:	bf00      	nop
 801bc36:	e004      	b.n	801bc42 <tcp_input+0x7e2>
    goto dropped;
 801bc38:	bf00      	nop
 801bc3a:	e002      	b.n	801bc42 <tcp_input+0x7e2>
      goto dropped;
 801bc3c:	bf00      	nop
 801bc3e:	e000      	b.n	801bc42 <tcp_input+0x7e2>
      goto dropped;
 801bc40:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801bc42:	6878      	ldr	r0, [r7, #4]
 801bc44:	f7fd f9bc 	bl	8018fc0 <pbuf_free>
 801bc48:	e000      	b.n	801bc4c <tcp_input+0x7ec>
  return;
 801bc4a:	bf00      	nop
}
 801bc4c:	3724      	adds	r7, #36	@ 0x24
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	bd90      	pop	{r4, r7, pc}
 801bc52:	bf00      	nop
 801bc54:	20018bfc 	.word	0x20018bfc
 801bc58:	20018bf8 	.word	0x20018bf8
 801bc5c:	20018bc8 	.word	0x20018bc8
 801bc60:	20018bd8 	.word	0x20018bd8
 801bc64:	20018bec 	.word	0x20018bec
 801bc68:	20018bf2 	.word	0x20018bf2
 801bc6c:	20018be8 	.word	0x20018be8
 801bc70:	2000dbc4 	.word	0x2000dbc4
 801bc74:	2000dbc8 	.word	0x2000dbc8

0801bc78 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b082      	sub	sp, #8
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d106      	bne.n	801bc94 <tcp_input_delayed_close+0x1c>
 801bc86:	4b17      	ldr	r3, [pc, #92]	@ (801bce4 <tcp_input_delayed_close+0x6c>)
 801bc88:	f240 225a 	movw	r2, #602	@ 0x25a
 801bc8c:	4916      	ldr	r1, [pc, #88]	@ (801bce8 <tcp_input_delayed_close+0x70>)
 801bc8e:	4817      	ldr	r0, [pc, #92]	@ (801bcec <tcp_input_delayed_close+0x74>)
 801bc90:	f007 fcea 	bl	8023668 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801bc94:	4b16      	ldr	r3, [pc, #88]	@ (801bcf0 <tcp_input_delayed_close+0x78>)
 801bc96:	781b      	ldrb	r3, [r3, #0]
 801bc98:	f003 0310 	and.w	r3, r3, #16
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d01c      	beq.n	801bcda <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	8b5b      	ldrh	r3, [r3, #26]
 801bca4:	f003 0310 	and.w	r3, r3, #16
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d10d      	bne.n	801bcc8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d008      	beq.n	801bcc8 <tcp_input_delayed_close+0x50>
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801bcbc:	687a      	ldr	r2, [r7, #4]
 801bcbe:	6912      	ldr	r2, [r2, #16]
 801bcc0:	f06f 010e 	mvn.w	r1, #14
 801bcc4:	4610      	mov	r0, r2
 801bcc6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bcc8:	6879      	ldr	r1, [r7, #4]
 801bcca:	480a      	ldr	r0, [pc, #40]	@ (801bcf4 <tcp_input_delayed_close+0x7c>)
 801bccc:	f7ff fa50 	bl	801b170 <tcp_pcb_remove>
    tcp_free(pcb);
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	f7fd fd0f 	bl	80196f4 <tcp_free>
    return 1;
 801bcd6:	2301      	movs	r3, #1
 801bcd8:	e000      	b.n	801bcdc <tcp_input_delayed_close+0x64>
  }
  return 0;
 801bcda:	2300      	movs	r3, #0
}
 801bcdc:	4618      	mov	r0, r3
 801bcde:	3708      	adds	r7, #8
 801bce0:	46bd      	mov	sp, r7
 801bce2:	bd80      	pop	{r7, pc}
 801bce4:	08026764 	.word	0x08026764
 801bce8:	08026934 	.word	0x08026934
 801bcec:	080267b0 	.word	0x080267b0
 801bcf0:	20018bf5 	.word	0x20018bf5
 801bcf4:	20018bbc 	.word	0x20018bbc

0801bcf8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801bcf8:	b590      	push	{r4, r7, lr}
 801bcfa:	b08b      	sub	sp, #44	@ 0x2c
 801bcfc:	af04      	add	r7, sp, #16
 801bcfe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801bd00:	4b6f      	ldr	r3, [pc, #444]	@ (801bec0 <tcp_listen_input+0x1c8>)
 801bd02:	781b      	ldrb	r3, [r3, #0]
 801bd04:	f003 0304 	and.w	r3, r3, #4
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	f040 80d2 	bne.w	801beb2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d106      	bne.n	801bd22 <tcp_listen_input+0x2a>
 801bd14:	4b6b      	ldr	r3, [pc, #428]	@ (801bec4 <tcp_listen_input+0x1cc>)
 801bd16:	f240 2281 	movw	r2, #641	@ 0x281
 801bd1a:	496b      	ldr	r1, [pc, #428]	@ (801bec8 <tcp_listen_input+0x1d0>)
 801bd1c:	486b      	ldr	r0, [pc, #428]	@ (801becc <tcp_listen_input+0x1d4>)
 801bd1e:	f007 fca3 	bl	8023668 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801bd22:	4b67      	ldr	r3, [pc, #412]	@ (801bec0 <tcp_listen_input+0x1c8>)
 801bd24:	781b      	ldrb	r3, [r3, #0]
 801bd26:	f003 0310 	and.w	r3, r3, #16
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d019      	beq.n	801bd62 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd2e:	4b68      	ldr	r3, [pc, #416]	@ (801bed0 <tcp_listen_input+0x1d8>)
 801bd30:	6819      	ldr	r1, [r3, #0]
 801bd32:	4b68      	ldr	r3, [pc, #416]	@ (801bed4 <tcp_listen_input+0x1dc>)
 801bd34:	881b      	ldrh	r3, [r3, #0]
 801bd36:	461a      	mov	r2, r3
 801bd38:	4b67      	ldr	r3, [pc, #412]	@ (801bed8 <tcp_listen_input+0x1e0>)
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd3e:	4b67      	ldr	r3, [pc, #412]	@ (801bedc <tcp_listen_input+0x1e4>)
 801bd40:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd42:	885b      	ldrh	r3, [r3, #2]
 801bd44:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd46:	4a65      	ldr	r2, [pc, #404]	@ (801bedc <tcp_listen_input+0x1e4>)
 801bd48:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd4a:	8812      	ldrh	r2, [r2, #0]
 801bd4c:	b292      	uxth	r2, r2
 801bd4e:	9202      	str	r2, [sp, #8]
 801bd50:	9301      	str	r3, [sp, #4]
 801bd52:	4b63      	ldr	r3, [pc, #396]	@ (801bee0 <tcp_listen_input+0x1e8>)
 801bd54:	9300      	str	r3, [sp, #0]
 801bd56:	4b63      	ldr	r3, [pc, #396]	@ (801bee4 <tcp_listen_input+0x1ec>)
 801bd58:	4602      	mov	r2, r0
 801bd5a:	6878      	ldr	r0, [r7, #4]
 801bd5c:	f003 fbd4 	bl	801f508 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801bd60:	e0a9      	b.n	801beb6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801bd62:	4b57      	ldr	r3, [pc, #348]	@ (801bec0 <tcp_listen_input+0x1c8>)
 801bd64:	781b      	ldrb	r3, [r3, #0]
 801bd66:	f003 0302 	and.w	r3, r3, #2
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	f000 80a3 	beq.w	801beb6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	7d5b      	ldrb	r3, [r3, #21]
 801bd74:	4618      	mov	r0, r3
 801bd76:	f7ff f851 	bl	801ae1c <tcp_alloc>
 801bd7a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801bd7c:	697b      	ldr	r3, [r7, #20]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d111      	bne.n	801bda6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	699b      	ldr	r3, [r3, #24]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d00a      	beq.n	801bda0 <tcp_listen_input+0xa8>
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	699b      	ldr	r3, [r3, #24]
 801bd8e:	687a      	ldr	r2, [r7, #4]
 801bd90:	6910      	ldr	r0, [r2, #16]
 801bd92:	f04f 32ff 	mov.w	r2, #4294967295
 801bd96:	2100      	movs	r1, #0
 801bd98:	4798      	blx	r3
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	73bb      	strb	r3, [r7, #14]
      return;
 801bd9e:	e08b      	b.n	801beb8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bda0:	23f0      	movs	r3, #240	@ 0xf0
 801bda2:	73bb      	strb	r3, [r7, #14]
      return;
 801bda4:	e088      	b.n	801beb8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801bda6:	4b50      	ldr	r3, [pc, #320]	@ (801bee8 <tcp_listen_input+0x1f0>)
 801bda8:	695a      	ldr	r2, [r3, #20]
 801bdaa:	697b      	ldr	r3, [r7, #20]
 801bdac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801bdae:	4b4e      	ldr	r3, [pc, #312]	@ (801bee8 <tcp_listen_input+0x1f0>)
 801bdb0:	691a      	ldr	r2, [r3, #16]
 801bdb2:	697b      	ldr	r3, [r7, #20]
 801bdb4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	8ada      	ldrh	r2, [r3, #22]
 801bdba:	697b      	ldr	r3, [r7, #20]
 801bdbc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801bdbe:	4b47      	ldr	r3, [pc, #284]	@ (801bedc <tcp_listen_input+0x1e4>)
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	881b      	ldrh	r3, [r3, #0]
 801bdc4:	b29a      	uxth	r2, r3
 801bdc6:	697b      	ldr	r3, [r7, #20]
 801bdc8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801bdca:	697b      	ldr	r3, [r7, #20]
 801bdcc:	2203      	movs	r2, #3
 801bdce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801bdd0:	4b41      	ldr	r3, [pc, #260]	@ (801bed8 <tcp_listen_input+0x1e0>)
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	1c5a      	adds	r2, r3, #1
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801bdda:	697b      	ldr	r3, [r7, #20]
 801bddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bdde:	697b      	ldr	r3, [r7, #20]
 801bde0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801bde2:	6978      	ldr	r0, [r7, #20]
 801bde4:	f7ff fa58 	bl	801b298 <tcp_next_iss>
 801bde8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	693a      	ldr	r2, [r7, #16]
 801bdee:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801bdf0:	697b      	ldr	r3, [r7, #20]
 801bdf2:	693a      	ldr	r2, [r7, #16]
 801bdf4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801bdf6:	697b      	ldr	r3, [r7, #20]
 801bdf8:	693a      	ldr	r2, [r7, #16]
 801bdfa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801bdfc:	697b      	ldr	r3, [r7, #20]
 801bdfe:	693a      	ldr	r2, [r7, #16]
 801be00:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801be02:	4b35      	ldr	r3, [pc, #212]	@ (801bed8 <tcp_listen_input+0x1e0>)
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	1e5a      	subs	r2, r3, #1
 801be08:	697b      	ldr	r3, [r7, #20]
 801be0a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	691a      	ldr	r2, [r3, #16]
 801be10:	697b      	ldr	r3, [r7, #20]
 801be12:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801be14:	697b      	ldr	r3, [r7, #20]
 801be16:	687a      	ldr	r2, [r7, #4]
 801be18:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	7a5b      	ldrb	r3, [r3, #9]
 801be1e:	f003 030c 	and.w	r3, r3, #12
 801be22:	b2da      	uxtb	r2, r3
 801be24:	697b      	ldr	r3, [r7, #20]
 801be26:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	7a1a      	ldrb	r2, [r3, #8]
 801be2c:	697b      	ldr	r3, [r7, #20]
 801be2e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801be30:	4b2e      	ldr	r3, [pc, #184]	@ (801beec <tcp_listen_input+0x1f4>)
 801be32:	681a      	ldr	r2, [r3, #0]
 801be34:	697b      	ldr	r3, [r7, #20]
 801be36:	60da      	str	r2, [r3, #12]
 801be38:	4a2c      	ldr	r2, [pc, #176]	@ (801beec <tcp_listen_input+0x1f4>)
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	6013      	str	r3, [r2, #0]
 801be3e:	f003 fd25 	bl	801f88c <tcp_timer_needed>
 801be42:	4b2b      	ldr	r3, [pc, #172]	@ (801bef0 <tcp_listen_input+0x1f8>)
 801be44:	2201      	movs	r2, #1
 801be46:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801be48:	6978      	ldr	r0, [r7, #20]
 801be4a:	f001 fd8b 	bl	801d964 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801be4e:	4b23      	ldr	r3, [pc, #140]	@ (801bedc <tcp_listen_input+0x1e4>)
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	89db      	ldrh	r3, [r3, #14]
 801be54:	b29a      	uxth	r2, r3
 801be56:	697b      	ldr	r3, [r7, #20]
 801be58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801be5c:	697b      	ldr	r3, [r7, #20]
 801be5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801be68:	697b      	ldr	r3, [r7, #20]
 801be6a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801be6c:	697b      	ldr	r3, [r7, #20]
 801be6e:	3304      	adds	r3, #4
 801be70:	4618      	mov	r0, r3
 801be72:	f005 fa5f 	bl	8021334 <ip4_route>
 801be76:	4601      	mov	r1, r0
 801be78:	697b      	ldr	r3, [r7, #20]
 801be7a:	3304      	adds	r3, #4
 801be7c:	461a      	mov	r2, r3
 801be7e:	4620      	mov	r0, r4
 801be80:	f7ff fa30 	bl	801b2e4 <tcp_eff_send_mss_netif>
 801be84:	4603      	mov	r3, r0
 801be86:	461a      	mov	r2, r3
 801be88:	697b      	ldr	r3, [r7, #20]
 801be8a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801be8c:	2112      	movs	r1, #18
 801be8e:	6978      	ldr	r0, [r7, #20]
 801be90:	f002 fc98 	bl	801e7c4 <tcp_enqueue_flags>
 801be94:	4603      	mov	r3, r0
 801be96:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801be98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d004      	beq.n	801beaa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801bea0:	2100      	movs	r1, #0
 801bea2:	6978      	ldr	r0, [r7, #20]
 801bea4:	f7fd feac 	bl	8019c00 <tcp_abandon>
      return;
 801bea8:	e006      	b.n	801beb8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801beaa:	6978      	ldr	r0, [r7, #20]
 801beac:	f002 fd78 	bl	801e9a0 <tcp_output>
  return;
 801beb0:	e001      	b.n	801beb6 <tcp_listen_input+0x1be>
    return;
 801beb2:	bf00      	nop
 801beb4:	e000      	b.n	801beb8 <tcp_listen_input+0x1c0>
  return;
 801beb6:	bf00      	nop
}
 801beb8:	371c      	adds	r7, #28
 801beba:	46bd      	mov	sp, r7
 801bebc:	bd90      	pop	{r4, r7, pc}
 801bebe:	bf00      	nop
 801bec0:	20018bf4 	.word	0x20018bf4
 801bec4:	08026764 	.word	0x08026764
 801bec8:	0802695c 	.word	0x0802695c
 801becc:	080267b0 	.word	0x080267b0
 801bed0:	20018bec 	.word	0x20018bec
 801bed4:	20018bf2 	.word	0x20018bf2
 801bed8:	20018be8 	.word	0x20018be8
 801bedc:	20018bd8 	.word	0x20018bd8
 801bee0:	2000dbc4 	.word	0x2000dbc4
 801bee4:	2000dbc8 	.word	0x2000dbc8
 801bee8:	2000dbb4 	.word	0x2000dbb4
 801beec:	20018bbc 	.word	0x20018bbc
 801bef0:	20018bc4 	.word	0x20018bc4

0801bef4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b086      	sub	sp, #24
 801bef8:	af04      	add	r7, sp, #16
 801befa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801befc:	4b2f      	ldr	r3, [pc, #188]	@ (801bfbc <tcp_timewait_input+0xc8>)
 801befe:	781b      	ldrb	r3, [r3, #0]
 801bf00:	f003 0304 	and.w	r3, r3, #4
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d153      	bne.n	801bfb0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d106      	bne.n	801bf1c <tcp_timewait_input+0x28>
 801bf0e:	4b2c      	ldr	r3, [pc, #176]	@ (801bfc0 <tcp_timewait_input+0xcc>)
 801bf10:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801bf14:	492b      	ldr	r1, [pc, #172]	@ (801bfc4 <tcp_timewait_input+0xd0>)
 801bf16:	482c      	ldr	r0, [pc, #176]	@ (801bfc8 <tcp_timewait_input+0xd4>)
 801bf18:	f007 fba6 	bl	8023668 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801bf1c:	4b27      	ldr	r3, [pc, #156]	@ (801bfbc <tcp_timewait_input+0xc8>)
 801bf1e:	781b      	ldrb	r3, [r3, #0]
 801bf20:	f003 0302 	and.w	r3, r3, #2
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d02a      	beq.n	801bf7e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801bf28:	4b28      	ldr	r3, [pc, #160]	@ (801bfcc <tcp_timewait_input+0xd8>)
 801bf2a:	681a      	ldr	r2, [r3, #0]
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf30:	1ad3      	subs	r3, r2, r3
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	db2d      	blt.n	801bf92 <tcp_timewait_input+0x9e>
 801bf36:	4b25      	ldr	r3, [pc, #148]	@ (801bfcc <tcp_timewait_input+0xd8>)
 801bf38:	681a      	ldr	r2, [r3, #0]
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf3e:	6879      	ldr	r1, [r7, #4]
 801bf40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801bf42:	440b      	add	r3, r1
 801bf44:	1ad3      	subs	r3, r2, r3
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	dc23      	bgt.n	801bf92 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf4a:	4b21      	ldr	r3, [pc, #132]	@ (801bfd0 <tcp_timewait_input+0xdc>)
 801bf4c:	6819      	ldr	r1, [r3, #0]
 801bf4e:	4b21      	ldr	r3, [pc, #132]	@ (801bfd4 <tcp_timewait_input+0xe0>)
 801bf50:	881b      	ldrh	r3, [r3, #0]
 801bf52:	461a      	mov	r2, r3
 801bf54:	4b1d      	ldr	r3, [pc, #116]	@ (801bfcc <tcp_timewait_input+0xd8>)
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bf5a:	4b1f      	ldr	r3, [pc, #124]	@ (801bfd8 <tcp_timewait_input+0xe4>)
 801bf5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf5e:	885b      	ldrh	r3, [r3, #2]
 801bf60:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bf62:	4a1d      	ldr	r2, [pc, #116]	@ (801bfd8 <tcp_timewait_input+0xe4>)
 801bf64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf66:	8812      	ldrh	r2, [r2, #0]
 801bf68:	b292      	uxth	r2, r2
 801bf6a:	9202      	str	r2, [sp, #8]
 801bf6c:	9301      	str	r3, [sp, #4]
 801bf6e:	4b1b      	ldr	r3, [pc, #108]	@ (801bfdc <tcp_timewait_input+0xe8>)
 801bf70:	9300      	str	r3, [sp, #0]
 801bf72:	4b1b      	ldr	r3, [pc, #108]	@ (801bfe0 <tcp_timewait_input+0xec>)
 801bf74:	4602      	mov	r2, r0
 801bf76:	6878      	ldr	r0, [r7, #4]
 801bf78:	f003 fac6 	bl	801f508 <tcp_rst>
      return;
 801bf7c:	e01b      	b.n	801bfb6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801bf7e:	4b0f      	ldr	r3, [pc, #60]	@ (801bfbc <tcp_timewait_input+0xc8>)
 801bf80:	781b      	ldrb	r3, [r3, #0]
 801bf82:	f003 0301 	and.w	r3, r3, #1
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d003      	beq.n	801bf92 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801bf8a:	4b16      	ldr	r3, [pc, #88]	@ (801bfe4 <tcp_timewait_input+0xf0>)
 801bf8c:	681a      	ldr	r2, [r3, #0]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801bf92:	4b10      	ldr	r3, [pc, #64]	@ (801bfd4 <tcp_timewait_input+0xe0>)
 801bf94:	881b      	ldrh	r3, [r3, #0]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d00c      	beq.n	801bfb4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	8b5b      	ldrh	r3, [r3, #26]
 801bf9e:	f043 0302 	orr.w	r3, r3, #2
 801bfa2:	b29a      	uxth	r2, r3
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bfa8:	6878      	ldr	r0, [r7, #4]
 801bfaa:	f002 fcf9 	bl	801e9a0 <tcp_output>
  }
  return;
 801bfae:	e001      	b.n	801bfb4 <tcp_timewait_input+0xc0>
    return;
 801bfb0:	bf00      	nop
 801bfb2:	e000      	b.n	801bfb6 <tcp_timewait_input+0xc2>
  return;
 801bfb4:	bf00      	nop
}
 801bfb6:	3708      	adds	r7, #8
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bd80      	pop	{r7, pc}
 801bfbc:	20018bf4 	.word	0x20018bf4
 801bfc0:	08026764 	.word	0x08026764
 801bfc4:	0802697c 	.word	0x0802697c
 801bfc8:	080267b0 	.word	0x080267b0
 801bfcc:	20018be8 	.word	0x20018be8
 801bfd0:	20018bec 	.word	0x20018bec
 801bfd4:	20018bf2 	.word	0x20018bf2
 801bfd8:	20018bd8 	.word	0x20018bd8
 801bfdc:	2000dbc4 	.word	0x2000dbc4
 801bfe0:	2000dbc8 	.word	0x2000dbc8
 801bfe4:	20018bb0 	.word	0x20018bb0

0801bfe8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801bfe8:	b590      	push	{r4, r7, lr}
 801bfea:	b08d      	sub	sp, #52	@ 0x34
 801bfec:	af04      	add	r7, sp, #16
 801bfee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801bff0:	2300      	movs	r3, #0
 801bff2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801bff4:	2300      	movs	r3, #0
 801bff6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d106      	bne.n	801c00c <tcp_process+0x24>
 801bffe:	4b9d      	ldr	r3, [pc, #628]	@ (801c274 <tcp_process+0x28c>)
 801c000:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801c004:	499c      	ldr	r1, [pc, #624]	@ (801c278 <tcp_process+0x290>)
 801c006:	489d      	ldr	r0, [pc, #628]	@ (801c27c <tcp_process+0x294>)
 801c008:	f007 fb2e 	bl	8023668 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801c00c:	4b9c      	ldr	r3, [pc, #624]	@ (801c280 <tcp_process+0x298>)
 801c00e:	781b      	ldrb	r3, [r3, #0]
 801c010:	f003 0304 	and.w	r3, r3, #4
 801c014:	2b00      	cmp	r3, #0
 801c016:	d04e      	beq.n	801c0b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	7d1b      	ldrb	r3, [r3, #20]
 801c01c:	2b02      	cmp	r3, #2
 801c01e:	d108      	bne.n	801c032 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c024:	4b97      	ldr	r3, [pc, #604]	@ (801c284 <tcp_process+0x29c>)
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	429a      	cmp	r2, r3
 801c02a:	d123      	bne.n	801c074 <tcp_process+0x8c>
        acceptable = 1;
 801c02c:	2301      	movs	r3, #1
 801c02e:	76fb      	strb	r3, [r7, #27]
 801c030:	e020      	b.n	801c074 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c036:	4b94      	ldr	r3, [pc, #592]	@ (801c288 <tcp_process+0x2a0>)
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	429a      	cmp	r2, r3
 801c03c:	d102      	bne.n	801c044 <tcp_process+0x5c>
        acceptable = 1;
 801c03e:	2301      	movs	r3, #1
 801c040:	76fb      	strb	r3, [r7, #27]
 801c042:	e017      	b.n	801c074 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c044:	4b90      	ldr	r3, [pc, #576]	@ (801c288 <tcp_process+0x2a0>)
 801c046:	681a      	ldr	r2, [r3, #0]
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c04c:	1ad3      	subs	r3, r2, r3
 801c04e:	2b00      	cmp	r3, #0
 801c050:	db10      	blt.n	801c074 <tcp_process+0x8c>
 801c052:	4b8d      	ldr	r3, [pc, #564]	@ (801c288 <tcp_process+0x2a0>)
 801c054:	681a      	ldr	r2, [r3, #0]
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c05a:	6879      	ldr	r1, [r7, #4]
 801c05c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801c05e:	440b      	add	r3, r1
 801c060:	1ad3      	subs	r3, r2, r3
 801c062:	2b00      	cmp	r3, #0
 801c064:	dc06      	bgt.n	801c074 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	8b5b      	ldrh	r3, [r3, #26]
 801c06a:	f043 0302 	orr.w	r3, r3, #2
 801c06e:	b29a      	uxth	r2, r3
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801c074:	7efb      	ldrb	r3, [r7, #27]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d01b      	beq.n	801c0b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	7d1b      	ldrb	r3, [r3, #20]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d106      	bne.n	801c090 <tcp_process+0xa8>
 801c082:	4b7c      	ldr	r3, [pc, #496]	@ (801c274 <tcp_process+0x28c>)
 801c084:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801c088:	4980      	ldr	r1, [pc, #512]	@ (801c28c <tcp_process+0x2a4>)
 801c08a:	487c      	ldr	r0, [pc, #496]	@ (801c27c <tcp_process+0x294>)
 801c08c:	f007 faec 	bl	8023668 <iprintf>
      recv_flags |= TF_RESET;
 801c090:	4b7f      	ldr	r3, [pc, #508]	@ (801c290 <tcp_process+0x2a8>)
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	f043 0308 	orr.w	r3, r3, #8
 801c098:	b2da      	uxtb	r2, r3
 801c09a:	4b7d      	ldr	r3, [pc, #500]	@ (801c290 <tcp_process+0x2a8>)
 801c09c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	8b5b      	ldrh	r3, [r3, #26]
 801c0a2:	f023 0301 	bic.w	r3, r3, #1
 801c0a6:	b29a      	uxth	r2, r3
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801c0ac:	f06f 030d 	mvn.w	r3, #13
 801c0b0:	e37a      	b.n	801c7a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	e378      	b.n	801c7a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801c0b6:	4b72      	ldr	r3, [pc, #456]	@ (801c280 <tcp_process+0x298>)
 801c0b8:	781b      	ldrb	r3, [r3, #0]
 801c0ba:	f003 0302 	and.w	r3, r3, #2
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d010      	beq.n	801c0e4 <tcp_process+0xfc>
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	7d1b      	ldrb	r3, [r3, #20]
 801c0c6:	2b02      	cmp	r3, #2
 801c0c8:	d00c      	beq.n	801c0e4 <tcp_process+0xfc>
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	7d1b      	ldrb	r3, [r3, #20]
 801c0ce:	2b03      	cmp	r3, #3
 801c0d0:	d008      	beq.n	801c0e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	8b5b      	ldrh	r3, [r3, #26]
 801c0d6:	f043 0302 	orr.w	r3, r3, #2
 801c0da:	b29a      	uxth	r2, r3
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	e361      	b.n	801c7a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	8b5b      	ldrh	r3, [r3, #26]
 801c0e8:	f003 0310 	and.w	r3, r3, #16
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d103      	bne.n	801c0f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801c0f0:	4b68      	ldr	r3, [pc, #416]	@ (801c294 <tcp_process+0x2ac>)
 801c0f2:	681a      	ldr	r2, [r3, #0]
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	2200      	movs	r2, #0
 801c104:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801c108:	6878      	ldr	r0, [r7, #4]
 801c10a:	f001 fc2b 	bl	801d964 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	7d1b      	ldrb	r3, [r3, #20]
 801c112:	3b02      	subs	r3, #2
 801c114:	2b07      	cmp	r3, #7
 801c116:	f200 8337 	bhi.w	801c788 <tcp_process+0x7a0>
 801c11a:	a201      	add	r2, pc, #4	@ (adr r2, 801c120 <tcp_process+0x138>)
 801c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c120:	0801c141 	.word	0x0801c141
 801c124:	0801c371 	.word	0x0801c371
 801c128:	0801c4e9 	.word	0x0801c4e9
 801c12c:	0801c513 	.word	0x0801c513
 801c130:	0801c637 	.word	0x0801c637
 801c134:	0801c4e9 	.word	0x0801c4e9
 801c138:	0801c6c3 	.word	0x0801c6c3
 801c13c:	0801c753 	.word	0x0801c753
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801c140:	4b4f      	ldr	r3, [pc, #316]	@ (801c280 <tcp_process+0x298>)
 801c142:	781b      	ldrb	r3, [r3, #0]
 801c144:	f003 0310 	and.w	r3, r3, #16
 801c148:	2b00      	cmp	r3, #0
 801c14a:	f000 80e4 	beq.w	801c316 <tcp_process+0x32e>
 801c14e:	4b4c      	ldr	r3, [pc, #304]	@ (801c280 <tcp_process+0x298>)
 801c150:	781b      	ldrb	r3, [r3, #0]
 801c152:	f003 0302 	and.w	r3, r3, #2
 801c156:	2b00      	cmp	r3, #0
 801c158:	f000 80dd 	beq.w	801c316 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c160:	1c5a      	adds	r2, r3, #1
 801c162:	4b48      	ldr	r3, [pc, #288]	@ (801c284 <tcp_process+0x29c>)
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	429a      	cmp	r2, r3
 801c168:	f040 80d5 	bne.w	801c316 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801c16c:	4b46      	ldr	r3, [pc, #280]	@ (801c288 <tcp_process+0x2a0>)
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	1c5a      	adds	r2, r3, #1
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801c17e:	4b41      	ldr	r3, [pc, #260]	@ (801c284 <tcp_process+0x29c>)
 801c180:	681a      	ldr	r2, [r3, #0]
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801c186:	4b44      	ldr	r3, [pc, #272]	@ (801c298 <tcp_process+0x2b0>)
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	89db      	ldrh	r3, [r3, #14]
 801c18c:	b29a      	uxth	r2, r3
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801c1a0:	4b39      	ldr	r3, [pc, #228]	@ (801c288 <tcp_process+0x2a0>)
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	1e5a      	subs	r2, r3, #1
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	2204      	movs	r2, #4
 801c1ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	3304      	adds	r3, #4
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f005 f8bb 	bl	8021334 <ip4_route>
 801c1be:	4601      	mov	r1, r0
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	3304      	adds	r3, #4
 801c1c4:	461a      	mov	r2, r3
 801c1c6:	4620      	mov	r0, r4
 801c1c8:	f7ff f88c 	bl	801b2e4 <tcp_eff_send_mss_netif>
 801c1cc:	4603      	mov	r3, r0
 801c1ce:	461a      	mov	r2, r3
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c1d8:	009a      	lsls	r2, r3, #2
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c1de:	005b      	lsls	r3, r3, #1
 801c1e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 801c1e4:	428b      	cmp	r3, r1
 801c1e6:	bf38      	it	cc
 801c1e8:	460b      	movcc	r3, r1
 801c1ea:	429a      	cmp	r2, r3
 801c1ec:	d204      	bcs.n	801c1f8 <tcp_process+0x210>
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c1f2:	009b      	lsls	r3, r3, #2
 801c1f4:	b29b      	uxth	r3, r3
 801c1f6:	e00d      	b.n	801c214 <tcp_process+0x22c>
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c1fc:	005b      	lsls	r3, r3, #1
 801c1fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 801c202:	4293      	cmp	r3, r2
 801c204:	d904      	bls.n	801c210 <tcp_process+0x228>
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c20a:	005b      	lsls	r3, r3, #1
 801c20c:	b29b      	uxth	r3, r3
 801c20e:	e001      	b.n	801c214 <tcp_process+0x22c>
 801c210:	f241 131c 	movw	r3, #4380	@ 0x111c
 801c214:	687a      	ldr	r2, [r7, #4]
 801c216:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801c220:	2b00      	cmp	r3, #0
 801c222:	d106      	bne.n	801c232 <tcp_process+0x24a>
 801c224:	4b13      	ldr	r3, [pc, #76]	@ (801c274 <tcp_process+0x28c>)
 801c226:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801c22a:	491c      	ldr	r1, [pc, #112]	@ (801c29c <tcp_process+0x2b4>)
 801c22c:	4813      	ldr	r0, [pc, #76]	@ (801c27c <tcp_process+0x294>)
 801c22e:	f007 fa1b 	bl	8023668 <iprintf>
        --pcb->snd_queuelen;
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801c238:	3b01      	subs	r3, #1
 801c23a:	b29a      	uxth	r2, r3
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c246:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801c248:	69fb      	ldr	r3, [r7, #28]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d12a      	bne.n	801c2a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c252:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c254:	69fb      	ldr	r3, [r7, #28]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d106      	bne.n	801c268 <tcp_process+0x280>
 801c25a:	4b06      	ldr	r3, [pc, #24]	@ (801c274 <tcp_process+0x28c>)
 801c25c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801c260:	490f      	ldr	r1, [pc, #60]	@ (801c2a0 <tcp_process+0x2b8>)
 801c262:	4806      	ldr	r0, [pc, #24]	@ (801c27c <tcp_process+0x294>)
 801c264:	f007 fa00 	bl	8023668 <iprintf>
          pcb->unsent = rseg->next;
 801c268:	69fb      	ldr	r3, [r7, #28]
 801c26a:	681a      	ldr	r2, [r3, #0]
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	66da      	str	r2, [r3, #108]	@ 0x6c
 801c270:	e01c      	b.n	801c2ac <tcp_process+0x2c4>
 801c272:	bf00      	nop
 801c274:	08026764 	.word	0x08026764
 801c278:	0802699c 	.word	0x0802699c
 801c27c:	080267b0 	.word	0x080267b0
 801c280:	20018bf4 	.word	0x20018bf4
 801c284:	20018bec 	.word	0x20018bec
 801c288:	20018be8 	.word	0x20018be8
 801c28c:	080269b8 	.word	0x080269b8
 801c290:	20018bf5 	.word	0x20018bf5
 801c294:	20018bb0 	.word	0x20018bb0
 801c298:	20018bd8 	.word	0x20018bd8
 801c29c:	080269d8 	.word	0x080269d8
 801c2a0:	080269f0 	.word	0x080269f0
        } else {
          pcb->unacked = rseg->next;
 801c2a4:	69fb      	ldr	r3, [r7, #28]
 801c2a6:	681a      	ldr	r2, [r3, #0]
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801c2ac:	69f8      	ldr	r0, [r7, #28]
 801c2ae:	f7fe fc4c 	bl	801ab4a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d104      	bne.n	801c2c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2c0:	861a      	strh	r2, [r3, #48]	@ 0x30
 801c2c2:	e006      	b.n	801c2d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	2200      	movs	r2, #0
 801c2ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d00a      	beq.n	801c2f2 <tcp_process+0x30a>
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c2e2:	687a      	ldr	r2, [r7, #4]
 801c2e4:	6910      	ldr	r0, [r2, #16]
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	6879      	ldr	r1, [r7, #4]
 801c2ea:	4798      	blx	r3
 801c2ec:	4603      	mov	r3, r0
 801c2ee:	76bb      	strb	r3, [r7, #26]
 801c2f0:	e001      	b.n	801c2f6 <tcp_process+0x30e>
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801c2f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c2fa:	f113 0f0d 	cmn.w	r3, #13
 801c2fe:	d102      	bne.n	801c306 <tcp_process+0x31e>
          return ERR_ABRT;
 801c300:	f06f 030c 	mvn.w	r3, #12
 801c304:	e250      	b.n	801c7a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	8b5b      	ldrh	r3, [r3, #26]
 801c30a:	f043 0302 	orr.w	r3, r3, #2
 801c30e:	b29a      	uxth	r2, r3
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801c314:	e23a      	b.n	801c78c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801c316:	4b98      	ldr	r3, [pc, #608]	@ (801c578 <tcp_process+0x590>)
 801c318:	781b      	ldrb	r3, [r3, #0]
 801c31a:	f003 0310 	and.w	r3, r3, #16
 801c31e:	2b00      	cmp	r3, #0
 801c320:	f000 8234 	beq.w	801c78c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c324:	4b95      	ldr	r3, [pc, #596]	@ (801c57c <tcp_process+0x594>)
 801c326:	6819      	ldr	r1, [r3, #0]
 801c328:	4b95      	ldr	r3, [pc, #596]	@ (801c580 <tcp_process+0x598>)
 801c32a:	881b      	ldrh	r3, [r3, #0]
 801c32c:	461a      	mov	r2, r3
 801c32e:	4b95      	ldr	r3, [pc, #596]	@ (801c584 <tcp_process+0x59c>)
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c334:	4b94      	ldr	r3, [pc, #592]	@ (801c588 <tcp_process+0x5a0>)
 801c336:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c338:	885b      	ldrh	r3, [r3, #2]
 801c33a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c33c:	4a92      	ldr	r2, [pc, #584]	@ (801c588 <tcp_process+0x5a0>)
 801c33e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c340:	8812      	ldrh	r2, [r2, #0]
 801c342:	b292      	uxth	r2, r2
 801c344:	9202      	str	r2, [sp, #8]
 801c346:	9301      	str	r3, [sp, #4]
 801c348:	4b90      	ldr	r3, [pc, #576]	@ (801c58c <tcp_process+0x5a4>)
 801c34a:	9300      	str	r3, [sp, #0]
 801c34c:	4b90      	ldr	r3, [pc, #576]	@ (801c590 <tcp_process+0x5a8>)
 801c34e:	4602      	mov	r2, r0
 801c350:	6878      	ldr	r0, [r7, #4]
 801c352:	f003 f8d9 	bl	801f508 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801c35c:	2b05      	cmp	r3, #5
 801c35e:	f200 8215 	bhi.w	801c78c <tcp_process+0x7a4>
          pcb->rtime = 0;
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	2200      	movs	r2, #0
 801c366:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801c368:	6878      	ldr	r0, [r7, #4]
 801c36a:	f002 fea5 	bl	801f0b8 <tcp_rexmit_rto>
      break;
 801c36e:	e20d      	b.n	801c78c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801c370:	4b81      	ldr	r3, [pc, #516]	@ (801c578 <tcp_process+0x590>)
 801c372:	781b      	ldrb	r3, [r3, #0]
 801c374:	f003 0310 	and.w	r3, r3, #16
 801c378:	2b00      	cmp	r3, #0
 801c37a:	f000 80a1 	beq.w	801c4c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c37e:	4b7f      	ldr	r3, [pc, #508]	@ (801c57c <tcp_process+0x594>)
 801c380:	681a      	ldr	r2, [r3, #0]
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c386:	1ad3      	subs	r3, r2, r3
 801c388:	3b01      	subs	r3, #1
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	db7e      	blt.n	801c48c <tcp_process+0x4a4>
 801c38e:	4b7b      	ldr	r3, [pc, #492]	@ (801c57c <tcp_process+0x594>)
 801c390:	681a      	ldr	r2, [r3, #0]
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c396:	1ad3      	subs	r3, r2, r3
 801c398:	2b00      	cmp	r3, #0
 801c39a:	dc77      	bgt.n	801c48c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	2204      	movs	r2, #4
 801c3a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d102      	bne.n	801c3b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801c3aa:	23fa      	movs	r3, #250	@ 0xfa
 801c3ac:	76bb      	strb	r3, [r7, #26]
 801c3ae:	e01d      	b.n	801c3ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c3b4:	699b      	ldr	r3, [r3, #24]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d106      	bne.n	801c3c8 <tcp_process+0x3e0>
 801c3ba:	4b76      	ldr	r3, [pc, #472]	@ (801c594 <tcp_process+0x5ac>)
 801c3bc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801c3c0:	4975      	ldr	r1, [pc, #468]	@ (801c598 <tcp_process+0x5b0>)
 801c3c2:	4876      	ldr	r0, [pc, #472]	@ (801c59c <tcp_process+0x5b4>)
 801c3c4:	f007 f950 	bl	8023668 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c3cc:	699b      	ldr	r3, [r3, #24]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d00a      	beq.n	801c3e8 <tcp_process+0x400>
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c3d6:	699b      	ldr	r3, [r3, #24]
 801c3d8:	687a      	ldr	r2, [r7, #4]
 801c3da:	6910      	ldr	r0, [r2, #16]
 801c3dc:	2200      	movs	r2, #0
 801c3de:	6879      	ldr	r1, [r7, #4]
 801c3e0:	4798      	blx	r3
 801c3e2:	4603      	mov	r3, r0
 801c3e4:	76bb      	strb	r3, [r7, #26]
 801c3e6:	e001      	b.n	801c3ec <tcp_process+0x404>
 801c3e8:	23f0      	movs	r3, #240	@ 0xf0
 801c3ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801c3ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d00a      	beq.n	801c40a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801c3f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c3f8:	f113 0f0d 	cmn.w	r3, #13
 801c3fc:	d002      	beq.n	801c404 <tcp_process+0x41c>
              tcp_abort(pcb);
 801c3fe:	6878      	ldr	r0, [r7, #4]
 801c400:	f7fd fcbc 	bl	8019d7c <tcp_abort>
            }
            return ERR_ABRT;
 801c404:	f06f 030c 	mvn.w	r3, #12
 801c408:	e1ce      	b.n	801c7a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801c40a:	6878      	ldr	r0, [r7, #4]
 801c40c:	f000 fae0 	bl	801c9d0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801c410:	4b63      	ldr	r3, [pc, #396]	@ (801c5a0 <tcp_process+0x5b8>)
 801c412:	881b      	ldrh	r3, [r3, #0]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d005      	beq.n	801c424 <tcp_process+0x43c>
            recv_acked--;
 801c418:	4b61      	ldr	r3, [pc, #388]	@ (801c5a0 <tcp_process+0x5b8>)
 801c41a:	881b      	ldrh	r3, [r3, #0]
 801c41c:	3b01      	subs	r3, #1
 801c41e:	b29a      	uxth	r2, r3
 801c420:	4b5f      	ldr	r3, [pc, #380]	@ (801c5a0 <tcp_process+0x5b8>)
 801c422:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c428:	009a      	lsls	r2, r3, #2
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c42e:	005b      	lsls	r3, r3, #1
 801c430:	f241 111c 	movw	r1, #4380	@ 0x111c
 801c434:	428b      	cmp	r3, r1
 801c436:	bf38      	it	cc
 801c438:	460b      	movcc	r3, r1
 801c43a:	429a      	cmp	r2, r3
 801c43c:	d204      	bcs.n	801c448 <tcp_process+0x460>
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c442:	009b      	lsls	r3, r3, #2
 801c444:	b29b      	uxth	r3, r3
 801c446:	e00d      	b.n	801c464 <tcp_process+0x47c>
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c44c:	005b      	lsls	r3, r3, #1
 801c44e:	f241 121c 	movw	r2, #4380	@ 0x111c
 801c452:	4293      	cmp	r3, r2
 801c454:	d904      	bls.n	801c460 <tcp_process+0x478>
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c45a:	005b      	lsls	r3, r3, #1
 801c45c:	b29b      	uxth	r3, r3
 801c45e:	e001      	b.n	801c464 <tcp_process+0x47c>
 801c460:	f241 131c 	movw	r3, #4380	@ 0x111c
 801c464:	687a      	ldr	r2, [r7, #4]
 801c466:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801c46a:	4b4e      	ldr	r3, [pc, #312]	@ (801c5a4 <tcp_process+0x5bc>)
 801c46c:	781b      	ldrb	r3, [r3, #0]
 801c46e:	f003 0320 	and.w	r3, r3, #32
 801c472:	2b00      	cmp	r3, #0
 801c474:	d037      	beq.n	801c4e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	8b5b      	ldrh	r3, [r3, #26]
 801c47a:	f043 0302 	orr.w	r3, r3, #2
 801c47e:	b29a      	uxth	r2, r3
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	2207      	movs	r2, #7
 801c488:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801c48a:	e02c      	b.n	801c4e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c48c:	4b3b      	ldr	r3, [pc, #236]	@ (801c57c <tcp_process+0x594>)
 801c48e:	6819      	ldr	r1, [r3, #0]
 801c490:	4b3b      	ldr	r3, [pc, #236]	@ (801c580 <tcp_process+0x598>)
 801c492:	881b      	ldrh	r3, [r3, #0]
 801c494:	461a      	mov	r2, r3
 801c496:	4b3b      	ldr	r3, [pc, #236]	@ (801c584 <tcp_process+0x59c>)
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c49c:	4b3a      	ldr	r3, [pc, #232]	@ (801c588 <tcp_process+0x5a0>)
 801c49e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c4a0:	885b      	ldrh	r3, [r3, #2]
 801c4a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c4a4:	4a38      	ldr	r2, [pc, #224]	@ (801c588 <tcp_process+0x5a0>)
 801c4a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c4a8:	8812      	ldrh	r2, [r2, #0]
 801c4aa:	b292      	uxth	r2, r2
 801c4ac:	9202      	str	r2, [sp, #8]
 801c4ae:	9301      	str	r3, [sp, #4]
 801c4b0:	4b36      	ldr	r3, [pc, #216]	@ (801c58c <tcp_process+0x5a4>)
 801c4b2:	9300      	str	r3, [sp, #0]
 801c4b4:	4b36      	ldr	r3, [pc, #216]	@ (801c590 <tcp_process+0x5a8>)
 801c4b6:	4602      	mov	r2, r0
 801c4b8:	6878      	ldr	r0, [r7, #4]
 801c4ba:	f003 f825 	bl	801f508 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801c4be:	e167      	b.n	801c790 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c4c0:	4b2d      	ldr	r3, [pc, #180]	@ (801c578 <tcp_process+0x590>)
 801c4c2:	781b      	ldrb	r3, [r3, #0]
 801c4c4:	f003 0302 	and.w	r3, r3, #2
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	f000 8161 	beq.w	801c790 <tcp_process+0x7a8>
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c4d2:	1e5a      	subs	r2, r3, #1
 801c4d4:	4b2b      	ldr	r3, [pc, #172]	@ (801c584 <tcp_process+0x59c>)
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	429a      	cmp	r2, r3
 801c4da:	f040 8159 	bne.w	801c790 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801c4de:	6878      	ldr	r0, [r7, #4]
 801c4e0:	f002 fe0c 	bl	801f0fc <tcp_rexmit>
      break;
 801c4e4:	e154      	b.n	801c790 <tcp_process+0x7a8>
 801c4e6:	e153      	b.n	801c790 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801c4e8:	6878      	ldr	r0, [r7, #4]
 801c4ea:	f000 fa71 	bl	801c9d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801c4ee:	4b2d      	ldr	r3, [pc, #180]	@ (801c5a4 <tcp_process+0x5bc>)
 801c4f0:	781b      	ldrb	r3, [r3, #0]
 801c4f2:	f003 0320 	and.w	r3, r3, #32
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	f000 814c 	beq.w	801c794 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	8b5b      	ldrh	r3, [r3, #26]
 801c500:	f043 0302 	orr.w	r3, r3, #2
 801c504:	b29a      	uxth	r2, r3
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	2207      	movs	r2, #7
 801c50e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c510:	e140      	b.n	801c794 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801c512:	6878      	ldr	r0, [r7, #4]
 801c514:	f000 fa5c 	bl	801c9d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c518:	4b22      	ldr	r3, [pc, #136]	@ (801c5a4 <tcp_process+0x5bc>)
 801c51a:	781b      	ldrb	r3, [r3, #0]
 801c51c:	f003 0320 	and.w	r3, r3, #32
 801c520:	2b00      	cmp	r3, #0
 801c522:	d071      	beq.n	801c608 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c524:	4b14      	ldr	r3, [pc, #80]	@ (801c578 <tcp_process+0x590>)
 801c526:	781b      	ldrb	r3, [r3, #0]
 801c528:	f003 0310 	and.w	r3, r3, #16
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d060      	beq.n	801c5f2 <tcp_process+0x60a>
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c534:	4b11      	ldr	r3, [pc, #68]	@ (801c57c <tcp_process+0x594>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	429a      	cmp	r2, r3
 801c53a:	d15a      	bne.n	801c5f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c540:	2b00      	cmp	r3, #0
 801c542:	d156      	bne.n	801c5f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	8b5b      	ldrh	r3, [r3, #26]
 801c548:	f043 0302 	orr.w	r3, r3, #2
 801c54c:	b29a      	uxth	r2, r3
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801c552:	6878      	ldr	r0, [r7, #4]
 801c554:	f7fe fdbc 	bl	801b0d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c558:	4b13      	ldr	r3, [pc, #76]	@ (801c5a8 <tcp_process+0x5c0>)
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	687a      	ldr	r2, [r7, #4]
 801c55e:	429a      	cmp	r2, r3
 801c560:	d105      	bne.n	801c56e <tcp_process+0x586>
 801c562:	4b11      	ldr	r3, [pc, #68]	@ (801c5a8 <tcp_process+0x5c0>)
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	68db      	ldr	r3, [r3, #12]
 801c568:	4a0f      	ldr	r2, [pc, #60]	@ (801c5a8 <tcp_process+0x5c0>)
 801c56a:	6013      	str	r3, [r2, #0]
 801c56c:	e02e      	b.n	801c5cc <tcp_process+0x5e4>
 801c56e:	4b0e      	ldr	r3, [pc, #56]	@ (801c5a8 <tcp_process+0x5c0>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	617b      	str	r3, [r7, #20]
 801c574:	e027      	b.n	801c5c6 <tcp_process+0x5de>
 801c576:	bf00      	nop
 801c578:	20018bf4 	.word	0x20018bf4
 801c57c:	20018bec 	.word	0x20018bec
 801c580:	20018bf2 	.word	0x20018bf2
 801c584:	20018be8 	.word	0x20018be8
 801c588:	20018bd8 	.word	0x20018bd8
 801c58c:	2000dbc4 	.word	0x2000dbc4
 801c590:	2000dbc8 	.word	0x2000dbc8
 801c594:	08026764 	.word	0x08026764
 801c598:	08026a04 	.word	0x08026a04
 801c59c:	080267b0 	.word	0x080267b0
 801c5a0:	20018bf0 	.word	0x20018bf0
 801c5a4:	20018bf5 	.word	0x20018bf5
 801c5a8:	20018bbc 	.word	0x20018bbc
 801c5ac:	697b      	ldr	r3, [r7, #20]
 801c5ae:	68db      	ldr	r3, [r3, #12]
 801c5b0:	687a      	ldr	r2, [r7, #4]
 801c5b2:	429a      	cmp	r2, r3
 801c5b4:	d104      	bne.n	801c5c0 <tcp_process+0x5d8>
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	68da      	ldr	r2, [r3, #12]
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	60da      	str	r2, [r3, #12]
 801c5be:	e005      	b.n	801c5cc <tcp_process+0x5e4>
 801c5c0:	697b      	ldr	r3, [r7, #20]
 801c5c2:	68db      	ldr	r3, [r3, #12]
 801c5c4:	617b      	str	r3, [r7, #20]
 801c5c6:	697b      	ldr	r3, [r7, #20]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d1ef      	bne.n	801c5ac <tcp_process+0x5c4>
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	2200      	movs	r2, #0
 801c5d0:	60da      	str	r2, [r3, #12]
 801c5d2:	4b77      	ldr	r3, [pc, #476]	@ (801c7b0 <tcp_process+0x7c8>)
 801c5d4:	2201      	movs	r2, #1
 801c5d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	220a      	movs	r2, #10
 801c5dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c5de:	4b75      	ldr	r3, [pc, #468]	@ (801c7b4 <tcp_process+0x7cc>)
 801c5e0:	681a      	ldr	r2, [r3, #0]
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	60da      	str	r2, [r3, #12]
 801c5e6:	4a73      	ldr	r2, [pc, #460]	@ (801c7b4 <tcp_process+0x7cc>)
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	6013      	str	r3, [r2, #0]
 801c5ec:	f003 f94e 	bl	801f88c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c5f0:	e0d2      	b.n	801c798 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	8b5b      	ldrh	r3, [r3, #26]
 801c5f6:	f043 0302 	orr.w	r3, r3, #2
 801c5fa:	b29a      	uxth	r2, r3
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	2208      	movs	r2, #8
 801c604:	751a      	strb	r2, [r3, #20]
      break;
 801c606:	e0c7      	b.n	801c798 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c608:	4b6b      	ldr	r3, [pc, #428]	@ (801c7b8 <tcp_process+0x7d0>)
 801c60a:	781b      	ldrb	r3, [r3, #0]
 801c60c:	f003 0310 	and.w	r3, r3, #16
 801c610:	2b00      	cmp	r3, #0
 801c612:	f000 80c1 	beq.w	801c798 <tcp_process+0x7b0>
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c61a:	4b68      	ldr	r3, [pc, #416]	@ (801c7bc <tcp_process+0x7d4>)
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	429a      	cmp	r2, r3
 801c620:	f040 80ba 	bne.w	801c798 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c628:	2b00      	cmp	r3, #0
 801c62a:	f040 80b5 	bne.w	801c798 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	2206      	movs	r2, #6
 801c632:	751a      	strb	r2, [r3, #20]
      break;
 801c634:	e0b0      	b.n	801c798 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801c636:	6878      	ldr	r0, [r7, #4]
 801c638:	f000 f9ca 	bl	801c9d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c63c:	4b60      	ldr	r3, [pc, #384]	@ (801c7c0 <tcp_process+0x7d8>)
 801c63e:	781b      	ldrb	r3, [r3, #0]
 801c640:	f003 0320 	and.w	r3, r3, #32
 801c644:	2b00      	cmp	r3, #0
 801c646:	f000 80a9 	beq.w	801c79c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	8b5b      	ldrh	r3, [r3, #26]
 801c64e:	f043 0302 	orr.w	r3, r3, #2
 801c652:	b29a      	uxth	r2, r3
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	f7fe fd39 	bl	801b0d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c65e:	4b59      	ldr	r3, [pc, #356]	@ (801c7c4 <tcp_process+0x7dc>)
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	687a      	ldr	r2, [r7, #4]
 801c664:	429a      	cmp	r2, r3
 801c666:	d105      	bne.n	801c674 <tcp_process+0x68c>
 801c668:	4b56      	ldr	r3, [pc, #344]	@ (801c7c4 <tcp_process+0x7dc>)
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	68db      	ldr	r3, [r3, #12]
 801c66e:	4a55      	ldr	r2, [pc, #340]	@ (801c7c4 <tcp_process+0x7dc>)
 801c670:	6013      	str	r3, [r2, #0]
 801c672:	e013      	b.n	801c69c <tcp_process+0x6b4>
 801c674:	4b53      	ldr	r3, [pc, #332]	@ (801c7c4 <tcp_process+0x7dc>)
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	613b      	str	r3, [r7, #16]
 801c67a:	e00c      	b.n	801c696 <tcp_process+0x6ae>
 801c67c:	693b      	ldr	r3, [r7, #16]
 801c67e:	68db      	ldr	r3, [r3, #12]
 801c680:	687a      	ldr	r2, [r7, #4]
 801c682:	429a      	cmp	r2, r3
 801c684:	d104      	bne.n	801c690 <tcp_process+0x6a8>
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	68da      	ldr	r2, [r3, #12]
 801c68a:	693b      	ldr	r3, [r7, #16]
 801c68c:	60da      	str	r2, [r3, #12]
 801c68e:	e005      	b.n	801c69c <tcp_process+0x6b4>
 801c690:	693b      	ldr	r3, [r7, #16]
 801c692:	68db      	ldr	r3, [r3, #12]
 801c694:	613b      	str	r3, [r7, #16]
 801c696:	693b      	ldr	r3, [r7, #16]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d1ef      	bne.n	801c67c <tcp_process+0x694>
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	2200      	movs	r2, #0
 801c6a0:	60da      	str	r2, [r3, #12]
 801c6a2:	4b43      	ldr	r3, [pc, #268]	@ (801c7b0 <tcp_process+0x7c8>)
 801c6a4:	2201      	movs	r2, #1
 801c6a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	220a      	movs	r2, #10
 801c6ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c6ae:	4b41      	ldr	r3, [pc, #260]	@ (801c7b4 <tcp_process+0x7cc>)
 801c6b0:	681a      	ldr	r2, [r3, #0]
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	60da      	str	r2, [r3, #12]
 801c6b6:	4a3f      	ldr	r2, [pc, #252]	@ (801c7b4 <tcp_process+0x7cc>)
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	6013      	str	r3, [r2, #0]
 801c6bc:	f003 f8e6 	bl	801f88c <tcp_timer_needed>
      }
      break;
 801c6c0:	e06c      	b.n	801c79c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801c6c2:	6878      	ldr	r0, [r7, #4]
 801c6c4:	f000 f984 	bl	801c9d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c6c8:	4b3b      	ldr	r3, [pc, #236]	@ (801c7b8 <tcp_process+0x7d0>)
 801c6ca:	781b      	ldrb	r3, [r3, #0]
 801c6cc:	f003 0310 	and.w	r3, r3, #16
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d065      	beq.n	801c7a0 <tcp_process+0x7b8>
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c6d8:	4b38      	ldr	r3, [pc, #224]	@ (801c7bc <tcp_process+0x7d4>)
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d15f      	bne.n	801c7a0 <tcp_process+0x7b8>
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d15b      	bne.n	801c7a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801c6e8:	6878      	ldr	r0, [r7, #4]
 801c6ea:	f7fe fcf1 	bl	801b0d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c6ee:	4b35      	ldr	r3, [pc, #212]	@ (801c7c4 <tcp_process+0x7dc>)
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	687a      	ldr	r2, [r7, #4]
 801c6f4:	429a      	cmp	r2, r3
 801c6f6:	d105      	bne.n	801c704 <tcp_process+0x71c>
 801c6f8:	4b32      	ldr	r3, [pc, #200]	@ (801c7c4 <tcp_process+0x7dc>)
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	68db      	ldr	r3, [r3, #12]
 801c6fe:	4a31      	ldr	r2, [pc, #196]	@ (801c7c4 <tcp_process+0x7dc>)
 801c700:	6013      	str	r3, [r2, #0]
 801c702:	e013      	b.n	801c72c <tcp_process+0x744>
 801c704:	4b2f      	ldr	r3, [pc, #188]	@ (801c7c4 <tcp_process+0x7dc>)
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	60fb      	str	r3, [r7, #12]
 801c70a:	e00c      	b.n	801c726 <tcp_process+0x73e>
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	68db      	ldr	r3, [r3, #12]
 801c710:	687a      	ldr	r2, [r7, #4]
 801c712:	429a      	cmp	r2, r3
 801c714:	d104      	bne.n	801c720 <tcp_process+0x738>
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	68da      	ldr	r2, [r3, #12]
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	60da      	str	r2, [r3, #12]
 801c71e:	e005      	b.n	801c72c <tcp_process+0x744>
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	68db      	ldr	r3, [r3, #12]
 801c724:	60fb      	str	r3, [r7, #12]
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d1ef      	bne.n	801c70c <tcp_process+0x724>
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	2200      	movs	r2, #0
 801c730:	60da      	str	r2, [r3, #12]
 801c732:	4b1f      	ldr	r3, [pc, #124]	@ (801c7b0 <tcp_process+0x7c8>)
 801c734:	2201      	movs	r2, #1
 801c736:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	220a      	movs	r2, #10
 801c73c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c73e:	4b1d      	ldr	r3, [pc, #116]	@ (801c7b4 <tcp_process+0x7cc>)
 801c740:	681a      	ldr	r2, [r3, #0]
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	60da      	str	r2, [r3, #12]
 801c746:	4a1b      	ldr	r2, [pc, #108]	@ (801c7b4 <tcp_process+0x7cc>)
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	6013      	str	r3, [r2, #0]
 801c74c:	f003 f89e 	bl	801f88c <tcp_timer_needed>
      }
      break;
 801c750:	e026      	b.n	801c7a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c752:	6878      	ldr	r0, [r7, #4]
 801c754:	f000 f93c 	bl	801c9d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c758:	4b17      	ldr	r3, [pc, #92]	@ (801c7b8 <tcp_process+0x7d0>)
 801c75a:	781b      	ldrb	r3, [r3, #0]
 801c75c:	f003 0310 	and.w	r3, r3, #16
 801c760:	2b00      	cmp	r3, #0
 801c762:	d01f      	beq.n	801c7a4 <tcp_process+0x7bc>
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c768:	4b14      	ldr	r3, [pc, #80]	@ (801c7bc <tcp_process+0x7d4>)
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	429a      	cmp	r2, r3
 801c76e:	d119      	bne.n	801c7a4 <tcp_process+0x7bc>
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c774:	2b00      	cmp	r3, #0
 801c776:	d115      	bne.n	801c7a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c778:	4b11      	ldr	r3, [pc, #68]	@ (801c7c0 <tcp_process+0x7d8>)
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	f043 0310 	orr.w	r3, r3, #16
 801c780:	b2da      	uxtb	r2, r3
 801c782:	4b0f      	ldr	r3, [pc, #60]	@ (801c7c0 <tcp_process+0x7d8>)
 801c784:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c786:	e00d      	b.n	801c7a4 <tcp_process+0x7bc>
    default:
      break;
 801c788:	bf00      	nop
 801c78a:	e00c      	b.n	801c7a6 <tcp_process+0x7be>
      break;
 801c78c:	bf00      	nop
 801c78e:	e00a      	b.n	801c7a6 <tcp_process+0x7be>
      break;
 801c790:	bf00      	nop
 801c792:	e008      	b.n	801c7a6 <tcp_process+0x7be>
      break;
 801c794:	bf00      	nop
 801c796:	e006      	b.n	801c7a6 <tcp_process+0x7be>
      break;
 801c798:	bf00      	nop
 801c79a:	e004      	b.n	801c7a6 <tcp_process+0x7be>
      break;
 801c79c:	bf00      	nop
 801c79e:	e002      	b.n	801c7a6 <tcp_process+0x7be>
      break;
 801c7a0:	bf00      	nop
 801c7a2:	e000      	b.n	801c7a6 <tcp_process+0x7be>
      break;
 801c7a4:	bf00      	nop
  }
  return ERR_OK;
 801c7a6:	2300      	movs	r3, #0
}
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	3724      	adds	r7, #36	@ 0x24
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	bd90      	pop	{r4, r7, pc}
 801c7b0:	20018bc4 	.word	0x20018bc4
 801c7b4:	20018bc0 	.word	0x20018bc0
 801c7b8:	20018bf4 	.word	0x20018bf4
 801c7bc:	20018bec 	.word	0x20018bec
 801c7c0:	20018bf5 	.word	0x20018bf5
 801c7c4:	20018bbc 	.word	0x20018bbc

0801c7c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c7c8:	b590      	push	{r4, r7, lr}
 801c7ca:	b085      	sub	sp, #20
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	6078      	str	r0, [r7, #4]
 801c7d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d106      	bne.n	801c7e6 <tcp_oos_insert_segment+0x1e>
 801c7d8:	4b3b      	ldr	r3, [pc, #236]	@ (801c8c8 <tcp_oos_insert_segment+0x100>)
 801c7da:	f240 421f 	movw	r2, #1055	@ 0x41f
 801c7de:	493b      	ldr	r1, [pc, #236]	@ (801c8cc <tcp_oos_insert_segment+0x104>)
 801c7e0:	483b      	ldr	r0, [pc, #236]	@ (801c8d0 <tcp_oos_insert_segment+0x108>)
 801c7e2:	f006 ff41 	bl	8023668 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	68db      	ldr	r3, [r3, #12]
 801c7ea:	899b      	ldrh	r3, [r3, #12]
 801c7ec:	b29b      	uxth	r3, r3
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	f7fa ffb2 	bl	8017758 <lwip_htons>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	b2db      	uxtb	r3, r3
 801c7f8:	f003 0301 	and.w	r3, r3, #1
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d028      	beq.n	801c852 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c800:	6838      	ldr	r0, [r7, #0]
 801c802:	f7fe f98d 	bl	801ab20 <tcp_segs_free>
    next = NULL;
 801c806:	2300      	movs	r3, #0
 801c808:	603b      	str	r3, [r7, #0]
 801c80a:	e056      	b.n	801c8ba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c80c:	683b      	ldr	r3, [r7, #0]
 801c80e:	68db      	ldr	r3, [r3, #12]
 801c810:	899b      	ldrh	r3, [r3, #12]
 801c812:	b29b      	uxth	r3, r3
 801c814:	4618      	mov	r0, r3
 801c816:	f7fa ff9f 	bl	8017758 <lwip_htons>
 801c81a:	4603      	mov	r3, r0
 801c81c:	b2db      	uxtb	r3, r3
 801c81e:	f003 0301 	and.w	r3, r3, #1
 801c822:	2b00      	cmp	r3, #0
 801c824:	d00d      	beq.n	801c842 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	68db      	ldr	r3, [r3, #12]
 801c82a:	899b      	ldrh	r3, [r3, #12]
 801c82c:	b29c      	uxth	r4, r3
 801c82e:	2001      	movs	r0, #1
 801c830:	f7fa ff92 	bl	8017758 <lwip_htons>
 801c834:	4603      	mov	r3, r0
 801c836:	461a      	mov	r2, r3
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	68db      	ldr	r3, [r3, #12]
 801c83c:	4322      	orrs	r2, r4
 801c83e:	b292      	uxth	r2, r2
 801c840:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c842:	683b      	ldr	r3, [r7, #0]
 801c844:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c846:	683b      	ldr	r3, [r7, #0]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c84c:	68f8      	ldr	r0, [r7, #12]
 801c84e:	f7fe f97c 	bl	801ab4a <tcp_seg_free>
    while (next &&
 801c852:	683b      	ldr	r3, [r7, #0]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d00e      	beq.n	801c876 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	891b      	ldrh	r3, [r3, #8]
 801c85c:	461a      	mov	r2, r3
 801c85e:	4b1d      	ldr	r3, [pc, #116]	@ (801c8d4 <tcp_oos_insert_segment+0x10c>)
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	441a      	add	r2, r3
 801c864:	683b      	ldr	r3, [r7, #0]
 801c866:	68db      	ldr	r3, [r3, #12]
 801c868:	685b      	ldr	r3, [r3, #4]
 801c86a:	6839      	ldr	r1, [r7, #0]
 801c86c:	8909      	ldrh	r1, [r1, #8]
 801c86e:	440b      	add	r3, r1
 801c870:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c872:	2b00      	cmp	r3, #0
 801c874:	daca      	bge.n	801c80c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c876:	683b      	ldr	r3, [r7, #0]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d01e      	beq.n	801c8ba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	891b      	ldrh	r3, [r3, #8]
 801c880:	461a      	mov	r2, r3
 801c882:	4b14      	ldr	r3, [pc, #80]	@ (801c8d4 <tcp_oos_insert_segment+0x10c>)
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	441a      	add	r2, r3
 801c888:	683b      	ldr	r3, [r7, #0]
 801c88a:	68db      	ldr	r3, [r3, #12]
 801c88c:	685b      	ldr	r3, [r3, #4]
 801c88e:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c890:	2b00      	cmp	r3, #0
 801c892:	dd12      	ble.n	801c8ba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c894:	683b      	ldr	r3, [r7, #0]
 801c896:	68db      	ldr	r3, [r3, #12]
 801c898:	685b      	ldr	r3, [r3, #4]
 801c89a:	b29a      	uxth	r2, r3
 801c89c:	4b0d      	ldr	r3, [pc, #52]	@ (801c8d4 <tcp_oos_insert_segment+0x10c>)
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	b29b      	uxth	r3, r3
 801c8a2:	1ad3      	subs	r3, r2, r3
 801c8a4:	b29a      	uxth	r2, r3
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	685a      	ldr	r2, [r3, #4]
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	891b      	ldrh	r3, [r3, #8]
 801c8b2:	4619      	mov	r1, r3
 801c8b4:	4610      	mov	r0, r2
 801c8b6:	f7fc f9cb 	bl	8018c50 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	683a      	ldr	r2, [r7, #0]
 801c8be:	601a      	str	r2, [r3, #0]
}
 801c8c0:	bf00      	nop
 801c8c2:	3714      	adds	r7, #20
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd90      	pop	{r4, r7, pc}
 801c8c8:	08026764 	.word	0x08026764
 801c8cc:	08026a24 	.word	0x08026a24
 801c8d0:	080267b0 	.word	0x080267b0
 801c8d4:	20018be8 	.word	0x20018be8

0801c8d8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c8d8:	b5b0      	push	{r4, r5, r7, lr}
 801c8da:	b086      	sub	sp, #24
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	60f8      	str	r0, [r7, #12]
 801c8e0:	60b9      	str	r1, [r7, #8]
 801c8e2:	607a      	str	r2, [r7, #4]
 801c8e4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c8e6:	e03e      	b.n	801c966 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c8e8:	68bb      	ldr	r3, [r7, #8]
 801c8ea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c8ec:	68bb      	ldr	r3, [r7, #8]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c8f2:	697b      	ldr	r3, [r7, #20]
 801c8f4:	685b      	ldr	r3, [r3, #4]
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	f7fc fbf0 	bl	80190dc <pbuf_clen>
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801c906:	8a7a      	ldrh	r2, [r7, #18]
 801c908:	429a      	cmp	r2, r3
 801c90a:	d906      	bls.n	801c91a <tcp_free_acked_segments+0x42>
 801c90c:	4b2a      	ldr	r3, [pc, #168]	@ (801c9b8 <tcp_free_acked_segments+0xe0>)
 801c90e:	f240 4257 	movw	r2, #1111	@ 0x457
 801c912:	492a      	ldr	r1, [pc, #168]	@ (801c9bc <tcp_free_acked_segments+0xe4>)
 801c914:	482a      	ldr	r0, [pc, #168]	@ (801c9c0 <tcp_free_acked_segments+0xe8>)
 801c916:	f006 fea7 	bl	8023668 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801c920:	8a7b      	ldrh	r3, [r7, #18]
 801c922:	1ad3      	subs	r3, r2, r3
 801c924:	b29a      	uxth	r2, r3
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	891a      	ldrh	r2, [r3, #8]
 801c930:	4b24      	ldr	r3, [pc, #144]	@ (801c9c4 <tcp_free_acked_segments+0xec>)
 801c932:	881b      	ldrh	r3, [r3, #0]
 801c934:	4413      	add	r3, r2
 801c936:	b29a      	uxth	r2, r3
 801c938:	4b22      	ldr	r3, [pc, #136]	@ (801c9c4 <tcp_free_acked_segments+0xec>)
 801c93a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c93c:	6978      	ldr	r0, [r7, #20]
 801c93e:	f7fe f904 	bl	801ab4a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d00c      	beq.n	801c966 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c94c:	68bb      	ldr	r3, [r7, #8]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d109      	bne.n	801c966 <tcp_free_acked_segments+0x8e>
 801c952:	683b      	ldr	r3, [r7, #0]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d106      	bne.n	801c966 <tcp_free_acked_segments+0x8e>
 801c958:	4b17      	ldr	r3, [pc, #92]	@ (801c9b8 <tcp_free_acked_segments+0xe0>)
 801c95a:	f240 4261 	movw	r2, #1121	@ 0x461
 801c95e:	491a      	ldr	r1, [pc, #104]	@ (801c9c8 <tcp_free_acked_segments+0xf0>)
 801c960:	4817      	ldr	r0, [pc, #92]	@ (801c9c0 <tcp_free_acked_segments+0xe8>)
 801c962:	f006 fe81 	bl	8023668 <iprintf>
  while (seg_list != NULL &&
 801c966:	68bb      	ldr	r3, [r7, #8]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d020      	beq.n	801c9ae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c96c:	68bb      	ldr	r3, [r7, #8]
 801c96e:	68db      	ldr	r3, [r3, #12]
 801c970:	685b      	ldr	r3, [r3, #4]
 801c972:	4618      	mov	r0, r3
 801c974:	f7fa ff05 	bl	8017782 <lwip_htonl>
 801c978:	4604      	mov	r4, r0
 801c97a:	68bb      	ldr	r3, [r7, #8]
 801c97c:	891b      	ldrh	r3, [r3, #8]
 801c97e:	461d      	mov	r5, r3
 801c980:	68bb      	ldr	r3, [r7, #8]
 801c982:	68db      	ldr	r3, [r3, #12]
 801c984:	899b      	ldrh	r3, [r3, #12]
 801c986:	b29b      	uxth	r3, r3
 801c988:	4618      	mov	r0, r3
 801c98a:	f7fa fee5 	bl	8017758 <lwip_htons>
 801c98e:	4603      	mov	r3, r0
 801c990:	b2db      	uxtb	r3, r3
 801c992:	f003 0303 	and.w	r3, r3, #3
 801c996:	2b00      	cmp	r3, #0
 801c998:	d001      	beq.n	801c99e <tcp_free_acked_segments+0xc6>
 801c99a:	2301      	movs	r3, #1
 801c99c:	e000      	b.n	801c9a0 <tcp_free_acked_segments+0xc8>
 801c99e:	2300      	movs	r3, #0
 801c9a0:	442b      	add	r3, r5
 801c9a2:	18e2      	adds	r2, r4, r3
 801c9a4:	4b09      	ldr	r3, [pc, #36]	@ (801c9cc <tcp_free_acked_segments+0xf4>)
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	dd9c      	ble.n	801c8e8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c9ae:	68bb      	ldr	r3, [r7, #8]
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	3718      	adds	r7, #24
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bdb0      	pop	{r4, r5, r7, pc}
 801c9b8:	08026764 	.word	0x08026764
 801c9bc:	08026a4c 	.word	0x08026a4c
 801c9c0:	080267b0 	.word	0x080267b0
 801c9c4:	20018bf0 	.word	0x20018bf0
 801c9c8:	08026a74 	.word	0x08026a74
 801c9cc:	20018bec 	.word	0x20018bec

0801c9d0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c9d0:	b5b0      	push	{r4, r5, r7, lr}
 801c9d2:	b094      	sub	sp, #80	@ 0x50
 801c9d4:	af00      	add	r7, sp, #0
 801c9d6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c9d8:	2300      	movs	r3, #0
 801c9da:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d106      	bne.n	801c9f0 <tcp_receive+0x20>
 801c9e2:	4b91      	ldr	r3, [pc, #580]	@ (801cc28 <tcp_receive+0x258>)
 801c9e4:	f240 427b 	movw	r2, #1147	@ 0x47b
 801c9e8:	4990      	ldr	r1, [pc, #576]	@ (801cc2c <tcp_receive+0x25c>)
 801c9ea:	4891      	ldr	r0, [pc, #580]	@ (801cc30 <tcp_receive+0x260>)
 801c9ec:	f006 fe3c 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	7d1b      	ldrb	r3, [r3, #20]
 801c9f4:	2b03      	cmp	r3, #3
 801c9f6:	d806      	bhi.n	801ca06 <tcp_receive+0x36>
 801c9f8:	4b8b      	ldr	r3, [pc, #556]	@ (801cc28 <tcp_receive+0x258>)
 801c9fa:	f240 427c 	movw	r2, #1148	@ 0x47c
 801c9fe:	498d      	ldr	r1, [pc, #564]	@ (801cc34 <tcp_receive+0x264>)
 801ca00:	488b      	ldr	r0, [pc, #556]	@ (801cc30 <tcp_receive+0x260>)
 801ca02:	f006 fe31 	bl	8023668 <iprintf>

  if (flags & TCP_ACK) {
 801ca06:	4b8c      	ldr	r3, [pc, #560]	@ (801cc38 <tcp_receive+0x268>)
 801ca08:	781b      	ldrb	r3, [r3, #0]
 801ca0a:	f003 0310 	and.w	r3, r3, #16
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	f000 8264 	beq.w	801cedc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ca1a:	461a      	mov	r2, r3
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ca20:	4413      	add	r3, r2
 801ca22:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ca28:	4b84      	ldr	r3, [pc, #528]	@ (801cc3c <tcp_receive+0x26c>)
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	1ad3      	subs	r3, r2, r3
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	db1b      	blt.n	801ca6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ca36:	4b81      	ldr	r3, [pc, #516]	@ (801cc3c <tcp_receive+0x26c>)
 801ca38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ca3a:	429a      	cmp	r2, r3
 801ca3c:	d106      	bne.n	801ca4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801ca42:	4b7f      	ldr	r3, [pc, #508]	@ (801cc40 <tcp_receive+0x270>)
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	1ad3      	subs	r3, r2, r3
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	db0e      	blt.n	801ca6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801ca50:	4b7b      	ldr	r3, [pc, #492]	@ (801cc40 <tcp_receive+0x270>)
 801ca52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ca54:	429a      	cmp	r2, r3
 801ca56:	d125      	bne.n	801caa4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ca58:	4b7a      	ldr	r3, [pc, #488]	@ (801cc44 <tcp_receive+0x274>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	89db      	ldrh	r3, [r3, #14]
 801ca5e:	b29a      	uxth	r2, r3
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ca66:	429a      	cmp	r2, r3
 801ca68:	d91c      	bls.n	801caa4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ca6a:	4b76      	ldr	r3, [pc, #472]	@ (801cc44 <tcp_receive+0x274>)
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	89db      	ldrh	r3, [r3, #14]
 801ca70:	b29a      	uxth	r2, r3
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ca84:	429a      	cmp	r2, r3
 801ca86:	d205      	bcs.n	801ca94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801ca94:	4b69      	ldr	r3, [pc, #420]	@ (801cc3c <tcp_receive+0x26c>)
 801ca96:	681a      	ldr	r2, [r3, #0]
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801ca9c:	4b68      	ldr	r3, [pc, #416]	@ (801cc40 <tcp_receive+0x270>)
 801ca9e:	681a      	ldr	r2, [r3, #0]
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801caa4:	4b66      	ldr	r3, [pc, #408]	@ (801cc40 <tcp_receive+0x270>)
 801caa6:	681a      	ldr	r2, [r3, #0]
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801caac:	1ad3      	subs	r3, r2, r3
 801caae:	2b00      	cmp	r3, #0
 801cab0:	dc58      	bgt.n	801cb64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801cab2:	4b65      	ldr	r3, [pc, #404]	@ (801cc48 <tcp_receive+0x278>)
 801cab4:	881b      	ldrh	r3, [r3, #0]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d14b      	bne.n	801cb52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cabe:	687a      	ldr	r2, [r7, #4]
 801cac0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801cac4:	4413      	add	r3, r2
 801cac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cac8:	429a      	cmp	r2, r3
 801caca:	d142      	bne.n	801cb52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	db3d      	blt.n	801cb52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801cada:	4b59      	ldr	r3, [pc, #356]	@ (801cc40 <tcp_receive+0x270>)
 801cadc:	681b      	ldr	r3, [r3, #0]
 801cade:	429a      	cmp	r2, r3
 801cae0:	d137      	bne.n	801cb52 <tcp_receive+0x182>
              found_dupack = 1;
 801cae2:	2301      	movs	r3, #1
 801cae4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801caec:	2bff      	cmp	r3, #255	@ 0xff
 801caee:	d007      	beq.n	801cb00 <tcp_receive+0x130>
                ++pcb->dupacks;
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801caf6:	3301      	adds	r3, #1
 801caf8:	b2da      	uxtb	r2, r3
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801cb06:	2b03      	cmp	r3, #3
 801cb08:	d91b      	bls.n	801cb42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cb14:	4413      	add	r3, r2
 801cb16:	b29a      	uxth	r2, r3
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801cb1e:	429a      	cmp	r2, r3
 801cb20:	d30a      	bcc.n	801cb38 <tcp_receive+0x168>
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cb2c:	4413      	add	r3, r2
 801cb2e:	b29a      	uxth	r2, r3
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801cb36:	e004      	b.n	801cb42 <tcp_receive+0x172>
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801cb48:	2b02      	cmp	r3, #2
 801cb4a:	d902      	bls.n	801cb52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801cb4c:	6878      	ldr	r0, [r7, #4]
 801cb4e:	f002 fb41 	bl	801f1d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801cb52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	f040 8161 	bne.w	801ce1c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	2200      	movs	r2, #0
 801cb5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801cb62:	e15b      	b.n	801ce1c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cb64:	4b36      	ldr	r3, [pc, #216]	@ (801cc40 <tcp_receive+0x270>)
 801cb66:	681a      	ldr	r2, [r3, #0]
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cb6c:	1ad3      	subs	r3, r2, r3
 801cb6e:	3b01      	subs	r3, #1
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	f2c0 814e 	blt.w	801ce12 <tcp_receive+0x442>
 801cb76:	4b32      	ldr	r3, [pc, #200]	@ (801cc40 <tcp_receive+0x270>)
 801cb78:	681a      	ldr	r2, [r3, #0]
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cb7e:	1ad3      	subs	r3, r2, r3
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	f300 8146 	bgt.w	801ce12 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	8b5b      	ldrh	r3, [r3, #26]
 801cb8a:	f003 0304 	and.w	r3, r3, #4
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d010      	beq.n	801cbb4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	8b5b      	ldrh	r3, [r3, #26]
 801cb96:	f023 0304 	bic.w	r3, r3, #4
 801cb9a:	b29a      	uxth	r2, r3
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	2200      	movs	r2, #0
 801cbb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801cbc2:	10db      	asrs	r3, r3, #3
 801cbc4:	b21b      	sxth	r3, r3
 801cbc6:	b29a      	uxth	r2, r3
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801cbce:	b29b      	uxth	r3, r3
 801cbd0:	4413      	add	r3, r2
 801cbd2:	b29b      	uxth	r3, r3
 801cbd4:	b21a      	sxth	r2, r3
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801cbdc:	4b18      	ldr	r3, [pc, #96]	@ (801cc40 <tcp_receive+0x270>)
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	b29a      	uxth	r2, r3
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cbe6:	b29b      	uxth	r3, r3
 801cbe8:	1ad3      	subs	r3, r2, r3
 801cbea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	2200      	movs	r2, #0
 801cbf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801cbf4:	4b12      	ldr	r3, [pc, #72]	@ (801cc40 <tcp_receive+0x270>)
 801cbf6:	681a      	ldr	r2, [r3, #0]
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	7d1b      	ldrb	r3, [r3, #20]
 801cc00:	2b03      	cmp	r3, #3
 801cc02:	f240 8097 	bls.w	801cd34 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801cc12:	429a      	cmp	r2, r3
 801cc14:	d245      	bcs.n	801cca2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	8b5b      	ldrh	r3, [r3, #26]
 801cc1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d014      	beq.n	801cc4c <tcp_receive+0x27c>
 801cc22:	2301      	movs	r3, #1
 801cc24:	e013      	b.n	801cc4e <tcp_receive+0x27e>
 801cc26:	bf00      	nop
 801cc28:	08026764 	.word	0x08026764
 801cc2c:	08026a94 	.word	0x08026a94
 801cc30:	080267b0 	.word	0x080267b0
 801cc34:	08026ab0 	.word	0x08026ab0
 801cc38:	20018bf4 	.word	0x20018bf4
 801cc3c:	20018be8 	.word	0x20018be8
 801cc40:	20018bec 	.word	0x20018bec
 801cc44:	20018bd8 	.word	0x20018bd8
 801cc48:	20018bf2 	.word	0x20018bf2
 801cc4c:	2302      	movs	r3, #2
 801cc4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801cc52:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801cc56:	b29a      	uxth	r2, r3
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cc5c:	fb12 f303 	smulbb	r3, r2, r3
 801cc60:	b29b      	uxth	r3, r3
 801cc62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cc64:	4293      	cmp	r3, r2
 801cc66:	bf28      	it	cs
 801cc68:	4613      	movcs	r3, r2
 801cc6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801cc72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc74:	4413      	add	r3, r2
 801cc76:	b29a      	uxth	r2, r3
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801cc7e:	429a      	cmp	r2, r3
 801cc80:	d309      	bcc.n	801cc96 <tcp_receive+0x2c6>
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801cc88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc8a:	4413      	add	r3, r2
 801cc8c:	b29a      	uxth	r2, r3
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801cc94:	e04e      	b.n	801cd34 <tcp_receive+0x364>
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cc9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801cca0:	e048      	b.n	801cd34 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801cca8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ccaa:	4413      	add	r3, r2
 801ccac:	b29a      	uxth	r2, r3
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801ccb4:	429a      	cmp	r2, r3
 801ccb6:	d309      	bcc.n	801cccc <tcp_receive+0x2fc>
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801ccbe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ccc0:	4413      	add	r3, r2
 801ccc2:	b29a      	uxth	r2, r3
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801ccca:	e004      	b.n	801ccd6 <tcp_receive+0x306>
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ccd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801cce2:	429a      	cmp	r2, r3
 801cce4:	d326      	bcc.n	801cd34 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ccf2:	1ad3      	subs	r3, r2, r3
 801ccf4:	b29a      	uxth	r2, r3
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cd06:	4413      	add	r3, r2
 801cd08:	b29a      	uxth	r2, r3
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801cd10:	429a      	cmp	r2, r3
 801cd12:	d30a      	bcc.n	801cd2a <tcp_receive+0x35a>
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801cd1e:	4413      	add	r3, r2
 801cd20:	b29a      	uxth	r2, r3
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801cd28:	e004      	b.n	801cd34 <tcp_receive+0x364>
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cd30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cd3c:	4a98      	ldr	r2, [pc, #608]	@ (801cfa0 <tcp_receive+0x5d0>)
 801cd3e:	6878      	ldr	r0, [r7, #4]
 801cd40:	f7ff fdca 	bl	801c8d8 <tcp_free_acked_segments>
 801cd44:	4602      	mov	r2, r0
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cd52:	4a94      	ldr	r2, [pc, #592]	@ (801cfa4 <tcp_receive+0x5d4>)
 801cd54:	6878      	ldr	r0, [r7, #4]
 801cd56:	f7ff fdbf 	bl	801c8d8 <tcp_free_acked_segments>
 801cd5a:	4602      	mov	r2, r0
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d104      	bne.n	801cd72 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cd6e:	861a      	strh	r2, [r3, #48]	@ 0x30
 801cd70:	e002      	b.n	801cd78 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	2200      	movs	r2, #0
 801cd76:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d103      	bne.n	801cd8e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	2200      	movs	r2, #0
 801cd8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801cd94:	4b84      	ldr	r3, [pc, #528]	@ (801cfa8 <tcp_receive+0x5d8>)
 801cd96:	881b      	ldrh	r3, [r3, #0]
 801cd98:	4413      	add	r3, r2
 801cd9a:	b29a      	uxth	r2, r3
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	8b5b      	ldrh	r3, [r3, #26]
 801cda6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d035      	beq.n	801ce1a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d118      	bne.n	801cde8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d00c      	beq.n	801cdd8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cdc6:	68db      	ldr	r3, [r3, #12]
 801cdc8:	685b      	ldr	r3, [r3, #4]
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f7fa fcd9 	bl	8017782 <lwip_htonl>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	dc20      	bgt.n	801ce1a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	8b5b      	ldrh	r3, [r3, #26]
 801cddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801cde0:	b29a      	uxth	r2, r3
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cde6:	e018      	b.n	801ce1a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cdf0:	68db      	ldr	r3, [r3, #12]
 801cdf2:	685b      	ldr	r3, [r3, #4]
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	f7fa fcc4 	bl	8017782 <lwip_htonl>
 801cdfa:	4603      	mov	r3, r0
 801cdfc:	1ae3      	subs	r3, r4, r3
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	dc0b      	bgt.n	801ce1a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	8b5b      	ldrh	r3, [r3, #26]
 801ce06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ce0a:	b29a      	uxth	r2, r3
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ce10:	e003      	b.n	801ce1a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801ce12:	6878      	ldr	r0, [r7, #4]
 801ce14:	f002 fbca 	bl	801f5ac <tcp_send_empty_ack>
 801ce18:	e000      	b.n	801ce1c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ce1a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d05b      	beq.n	801cedc <tcp_receive+0x50c>
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ce28:	4b60      	ldr	r3, [pc, #384]	@ (801cfac <tcp_receive+0x5dc>)
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	1ad3      	subs	r3, r2, r3
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	da54      	bge.n	801cedc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801ce32:	4b5f      	ldr	r3, [pc, #380]	@ (801cfb0 <tcp_receive+0x5e0>)
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	b29a      	uxth	r2, r3
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce3c:	b29b      	uxth	r3, r3
 801ce3e:	1ad3      	subs	r3, r2, r3
 801ce40:	b29b      	uxth	r3, r3
 801ce42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801ce46:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801ce50:	10db      	asrs	r3, r3, #3
 801ce52:	b21b      	sxth	r3, r3
 801ce54:	b29b      	uxth	r3, r3
 801ce56:	1ad3      	subs	r3, r2, r3
 801ce58:	b29b      	uxth	r3, r3
 801ce5a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801ce64:	b29a      	uxth	r2, r3
 801ce66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801ce6a:	4413      	add	r3, r2
 801ce6c:	b29b      	uxth	r3, r3
 801ce6e:	b21a      	sxth	r2, r3
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801ce74:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	da05      	bge.n	801ce88 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801ce7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801ce80:	425b      	negs	r3, r3
 801ce82:	b29b      	uxth	r3, r3
 801ce84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801ce88:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801ce92:	109b      	asrs	r3, r3, #2
 801ce94:	b21b      	sxth	r3, r3
 801ce96:	b29b      	uxth	r3, r3
 801ce98:	1ad3      	subs	r3, r2, r3
 801ce9a:	b29b      	uxth	r3, r3
 801ce9c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801cea6:	b29a      	uxth	r2, r3
 801cea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801ceac:	4413      	add	r3, r2
 801ceae:	b29b      	uxth	r3, r3
 801ceb0:	b21a      	sxth	r2, r3
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801cebc:	10db      	asrs	r3, r3, #3
 801cebe:	b21b      	sxth	r3, r3
 801cec0:	b29a      	uxth	r2, r3
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801cec8:	b29b      	uxth	r3, r3
 801ceca:	4413      	add	r3, r2
 801cecc:	b29b      	uxth	r3, r3
 801cece:	b21a      	sxth	r2, r3
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	2200      	movs	r2, #0
 801ceda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cedc:	4b35      	ldr	r3, [pc, #212]	@ (801cfb4 <tcp_receive+0x5e4>)
 801cede:	881b      	ldrh	r3, [r3, #0]
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	f000 84df 	beq.w	801d8a4 <tcp_receive+0xed4>
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	7d1b      	ldrb	r3, [r3, #20]
 801ceea:	2b06      	cmp	r3, #6
 801ceec:	f200 84da 	bhi.w	801d8a4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cef4:	4b30      	ldr	r3, [pc, #192]	@ (801cfb8 <tcp_receive+0x5e8>)
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	1ad3      	subs	r3, r2, r3
 801cefa:	3b01      	subs	r3, #1
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	f2c0 808f 	blt.w	801d020 <tcp_receive+0x650>
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cf06:	4b2b      	ldr	r3, [pc, #172]	@ (801cfb4 <tcp_receive+0x5e4>)
 801cf08:	881b      	ldrh	r3, [r3, #0]
 801cf0a:	4619      	mov	r1, r3
 801cf0c:	4b2a      	ldr	r3, [pc, #168]	@ (801cfb8 <tcp_receive+0x5e8>)
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	440b      	add	r3, r1
 801cf12:	1ad3      	subs	r3, r2, r3
 801cf14:	3301      	adds	r3, #1
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	f300 8082 	bgt.w	801d020 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801cf1c:	4b27      	ldr	r3, [pc, #156]	@ (801cfbc <tcp_receive+0x5ec>)
 801cf1e:	685b      	ldr	r3, [r3, #4]
 801cf20:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cf26:	4b24      	ldr	r3, [pc, #144]	@ (801cfb8 <tcp_receive+0x5e8>)
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	1ad3      	subs	r3, r2, r3
 801cf2c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801cf2e:	4b23      	ldr	r3, [pc, #140]	@ (801cfbc <tcp_receive+0x5ec>)
 801cf30:	685b      	ldr	r3, [r3, #4]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d106      	bne.n	801cf44 <tcp_receive+0x574>
 801cf36:	4b22      	ldr	r3, [pc, #136]	@ (801cfc0 <tcp_receive+0x5f0>)
 801cf38:	f240 5294 	movw	r2, #1428	@ 0x594
 801cf3c:	4921      	ldr	r1, [pc, #132]	@ (801cfc4 <tcp_receive+0x5f4>)
 801cf3e:	4822      	ldr	r0, [pc, #136]	@ (801cfc8 <tcp_receive+0x5f8>)
 801cf40:	f006 fb92 	bl	8023668 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801cf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf46:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cf4a:	4293      	cmp	r3, r2
 801cf4c:	d906      	bls.n	801cf5c <tcp_receive+0x58c>
 801cf4e:	4b1c      	ldr	r3, [pc, #112]	@ (801cfc0 <tcp_receive+0x5f0>)
 801cf50:	f240 5295 	movw	r2, #1429	@ 0x595
 801cf54:	491d      	ldr	r1, [pc, #116]	@ (801cfcc <tcp_receive+0x5fc>)
 801cf56:	481c      	ldr	r0, [pc, #112]	@ (801cfc8 <tcp_receive+0x5f8>)
 801cf58:	f006 fb86 	bl	8023668 <iprintf>
      off = (u16_t)off32;
 801cf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801cf62:	4b16      	ldr	r3, [pc, #88]	@ (801cfbc <tcp_receive+0x5ec>)
 801cf64:	685b      	ldr	r3, [r3, #4]
 801cf66:	891b      	ldrh	r3, [r3, #8]
 801cf68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cf6c:	429a      	cmp	r2, r3
 801cf6e:	d906      	bls.n	801cf7e <tcp_receive+0x5ae>
 801cf70:	4b13      	ldr	r3, [pc, #76]	@ (801cfc0 <tcp_receive+0x5f0>)
 801cf72:	f240 5297 	movw	r2, #1431	@ 0x597
 801cf76:	4916      	ldr	r1, [pc, #88]	@ (801cfd0 <tcp_receive+0x600>)
 801cf78:	4813      	ldr	r0, [pc, #76]	@ (801cfc8 <tcp_receive+0x5f8>)
 801cf7a:	f006 fb75 	bl	8023668 <iprintf>
      inseg.len -= off;
 801cf7e:	4b0f      	ldr	r3, [pc, #60]	@ (801cfbc <tcp_receive+0x5ec>)
 801cf80:	891a      	ldrh	r2, [r3, #8]
 801cf82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cf86:	1ad3      	subs	r3, r2, r3
 801cf88:	b29a      	uxth	r2, r3
 801cf8a:	4b0c      	ldr	r3, [pc, #48]	@ (801cfbc <tcp_receive+0x5ec>)
 801cf8c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cf8e:	4b0b      	ldr	r3, [pc, #44]	@ (801cfbc <tcp_receive+0x5ec>)
 801cf90:	685b      	ldr	r3, [r3, #4]
 801cf92:	891a      	ldrh	r2, [r3, #8]
 801cf94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cf98:	1ad3      	subs	r3, r2, r3
 801cf9a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801cf9c:	e02a      	b.n	801cff4 <tcp_receive+0x624>
 801cf9e:	bf00      	nop
 801cfa0:	08026acc 	.word	0x08026acc
 801cfa4:	08026ad4 	.word	0x08026ad4
 801cfa8:	20018bf0 	.word	0x20018bf0
 801cfac:	20018bec 	.word	0x20018bec
 801cfb0:	20018bb0 	.word	0x20018bb0
 801cfb4:	20018bf2 	.word	0x20018bf2
 801cfb8:	20018be8 	.word	0x20018be8
 801cfbc:	20018bc8 	.word	0x20018bc8
 801cfc0:	08026764 	.word	0x08026764
 801cfc4:	08026adc 	.word	0x08026adc
 801cfc8:	080267b0 	.word	0x080267b0
 801cfcc:	08026aec 	.word	0x08026aec
 801cfd0:	08026afc 	.word	0x08026afc
        off -= p->len;
 801cfd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfd6:	895b      	ldrh	r3, [r3, #10]
 801cfd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cfdc:	1ad3      	subs	r3, r2, r3
 801cfde:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801cfe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfe4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801cfe6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801cfe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfea:	2200      	movs	r2, #0
 801cfec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801cfee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801cff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cff6:	895b      	ldrh	r3, [r3, #10]
 801cff8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cffc:	429a      	cmp	r2, r3
 801cffe:	d8e9      	bhi.n	801cfd4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801d000:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d004:	4619      	mov	r1, r3
 801d006:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d008:	f7fb ff22 	bl	8018e50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d010:	4a90      	ldr	r2, [pc, #576]	@ (801d254 <tcp_receive+0x884>)
 801d012:	6013      	str	r3, [r2, #0]
 801d014:	4b90      	ldr	r3, [pc, #576]	@ (801d258 <tcp_receive+0x888>)
 801d016:	68db      	ldr	r3, [r3, #12]
 801d018:	4a8e      	ldr	r2, [pc, #568]	@ (801d254 <tcp_receive+0x884>)
 801d01a:	6812      	ldr	r2, [r2, #0]
 801d01c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d01e:	e00d      	b.n	801d03c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801d020:	4b8c      	ldr	r3, [pc, #560]	@ (801d254 <tcp_receive+0x884>)
 801d022:	681a      	ldr	r2, [r3, #0]
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d028:	1ad3      	subs	r3, r2, r3
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	da06      	bge.n	801d03c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	8b5b      	ldrh	r3, [r3, #26]
 801d032:	f043 0302 	orr.w	r3, r3, #2
 801d036:	b29a      	uxth	r2, r3
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d03c:	4b85      	ldr	r3, [pc, #532]	@ (801d254 <tcp_receive+0x884>)
 801d03e:	681a      	ldr	r2, [r3, #0]
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d044:	1ad3      	subs	r3, r2, r3
 801d046:	2b00      	cmp	r3, #0
 801d048:	f2c0 8427 	blt.w	801d89a <tcp_receive+0xeca>
 801d04c:	4b81      	ldr	r3, [pc, #516]	@ (801d254 <tcp_receive+0x884>)
 801d04e:	681a      	ldr	r2, [r3, #0]
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d054:	6879      	ldr	r1, [r7, #4]
 801d056:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d058:	440b      	add	r3, r1
 801d05a:	1ad3      	subs	r3, r2, r3
 801d05c:	3301      	adds	r3, #1
 801d05e:	2b00      	cmp	r3, #0
 801d060:	f300 841b 	bgt.w	801d89a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d068:	4b7a      	ldr	r3, [pc, #488]	@ (801d254 <tcp_receive+0x884>)
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	429a      	cmp	r2, r3
 801d06e:	f040 8298 	bne.w	801d5a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801d072:	4b79      	ldr	r3, [pc, #484]	@ (801d258 <tcp_receive+0x888>)
 801d074:	891c      	ldrh	r4, [r3, #8]
 801d076:	4b78      	ldr	r3, [pc, #480]	@ (801d258 <tcp_receive+0x888>)
 801d078:	68db      	ldr	r3, [r3, #12]
 801d07a:	899b      	ldrh	r3, [r3, #12]
 801d07c:	b29b      	uxth	r3, r3
 801d07e:	4618      	mov	r0, r3
 801d080:	f7fa fb6a 	bl	8017758 <lwip_htons>
 801d084:	4603      	mov	r3, r0
 801d086:	b2db      	uxtb	r3, r3
 801d088:	f003 0303 	and.w	r3, r3, #3
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d001      	beq.n	801d094 <tcp_receive+0x6c4>
 801d090:	2301      	movs	r3, #1
 801d092:	e000      	b.n	801d096 <tcp_receive+0x6c6>
 801d094:	2300      	movs	r3, #0
 801d096:	4423      	add	r3, r4
 801d098:	b29a      	uxth	r2, r3
 801d09a:	4b70      	ldr	r3, [pc, #448]	@ (801d25c <tcp_receive+0x88c>)
 801d09c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801d0a2:	4b6e      	ldr	r3, [pc, #440]	@ (801d25c <tcp_receive+0x88c>)
 801d0a4:	881b      	ldrh	r3, [r3, #0]
 801d0a6:	429a      	cmp	r2, r3
 801d0a8:	d274      	bcs.n	801d194 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d0aa:	4b6b      	ldr	r3, [pc, #428]	@ (801d258 <tcp_receive+0x888>)
 801d0ac:	68db      	ldr	r3, [r3, #12]
 801d0ae:	899b      	ldrh	r3, [r3, #12]
 801d0b0:	b29b      	uxth	r3, r3
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7fa fb50 	bl	8017758 <lwip_htons>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	b2db      	uxtb	r3, r3
 801d0bc:	f003 0301 	and.w	r3, r3, #1
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d01e      	beq.n	801d102 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d0c4:	4b64      	ldr	r3, [pc, #400]	@ (801d258 <tcp_receive+0x888>)
 801d0c6:	68db      	ldr	r3, [r3, #12]
 801d0c8:	899b      	ldrh	r3, [r3, #12]
 801d0ca:	b29b      	uxth	r3, r3
 801d0cc:	b21b      	sxth	r3, r3
 801d0ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d0d2:	b21c      	sxth	r4, r3
 801d0d4:	4b60      	ldr	r3, [pc, #384]	@ (801d258 <tcp_receive+0x888>)
 801d0d6:	68db      	ldr	r3, [r3, #12]
 801d0d8:	899b      	ldrh	r3, [r3, #12]
 801d0da:	b29b      	uxth	r3, r3
 801d0dc:	4618      	mov	r0, r3
 801d0de:	f7fa fb3b 	bl	8017758 <lwip_htons>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	b2db      	uxtb	r3, r3
 801d0e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801d0ea:	b29b      	uxth	r3, r3
 801d0ec:	4618      	mov	r0, r3
 801d0ee:	f7fa fb33 	bl	8017758 <lwip_htons>
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	b21b      	sxth	r3, r3
 801d0f6:	4323      	orrs	r3, r4
 801d0f8:	b21a      	sxth	r2, r3
 801d0fa:	4b57      	ldr	r3, [pc, #348]	@ (801d258 <tcp_receive+0x888>)
 801d0fc:	68db      	ldr	r3, [r3, #12]
 801d0fe:	b292      	uxth	r2, r2
 801d100:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801d106:	4b54      	ldr	r3, [pc, #336]	@ (801d258 <tcp_receive+0x888>)
 801d108:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d10a:	4b53      	ldr	r3, [pc, #332]	@ (801d258 <tcp_receive+0x888>)
 801d10c:	68db      	ldr	r3, [r3, #12]
 801d10e:	899b      	ldrh	r3, [r3, #12]
 801d110:	b29b      	uxth	r3, r3
 801d112:	4618      	mov	r0, r3
 801d114:	f7fa fb20 	bl	8017758 <lwip_htons>
 801d118:	4603      	mov	r3, r0
 801d11a:	b2db      	uxtb	r3, r3
 801d11c:	f003 0302 	and.w	r3, r3, #2
 801d120:	2b00      	cmp	r3, #0
 801d122:	d005      	beq.n	801d130 <tcp_receive+0x760>
            inseg.len -= 1;
 801d124:	4b4c      	ldr	r3, [pc, #304]	@ (801d258 <tcp_receive+0x888>)
 801d126:	891b      	ldrh	r3, [r3, #8]
 801d128:	3b01      	subs	r3, #1
 801d12a:	b29a      	uxth	r2, r3
 801d12c:	4b4a      	ldr	r3, [pc, #296]	@ (801d258 <tcp_receive+0x888>)
 801d12e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801d130:	4b49      	ldr	r3, [pc, #292]	@ (801d258 <tcp_receive+0x888>)
 801d132:	685b      	ldr	r3, [r3, #4]
 801d134:	4a48      	ldr	r2, [pc, #288]	@ (801d258 <tcp_receive+0x888>)
 801d136:	8912      	ldrh	r2, [r2, #8]
 801d138:	4611      	mov	r1, r2
 801d13a:	4618      	mov	r0, r3
 801d13c:	f7fb fd88 	bl	8018c50 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d140:	4b45      	ldr	r3, [pc, #276]	@ (801d258 <tcp_receive+0x888>)
 801d142:	891c      	ldrh	r4, [r3, #8]
 801d144:	4b44      	ldr	r3, [pc, #272]	@ (801d258 <tcp_receive+0x888>)
 801d146:	68db      	ldr	r3, [r3, #12]
 801d148:	899b      	ldrh	r3, [r3, #12]
 801d14a:	b29b      	uxth	r3, r3
 801d14c:	4618      	mov	r0, r3
 801d14e:	f7fa fb03 	bl	8017758 <lwip_htons>
 801d152:	4603      	mov	r3, r0
 801d154:	b2db      	uxtb	r3, r3
 801d156:	f003 0303 	and.w	r3, r3, #3
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d001      	beq.n	801d162 <tcp_receive+0x792>
 801d15e:	2301      	movs	r3, #1
 801d160:	e000      	b.n	801d164 <tcp_receive+0x794>
 801d162:	2300      	movs	r3, #0
 801d164:	4423      	add	r3, r4
 801d166:	b29a      	uxth	r2, r3
 801d168:	4b3c      	ldr	r3, [pc, #240]	@ (801d25c <tcp_receive+0x88c>)
 801d16a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d16c:	4b3b      	ldr	r3, [pc, #236]	@ (801d25c <tcp_receive+0x88c>)
 801d16e:	881b      	ldrh	r3, [r3, #0]
 801d170:	461a      	mov	r2, r3
 801d172:	4b38      	ldr	r3, [pc, #224]	@ (801d254 <tcp_receive+0x884>)
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	441a      	add	r2, r3
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d17c:	6879      	ldr	r1, [r7, #4]
 801d17e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d180:	440b      	add	r3, r1
 801d182:	429a      	cmp	r2, r3
 801d184:	d006      	beq.n	801d194 <tcp_receive+0x7c4>
 801d186:	4b36      	ldr	r3, [pc, #216]	@ (801d260 <tcp_receive+0x890>)
 801d188:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801d18c:	4935      	ldr	r1, [pc, #212]	@ (801d264 <tcp_receive+0x894>)
 801d18e:	4836      	ldr	r0, [pc, #216]	@ (801d268 <tcp_receive+0x898>)
 801d190:	f006 fa6a 	bl	8023668 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d198:	2b00      	cmp	r3, #0
 801d19a:	f000 80e6 	beq.w	801d36a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d19e:	4b2e      	ldr	r3, [pc, #184]	@ (801d258 <tcp_receive+0x888>)
 801d1a0:	68db      	ldr	r3, [r3, #12]
 801d1a2:	899b      	ldrh	r3, [r3, #12]
 801d1a4:	b29b      	uxth	r3, r3
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f7fa fad6 	bl	8017758 <lwip_htons>
 801d1ac:	4603      	mov	r3, r0
 801d1ae:	b2db      	uxtb	r3, r3
 801d1b0:	f003 0301 	and.w	r3, r3, #1
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d010      	beq.n	801d1da <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801d1b8:	e00a      	b.n	801d1d0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d1be:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d1c4:	681a      	ldr	r2, [r3, #0]
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801d1ca:	68f8      	ldr	r0, [r7, #12]
 801d1cc:	f7fd fcbd 	bl	801ab4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d1f0      	bne.n	801d1ba <tcp_receive+0x7ea>
 801d1d8:	e0c7      	b.n	801d36a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801d1e0:	e051      	b.n	801d286 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d1e4:	68db      	ldr	r3, [r3, #12]
 801d1e6:	899b      	ldrh	r3, [r3, #12]
 801d1e8:	b29b      	uxth	r3, r3
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	f7fa fab4 	bl	8017758 <lwip_htons>
 801d1f0:	4603      	mov	r3, r0
 801d1f2:	b2db      	uxtb	r3, r3
 801d1f4:	f003 0301 	and.w	r3, r3, #1
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d03c      	beq.n	801d276 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d1fc:	4b16      	ldr	r3, [pc, #88]	@ (801d258 <tcp_receive+0x888>)
 801d1fe:	68db      	ldr	r3, [r3, #12]
 801d200:	899b      	ldrh	r3, [r3, #12]
 801d202:	b29b      	uxth	r3, r3
 801d204:	4618      	mov	r0, r3
 801d206:	f7fa faa7 	bl	8017758 <lwip_htons>
 801d20a:	4603      	mov	r3, r0
 801d20c:	b2db      	uxtb	r3, r3
 801d20e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d212:	2b00      	cmp	r3, #0
 801d214:	d12f      	bne.n	801d276 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d216:	4b10      	ldr	r3, [pc, #64]	@ (801d258 <tcp_receive+0x888>)
 801d218:	68db      	ldr	r3, [r3, #12]
 801d21a:	899b      	ldrh	r3, [r3, #12]
 801d21c:	b29c      	uxth	r4, r3
 801d21e:	2001      	movs	r0, #1
 801d220:	f7fa fa9a 	bl	8017758 <lwip_htons>
 801d224:	4603      	mov	r3, r0
 801d226:	461a      	mov	r2, r3
 801d228:	4b0b      	ldr	r3, [pc, #44]	@ (801d258 <tcp_receive+0x888>)
 801d22a:	68db      	ldr	r3, [r3, #12]
 801d22c:	4322      	orrs	r2, r4
 801d22e:	b292      	uxth	r2, r2
 801d230:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d232:	4b09      	ldr	r3, [pc, #36]	@ (801d258 <tcp_receive+0x888>)
 801d234:	891c      	ldrh	r4, [r3, #8]
 801d236:	4b08      	ldr	r3, [pc, #32]	@ (801d258 <tcp_receive+0x888>)
 801d238:	68db      	ldr	r3, [r3, #12]
 801d23a:	899b      	ldrh	r3, [r3, #12]
 801d23c:	b29b      	uxth	r3, r3
 801d23e:	4618      	mov	r0, r3
 801d240:	f7fa fa8a 	bl	8017758 <lwip_htons>
 801d244:	4603      	mov	r3, r0
 801d246:	b2db      	uxtb	r3, r3
 801d248:	f003 0303 	and.w	r3, r3, #3
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d00d      	beq.n	801d26c <tcp_receive+0x89c>
 801d250:	2301      	movs	r3, #1
 801d252:	e00c      	b.n	801d26e <tcp_receive+0x89e>
 801d254:	20018be8 	.word	0x20018be8
 801d258:	20018bc8 	.word	0x20018bc8
 801d25c:	20018bf2 	.word	0x20018bf2
 801d260:	08026764 	.word	0x08026764
 801d264:	08026b0c 	.word	0x08026b0c
 801d268:	080267b0 	.word	0x080267b0
 801d26c:	2300      	movs	r3, #0
 801d26e:	4423      	add	r3, r4
 801d270:	b29a      	uxth	r2, r3
 801d272:	4b98      	ldr	r3, [pc, #608]	@ (801d4d4 <tcp_receive+0xb04>)
 801d274:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801d276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d278:	613b      	str	r3, [r7, #16]
              next = next->next;
 801d27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801d280:	6938      	ldr	r0, [r7, #16]
 801d282:	f7fd fc62 	bl	801ab4a <tcp_seg_free>
            while (next &&
 801d286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d288:	2b00      	cmp	r3, #0
 801d28a:	d00e      	beq.n	801d2aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d28c:	4b91      	ldr	r3, [pc, #580]	@ (801d4d4 <tcp_receive+0xb04>)
 801d28e:	881b      	ldrh	r3, [r3, #0]
 801d290:	461a      	mov	r2, r3
 801d292:	4b91      	ldr	r3, [pc, #580]	@ (801d4d8 <tcp_receive+0xb08>)
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	441a      	add	r2, r3
 801d298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d29a:	68db      	ldr	r3, [r3, #12]
 801d29c:	685b      	ldr	r3, [r3, #4]
 801d29e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801d2a0:	8909      	ldrh	r1, [r1, #8]
 801d2a2:	440b      	add	r3, r1
 801d2a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	da9b      	bge.n	801d1e2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801d2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d059      	beq.n	801d364 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801d2b0:	4b88      	ldr	r3, [pc, #544]	@ (801d4d4 <tcp_receive+0xb04>)
 801d2b2:	881b      	ldrh	r3, [r3, #0]
 801d2b4:	461a      	mov	r2, r3
 801d2b6:	4b88      	ldr	r3, [pc, #544]	@ (801d4d8 <tcp_receive+0xb08>)
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	441a      	add	r2, r3
 801d2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d2be:	68db      	ldr	r3, [r3, #12]
 801d2c0:	685b      	ldr	r3, [r3, #4]
 801d2c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	dd4d      	ble.n	801d364 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d2ca:	68db      	ldr	r3, [r3, #12]
 801d2cc:	685b      	ldr	r3, [r3, #4]
 801d2ce:	b29a      	uxth	r2, r3
 801d2d0:	4b81      	ldr	r3, [pc, #516]	@ (801d4d8 <tcp_receive+0xb08>)
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	b29b      	uxth	r3, r3
 801d2d6:	1ad3      	subs	r3, r2, r3
 801d2d8:	b29a      	uxth	r2, r3
 801d2da:	4b80      	ldr	r3, [pc, #512]	@ (801d4dc <tcp_receive+0xb0c>)
 801d2dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d2de:	4b7f      	ldr	r3, [pc, #508]	@ (801d4dc <tcp_receive+0xb0c>)
 801d2e0:	68db      	ldr	r3, [r3, #12]
 801d2e2:	899b      	ldrh	r3, [r3, #12]
 801d2e4:	b29b      	uxth	r3, r3
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f7fa fa36 	bl	8017758 <lwip_htons>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	b2db      	uxtb	r3, r3
 801d2f0:	f003 0302 	and.w	r3, r3, #2
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d005      	beq.n	801d304 <tcp_receive+0x934>
                inseg.len -= 1;
 801d2f8:	4b78      	ldr	r3, [pc, #480]	@ (801d4dc <tcp_receive+0xb0c>)
 801d2fa:	891b      	ldrh	r3, [r3, #8]
 801d2fc:	3b01      	subs	r3, #1
 801d2fe:	b29a      	uxth	r2, r3
 801d300:	4b76      	ldr	r3, [pc, #472]	@ (801d4dc <tcp_receive+0xb0c>)
 801d302:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801d304:	4b75      	ldr	r3, [pc, #468]	@ (801d4dc <tcp_receive+0xb0c>)
 801d306:	685b      	ldr	r3, [r3, #4]
 801d308:	4a74      	ldr	r2, [pc, #464]	@ (801d4dc <tcp_receive+0xb0c>)
 801d30a:	8912      	ldrh	r2, [r2, #8]
 801d30c:	4611      	mov	r1, r2
 801d30e:	4618      	mov	r0, r3
 801d310:	f7fb fc9e 	bl	8018c50 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d314:	4b71      	ldr	r3, [pc, #452]	@ (801d4dc <tcp_receive+0xb0c>)
 801d316:	891c      	ldrh	r4, [r3, #8]
 801d318:	4b70      	ldr	r3, [pc, #448]	@ (801d4dc <tcp_receive+0xb0c>)
 801d31a:	68db      	ldr	r3, [r3, #12]
 801d31c:	899b      	ldrh	r3, [r3, #12]
 801d31e:	b29b      	uxth	r3, r3
 801d320:	4618      	mov	r0, r3
 801d322:	f7fa fa19 	bl	8017758 <lwip_htons>
 801d326:	4603      	mov	r3, r0
 801d328:	b2db      	uxtb	r3, r3
 801d32a:	f003 0303 	and.w	r3, r3, #3
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d001      	beq.n	801d336 <tcp_receive+0x966>
 801d332:	2301      	movs	r3, #1
 801d334:	e000      	b.n	801d338 <tcp_receive+0x968>
 801d336:	2300      	movs	r3, #0
 801d338:	4423      	add	r3, r4
 801d33a:	b29a      	uxth	r2, r3
 801d33c:	4b65      	ldr	r3, [pc, #404]	@ (801d4d4 <tcp_receive+0xb04>)
 801d33e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d340:	4b64      	ldr	r3, [pc, #400]	@ (801d4d4 <tcp_receive+0xb04>)
 801d342:	881b      	ldrh	r3, [r3, #0]
 801d344:	461a      	mov	r2, r3
 801d346:	4b64      	ldr	r3, [pc, #400]	@ (801d4d8 <tcp_receive+0xb08>)
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	441a      	add	r2, r3
 801d34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d34e:	68db      	ldr	r3, [r3, #12]
 801d350:	685b      	ldr	r3, [r3, #4]
 801d352:	429a      	cmp	r2, r3
 801d354:	d006      	beq.n	801d364 <tcp_receive+0x994>
 801d356:	4b62      	ldr	r3, [pc, #392]	@ (801d4e0 <tcp_receive+0xb10>)
 801d358:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801d35c:	4961      	ldr	r1, [pc, #388]	@ (801d4e4 <tcp_receive+0xb14>)
 801d35e:	4862      	ldr	r0, [pc, #392]	@ (801d4e8 <tcp_receive+0xb18>)
 801d360:	f006 f982 	bl	8023668 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d368:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801d36a:	4b5a      	ldr	r3, [pc, #360]	@ (801d4d4 <tcp_receive+0xb04>)
 801d36c:	881b      	ldrh	r3, [r3, #0]
 801d36e:	461a      	mov	r2, r3
 801d370:	4b59      	ldr	r3, [pc, #356]	@ (801d4d8 <tcp_receive+0xb08>)
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	441a      	add	r2, r3
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801d37e:	4b55      	ldr	r3, [pc, #340]	@ (801d4d4 <tcp_receive+0xb04>)
 801d380:	881b      	ldrh	r3, [r3, #0]
 801d382:	429a      	cmp	r2, r3
 801d384:	d206      	bcs.n	801d394 <tcp_receive+0x9c4>
 801d386:	4b56      	ldr	r3, [pc, #344]	@ (801d4e0 <tcp_receive+0xb10>)
 801d388:	f240 6207 	movw	r2, #1543	@ 0x607
 801d38c:	4957      	ldr	r1, [pc, #348]	@ (801d4ec <tcp_receive+0xb1c>)
 801d38e:	4856      	ldr	r0, [pc, #344]	@ (801d4e8 <tcp_receive+0xb18>)
 801d390:	f006 f96a 	bl	8023668 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801d398:	4b4e      	ldr	r3, [pc, #312]	@ (801d4d4 <tcp_receive+0xb04>)
 801d39a:	881b      	ldrh	r3, [r3, #0]
 801d39c:	1ad3      	subs	r3, r2, r3
 801d39e:	b29a      	uxth	r2, r3
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801d3a4:	6878      	ldr	r0, [r7, #4]
 801d3a6:	f7fc fd8d 	bl	8019ec4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801d3aa:	4b4c      	ldr	r3, [pc, #304]	@ (801d4dc <tcp_receive+0xb0c>)
 801d3ac:	685b      	ldr	r3, [r3, #4]
 801d3ae:	891b      	ldrh	r3, [r3, #8]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d006      	beq.n	801d3c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801d3b4:	4b49      	ldr	r3, [pc, #292]	@ (801d4dc <tcp_receive+0xb0c>)
 801d3b6:	685b      	ldr	r3, [r3, #4]
 801d3b8:	4a4d      	ldr	r2, [pc, #308]	@ (801d4f0 <tcp_receive+0xb20>)
 801d3ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801d3bc:	4b47      	ldr	r3, [pc, #284]	@ (801d4dc <tcp_receive+0xb0c>)
 801d3be:	2200      	movs	r2, #0
 801d3c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d3c2:	4b46      	ldr	r3, [pc, #280]	@ (801d4dc <tcp_receive+0xb0c>)
 801d3c4:	68db      	ldr	r3, [r3, #12]
 801d3c6:	899b      	ldrh	r3, [r3, #12]
 801d3c8:	b29b      	uxth	r3, r3
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f7fa f9c4 	bl	8017758 <lwip_htons>
 801d3d0:	4603      	mov	r3, r0
 801d3d2:	b2db      	uxtb	r3, r3
 801d3d4:	f003 0301 	and.w	r3, r3, #1
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	f000 80b8 	beq.w	801d54e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801d3de:	4b45      	ldr	r3, [pc, #276]	@ (801d4f4 <tcp_receive+0xb24>)
 801d3e0:	781b      	ldrb	r3, [r3, #0]
 801d3e2:	f043 0320 	orr.w	r3, r3, #32
 801d3e6:	b2da      	uxtb	r2, r3
 801d3e8:	4b42      	ldr	r3, [pc, #264]	@ (801d4f4 <tcp_receive+0xb24>)
 801d3ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801d3ec:	e0af      	b.n	801d54e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3f8:	68db      	ldr	r3, [r3, #12]
 801d3fa:	685b      	ldr	r3, [r3, #4]
 801d3fc:	4a36      	ldr	r2, [pc, #216]	@ (801d4d8 <tcp_receive+0xb08>)
 801d3fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d400:	68bb      	ldr	r3, [r7, #8]
 801d402:	891b      	ldrh	r3, [r3, #8]
 801d404:	461c      	mov	r4, r3
 801d406:	68bb      	ldr	r3, [r7, #8]
 801d408:	68db      	ldr	r3, [r3, #12]
 801d40a:	899b      	ldrh	r3, [r3, #12]
 801d40c:	b29b      	uxth	r3, r3
 801d40e:	4618      	mov	r0, r3
 801d410:	f7fa f9a2 	bl	8017758 <lwip_htons>
 801d414:	4603      	mov	r3, r0
 801d416:	b2db      	uxtb	r3, r3
 801d418:	f003 0303 	and.w	r3, r3, #3
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d001      	beq.n	801d424 <tcp_receive+0xa54>
 801d420:	2301      	movs	r3, #1
 801d422:	e000      	b.n	801d426 <tcp_receive+0xa56>
 801d424:	2300      	movs	r3, #0
 801d426:	191a      	adds	r2, r3, r4
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d42c:	441a      	add	r2, r3
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d436:	461c      	mov	r4, r3
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	891b      	ldrh	r3, [r3, #8]
 801d43c:	461d      	mov	r5, r3
 801d43e:	68bb      	ldr	r3, [r7, #8]
 801d440:	68db      	ldr	r3, [r3, #12]
 801d442:	899b      	ldrh	r3, [r3, #12]
 801d444:	b29b      	uxth	r3, r3
 801d446:	4618      	mov	r0, r3
 801d448:	f7fa f986 	bl	8017758 <lwip_htons>
 801d44c:	4603      	mov	r3, r0
 801d44e:	b2db      	uxtb	r3, r3
 801d450:	f003 0303 	and.w	r3, r3, #3
 801d454:	2b00      	cmp	r3, #0
 801d456:	d001      	beq.n	801d45c <tcp_receive+0xa8c>
 801d458:	2301      	movs	r3, #1
 801d45a:	e000      	b.n	801d45e <tcp_receive+0xa8e>
 801d45c:	2300      	movs	r3, #0
 801d45e:	442b      	add	r3, r5
 801d460:	429c      	cmp	r4, r3
 801d462:	d206      	bcs.n	801d472 <tcp_receive+0xaa2>
 801d464:	4b1e      	ldr	r3, [pc, #120]	@ (801d4e0 <tcp_receive+0xb10>)
 801d466:	f240 622b 	movw	r2, #1579	@ 0x62b
 801d46a:	4923      	ldr	r1, [pc, #140]	@ (801d4f8 <tcp_receive+0xb28>)
 801d46c:	481e      	ldr	r0, [pc, #120]	@ (801d4e8 <tcp_receive+0xb18>)
 801d46e:	f006 f8fb 	bl	8023668 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d472:	68bb      	ldr	r3, [r7, #8]
 801d474:	891b      	ldrh	r3, [r3, #8]
 801d476:	461c      	mov	r4, r3
 801d478:	68bb      	ldr	r3, [r7, #8]
 801d47a:	68db      	ldr	r3, [r3, #12]
 801d47c:	899b      	ldrh	r3, [r3, #12]
 801d47e:	b29b      	uxth	r3, r3
 801d480:	4618      	mov	r0, r3
 801d482:	f7fa f969 	bl	8017758 <lwip_htons>
 801d486:	4603      	mov	r3, r0
 801d488:	b2db      	uxtb	r3, r3
 801d48a:	f003 0303 	and.w	r3, r3, #3
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d001      	beq.n	801d496 <tcp_receive+0xac6>
 801d492:	2301      	movs	r3, #1
 801d494:	e000      	b.n	801d498 <tcp_receive+0xac8>
 801d496:	2300      	movs	r3, #0
 801d498:	1919      	adds	r1, r3, r4
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801d49e:	b28b      	uxth	r3, r1
 801d4a0:	1ad3      	subs	r3, r2, r3
 801d4a2:	b29a      	uxth	r2, r3
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801d4a8:	6878      	ldr	r0, [r7, #4]
 801d4aa:	f7fc fd0b 	bl	8019ec4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801d4ae:	68bb      	ldr	r3, [r7, #8]
 801d4b0:	685b      	ldr	r3, [r3, #4]
 801d4b2:	891b      	ldrh	r3, [r3, #8]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d028      	beq.n	801d50a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801d4b8:	4b0d      	ldr	r3, [pc, #52]	@ (801d4f0 <tcp_receive+0xb20>)
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d01d      	beq.n	801d4fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801d4c0:	4b0b      	ldr	r3, [pc, #44]	@ (801d4f0 <tcp_receive+0xb20>)
 801d4c2:	681a      	ldr	r2, [r3, #0]
 801d4c4:	68bb      	ldr	r3, [r7, #8]
 801d4c6:	685b      	ldr	r3, [r3, #4]
 801d4c8:	4619      	mov	r1, r3
 801d4ca:	4610      	mov	r0, r2
 801d4cc:	f7fb fe46 	bl	801915c <pbuf_cat>
 801d4d0:	e018      	b.n	801d504 <tcp_receive+0xb34>
 801d4d2:	bf00      	nop
 801d4d4:	20018bf2 	.word	0x20018bf2
 801d4d8:	20018be8 	.word	0x20018be8
 801d4dc:	20018bc8 	.word	0x20018bc8
 801d4e0:	08026764 	.word	0x08026764
 801d4e4:	08026b44 	.word	0x08026b44
 801d4e8:	080267b0 	.word	0x080267b0
 801d4ec:	08026b80 	.word	0x08026b80
 801d4f0:	20018bf8 	.word	0x20018bf8
 801d4f4:	20018bf5 	.word	0x20018bf5
 801d4f8:	08026ba0 	.word	0x08026ba0
            } else {
              recv_data = cseg->p;
 801d4fc:	68bb      	ldr	r3, [r7, #8]
 801d4fe:	685b      	ldr	r3, [r3, #4]
 801d500:	4a70      	ldr	r2, [pc, #448]	@ (801d6c4 <tcp_receive+0xcf4>)
 801d502:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801d504:	68bb      	ldr	r3, [r7, #8]
 801d506:	2200      	movs	r2, #0
 801d508:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	68db      	ldr	r3, [r3, #12]
 801d50e:	899b      	ldrh	r3, [r3, #12]
 801d510:	b29b      	uxth	r3, r3
 801d512:	4618      	mov	r0, r3
 801d514:	f7fa f920 	bl	8017758 <lwip_htons>
 801d518:	4603      	mov	r3, r0
 801d51a:	b2db      	uxtb	r3, r3
 801d51c:	f003 0301 	and.w	r3, r3, #1
 801d520:	2b00      	cmp	r3, #0
 801d522:	d00d      	beq.n	801d540 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801d524:	4b68      	ldr	r3, [pc, #416]	@ (801d6c8 <tcp_receive+0xcf8>)
 801d526:	781b      	ldrb	r3, [r3, #0]
 801d528:	f043 0320 	orr.w	r3, r3, #32
 801d52c:	b2da      	uxtb	r2, r3
 801d52e:	4b66      	ldr	r3, [pc, #408]	@ (801d6c8 <tcp_receive+0xcf8>)
 801d530:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	7d1b      	ldrb	r3, [r3, #20]
 801d536:	2b04      	cmp	r3, #4
 801d538:	d102      	bne.n	801d540 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	2207      	movs	r2, #7
 801d53e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801d540:	68bb      	ldr	r3, [r7, #8]
 801d542:	681a      	ldr	r2, [r3, #0]
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801d548:	68b8      	ldr	r0, [r7, #8]
 801d54a:	f7fd fafe 	bl	801ab4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d552:	2b00      	cmp	r3, #0
 801d554:	d008      	beq.n	801d568 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d55a:	68db      	ldr	r3, [r3, #12]
 801d55c:	685a      	ldr	r2, [r3, #4]
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801d562:	429a      	cmp	r2, r3
 801d564:	f43f af43 	beq.w	801d3ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	8b5b      	ldrh	r3, [r3, #26]
 801d56c:	f003 0301 	and.w	r3, r3, #1
 801d570:	2b00      	cmp	r3, #0
 801d572:	d00e      	beq.n	801d592 <tcp_receive+0xbc2>
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	8b5b      	ldrh	r3, [r3, #26]
 801d578:	f023 0301 	bic.w	r3, r3, #1
 801d57c:	b29a      	uxth	r2, r3
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	835a      	strh	r2, [r3, #26]
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	8b5b      	ldrh	r3, [r3, #26]
 801d586:	f043 0302 	orr.w	r3, r3, #2
 801d58a:	b29a      	uxth	r2, r3
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d590:	e187      	b.n	801d8a2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	8b5b      	ldrh	r3, [r3, #26]
 801d596:	f043 0301 	orr.w	r3, r3, #1
 801d59a:	b29a      	uxth	r2, r3
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d5a0:	e17f      	b.n	801d8a2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d106      	bne.n	801d5b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d5aa:	4848      	ldr	r0, [pc, #288]	@ (801d6cc <tcp_receive+0xcfc>)
 801d5ac:	f7fd fae6 	bl	801ab7c <tcp_seg_copy>
 801d5b0:	4602      	mov	r2, r0
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	675a      	str	r2, [r3, #116]	@ 0x74
 801d5b6:	e16c      	b.n	801d892 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d5c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d5c2:	e156      	b.n	801d872 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801d5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5c6:	68db      	ldr	r3, [r3, #12]
 801d5c8:	685a      	ldr	r2, [r3, #4]
 801d5ca:	4b41      	ldr	r3, [pc, #260]	@ (801d6d0 <tcp_receive+0xd00>)
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	429a      	cmp	r2, r3
 801d5d0:	d11d      	bne.n	801d60e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d5d2:	4b3e      	ldr	r3, [pc, #248]	@ (801d6cc <tcp_receive+0xcfc>)
 801d5d4:	891a      	ldrh	r2, [r3, #8]
 801d5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5d8:	891b      	ldrh	r3, [r3, #8]
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	f240 814e 	bls.w	801d87c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d5e0:	483a      	ldr	r0, [pc, #232]	@ (801d6cc <tcp_receive+0xcfc>)
 801d5e2:	f7fd facb 	bl	801ab7c <tcp_seg_copy>
 801d5e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d5e8:	697b      	ldr	r3, [r7, #20]
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	f000 8148 	beq.w	801d880 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801d5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d003      	beq.n	801d5fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 801d5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d5f8:	697a      	ldr	r2, [r7, #20]
 801d5fa:	601a      	str	r2, [r3, #0]
 801d5fc:	e002      	b.n	801d604 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	697a      	ldr	r2, [r7, #20]
 801d602:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d604:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d606:	6978      	ldr	r0, [r7, #20]
 801d608:	f7ff f8de 	bl	801c7c8 <tcp_oos_insert_segment>
                }
                break;
 801d60c:	e138      	b.n	801d880 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d610:	2b00      	cmp	r3, #0
 801d612:	d117      	bne.n	801d644 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d614:	4b2e      	ldr	r3, [pc, #184]	@ (801d6d0 <tcp_receive+0xd00>)
 801d616:	681a      	ldr	r2, [r3, #0]
 801d618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d61a:	68db      	ldr	r3, [r3, #12]
 801d61c:	685b      	ldr	r3, [r3, #4]
 801d61e:	1ad3      	subs	r3, r2, r3
 801d620:	2b00      	cmp	r3, #0
 801d622:	da57      	bge.n	801d6d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d624:	4829      	ldr	r0, [pc, #164]	@ (801d6cc <tcp_receive+0xcfc>)
 801d626:	f7fd faa9 	bl	801ab7c <tcp_seg_copy>
 801d62a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d62c:	69bb      	ldr	r3, [r7, #24]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	f000 8128 	beq.w	801d884 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	69ba      	ldr	r2, [r7, #24]
 801d638:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d63a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d63c:	69b8      	ldr	r0, [r7, #24]
 801d63e:	f7ff f8c3 	bl	801c7c8 <tcp_oos_insert_segment>
                  }
                  break;
 801d642:	e11f      	b.n	801d884 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d644:	4b22      	ldr	r3, [pc, #136]	@ (801d6d0 <tcp_receive+0xd00>)
 801d646:	681a      	ldr	r2, [r3, #0]
 801d648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d64a:	68db      	ldr	r3, [r3, #12]
 801d64c:	685b      	ldr	r3, [r3, #4]
 801d64e:	1ad3      	subs	r3, r2, r3
 801d650:	3b01      	subs	r3, #1
 801d652:	2b00      	cmp	r3, #0
 801d654:	db3e      	blt.n	801d6d4 <tcp_receive+0xd04>
 801d656:	4b1e      	ldr	r3, [pc, #120]	@ (801d6d0 <tcp_receive+0xd00>)
 801d658:	681a      	ldr	r2, [r3, #0]
 801d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d65c:	68db      	ldr	r3, [r3, #12]
 801d65e:	685b      	ldr	r3, [r3, #4]
 801d660:	1ad3      	subs	r3, r2, r3
 801d662:	3301      	adds	r3, #1
 801d664:	2b00      	cmp	r3, #0
 801d666:	dc35      	bgt.n	801d6d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d668:	4818      	ldr	r0, [pc, #96]	@ (801d6cc <tcp_receive+0xcfc>)
 801d66a:	f7fd fa87 	bl	801ab7c <tcp_seg_copy>
 801d66e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801d670:	69fb      	ldr	r3, [r7, #28]
 801d672:	2b00      	cmp	r3, #0
 801d674:	f000 8108 	beq.w	801d888 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d67a:	68db      	ldr	r3, [r3, #12]
 801d67c:	685b      	ldr	r3, [r3, #4]
 801d67e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d680:	8912      	ldrh	r2, [r2, #8]
 801d682:	441a      	add	r2, r3
 801d684:	4b12      	ldr	r3, [pc, #72]	@ (801d6d0 <tcp_receive+0xd00>)
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	1ad3      	subs	r3, r2, r3
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	dd12      	ble.n	801d6b4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d68e:	4b10      	ldr	r3, [pc, #64]	@ (801d6d0 <tcp_receive+0xd00>)
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	b29a      	uxth	r2, r3
 801d694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d696:	68db      	ldr	r3, [r3, #12]
 801d698:	685b      	ldr	r3, [r3, #4]
 801d69a:	b29b      	uxth	r3, r3
 801d69c:	1ad3      	subs	r3, r2, r3
 801d69e:	b29a      	uxth	r2, r3
 801d6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6a6:	685a      	ldr	r2, [r3, #4]
 801d6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6aa:	891b      	ldrh	r3, [r3, #8]
 801d6ac:	4619      	mov	r1, r3
 801d6ae:	4610      	mov	r0, r2
 801d6b0:	f7fb face 	bl	8018c50 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801d6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6b6:	69fa      	ldr	r2, [r7, #28]
 801d6b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801d6ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d6bc:	69f8      	ldr	r0, [r7, #28]
 801d6be:	f7ff f883 	bl	801c7c8 <tcp_oos_insert_segment>
                  }
                  break;
 801d6c2:	e0e1      	b.n	801d888 <tcp_receive+0xeb8>
 801d6c4:	20018bf8 	.word	0x20018bf8
 801d6c8:	20018bf5 	.word	0x20018bf5
 801d6cc:	20018bc8 	.word	0x20018bc8
 801d6d0:	20018be8 	.word	0x20018be8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801d6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6d6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	f040 80c5 	bne.w	801d86c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d6e2:	4b7f      	ldr	r3, [pc, #508]	@ (801d8e0 <tcp_receive+0xf10>)
 801d6e4:	681a      	ldr	r2, [r3, #0]
 801d6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6e8:	68db      	ldr	r3, [r3, #12]
 801d6ea:	685b      	ldr	r3, [r3, #4]
 801d6ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	f340 80bc 	ble.w	801d86c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6f6:	68db      	ldr	r3, [r3, #12]
 801d6f8:	899b      	ldrh	r3, [r3, #12]
 801d6fa:	b29b      	uxth	r3, r3
 801d6fc:	4618      	mov	r0, r3
 801d6fe:	f7fa f82b 	bl	8017758 <lwip_htons>
 801d702:	4603      	mov	r3, r0
 801d704:	b2db      	uxtb	r3, r3
 801d706:	f003 0301 	and.w	r3, r3, #1
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	f040 80be 	bne.w	801d88c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d710:	4874      	ldr	r0, [pc, #464]	@ (801d8e4 <tcp_receive+0xf14>)
 801d712:	f7fd fa33 	bl	801ab7c <tcp_seg_copy>
 801d716:	4602      	mov	r2, r0
 801d718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d71a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	2b00      	cmp	r3, #0
 801d722:	f000 80b5 	beq.w	801d890 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d728:	68db      	ldr	r3, [r3, #12]
 801d72a:	685b      	ldr	r3, [r3, #4]
 801d72c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d72e:	8912      	ldrh	r2, [r2, #8]
 801d730:	441a      	add	r2, r3
 801d732:	4b6b      	ldr	r3, [pc, #428]	@ (801d8e0 <tcp_receive+0xf10>)
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	1ad3      	subs	r3, r2, r3
 801d738:	2b00      	cmp	r3, #0
 801d73a:	dd12      	ble.n	801d762 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d73c:	4b68      	ldr	r3, [pc, #416]	@ (801d8e0 <tcp_receive+0xf10>)
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	b29a      	uxth	r2, r3
 801d742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d744:	68db      	ldr	r3, [r3, #12]
 801d746:	685b      	ldr	r3, [r3, #4]
 801d748:	b29b      	uxth	r3, r3
 801d74a:	1ad3      	subs	r3, r2, r3
 801d74c:	b29a      	uxth	r2, r3
 801d74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d750:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d754:	685a      	ldr	r2, [r3, #4]
 801d756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d758:	891b      	ldrh	r3, [r3, #8]
 801d75a:	4619      	mov	r1, r3
 801d75c:	4610      	mov	r0, r2
 801d75e:	f7fb fa77 	bl	8018c50 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d762:	4b61      	ldr	r3, [pc, #388]	@ (801d8e8 <tcp_receive+0xf18>)
 801d764:	881b      	ldrh	r3, [r3, #0]
 801d766:	461a      	mov	r2, r3
 801d768:	4b5d      	ldr	r3, [pc, #372]	@ (801d8e0 <tcp_receive+0xf10>)
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	441a      	add	r2, r3
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d772:	6879      	ldr	r1, [r7, #4]
 801d774:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d776:	440b      	add	r3, r1
 801d778:	1ad3      	subs	r3, r2, r3
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	f340 8088 	ble.w	801d890 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	68db      	ldr	r3, [r3, #12]
 801d786:	899b      	ldrh	r3, [r3, #12]
 801d788:	b29b      	uxth	r3, r3
 801d78a:	4618      	mov	r0, r3
 801d78c:	f7f9 ffe4 	bl	8017758 <lwip_htons>
 801d790:	4603      	mov	r3, r0
 801d792:	b2db      	uxtb	r3, r3
 801d794:	f003 0301 	and.w	r3, r3, #1
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d021      	beq.n	801d7e0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	68db      	ldr	r3, [r3, #12]
 801d7a2:	899b      	ldrh	r3, [r3, #12]
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	b21b      	sxth	r3, r3
 801d7a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d7ac:	b21c      	sxth	r4, r3
 801d7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	68db      	ldr	r3, [r3, #12]
 801d7b4:	899b      	ldrh	r3, [r3, #12]
 801d7b6:	b29b      	uxth	r3, r3
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	f7f9 ffcd 	bl	8017758 <lwip_htons>
 801d7be:	4603      	mov	r3, r0
 801d7c0:	b2db      	uxtb	r3, r3
 801d7c2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801d7c6:	b29b      	uxth	r3, r3
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f7f9 ffc5 	bl	8017758 <lwip_htons>
 801d7ce:	4603      	mov	r3, r0
 801d7d0:	b21b      	sxth	r3, r3
 801d7d2:	4323      	orrs	r3, r4
 801d7d4:	b21a      	sxth	r2, r3
 801d7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	68db      	ldr	r3, [r3, #12]
 801d7dc:	b292      	uxth	r2, r2
 801d7de:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d7e4:	b29a      	uxth	r2, r3
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d7ea:	4413      	add	r3, r2
 801d7ec:	b299      	uxth	r1, r3
 801d7ee:	4b3c      	ldr	r3, [pc, #240]	@ (801d8e0 <tcp_receive+0xf10>)
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	b29a      	uxth	r2, r3
 801d7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	1a8a      	subs	r2, r1, r2
 801d7fa:	b292      	uxth	r2, r2
 801d7fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	685a      	ldr	r2, [r3, #4]
 801d804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	891b      	ldrh	r3, [r3, #8]
 801d80a:	4619      	mov	r1, r3
 801d80c:	4610      	mov	r0, r2
 801d80e:	f7fb fa1f 	bl	8018c50 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	891c      	ldrh	r4, [r3, #8]
 801d818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	68db      	ldr	r3, [r3, #12]
 801d81e:	899b      	ldrh	r3, [r3, #12]
 801d820:	b29b      	uxth	r3, r3
 801d822:	4618      	mov	r0, r3
 801d824:	f7f9 ff98 	bl	8017758 <lwip_htons>
 801d828:	4603      	mov	r3, r0
 801d82a:	b2db      	uxtb	r3, r3
 801d82c:	f003 0303 	and.w	r3, r3, #3
 801d830:	2b00      	cmp	r3, #0
 801d832:	d001      	beq.n	801d838 <tcp_receive+0xe68>
 801d834:	2301      	movs	r3, #1
 801d836:	e000      	b.n	801d83a <tcp_receive+0xe6a>
 801d838:	2300      	movs	r3, #0
 801d83a:	4423      	add	r3, r4
 801d83c:	b29a      	uxth	r2, r3
 801d83e:	4b2a      	ldr	r3, [pc, #168]	@ (801d8e8 <tcp_receive+0xf18>)
 801d840:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d842:	4b29      	ldr	r3, [pc, #164]	@ (801d8e8 <tcp_receive+0xf18>)
 801d844:	881b      	ldrh	r3, [r3, #0]
 801d846:	461a      	mov	r2, r3
 801d848:	4b25      	ldr	r3, [pc, #148]	@ (801d8e0 <tcp_receive+0xf10>)
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	441a      	add	r2, r3
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d852:	6879      	ldr	r1, [r7, #4]
 801d854:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d856:	440b      	add	r3, r1
 801d858:	429a      	cmp	r2, r3
 801d85a:	d019      	beq.n	801d890 <tcp_receive+0xec0>
 801d85c:	4b23      	ldr	r3, [pc, #140]	@ (801d8ec <tcp_receive+0xf1c>)
 801d85e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801d862:	4923      	ldr	r1, [pc, #140]	@ (801d8f0 <tcp_receive+0xf20>)
 801d864:	4823      	ldr	r0, [pc, #140]	@ (801d8f4 <tcp_receive+0xf24>)
 801d866:	f005 feff 	bl	8023668 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d86a:	e011      	b.n	801d890 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d874:	2b00      	cmp	r3, #0
 801d876:	f47f aea5 	bne.w	801d5c4 <tcp_receive+0xbf4>
 801d87a:	e00a      	b.n	801d892 <tcp_receive+0xec2>
                break;
 801d87c:	bf00      	nop
 801d87e:	e008      	b.n	801d892 <tcp_receive+0xec2>
                break;
 801d880:	bf00      	nop
 801d882:	e006      	b.n	801d892 <tcp_receive+0xec2>
                  break;
 801d884:	bf00      	nop
 801d886:	e004      	b.n	801d892 <tcp_receive+0xec2>
                  break;
 801d888:	bf00      	nop
 801d88a:	e002      	b.n	801d892 <tcp_receive+0xec2>
                  break;
 801d88c:	bf00      	nop
 801d88e:	e000      	b.n	801d892 <tcp_receive+0xec2>
                break;
 801d890:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d892:	6878      	ldr	r0, [r7, #4]
 801d894:	f001 fe8a 	bl	801f5ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d898:	e003      	b.n	801d8a2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d89a:	6878      	ldr	r0, [r7, #4]
 801d89c:	f001 fe86 	bl	801f5ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d8a0:	e01a      	b.n	801d8d8 <tcp_receive+0xf08>
 801d8a2:	e019      	b.n	801d8d8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d8a4:	4b0e      	ldr	r3, [pc, #56]	@ (801d8e0 <tcp_receive+0xf10>)
 801d8a6:	681a      	ldr	r2, [r3, #0]
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d8ac:	1ad3      	subs	r3, r2, r3
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	db0a      	blt.n	801d8c8 <tcp_receive+0xef8>
 801d8b2:	4b0b      	ldr	r3, [pc, #44]	@ (801d8e0 <tcp_receive+0xf10>)
 801d8b4:	681a      	ldr	r2, [r3, #0]
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d8ba:	6879      	ldr	r1, [r7, #4]
 801d8bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d8be:	440b      	add	r3, r1
 801d8c0:	1ad3      	subs	r3, r2, r3
 801d8c2:	3301      	adds	r3, #1
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	dd07      	ble.n	801d8d8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	8b5b      	ldrh	r3, [r3, #26]
 801d8cc:	f043 0302 	orr.w	r3, r3, #2
 801d8d0:	b29a      	uxth	r2, r3
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d8d6:	e7ff      	b.n	801d8d8 <tcp_receive+0xf08>
 801d8d8:	bf00      	nop
 801d8da:	3750      	adds	r7, #80	@ 0x50
 801d8dc:	46bd      	mov	sp, r7
 801d8de:	bdb0      	pop	{r4, r5, r7, pc}
 801d8e0:	20018be8 	.word	0x20018be8
 801d8e4:	20018bc8 	.word	0x20018bc8
 801d8e8:	20018bf2 	.word	0x20018bf2
 801d8ec:	08026764 	.word	0x08026764
 801d8f0:	08026b0c 	.word	0x08026b0c
 801d8f4:	080267b0 	.word	0x080267b0

0801d8f8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d8f8:	b480      	push	{r7}
 801d8fa:	b083      	sub	sp, #12
 801d8fc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d8fe:	4b15      	ldr	r3, [pc, #84]	@ (801d954 <tcp_get_next_optbyte+0x5c>)
 801d900:	881b      	ldrh	r3, [r3, #0]
 801d902:	1c5a      	adds	r2, r3, #1
 801d904:	b291      	uxth	r1, r2
 801d906:	4a13      	ldr	r2, [pc, #76]	@ (801d954 <tcp_get_next_optbyte+0x5c>)
 801d908:	8011      	strh	r1, [r2, #0]
 801d90a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d90c:	4b12      	ldr	r3, [pc, #72]	@ (801d958 <tcp_get_next_optbyte+0x60>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	2b00      	cmp	r3, #0
 801d912:	d004      	beq.n	801d91e <tcp_get_next_optbyte+0x26>
 801d914:	4b11      	ldr	r3, [pc, #68]	@ (801d95c <tcp_get_next_optbyte+0x64>)
 801d916:	881b      	ldrh	r3, [r3, #0]
 801d918:	88fa      	ldrh	r2, [r7, #6]
 801d91a:	429a      	cmp	r2, r3
 801d91c:	d208      	bcs.n	801d930 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d91e:	4b10      	ldr	r3, [pc, #64]	@ (801d960 <tcp_get_next_optbyte+0x68>)
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	3314      	adds	r3, #20
 801d924:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d926:	88fb      	ldrh	r3, [r7, #6]
 801d928:	683a      	ldr	r2, [r7, #0]
 801d92a:	4413      	add	r3, r2
 801d92c:	781b      	ldrb	r3, [r3, #0]
 801d92e:	e00b      	b.n	801d948 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d930:	88fb      	ldrh	r3, [r7, #6]
 801d932:	b2da      	uxtb	r2, r3
 801d934:	4b09      	ldr	r3, [pc, #36]	@ (801d95c <tcp_get_next_optbyte+0x64>)
 801d936:	881b      	ldrh	r3, [r3, #0]
 801d938:	b2db      	uxtb	r3, r3
 801d93a:	1ad3      	subs	r3, r2, r3
 801d93c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d93e:	4b06      	ldr	r3, [pc, #24]	@ (801d958 <tcp_get_next_optbyte+0x60>)
 801d940:	681a      	ldr	r2, [r3, #0]
 801d942:	797b      	ldrb	r3, [r7, #5]
 801d944:	4413      	add	r3, r2
 801d946:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d948:	4618      	mov	r0, r3
 801d94a:	370c      	adds	r7, #12
 801d94c:	46bd      	mov	sp, r7
 801d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d952:	4770      	bx	lr
 801d954:	20018be4 	.word	0x20018be4
 801d958:	20018be0 	.word	0x20018be0
 801d95c:	20018bde 	.word	0x20018bde
 801d960:	20018bd8 	.word	0x20018bd8

0801d964 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d964:	b580      	push	{r7, lr}
 801d966:	b084      	sub	sp, #16
 801d968:	af00      	add	r7, sp, #0
 801d96a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d106      	bne.n	801d980 <tcp_parseopt+0x1c>
 801d972:	4b33      	ldr	r3, [pc, #204]	@ (801da40 <tcp_parseopt+0xdc>)
 801d974:	f240 727d 	movw	r2, #1917	@ 0x77d
 801d978:	4932      	ldr	r1, [pc, #200]	@ (801da44 <tcp_parseopt+0xe0>)
 801d97a:	4833      	ldr	r0, [pc, #204]	@ (801da48 <tcp_parseopt+0xe4>)
 801d97c:	f005 fe74 	bl	8023668 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d980:	4b32      	ldr	r3, [pc, #200]	@ (801da4c <tcp_parseopt+0xe8>)
 801d982:	881b      	ldrh	r3, [r3, #0]
 801d984:	2b00      	cmp	r3, #0
 801d986:	d057      	beq.n	801da38 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d988:	4b31      	ldr	r3, [pc, #196]	@ (801da50 <tcp_parseopt+0xec>)
 801d98a:	2200      	movs	r2, #0
 801d98c:	801a      	strh	r2, [r3, #0]
 801d98e:	e047      	b.n	801da20 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 801d990:	f7ff ffb2 	bl	801d8f8 <tcp_get_next_optbyte>
 801d994:	4603      	mov	r3, r0
 801d996:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d998:	7bfb      	ldrb	r3, [r7, #15]
 801d99a:	2b02      	cmp	r3, #2
 801d99c:	d006      	beq.n	801d9ac <tcp_parseopt+0x48>
 801d99e:	2b02      	cmp	r3, #2
 801d9a0:	dc2b      	bgt.n	801d9fa <tcp_parseopt+0x96>
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d043      	beq.n	801da2e <tcp_parseopt+0xca>
 801d9a6:	2b01      	cmp	r3, #1
 801d9a8:	d039      	beq.n	801da1e <tcp_parseopt+0xba>
 801d9aa:	e026      	b.n	801d9fa <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d9ac:	f7ff ffa4 	bl	801d8f8 <tcp_get_next_optbyte>
 801d9b0:	4603      	mov	r3, r0
 801d9b2:	2b04      	cmp	r3, #4
 801d9b4:	d13d      	bne.n	801da32 <tcp_parseopt+0xce>
 801d9b6:	4b26      	ldr	r3, [pc, #152]	@ (801da50 <tcp_parseopt+0xec>)
 801d9b8:	881b      	ldrh	r3, [r3, #0]
 801d9ba:	3301      	adds	r3, #1
 801d9bc:	4a23      	ldr	r2, [pc, #140]	@ (801da4c <tcp_parseopt+0xe8>)
 801d9be:	8812      	ldrh	r2, [r2, #0]
 801d9c0:	4293      	cmp	r3, r2
 801d9c2:	da36      	bge.n	801da32 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9c4:	f7ff ff98 	bl	801d8f8 <tcp_get_next_optbyte>
 801d9c8:	4603      	mov	r3, r0
 801d9ca:	021b      	lsls	r3, r3, #8
 801d9cc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d9ce:	f7ff ff93 	bl	801d8f8 <tcp_get_next_optbyte>
 801d9d2:	4603      	mov	r3, r0
 801d9d4:	461a      	mov	r2, r3
 801d9d6:	89bb      	ldrh	r3, [r7, #12]
 801d9d8:	4313      	orrs	r3, r2
 801d9da:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d9dc:	89bb      	ldrh	r3, [r7, #12]
 801d9de:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	d804      	bhi.n	801d9f0 <tcp_parseopt+0x8c>
 801d9e6:	89bb      	ldrh	r3, [r7, #12]
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d001      	beq.n	801d9f0 <tcp_parseopt+0x8c>
 801d9ec:	89ba      	ldrh	r2, [r7, #12]
 801d9ee:	e001      	b.n	801d9f4 <tcp_parseopt+0x90>
 801d9f0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801d9f8:	e012      	b.n	801da20 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d9fa:	f7ff ff7d 	bl	801d8f8 <tcp_get_next_optbyte>
 801d9fe:	4603      	mov	r3, r0
 801da00:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801da02:	7afb      	ldrb	r3, [r7, #11]
 801da04:	2b01      	cmp	r3, #1
 801da06:	d916      	bls.n	801da36 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801da08:	7afb      	ldrb	r3, [r7, #11]
 801da0a:	b29a      	uxth	r2, r3
 801da0c:	4b10      	ldr	r3, [pc, #64]	@ (801da50 <tcp_parseopt+0xec>)
 801da0e:	881b      	ldrh	r3, [r3, #0]
 801da10:	4413      	add	r3, r2
 801da12:	b29b      	uxth	r3, r3
 801da14:	3b02      	subs	r3, #2
 801da16:	b29a      	uxth	r2, r3
 801da18:	4b0d      	ldr	r3, [pc, #52]	@ (801da50 <tcp_parseopt+0xec>)
 801da1a:	801a      	strh	r2, [r3, #0]
 801da1c:	e000      	b.n	801da20 <tcp_parseopt+0xbc>
          break;
 801da1e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801da20:	4b0b      	ldr	r3, [pc, #44]	@ (801da50 <tcp_parseopt+0xec>)
 801da22:	881a      	ldrh	r2, [r3, #0]
 801da24:	4b09      	ldr	r3, [pc, #36]	@ (801da4c <tcp_parseopt+0xe8>)
 801da26:	881b      	ldrh	r3, [r3, #0]
 801da28:	429a      	cmp	r2, r3
 801da2a:	d3b1      	bcc.n	801d990 <tcp_parseopt+0x2c>
 801da2c:	e004      	b.n	801da38 <tcp_parseopt+0xd4>
          return;
 801da2e:	bf00      	nop
 801da30:	e002      	b.n	801da38 <tcp_parseopt+0xd4>
            return;
 801da32:	bf00      	nop
 801da34:	e000      	b.n	801da38 <tcp_parseopt+0xd4>
            return;
 801da36:	bf00      	nop
      }
    }
  }
}
 801da38:	3710      	adds	r7, #16
 801da3a:	46bd      	mov	sp, r7
 801da3c:	bd80      	pop	{r7, pc}
 801da3e:	bf00      	nop
 801da40:	08026764 	.word	0x08026764
 801da44:	08026bc8 	.word	0x08026bc8
 801da48:	080267b0 	.word	0x080267b0
 801da4c:	20018bdc 	.word	0x20018bdc
 801da50:	20018be4 	.word	0x20018be4

0801da54 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801da54:	b480      	push	{r7}
 801da56:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801da58:	4b05      	ldr	r3, [pc, #20]	@ (801da70 <tcp_trigger_input_pcb_close+0x1c>)
 801da5a:	781b      	ldrb	r3, [r3, #0]
 801da5c:	f043 0310 	orr.w	r3, r3, #16
 801da60:	b2da      	uxtb	r2, r3
 801da62:	4b03      	ldr	r3, [pc, #12]	@ (801da70 <tcp_trigger_input_pcb_close+0x1c>)
 801da64:	701a      	strb	r2, [r3, #0]
}
 801da66:	bf00      	nop
 801da68:	46bd      	mov	sp, r7
 801da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da6e:	4770      	bx	lr
 801da70:	20018bf5 	.word	0x20018bf5

0801da74 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801da74:	b580      	push	{r7, lr}
 801da76:	b084      	sub	sp, #16
 801da78:	af00      	add	r7, sp, #0
 801da7a:	60f8      	str	r0, [r7, #12]
 801da7c:	60b9      	str	r1, [r7, #8]
 801da7e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d00a      	beq.n	801da9c <tcp_route+0x28>
 801da86:	68fb      	ldr	r3, [r7, #12]
 801da88:	7a1b      	ldrb	r3, [r3, #8]
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d006      	beq.n	801da9c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	7a1b      	ldrb	r3, [r3, #8]
 801da92:	4618      	mov	r0, r3
 801da94:	f7fa fed4 	bl	8018840 <netif_get_by_index>
 801da98:	4603      	mov	r3, r0
 801da9a:	e003      	b.n	801daa4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801da9c:	6878      	ldr	r0, [r7, #4]
 801da9e:	f003 fc49 	bl	8021334 <ip4_route>
 801daa2:	4603      	mov	r3, r0
  }
}
 801daa4:	4618      	mov	r0, r3
 801daa6:	3710      	adds	r7, #16
 801daa8:	46bd      	mov	sp, r7
 801daaa:	bd80      	pop	{r7, pc}

0801daac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801daac:	b590      	push	{r4, r7, lr}
 801daae:	b087      	sub	sp, #28
 801dab0:	af00      	add	r7, sp, #0
 801dab2:	60f8      	str	r0, [r7, #12]
 801dab4:	60b9      	str	r1, [r7, #8]
 801dab6:	603b      	str	r3, [r7, #0]
 801dab8:	4613      	mov	r3, r2
 801daba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801dabc:	68fb      	ldr	r3, [r7, #12]
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d105      	bne.n	801dace <tcp_create_segment+0x22>
 801dac2:	4b43      	ldr	r3, [pc, #268]	@ (801dbd0 <tcp_create_segment+0x124>)
 801dac4:	22a3      	movs	r2, #163	@ 0xa3
 801dac6:	4943      	ldr	r1, [pc, #268]	@ (801dbd4 <tcp_create_segment+0x128>)
 801dac8:	4843      	ldr	r0, [pc, #268]	@ (801dbd8 <tcp_create_segment+0x12c>)
 801daca:	f005 fdcd 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801dace:	68bb      	ldr	r3, [r7, #8]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d105      	bne.n	801dae0 <tcp_create_segment+0x34>
 801dad4:	4b3e      	ldr	r3, [pc, #248]	@ (801dbd0 <tcp_create_segment+0x124>)
 801dad6:	22a4      	movs	r2, #164	@ 0xa4
 801dad8:	4940      	ldr	r1, [pc, #256]	@ (801dbdc <tcp_create_segment+0x130>)
 801dada:	483f      	ldr	r0, [pc, #252]	@ (801dbd8 <tcp_create_segment+0x12c>)
 801dadc:	f005 fdc4 	bl	8023668 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801dae0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801dae4:	009b      	lsls	r3, r3, #2
 801dae6:	b2db      	uxtb	r3, r3
 801dae8:	f003 0304 	and.w	r3, r3, #4
 801daec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801daee:	2003      	movs	r0, #3
 801daf0:	f7fa fb1a 	bl	8018128 <memp_malloc>
 801daf4:	6138      	str	r0, [r7, #16]
 801daf6:	693b      	ldr	r3, [r7, #16]
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d104      	bne.n	801db06 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801dafc:	68b8      	ldr	r0, [r7, #8]
 801dafe:	f7fb fa5f 	bl	8018fc0 <pbuf_free>
    return NULL;
 801db02:	2300      	movs	r3, #0
 801db04:	e060      	b.n	801dbc8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801db06:	693b      	ldr	r3, [r7, #16]
 801db08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801db0c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801db0e:	693b      	ldr	r3, [r7, #16]
 801db10:	2200      	movs	r2, #0
 801db12:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801db14:	693b      	ldr	r3, [r7, #16]
 801db16:	68ba      	ldr	r2, [r7, #8]
 801db18:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801db1a:	68bb      	ldr	r3, [r7, #8]
 801db1c:	891a      	ldrh	r2, [r3, #8]
 801db1e:	7dfb      	ldrb	r3, [r7, #23]
 801db20:	b29b      	uxth	r3, r3
 801db22:	429a      	cmp	r2, r3
 801db24:	d205      	bcs.n	801db32 <tcp_create_segment+0x86>
 801db26:	4b2a      	ldr	r3, [pc, #168]	@ (801dbd0 <tcp_create_segment+0x124>)
 801db28:	22b0      	movs	r2, #176	@ 0xb0
 801db2a:	492d      	ldr	r1, [pc, #180]	@ (801dbe0 <tcp_create_segment+0x134>)
 801db2c:	482a      	ldr	r0, [pc, #168]	@ (801dbd8 <tcp_create_segment+0x12c>)
 801db2e:	f005 fd9b 	bl	8023668 <iprintf>
  seg->len = p->tot_len - optlen;
 801db32:	68bb      	ldr	r3, [r7, #8]
 801db34:	891a      	ldrh	r2, [r3, #8]
 801db36:	7dfb      	ldrb	r3, [r7, #23]
 801db38:	b29b      	uxth	r3, r3
 801db3a:	1ad3      	subs	r3, r2, r3
 801db3c:	b29a      	uxth	r2, r3
 801db3e:	693b      	ldr	r3, [r7, #16]
 801db40:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801db42:	2114      	movs	r1, #20
 801db44:	68b8      	ldr	r0, [r7, #8]
 801db46:	f7fb f973 	bl	8018e30 <pbuf_add_header>
 801db4a:	4603      	mov	r3, r0
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d004      	beq.n	801db5a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801db50:	6938      	ldr	r0, [r7, #16]
 801db52:	f7fc fffa 	bl	801ab4a <tcp_seg_free>
    return NULL;
 801db56:	2300      	movs	r3, #0
 801db58:	e036      	b.n	801dbc8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801db5a:	693b      	ldr	r3, [r7, #16]
 801db5c:	685b      	ldr	r3, [r3, #4]
 801db5e:	685a      	ldr	r2, [r3, #4]
 801db60:	693b      	ldr	r3, [r7, #16]
 801db62:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	8ada      	ldrh	r2, [r3, #22]
 801db68:	693b      	ldr	r3, [r7, #16]
 801db6a:	68dc      	ldr	r4, [r3, #12]
 801db6c:	4610      	mov	r0, r2
 801db6e:	f7f9 fdf3 	bl	8017758 <lwip_htons>
 801db72:	4603      	mov	r3, r0
 801db74:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	8b1a      	ldrh	r2, [r3, #24]
 801db7a:	693b      	ldr	r3, [r7, #16]
 801db7c:	68dc      	ldr	r4, [r3, #12]
 801db7e:	4610      	mov	r0, r2
 801db80:	f7f9 fdea 	bl	8017758 <lwip_htons>
 801db84:	4603      	mov	r3, r0
 801db86:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801db88:	693b      	ldr	r3, [r7, #16]
 801db8a:	68dc      	ldr	r4, [r3, #12]
 801db8c:	6838      	ldr	r0, [r7, #0]
 801db8e:	f7f9 fdf8 	bl	8017782 <lwip_htonl>
 801db92:	4603      	mov	r3, r0
 801db94:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801db96:	7dfb      	ldrb	r3, [r7, #23]
 801db98:	089b      	lsrs	r3, r3, #2
 801db9a:	b2db      	uxtb	r3, r3
 801db9c:	3305      	adds	r3, #5
 801db9e:	b29b      	uxth	r3, r3
 801dba0:	031b      	lsls	r3, r3, #12
 801dba2:	b29a      	uxth	r2, r3
 801dba4:	79fb      	ldrb	r3, [r7, #7]
 801dba6:	b29b      	uxth	r3, r3
 801dba8:	4313      	orrs	r3, r2
 801dbaa:	b29a      	uxth	r2, r3
 801dbac:	693b      	ldr	r3, [r7, #16]
 801dbae:	68dc      	ldr	r4, [r3, #12]
 801dbb0:	4610      	mov	r0, r2
 801dbb2:	f7f9 fdd1 	bl	8017758 <lwip_htons>
 801dbb6:	4603      	mov	r3, r0
 801dbb8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801dbba:	693b      	ldr	r3, [r7, #16]
 801dbbc:	68db      	ldr	r3, [r3, #12]
 801dbbe:	2200      	movs	r2, #0
 801dbc0:	749a      	strb	r2, [r3, #18]
 801dbc2:	2200      	movs	r2, #0
 801dbc4:	74da      	strb	r2, [r3, #19]
  return seg;
 801dbc6:	693b      	ldr	r3, [r7, #16]
}
 801dbc8:	4618      	mov	r0, r3
 801dbca:	371c      	adds	r7, #28
 801dbcc:	46bd      	mov	sp, r7
 801dbce:	bd90      	pop	{r4, r7, pc}
 801dbd0:	08026be4 	.word	0x08026be4
 801dbd4:	08026c18 	.word	0x08026c18
 801dbd8:	08026c38 	.word	0x08026c38
 801dbdc:	08026c60 	.word	0x08026c60
 801dbe0:	08026c84 	.word	0x08026c84

0801dbe4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	b086      	sub	sp, #24
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	607b      	str	r3, [r7, #4]
 801dbec:	4603      	mov	r3, r0
 801dbee:	73fb      	strb	r3, [r7, #15]
 801dbf0:	460b      	mov	r3, r1
 801dbf2:	81bb      	strh	r3, [r7, #12]
 801dbf4:	4613      	mov	r3, r2
 801dbf6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801dbf8:	89bb      	ldrh	r3, [r7, #12]
 801dbfa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d105      	bne.n	801dc0e <tcp_pbuf_prealloc+0x2a>
 801dc02:	4b30      	ldr	r3, [pc, #192]	@ (801dcc4 <tcp_pbuf_prealloc+0xe0>)
 801dc04:	22e8      	movs	r2, #232	@ 0xe8
 801dc06:	4930      	ldr	r1, [pc, #192]	@ (801dcc8 <tcp_pbuf_prealloc+0xe4>)
 801dc08:	4830      	ldr	r0, [pc, #192]	@ (801dccc <tcp_pbuf_prealloc+0xe8>)
 801dc0a:	f005 fd2d 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801dc0e:	6a3b      	ldr	r3, [r7, #32]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d105      	bne.n	801dc20 <tcp_pbuf_prealloc+0x3c>
 801dc14:	4b2b      	ldr	r3, [pc, #172]	@ (801dcc4 <tcp_pbuf_prealloc+0xe0>)
 801dc16:	22e9      	movs	r2, #233	@ 0xe9
 801dc18:	492d      	ldr	r1, [pc, #180]	@ (801dcd0 <tcp_pbuf_prealloc+0xec>)
 801dc1a:	482c      	ldr	r0, [pc, #176]	@ (801dccc <tcp_pbuf_prealloc+0xe8>)
 801dc1c:	f005 fd24 	bl	8023668 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801dc20:	89ba      	ldrh	r2, [r7, #12]
 801dc22:	897b      	ldrh	r3, [r7, #10]
 801dc24:	429a      	cmp	r2, r3
 801dc26:	d221      	bcs.n	801dc6c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801dc28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801dc2c:	f003 0302 	and.w	r3, r3, #2
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d111      	bne.n	801dc58 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801dc34:	6a3b      	ldr	r3, [r7, #32]
 801dc36:	8b5b      	ldrh	r3, [r3, #26]
 801dc38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d115      	bne.n	801dc6c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801dc40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d007      	beq.n	801dc58 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801dc48:	6a3b      	ldr	r3, [r7, #32]
 801dc4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d103      	bne.n	801dc58 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801dc50:	6a3b      	ldr	r3, [r7, #32]
 801dc52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d009      	beq.n	801dc6c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801dc58:	89bb      	ldrh	r3, [r7, #12]
 801dc5a:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 801dc5e:	f023 0203 	bic.w	r2, r3, #3
 801dc62:	897b      	ldrh	r3, [r7, #10]
 801dc64:	4293      	cmp	r3, r2
 801dc66:	bf28      	it	cs
 801dc68:	4613      	movcs	r3, r2
 801dc6a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801dc6c:	8af9      	ldrh	r1, [r7, #22]
 801dc6e:	7bfb      	ldrb	r3, [r7, #15]
 801dc70:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801dc74:	4618      	mov	r0, r3
 801dc76:	f7fa fe8d 	bl	8018994 <pbuf_alloc>
 801dc7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801dc7c:	693b      	ldr	r3, [r7, #16]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d101      	bne.n	801dc86 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801dc82:	2300      	movs	r3, #0
 801dc84:	e019      	b.n	801dcba <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801dc86:	693b      	ldr	r3, [r7, #16]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d006      	beq.n	801dc9c <tcp_pbuf_prealloc+0xb8>
 801dc8e:	4b0d      	ldr	r3, [pc, #52]	@ (801dcc4 <tcp_pbuf_prealloc+0xe0>)
 801dc90:	f240 120b 	movw	r2, #267	@ 0x10b
 801dc94:	490f      	ldr	r1, [pc, #60]	@ (801dcd4 <tcp_pbuf_prealloc+0xf0>)
 801dc96:	480d      	ldr	r0, [pc, #52]	@ (801dccc <tcp_pbuf_prealloc+0xe8>)
 801dc98:	f005 fce6 	bl	8023668 <iprintf>
  *oversize = p->len - length;
 801dc9c:	693b      	ldr	r3, [r7, #16]
 801dc9e:	895a      	ldrh	r2, [r3, #10]
 801dca0:	89bb      	ldrh	r3, [r7, #12]
 801dca2:	1ad3      	subs	r3, r2, r3
 801dca4:	b29a      	uxth	r2, r3
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801dcaa:	693b      	ldr	r3, [r7, #16]
 801dcac:	89ba      	ldrh	r2, [r7, #12]
 801dcae:	811a      	strh	r2, [r3, #8]
 801dcb0:	693b      	ldr	r3, [r7, #16]
 801dcb2:	891a      	ldrh	r2, [r3, #8]
 801dcb4:	693b      	ldr	r3, [r7, #16]
 801dcb6:	815a      	strh	r2, [r3, #10]
  return p;
 801dcb8:	693b      	ldr	r3, [r7, #16]
}
 801dcba:	4618      	mov	r0, r3
 801dcbc:	3718      	adds	r7, #24
 801dcbe:	46bd      	mov	sp, r7
 801dcc0:	bd80      	pop	{r7, pc}
 801dcc2:	bf00      	nop
 801dcc4:	08026be4 	.word	0x08026be4
 801dcc8:	08026c9c 	.word	0x08026c9c
 801dccc:	08026c38 	.word	0x08026c38
 801dcd0:	08026cc0 	.word	0x08026cc0
 801dcd4:	08026ce0 	.word	0x08026ce0

0801dcd8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801dcd8:	b580      	push	{r7, lr}
 801dcda:	b082      	sub	sp, #8
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	6078      	str	r0, [r7, #4]
 801dce0:	460b      	mov	r3, r1
 801dce2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d106      	bne.n	801dcf8 <tcp_write_checks+0x20>
 801dcea:	4b33      	ldr	r3, [pc, #204]	@ (801ddb8 <tcp_write_checks+0xe0>)
 801dcec:	f240 1233 	movw	r2, #307	@ 0x133
 801dcf0:	4932      	ldr	r1, [pc, #200]	@ (801ddbc <tcp_write_checks+0xe4>)
 801dcf2:	4833      	ldr	r0, [pc, #204]	@ (801ddc0 <tcp_write_checks+0xe8>)
 801dcf4:	f005 fcb8 	bl	8023668 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	7d1b      	ldrb	r3, [r3, #20]
 801dcfc:	2b04      	cmp	r3, #4
 801dcfe:	d00e      	beq.n	801dd1e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801dd04:	2b07      	cmp	r3, #7
 801dd06:	d00a      	beq.n	801dd1e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801dd0c:	2b02      	cmp	r3, #2
 801dd0e:	d006      	beq.n	801dd1e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801dd14:	2b03      	cmp	r3, #3
 801dd16:	d002      	beq.n	801dd1e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801dd18:	f06f 030a 	mvn.w	r3, #10
 801dd1c:	e048      	b.n	801ddb0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801dd1e:	887b      	ldrh	r3, [r7, #2]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d101      	bne.n	801dd28 <tcp_write_checks+0x50>
    return ERR_OK;
 801dd24:	2300      	movs	r3, #0
 801dd26:	e043      	b.n	801ddb0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801dd2e:	887a      	ldrh	r2, [r7, #2]
 801dd30:	429a      	cmp	r2, r3
 801dd32:	d909      	bls.n	801dd48 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	8b5b      	ldrh	r3, [r3, #26]
 801dd38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dd3c:	b29a      	uxth	r2, r3
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801dd42:	f04f 33ff 	mov.w	r3, #4294967295
 801dd46:	e033      	b.n	801ddb0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dd4e:	2b0f      	cmp	r3, #15
 801dd50:	d909      	bls.n	801dd66 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	8b5b      	ldrh	r3, [r3, #26]
 801dd56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dd5a:	b29a      	uxth	r2, r3
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801dd60:	f04f 33ff 	mov.w	r3, #4294967295
 801dd64:	e024      	b.n	801ddb0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d00f      	beq.n	801dd90 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d11a      	bne.n	801ddae <tcp_write_checks+0xd6>
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d116      	bne.n	801ddae <tcp_write_checks+0xd6>
 801dd80:	4b0d      	ldr	r3, [pc, #52]	@ (801ddb8 <tcp_write_checks+0xe0>)
 801dd82:	f240 1255 	movw	r2, #341	@ 0x155
 801dd86:	490f      	ldr	r1, [pc, #60]	@ (801ddc4 <tcp_write_checks+0xec>)
 801dd88:	480d      	ldr	r0, [pc, #52]	@ (801ddc0 <tcp_write_checks+0xe8>)
 801dd8a:	f005 fc6d 	bl	8023668 <iprintf>
 801dd8e:	e00e      	b.n	801ddae <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d103      	bne.n	801dda0 <tcp_write_checks+0xc8>
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d006      	beq.n	801ddae <tcp_write_checks+0xd6>
 801dda0:	4b05      	ldr	r3, [pc, #20]	@ (801ddb8 <tcp_write_checks+0xe0>)
 801dda2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801dda6:	4908      	ldr	r1, [pc, #32]	@ (801ddc8 <tcp_write_checks+0xf0>)
 801dda8:	4805      	ldr	r0, [pc, #20]	@ (801ddc0 <tcp_write_checks+0xe8>)
 801ddaa:	f005 fc5d 	bl	8023668 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ddae:	2300      	movs	r3, #0
}
 801ddb0:	4618      	mov	r0, r3
 801ddb2:	3708      	adds	r7, #8
 801ddb4:	46bd      	mov	sp, r7
 801ddb6:	bd80      	pop	{r7, pc}
 801ddb8:	08026be4 	.word	0x08026be4
 801ddbc:	08026cf4 	.word	0x08026cf4
 801ddc0:	08026c38 	.word	0x08026c38
 801ddc4:	08026d14 	.word	0x08026d14
 801ddc8:	08026d50 	.word	0x08026d50

0801ddcc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801ddcc:	b590      	push	{r4, r7, lr}
 801ddce:	b09b      	sub	sp, #108	@ 0x6c
 801ddd0:	af04      	add	r7, sp, #16
 801ddd2:	60f8      	str	r0, [r7, #12]
 801ddd4:	60b9      	str	r1, [r7, #8]
 801ddd6:	4611      	mov	r1, r2
 801ddd8:	461a      	mov	r2, r3
 801ddda:	460b      	mov	r3, r1
 801dddc:	80fb      	strh	r3, [r7, #6]
 801ddde:	4613      	mov	r3, r2
 801dde0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801dde2:	2300      	movs	r3, #0
 801dde4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801dde6:	2300      	movs	r3, #0
 801dde8:	653b      	str	r3, [r7, #80]	@ 0x50
 801ddea:	2300      	movs	r3, #0
 801ddec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ddee:	2300      	movs	r3, #0
 801ddf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801de02:	2300      	movs	r3, #0
 801de04:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801de06:	2300      	movs	r3, #0
 801de08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801de0a:	2300      	movs	r3, #0
 801de0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	2b00      	cmp	r3, #0
 801de12:	d109      	bne.n	801de28 <tcp_write+0x5c>
 801de14:	4ba4      	ldr	r3, [pc, #656]	@ (801e0a8 <tcp_write+0x2dc>)
 801de16:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801de1a:	49a4      	ldr	r1, [pc, #656]	@ (801e0ac <tcp_write+0x2e0>)
 801de1c:	48a4      	ldr	r0, [pc, #656]	@ (801e0b0 <tcp_write+0x2e4>)
 801de1e:	f005 fc23 	bl	8023668 <iprintf>
 801de22:	f06f 030f 	mvn.w	r3, #15
 801de26:	e32a      	b.n	801e47e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801de2e:	085b      	lsrs	r3, r3, #1
 801de30:	b29a      	uxth	r2, r3
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801de36:	4293      	cmp	r3, r2
 801de38:	bf28      	it	cs
 801de3a:	4613      	movcs	r3, r2
 801de3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801de3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801de40:	2b00      	cmp	r3, #0
 801de42:	d102      	bne.n	801de4a <tcp_write+0x7e>
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801de48:	e000      	b.n	801de4c <tcp_write+0x80>
 801de4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801de4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801de4e:	68bb      	ldr	r3, [r7, #8]
 801de50:	2b00      	cmp	r3, #0
 801de52:	d109      	bne.n	801de68 <tcp_write+0x9c>
 801de54:	4b94      	ldr	r3, [pc, #592]	@ (801e0a8 <tcp_write+0x2dc>)
 801de56:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801de5a:	4996      	ldr	r1, [pc, #600]	@ (801e0b4 <tcp_write+0x2e8>)
 801de5c:	4894      	ldr	r0, [pc, #592]	@ (801e0b0 <tcp_write+0x2e4>)
 801de5e:	f005 fc03 	bl	8023668 <iprintf>
 801de62:	f06f 030f 	mvn.w	r3, #15
 801de66:	e30a      	b.n	801e47e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801de68:	88fb      	ldrh	r3, [r7, #6]
 801de6a:	4619      	mov	r1, r3
 801de6c:	68f8      	ldr	r0, [r7, #12]
 801de6e:	f7ff ff33 	bl	801dcd8 <tcp_write_checks>
 801de72:	4603      	mov	r3, r0
 801de74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801de78:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	d002      	beq.n	801de86 <tcp_write+0xba>
    return err;
 801de80:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801de84:	e2fb      	b.n	801e47e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801de86:	68fb      	ldr	r3, [r7, #12]
 801de88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801de8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801de90:	2300      	movs	r3, #0
 801de92:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	f000 80f6 	beq.w	801e08c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dea4:	653b      	str	r3, [r7, #80]	@ 0x50
 801dea6:	e002      	b.n	801deae <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801dea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801deae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d1f8      	bne.n	801dea8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801deb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801deb8:	7a9b      	ldrb	r3, [r3, #10]
 801deba:	009b      	lsls	r3, r3, #2
 801debc:	b29b      	uxth	r3, r3
 801debe:	f003 0304 	and.w	r3, r3, #4
 801dec2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801dec4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801dec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dec8:	891b      	ldrh	r3, [r3, #8]
 801deca:	4619      	mov	r1, r3
 801decc:	8c3b      	ldrh	r3, [r7, #32]
 801dece:	440b      	add	r3, r1
 801ded0:	429a      	cmp	r2, r3
 801ded2:	da06      	bge.n	801dee2 <tcp_write+0x116>
 801ded4:	4b74      	ldr	r3, [pc, #464]	@ (801e0a8 <tcp_write+0x2dc>)
 801ded6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801deda:	4977      	ldr	r1, [pc, #476]	@ (801e0b8 <tcp_write+0x2ec>)
 801dedc:	4874      	ldr	r0, [pc, #464]	@ (801e0b0 <tcp_write+0x2e4>)
 801dede:	f005 fbc3 	bl	8023668 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801dee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dee4:	891a      	ldrh	r2, [r3, #8]
 801dee6:	8c3b      	ldrh	r3, [r7, #32]
 801dee8:	4413      	add	r3, r2
 801deea:	b29b      	uxth	r3, r3
 801deec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801deee:	1ad3      	subs	r3, r2, r3
 801def0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801def8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801defa:	8a7b      	ldrh	r3, [r7, #18]
 801defc:	2b00      	cmp	r3, #0
 801defe:	d026      	beq.n	801df4e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801df00:	8a7b      	ldrh	r3, [r7, #18]
 801df02:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801df04:	429a      	cmp	r2, r3
 801df06:	d206      	bcs.n	801df16 <tcp_write+0x14a>
 801df08:	4b67      	ldr	r3, [pc, #412]	@ (801e0a8 <tcp_write+0x2dc>)
 801df0a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801df0e:	496b      	ldr	r1, [pc, #428]	@ (801e0bc <tcp_write+0x2f0>)
 801df10:	4867      	ldr	r0, [pc, #412]	@ (801e0b0 <tcp_write+0x2e4>)
 801df12:	f005 fba9 	bl	8023668 <iprintf>
      seg = last_unsent;
 801df16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801df18:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801df1a:	8a7b      	ldrh	r3, [r7, #18]
 801df1c:	88fa      	ldrh	r2, [r7, #6]
 801df1e:	4293      	cmp	r3, r2
 801df20:	bf28      	it	cs
 801df22:	4613      	movcs	r3, r2
 801df24:	b29b      	uxth	r3, r3
 801df26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801df28:	4293      	cmp	r3, r2
 801df2a:	bf28      	it	cs
 801df2c:	4613      	movcs	r3, r2
 801df2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801df30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801df34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801df36:	4413      	add	r3, r2
 801df38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801df3c:	8a7a      	ldrh	r2, [r7, #18]
 801df3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801df40:	1ad3      	subs	r3, r2, r3
 801df42:	b29b      	uxth	r3, r3
 801df44:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801df46:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801df48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801df4a:	1ad3      	subs	r3, r2, r3
 801df4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801df4e:	8a7b      	ldrh	r3, [r7, #18]
 801df50:	2b00      	cmp	r3, #0
 801df52:	d00b      	beq.n	801df6c <tcp_write+0x1a0>
 801df54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801df58:	88fb      	ldrh	r3, [r7, #6]
 801df5a:	429a      	cmp	r2, r3
 801df5c:	d006      	beq.n	801df6c <tcp_write+0x1a0>
 801df5e:	4b52      	ldr	r3, [pc, #328]	@ (801e0a8 <tcp_write+0x2dc>)
 801df60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801df64:	4956      	ldr	r1, [pc, #344]	@ (801e0c0 <tcp_write+0x2f4>)
 801df66:	4852      	ldr	r0, [pc, #328]	@ (801e0b0 <tcp_write+0x2e4>)
 801df68:	f005 fb7e 	bl	8023668 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801df6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801df70:	88fb      	ldrh	r3, [r7, #6]
 801df72:	429a      	cmp	r2, r3
 801df74:	f080 8167 	bcs.w	801e246 <tcp_write+0x47a>
 801df78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	f000 8163 	beq.w	801e246 <tcp_write+0x47a>
 801df80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801df82:	891b      	ldrh	r3, [r3, #8]
 801df84:	2b00      	cmp	r3, #0
 801df86:	f000 815e 	beq.w	801e246 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801df8a:	88fa      	ldrh	r2, [r7, #6]
 801df8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801df90:	1ad2      	subs	r2, r2, r3
 801df92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801df94:	4293      	cmp	r3, r2
 801df96:	bfa8      	it	ge
 801df98:	4613      	movge	r3, r2
 801df9a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801df9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801df9e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801dfa0:	797b      	ldrb	r3, [r7, #5]
 801dfa2:	f003 0301 	and.w	r3, r3, #1
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d027      	beq.n	801dffa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801dfaa:	f107 0012 	add.w	r0, r7, #18
 801dfae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801dfb0:	8bf9      	ldrh	r1, [r7, #30]
 801dfb2:	2301      	movs	r3, #1
 801dfb4:	9302      	str	r3, [sp, #8]
 801dfb6:	797b      	ldrb	r3, [r7, #5]
 801dfb8:	9301      	str	r3, [sp, #4]
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	9300      	str	r3, [sp, #0]
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	2000      	movs	r0, #0
 801dfc2:	f7ff fe0f 	bl	801dbe4 <tcp_pbuf_prealloc>
 801dfc6:	6578      	str	r0, [r7, #84]	@ 0x54
 801dfc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	f000 8225 	beq.w	801e41a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801dfd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dfd2:	6858      	ldr	r0, [r3, #4]
 801dfd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801dfd8:	68ba      	ldr	r2, [r7, #8]
 801dfda:	4413      	add	r3, r2
 801dfdc:	8bfa      	ldrh	r2, [r7, #30]
 801dfde:	4619      	mov	r1, r3
 801dfe0:	f005 fce9 	bl	80239b6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801dfe4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801dfe6:	f7fb f879 	bl	80190dc <pbuf_clen>
 801dfea:	4603      	mov	r3, r0
 801dfec:	461a      	mov	r2, r3
 801dfee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801dff2:	4413      	add	r3, r2
 801dff4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801dff8:	e041      	b.n	801e07e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801dffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dffc:	685b      	ldr	r3, [r3, #4]
 801dffe:	637b      	str	r3, [r7, #52]	@ 0x34
 801e000:	e002      	b.n	801e008 <tcp_write+0x23c>
 801e002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e004:	681b      	ldr	r3, [r3, #0]
 801e006:	637b      	str	r3, [r7, #52]	@ 0x34
 801e008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d1f8      	bne.n	801e002 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e012:	7b1b      	ldrb	r3, [r3, #12]
 801e014:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d115      	bne.n	801e048 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801e01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e01e:	685b      	ldr	r3, [r3, #4]
 801e020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e022:	8952      	ldrh	r2, [r2, #10]
 801e024:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e026:	68ba      	ldr	r2, [r7, #8]
 801e028:	429a      	cmp	r2, r3
 801e02a:	d10d      	bne.n	801e048 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801e02c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e030:	2b00      	cmp	r3, #0
 801e032:	d006      	beq.n	801e042 <tcp_write+0x276>
 801e034:	4b1c      	ldr	r3, [pc, #112]	@ (801e0a8 <tcp_write+0x2dc>)
 801e036:	f240 2231 	movw	r2, #561	@ 0x231
 801e03a:	4922      	ldr	r1, [pc, #136]	@ (801e0c4 <tcp_write+0x2f8>)
 801e03c:	481c      	ldr	r0, [pc, #112]	@ (801e0b0 <tcp_write+0x2e4>)
 801e03e:	f005 fb13 	bl	8023668 <iprintf>
          extendlen = seglen;
 801e042:	8bfb      	ldrh	r3, [r7, #30]
 801e044:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801e046:	e01a      	b.n	801e07e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801e048:	8bfb      	ldrh	r3, [r7, #30]
 801e04a:	2201      	movs	r2, #1
 801e04c:	4619      	mov	r1, r3
 801e04e:	2000      	movs	r0, #0
 801e050:	f7fa fca0 	bl	8018994 <pbuf_alloc>
 801e054:	6578      	str	r0, [r7, #84]	@ 0x54
 801e056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e058:	2b00      	cmp	r3, #0
 801e05a:	f000 81e0 	beq.w	801e41e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801e05e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e062:	68ba      	ldr	r2, [r7, #8]
 801e064:	441a      	add	r2, r3
 801e066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e068:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801e06a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e06c:	f7fb f836 	bl	80190dc <pbuf_clen>
 801e070:	4603      	mov	r3, r0
 801e072:	461a      	mov	r2, r3
 801e074:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e078:	4413      	add	r3, r2
 801e07a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801e07e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e082:	8bfb      	ldrh	r3, [r7, #30]
 801e084:	4413      	add	r3, r2
 801e086:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801e08a:	e0dc      	b.n	801e246 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801e092:	2b00      	cmp	r3, #0
 801e094:	f000 80d7 	beq.w	801e246 <tcp_write+0x47a>
 801e098:	4b03      	ldr	r3, [pc, #12]	@ (801e0a8 <tcp_write+0x2dc>)
 801e09a:	f240 224a 	movw	r2, #586	@ 0x24a
 801e09e:	490a      	ldr	r1, [pc, #40]	@ (801e0c8 <tcp_write+0x2fc>)
 801e0a0:	4803      	ldr	r0, [pc, #12]	@ (801e0b0 <tcp_write+0x2e4>)
 801e0a2:	f005 fae1 	bl	8023668 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801e0a6:	e0ce      	b.n	801e246 <tcp_write+0x47a>
 801e0a8:	08026be4 	.word	0x08026be4
 801e0ac:	08026d84 	.word	0x08026d84
 801e0b0:	08026c38 	.word	0x08026c38
 801e0b4:	08026d9c 	.word	0x08026d9c
 801e0b8:	08026dd0 	.word	0x08026dd0
 801e0bc:	08026de8 	.word	0x08026de8
 801e0c0:	08026e08 	.word	0x08026e08
 801e0c4:	08026e28 	.word	0x08026e28
 801e0c8:	08026e54 	.word	0x08026e54
    struct pbuf *p;
    u16_t left = len - pos;
 801e0cc:	88fa      	ldrh	r2, [r7, #6]
 801e0ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e0d2:	1ad3      	subs	r3, r2, r3
 801e0d4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801e0d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e0da:	b29b      	uxth	r3, r3
 801e0dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e0de:	1ad3      	subs	r3, r2, r3
 801e0e0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801e0e2:	8b7a      	ldrh	r2, [r7, #26]
 801e0e4:	8bbb      	ldrh	r3, [r7, #28]
 801e0e6:	4293      	cmp	r3, r2
 801e0e8:	bf28      	it	cs
 801e0ea:	4613      	movcs	r3, r2
 801e0ec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e0ee:	797b      	ldrb	r3, [r7, #5]
 801e0f0:	f003 0301 	and.w	r3, r3, #1
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d036      	beq.n	801e166 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801e0f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e0fc:	b29a      	uxth	r2, r3
 801e0fe:	8b3b      	ldrh	r3, [r7, #24]
 801e100:	4413      	add	r3, r2
 801e102:	b299      	uxth	r1, r3
 801e104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e106:	2b00      	cmp	r3, #0
 801e108:	bf0c      	ite	eq
 801e10a:	2301      	moveq	r3, #1
 801e10c:	2300      	movne	r3, #0
 801e10e:	b2db      	uxtb	r3, r3
 801e110:	f107 0012 	add.w	r0, r7, #18
 801e114:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e116:	9302      	str	r3, [sp, #8]
 801e118:	797b      	ldrb	r3, [r7, #5]
 801e11a:	9301      	str	r3, [sp, #4]
 801e11c:	68fb      	ldr	r3, [r7, #12]
 801e11e:	9300      	str	r3, [sp, #0]
 801e120:	4603      	mov	r3, r0
 801e122:	2036      	movs	r0, #54	@ 0x36
 801e124:	f7ff fd5e 	bl	801dbe4 <tcp_pbuf_prealloc>
 801e128:	6338      	str	r0, [r7, #48]	@ 0x30
 801e12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	f000 8178 	beq.w	801e422 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e134:	895b      	ldrh	r3, [r3, #10]
 801e136:	8b3a      	ldrh	r2, [r7, #24]
 801e138:	429a      	cmp	r2, r3
 801e13a:	d906      	bls.n	801e14a <tcp_write+0x37e>
 801e13c:	4b8c      	ldr	r3, [pc, #560]	@ (801e370 <tcp_write+0x5a4>)
 801e13e:	f240 2266 	movw	r2, #614	@ 0x266
 801e142:	498c      	ldr	r1, [pc, #560]	@ (801e374 <tcp_write+0x5a8>)
 801e144:	488c      	ldr	r0, [pc, #560]	@ (801e378 <tcp_write+0x5ac>)
 801e146:	f005 fa8f 	bl	8023668 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801e14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e14c:	685a      	ldr	r2, [r3, #4]
 801e14e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e152:	18d0      	adds	r0, r2, r3
 801e154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e158:	68ba      	ldr	r2, [r7, #8]
 801e15a:	4413      	add	r3, r2
 801e15c:	8b3a      	ldrh	r2, [r7, #24]
 801e15e:	4619      	mov	r1, r3
 801e160:	f005 fc29 	bl	80239b6 <memcpy>
 801e164:	e02f      	b.n	801e1c6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e166:	8a7b      	ldrh	r3, [r7, #18]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d006      	beq.n	801e17a <tcp_write+0x3ae>
 801e16c:	4b80      	ldr	r3, [pc, #512]	@ (801e370 <tcp_write+0x5a4>)
 801e16e:	f240 2271 	movw	r2, #625	@ 0x271
 801e172:	4982      	ldr	r1, [pc, #520]	@ (801e37c <tcp_write+0x5b0>)
 801e174:	4880      	ldr	r0, [pc, #512]	@ (801e378 <tcp_write+0x5ac>)
 801e176:	f005 fa77 	bl	8023668 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801e17a:	8b3b      	ldrh	r3, [r7, #24]
 801e17c:	2201      	movs	r2, #1
 801e17e:	4619      	mov	r1, r3
 801e180:	2036      	movs	r0, #54	@ 0x36
 801e182:	f7fa fc07 	bl	8018994 <pbuf_alloc>
 801e186:	6178      	str	r0, [r7, #20]
 801e188:	697b      	ldr	r3, [r7, #20]
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	f000 814b 	beq.w	801e426 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e194:	68ba      	ldr	r2, [r7, #8]
 801e196:	441a      	add	r2, r3
 801e198:	697b      	ldr	r3, [r7, #20]
 801e19a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e19c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e1a0:	b29b      	uxth	r3, r3
 801e1a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e1a6:	4619      	mov	r1, r3
 801e1a8:	2036      	movs	r0, #54	@ 0x36
 801e1aa:	f7fa fbf3 	bl	8018994 <pbuf_alloc>
 801e1ae:	6338      	str	r0, [r7, #48]	@ 0x30
 801e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d103      	bne.n	801e1be <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801e1b6:	6978      	ldr	r0, [r7, #20]
 801e1b8:	f7fa ff02 	bl	8018fc0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801e1bc:	e136      	b.n	801e42c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801e1be:	6979      	ldr	r1, [r7, #20]
 801e1c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e1c2:	f7fa ffcb 	bl	801915c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801e1c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e1c8:	f7fa ff88 	bl	80190dc <pbuf_clen>
 801e1cc:	4603      	mov	r3, r0
 801e1ce:	461a      	mov	r2, r3
 801e1d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e1d4:	4413      	add	r3, r2
 801e1d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e1da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e1de:	2b10      	cmp	r3, #16
 801e1e0:	d903      	bls.n	801e1ea <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801e1e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e1e4:	f7fa feec 	bl	8018fc0 <pbuf_free>
      goto memerr;
 801e1e8:	e120      	b.n	801e42c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801e1ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e1f2:	441a      	add	r2, r3
 801e1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801e1f8:	9300      	str	r3, [sp, #0]
 801e1fa:	4613      	mov	r3, r2
 801e1fc:	2200      	movs	r2, #0
 801e1fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e200:	68f8      	ldr	r0, [r7, #12]
 801e202:	f7ff fc53 	bl	801daac <tcp_create_segment>
 801e206:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801e208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	f000 810d 	beq.w	801e42a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801e210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e212:	2b00      	cmp	r3, #0
 801e214:	d102      	bne.n	801e21c <tcp_write+0x450>
      queue = seg;
 801e216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e218:	647b      	str	r3, [r7, #68]	@ 0x44
 801e21a:	e00c      	b.n	801e236 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e21c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d106      	bne.n	801e230 <tcp_write+0x464>
 801e222:	4b53      	ldr	r3, [pc, #332]	@ (801e370 <tcp_write+0x5a4>)
 801e224:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801e228:	4955      	ldr	r1, [pc, #340]	@ (801e380 <tcp_write+0x5b4>)
 801e22a:	4853      	ldr	r0, [pc, #332]	@ (801e378 <tcp_write+0x5ac>)
 801e22c:	f005 fa1c 	bl	8023668 <iprintf>
      prev_seg->next = seg;
 801e230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e234:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801e236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e238:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801e23a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e23e:	8b3b      	ldrh	r3, [r7, #24]
 801e240:	4413      	add	r3, r2
 801e242:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801e246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e24a:	88fb      	ldrh	r3, [r7, #6]
 801e24c:	429a      	cmp	r2, r3
 801e24e:	f4ff af3d 	bcc.w	801e0cc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801e252:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e254:	2b00      	cmp	r3, #0
 801e256:	d02c      	beq.n	801e2b2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801e258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e25a:	685b      	ldr	r3, [r3, #4]
 801e25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e25e:	e01e      	b.n	801e29e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801e260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e262:	891a      	ldrh	r2, [r3, #8]
 801e264:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e266:	4413      	add	r3, r2
 801e268:	b29a      	uxth	r2, r3
 801e26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e26c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801e26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	2b00      	cmp	r3, #0
 801e274:	d110      	bne.n	801e298 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e278:	685b      	ldr	r3, [r3, #4]
 801e27a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e27c:	8952      	ldrh	r2, [r2, #10]
 801e27e:	4413      	add	r3, r2
 801e280:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e282:	68b9      	ldr	r1, [r7, #8]
 801e284:	4618      	mov	r0, r3
 801e286:	f005 fb96 	bl	80239b6 <memcpy>
        p->len += oversize_used;
 801e28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e28c:	895a      	ldrh	r2, [r3, #10]
 801e28e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e290:	4413      	add	r3, r2
 801e292:	b29a      	uxth	r2, r3
 801e294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e296:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d1dd      	bne.n	801e260 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801e2a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2a6:	891a      	ldrh	r2, [r3, #8]
 801e2a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e2aa:	4413      	add	r3, r2
 801e2ac:	b29a      	uxth	r2, r3
 801e2ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2b0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801e2b2:	8a7a      	ldrh	r2, [r7, #18]
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801e2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d018      	beq.n	801e2f2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801e2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d106      	bne.n	801e2d4 <tcp_write+0x508>
 801e2c6:	4b2a      	ldr	r3, [pc, #168]	@ (801e370 <tcp_write+0x5a4>)
 801e2c8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801e2cc:	492d      	ldr	r1, [pc, #180]	@ (801e384 <tcp_write+0x5b8>)
 801e2ce:	482a      	ldr	r0, [pc, #168]	@ (801e378 <tcp_write+0x5ac>)
 801e2d0:	f005 f9ca 	bl	8023668 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801e2d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2d6:	685b      	ldr	r3, [r3, #4]
 801e2d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f7fa ff3e 	bl	801915c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e2e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2e2:	891a      	ldrh	r2, [r3, #8]
 801e2e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e2e6:	891b      	ldrh	r3, [r3, #8]
 801e2e8:	4413      	add	r3, r2
 801e2ea:	b29a      	uxth	r2, r3
 801e2ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2ee:	811a      	strh	r2, [r3, #8]
 801e2f0:	e037      	b.n	801e362 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801e2f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d034      	beq.n	801e362 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d003      	beq.n	801e306 <tcp_write+0x53a>
 801e2fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e300:	685b      	ldr	r3, [r3, #4]
 801e302:	2b00      	cmp	r3, #0
 801e304:	d106      	bne.n	801e314 <tcp_write+0x548>
 801e306:	4b1a      	ldr	r3, [pc, #104]	@ (801e370 <tcp_write+0x5a4>)
 801e308:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801e30c:	491e      	ldr	r1, [pc, #120]	@ (801e388 <tcp_write+0x5bc>)
 801e30e:	481a      	ldr	r0, [pc, #104]	@ (801e378 <tcp_write+0x5ac>)
 801e310:	f005 f9aa 	bl	8023668 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e316:	685b      	ldr	r3, [r3, #4]
 801e318:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e31a:	e009      	b.n	801e330 <tcp_write+0x564>
      p->tot_len += extendlen;
 801e31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e31e:	891a      	ldrh	r2, [r3, #8]
 801e320:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e322:	4413      	add	r3, r2
 801e324:	b29a      	uxth	r2, r3
 801e326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e328:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d1f1      	bne.n	801e31c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801e338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e33a:	891a      	ldrh	r2, [r3, #8]
 801e33c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e33e:	4413      	add	r3, r2
 801e340:	b29a      	uxth	r2, r3
 801e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e344:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801e346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e348:	895a      	ldrh	r2, [r3, #10]
 801e34a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e34c:	4413      	add	r3, r2
 801e34e:	b29a      	uxth	r2, r3
 801e350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e352:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801e354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e356:	891a      	ldrh	r2, [r3, #8]
 801e358:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e35a:	4413      	add	r3, r2
 801e35c:	b29a      	uxth	r2, r3
 801e35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e360:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801e362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e364:	2b00      	cmp	r3, #0
 801e366:	d111      	bne.n	801e38c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e36c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801e36e:	e010      	b.n	801e392 <tcp_write+0x5c6>
 801e370:	08026be4 	.word	0x08026be4
 801e374:	08026e84 	.word	0x08026e84
 801e378:	08026c38 	.word	0x08026c38
 801e37c:	08026ec4 	.word	0x08026ec4
 801e380:	08026ed4 	.word	0x08026ed4
 801e384:	08026ee8 	.word	0x08026ee8
 801e388:	08026f20 	.word	0x08026f20
  } else {
    last_unsent->next = queue;
 801e38c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e38e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e390:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801e392:	68fb      	ldr	r3, [r7, #12]
 801e394:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801e396:	88fb      	ldrh	r3, [r7, #6]
 801e398:	441a      	add	r2, r3
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801e3a4:	88fb      	ldrh	r3, [r7, #6]
 801e3a6:	1ad3      	subs	r3, r2, r3
 801e3a8:	b29a      	uxth	r2, r3
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801e3b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d00e      	beq.n	801e3e2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e3c4:	68fb      	ldr	r3, [r7, #12]
 801e3c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d10a      	bne.n	801e3e2 <tcp_write+0x616>
 801e3cc:	68fb      	ldr	r3, [r7, #12]
 801e3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d106      	bne.n	801e3e2 <tcp_write+0x616>
 801e3d4:	4b2c      	ldr	r3, [pc, #176]	@ (801e488 <tcp_write+0x6bc>)
 801e3d6:	f240 3212 	movw	r2, #786	@ 0x312
 801e3da:	492c      	ldr	r1, [pc, #176]	@ (801e48c <tcp_write+0x6c0>)
 801e3dc:	482c      	ldr	r0, [pc, #176]	@ (801e490 <tcp_write+0x6c4>)
 801e3de:	f005 f943 	bl	8023668 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e3e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d016      	beq.n	801e416 <tcp_write+0x64a>
 801e3e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e3ea:	68db      	ldr	r3, [r3, #12]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d012      	beq.n	801e416 <tcp_write+0x64a>
 801e3f0:	797b      	ldrb	r3, [r7, #5]
 801e3f2:	f003 0302 	and.w	r3, r3, #2
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d10d      	bne.n	801e416 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e3fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e3fc:	68db      	ldr	r3, [r3, #12]
 801e3fe:	899b      	ldrh	r3, [r3, #12]
 801e400:	b29c      	uxth	r4, r3
 801e402:	2008      	movs	r0, #8
 801e404:	f7f9 f9a8 	bl	8017758 <lwip_htons>
 801e408:	4603      	mov	r3, r0
 801e40a:	461a      	mov	r2, r3
 801e40c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e40e:	68db      	ldr	r3, [r3, #12]
 801e410:	4322      	orrs	r2, r4
 801e412:	b292      	uxth	r2, r2
 801e414:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801e416:	2300      	movs	r3, #0
 801e418:	e031      	b.n	801e47e <tcp_write+0x6b2>
          goto memerr;
 801e41a:	bf00      	nop
 801e41c:	e006      	b.n	801e42c <tcp_write+0x660>
            goto memerr;
 801e41e:	bf00      	nop
 801e420:	e004      	b.n	801e42c <tcp_write+0x660>
        goto memerr;
 801e422:	bf00      	nop
 801e424:	e002      	b.n	801e42c <tcp_write+0x660>
        goto memerr;
 801e426:	bf00      	nop
 801e428:	e000      	b.n	801e42c <tcp_write+0x660>
      goto memerr;
 801e42a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e42c:	68fb      	ldr	r3, [r7, #12]
 801e42e:	8b5b      	ldrh	r3, [r3, #26]
 801e430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e434:	b29a      	uxth	r2, r3
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801e43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d002      	beq.n	801e446 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801e440:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801e442:	f7fa fdbd 	bl	8018fc0 <pbuf_free>
  }
  if (queue != NULL) {
 801e446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d002      	beq.n	801e452 <tcp_write+0x686>
    tcp_segs_free(queue);
 801e44c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e44e:	f7fc fb67 	bl	801ab20 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d00e      	beq.n	801e47a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e460:	2b00      	cmp	r3, #0
 801e462:	d10a      	bne.n	801e47a <tcp_write+0x6ae>
 801e464:	68fb      	ldr	r3, [r7, #12]
 801e466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d106      	bne.n	801e47a <tcp_write+0x6ae>
 801e46c:	4b06      	ldr	r3, [pc, #24]	@ (801e488 <tcp_write+0x6bc>)
 801e46e:	f240 3227 	movw	r2, #807	@ 0x327
 801e472:	4906      	ldr	r1, [pc, #24]	@ (801e48c <tcp_write+0x6c0>)
 801e474:	4806      	ldr	r0, [pc, #24]	@ (801e490 <tcp_write+0x6c4>)
 801e476:	f005 f8f7 	bl	8023668 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801e47a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e47e:	4618      	mov	r0, r3
 801e480:	375c      	adds	r7, #92	@ 0x5c
 801e482:	46bd      	mov	sp, r7
 801e484:	bd90      	pop	{r4, r7, pc}
 801e486:	bf00      	nop
 801e488:	08026be4 	.word	0x08026be4
 801e48c:	08026f58 	.word	0x08026f58
 801e490:	08026c38 	.word	0x08026c38

0801e494 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801e494:	b590      	push	{r4, r7, lr}
 801e496:	b08b      	sub	sp, #44	@ 0x2c
 801e498:	af02      	add	r7, sp, #8
 801e49a:	6078      	str	r0, [r7, #4]
 801e49c:	460b      	mov	r3, r1
 801e49e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801e4a0:	2300      	movs	r3, #0
 801e4a2:	61fb      	str	r3, [r7, #28]
 801e4a4:	2300      	movs	r3, #0
 801e4a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801e4a8:	2300      	movs	r3, #0
 801e4aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d106      	bne.n	801e4c0 <tcp_split_unsent_seg+0x2c>
 801e4b2:	4b95      	ldr	r3, [pc, #596]	@ (801e708 <tcp_split_unsent_seg+0x274>)
 801e4b4:	f240 324b 	movw	r2, #843	@ 0x34b
 801e4b8:	4994      	ldr	r1, [pc, #592]	@ (801e70c <tcp_split_unsent_seg+0x278>)
 801e4ba:	4895      	ldr	r0, [pc, #596]	@ (801e710 <tcp_split_unsent_seg+0x27c>)
 801e4bc:	f005 f8d4 	bl	8023668 <iprintf>

  useg = pcb->unsent;
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e4c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801e4c6:	697b      	ldr	r3, [r7, #20]
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d102      	bne.n	801e4d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801e4cc:	f04f 33ff 	mov.w	r3, #4294967295
 801e4d0:	e116      	b.n	801e700 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801e4d2:	887b      	ldrh	r3, [r7, #2]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d109      	bne.n	801e4ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e4d8:	4b8b      	ldr	r3, [pc, #556]	@ (801e708 <tcp_split_unsent_seg+0x274>)
 801e4da:	f240 3253 	movw	r2, #851	@ 0x353
 801e4de:	498d      	ldr	r1, [pc, #564]	@ (801e714 <tcp_split_unsent_seg+0x280>)
 801e4e0:	488b      	ldr	r0, [pc, #556]	@ (801e710 <tcp_split_unsent_seg+0x27c>)
 801e4e2:	f005 f8c1 	bl	8023668 <iprintf>
    return ERR_VAL;
 801e4e6:	f06f 0305 	mvn.w	r3, #5
 801e4ea:	e109      	b.n	801e700 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801e4ec:	697b      	ldr	r3, [r7, #20]
 801e4ee:	891b      	ldrh	r3, [r3, #8]
 801e4f0:	887a      	ldrh	r2, [r7, #2]
 801e4f2:	429a      	cmp	r2, r3
 801e4f4:	d301      	bcc.n	801e4fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801e4f6:	2300      	movs	r3, #0
 801e4f8:	e102      	b.n	801e700 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e4fe:	887a      	ldrh	r2, [r7, #2]
 801e500:	429a      	cmp	r2, r3
 801e502:	d906      	bls.n	801e512 <tcp_split_unsent_seg+0x7e>
 801e504:	4b80      	ldr	r3, [pc, #512]	@ (801e708 <tcp_split_unsent_seg+0x274>)
 801e506:	f240 325b 	movw	r2, #859	@ 0x35b
 801e50a:	4983      	ldr	r1, [pc, #524]	@ (801e718 <tcp_split_unsent_seg+0x284>)
 801e50c:	4880      	ldr	r0, [pc, #512]	@ (801e710 <tcp_split_unsent_seg+0x27c>)
 801e50e:	f005 f8ab 	bl	8023668 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801e512:	697b      	ldr	r3, [r7, #20]
 801e514:	891b      	ldrh	r3, [r3, #8]
 801e516:	2b00      	cmp	r3, #0
 801e518:	d106      	bne.n	801e528 <tcp_split_unsent_seg+0x94>
 801e51a:	4b7b      	ldr	r3, [pc, #492]	@ (801e708 <tcp_split_unsent_seg+0x274>)
 801e51c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801e520:	497e      	ldr	r1, [pc, #504]	@ (801e71c <tcp_split_unsent_seg+0x288>)
 801e522:	487b      	ldr	r0, [pc, #492]	@ (801e710 <tcp_split_unsent_seg+0x27c>)
 801e524:	f005 f8a0 	bl	8023668 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801e528:	697b      	ldr	r3, [r7, #20]
 801e52a:	7a9b      	ldrb	r3, [r3, #10]
 801e52c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e52e:	7bfb      	ldrb	r3, [r7, #15]
 801e530:	009b      	lsls	r3, r3, #2
 801e532:	b2db      	uxtb	r3, r3
 801e534:	f003 0304 	and.w	r3, r3, #4
 801e538:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801e53a:	697b      	ldr	r3, [r7, #20]
 801e53c:	891a      	ldrh	r2, [r3, #8]
 801e53e:	887b      	ldrh	r3, [r7, #2]
 801e540:	1ad3      	subs	r3, r2, r3
 801e542:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e544:	7bbb      	ldrb	r3, [r7, #14]
 801e546:	b29a      	uxth	r2, r3
 801e548:	89bb      	ldrh	r3, [r7, #12]
 801e54a:	4413      	add	r3, r2
 801e54c:	b29b      	uxth	r3, r3
 801e54e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e552:	4619      	mov	r1, r3
 801e554:	2036      	movs	r0, #54	@ 0x36
 801e556:	f7fa fa1d 	bl	8018994 <pbuf_alloc>
 801e55a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e55c:	693b      	ldr	r3, [r7, #16]
 801e55e:	2b00      	cmp	r3, #0
 801e560:	f000 80b7 	beq.w	801e6d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801e564:	697b      	ldr	r3, [r7, #20]
 801e566:	685b      	ldr	r3, [r3, #4]
 801e568:	891a      	ldrh	r2, [r3, #8]
 801e56a:	697b      	ldr	r3, [r7, #20]
 801e56c:	891b      	ldrh	r3, [r3, #8]
 801e56e:	1ad3      	subs	r3, r2, r3
 801e570:	b29a      	uxth	r2, r3
 801e572:	887b      	ldrh	r3, [r7, #2]
 801e574:	4413      	add	r3, r2
 801e576:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e578:	697b      	ldr	r3, [r7, #20]
 801e57a:	6858      	ldr	r0, [r3, #4]
 801e57c:	693b      	ldr	r3, [r7, #16]
 801e57e:	685a      	ldr	r2, [r3, #4]
 801e580:	7bbb      	ldrb	r3, [r7, #14]
 801e582:	18d1      	adds	r1, r2, r3
 801e584:	897b      	ldrh	r3, [r7, #10]
 801e586:	89ba      	ldrh	r2, [r7, #12]
 801e588:	f7fa ff10 	bl	80193ac <pbuf_copy_partial>
 801e58c:	4603      	mov	r3, r0
 801e58e:	461a      	mov	r2, r3
 801e590:	89bb      	ldrh	r3, [r7, #12]
 801e592:	4293      	cmp	r3, r2
 801e594:	f040 809f 	bne.w	801e6d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e598:	697b      	ldr	r3, [r7, #20]
 801e59a:	68db      	ldr	r3, [r3, #12]
 801e59c:	899b      	ldrh	r3, [r3, #12]
 801e59e:	b29b      	uxth	r3, r3
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7f9 f8d9 	bl	8017758 <lwip_htons>
 801e5a6:	4603      	mov	r3, r0
 801e5a8:	b2db      	uxtb	r3, r3
 801e5aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e5ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801e5b0:	2300      	movs	r3, #0
 801e5b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801e5b4:	7efb      	ldrb	r3, [r7, #27]
 801e5b6:	f003 0308 	and.w	r3, r3, #8
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d007      	beq.n	801e5ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801e5be:	7efb      	ldrb	r3, [r7, #27]
 801e5c0:	f023 0308 	bic.w	r3, r3, #8
 801e5c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801e5c6:	7ebb      	ldrb	r3, [r7, #26]
 801e5c8:	f043 0308 	orr.w	r3, r3, #8
 801e5cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801e5ce:	7efb      	ldrb	r3, [r7, #27]
 801e5d0:	f003 0301 	and.w	r3, r3, #1
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d007      	beq.n	801e5e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801e5d8:	7efb      	ldrb	r3, [r7, #27]
 801e5da:	f023 0301 	bic.w	r3, r3, #1
 801e5de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801e5e0:	7ebb      	ldrb	r3, [r7, #26]
 801e5e2:	f043 0301 	orr.w	r3, r3, #1
 801e5e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801e5e8:	697b      	ldr	r3, [r7, #20]
 801e5ea:	68db      	ldr	r3, [r3, #12]
 801e5ec:	685b      	ldr	r3, [r3, #4]
 801e5ee:	4618      	mov	r0, r3
 801e5f0:	f7f9 f8c7 	bl	8017782 <lwip_htonl>
 801e5f4:	4602      	mov	r2, r0
 801e5f6:	887b      	ldrh	r3, [r7, #2]
 801e5f8:	18d1      	adds	r1, r2, r3
 801e5fa:	7eba      	ldrb	r2, [r7, #26]
 801e5fc:	7bfb      	ldrb	r3, [r7, #15]
 801e5fe:	9300      	str	r3, [sp, #0]
 801e600:	460b      	mov	r3, r1
 801e602:	6939      	ldr	r1, [r7, #16]
 801e604:	6878      	ldr	r0, [r7, #4]
 801e606:	f7ff fa51 	bl	801daac <tcp_create_segment>
 801e60a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801e60c:	69fb      	ldr	r3, [r7, #28]
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d063      	beq.n	801e6da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e612:	697b      	ldr	r3, [r7, #20]
 801e614:	685b      	ldr	r3, [r3, #4]
 801e616:	4618      	mov	r0, r3
 801e618:	f7fa fd60 	bl	80190dc <pbuf_clen>
 801e61c:	4603      	mov	r3, r0
 801e61e:	461a      	mov	r2, r3
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e626:	1a9b      	subs	r3, r3, r2
 801e628:	b29a      	uxth	r2, r3
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e630:	697b      	ldr	r3, [r7, #20]
 801e632:	6858      	ldr	r0, [r3, #4]
 801e634:	697b      	ldr	r3, [r7, #20]
 801e636:	685b      	ldr	r3, [r3, #4]
 801e638:	891a      	ldrh	r2, [r3, #8]
 801e63a:	89bb      	ldrh	r3, [r7, #12]
 801e63c:	1ad3      	subs	r3, r2, r3
 801e63e:	b29b      	uxth	r3, r3
 801e640:	4619      	mov	r1, r3
 801e642:	f7fa fb05 	bl	8018c50 <pbuf_realloc>
  useg->len -= remainder;
 801e646:	697b      	ldr	r3, [r7, #20]
 801e648:	891a      	ldrh	r2, [r3, #8]
 801e64a:	89bb      	ldrh	r3, [r7, #12]
 801e64c:	1ad3      	subs	r3, r2, r3
 801e64e:	b29a      	uxth	r2, r3
 801e650:	697b      	ldr	r3, [r7, #20]
 801e652:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e654:	697b      	ldr	r3, [r7, #20]
 801e656:	68db      	ldr	r3, [r3, #12]
 801e658:	899b      	ldrh	r3, [r3, #12]
 801e65a:	b29c      	uxth	r4, r3
 801e65c:	7efb      	ldrb	r3, [r7, #27]
 801e65e:	b29b      	uxth	r3, r3
 801e660:	4618      	mov	r0, r3
 801e662:	f7f9 f879 	bl	8017758 <lwip_htons>
 801e666:	4603      	mov	r3, r0
 801e668:	461a      	mov	r2, r3
 801e66a:	697b      	ldr	r3, [r7, #20]
 801e66c:	68db      	ldr	r3, [r3, #12]
 801e66e:	4322      	orrs	r2, r4
 801e670:	b292      	uxth	r2, r2
 801e672:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e674:	697b      	ldr	r3, [r7, #20]
 801e676:	685b      	ldr	r3, [r3, #4]
 801e678:	4618      	mov	r0, r3
 801e67a:	f7fa fd2f 	bl	80190dc <pbuf_clen>
 801e67e:	4603      	mov	r3, r0
 801e680:	461a      	mov	r2, r3
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e688:	4413      	add	r3, r2
 801e68a:	b29a      	uxth	r2, r3
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e692:	69fb      	ldr	r3, [r7, #28]
 801e694:	685b      	ldr	r3, [r3, #4]
 801e696:	4618      	mov	r0, r3
 801e698:	f7fa fd20 	bl	80190dc <pbuf_clen>
 801e69c:	4603      	mov	r3, r0
 801e69e:	461a      	mov	r2, r3
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e6a6:	4413      	add	r3, r2
 801e6a8:	b29a      	uxth	r2, r3
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801e6b0:	697b      	ldr	r3, [r7, #20]
 801e6b2:	681a      	ldr	r2, [r3, #0]
 801e6b4:	69fb      	ldr	r3, [r7, #28]
 801e6b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801e6b8:	697b      	ldr	r3, [r7, #20]
 801e6ba:	69fa      	ldr	r2, [r7, #28]
 801e6bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801e6be:	69fb      	ldr	r3, [r7, #28]
 801e6c0:	681b      	ldr	r3, [r3, #0]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d103      	bne.n	801e6ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	2200      	movs	r2, #0
 801e6ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	e016      	b.n	801e700 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801e6d2:	bf00      	nop
 801e6d4:	e002      	b.n	801e6dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e6d6:	bf00      	nop
 801e6d8:	e000      	b.n	801e6dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e6da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801e6dc:	69fb      	ldr	r3, [r7, #28]
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d006      	beq.n	801e6f0 <tcp_split_unsent_seg+0x25c>
 801e6e2:	4b09      	ldr	r3, [pc, #36]	@ (801e708 <tcp_split_unsent_seg+0x274>)
 801e6e4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801e6e8:	490d      	ldr	r1, [pc, #52]	@ (801e720 <tcp_split_unsent_seg+0x28c>)
 801e6ea:	4809      	ldr	r0, [pc, #36]	@ (801e710 <tcp_split_unsent_seg+0x27c>)
 801e6ec:	f004 ffbc 	bl	8023668 <iprintf>
  if (p != NULL) {
 801e6f0:	693b      	ldr	r3, [r7, #16]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d002      	beq.n	801e6fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801e6f6:	6938      	ldr	r0, [r7, #16]
 801e6f8:	f7fa fc62 	bl	8018fc0 <pbuf_free>
  }

  return ERR_MEM;
 801e6fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e700:	4618      	mov	r0, r3
 801e702:	3724      	adds	r7, #36	@ 0x24
 801e704:	46bd      	mov	sp, r7
 801e706:	bd90      	pop	{r4, r7, pc}
 801e708:	08026be4 	.word	0x08026be4
 801e70c:	08026f78 	.word	0x08026f78
 801e710:	08026c38 	.word	0x08026c38
 801e714:	08026f9c 	.word	0x08026f9c
 801e718:	08026fc0 	.word	0x08026fc0
 801e71c:	08026fd0 	.word	0x08026fd0
 801e720:	08026fe0 	.word	0x08026fe0

0801e724 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e724:	b590      	push	{r4, r7, lr}
 801e726:	b085      	sub	sp, #20
 801e728:	af00      	add	r7, sp, #0
 801e72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d106      	bne.n	801e740 <tcp_send_fin+0x1c>
 801e732:	4b21      	ldr	r3, [pc, #132]	@ (801e7b8 <tcp_send_fin+0x94>)
 801e734:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801e738:	4920      	ldr	r1, [pc, #128]	@ (801e7bc <tcp_send_fin+0x98>)
 801e73a:	4821      	ldr	r0, [pc, #132]	@ (801e7c0 <tcp_send_fin+0x9c>)
 801e73c:	f004 ff94 	bl	8023668 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e744:	2b00      	cmp	r3, #0
 801e746:	d02e      	beq.n	801e7a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e74c:	60fb      	str	r3, [r7, #12]
 801e74e:	e002      	b.n	801e756 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e756:	68fb      	ldr	r3, [r7, #12]
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d1f8      	bne.n	801e750 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	68db      	ldr	r3, [r3, #12]
 801e762:	899b      	ldrh	r3, [r3, #12]
 801e764:	b29b      	uxth	r3, r3
 801e766:	4618      	mov	r0, r3
 801e768:	f7f8 fff6 	bl	8017758 <lwip_htons>
 801e76c:	4603      	mov	r3, r0
 801e76e:	b2db      	uxtb	r3, r3
 801e770:	f003 0307 	and.w	r3, r3, #7
 801e774:	2b00      	cmp	r3, #0
 801e776:	d116      	bne.n	801e7a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	68db      	ldr	r3, [r3, #12]
 801e77c:	899b      	ldrh	r3, [r3, #12]
 801e77e:	b29c      	uxth	r4, r3
 801e780:	2001      	movs	r0, #1
 801e782:	f7f8 ffe9 	bl	8017758 <lwip_htons>
 801e786:	4603      	mov	r3, r0
 801e788:	461a      	mov	r2, r3
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	68db      	ldr	r3, [r3, #12]
 801e78e:	4322      	orrs	r2, r4
 801e790:	b292      	uxth	r2, r2
 801e792:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	8b5b      	ldrh	r3, [r3, #26]
 801e798:	f043 0320 	orr.w	r3, r3, #32
 801e79c:	b29a      	uxth	r2, r3
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	e004      	b.n	801e7b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e7a6:	2101      	movs	r1, #1
 801e7a8:	6878      	ldr	r0, [r7, #4]
 801e7aa:	f000 f80b 	bl	801e7c4 <tcp_enqueue_flags>
 801e7ae:	4603      	mov	r3, r0
}
 801e7b0:	4618      	mov	r0, r3
 801e7b2:	3714      	adds	r7, #20
 801e7b4:	46bd      	mov	sp, r7
 801e7b6:	bd90      	pop	{r4, r7, pc}
 801e7b8:	08026be4 	.word	0x08026be4
 801e7bc:	08026fec 	.word	0x08026fec
 801e7c0:	08026c38 	.word	0x08026c38

0801e7c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e7c4:	b580      	push	{r7, lr}
 801e7c6:	b08a      	sub	sp, #40	@ 0x28
 801e7c8:	af02      	add	r7, sp, #8
 801e7ca:	6078      	str	r0, [r7, #4]
 801e7cc:	460b      	mov	r3, r1
 801e7ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e7d0:	2300      	movs	r3, #0
 801e7d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e7d4:	2300      	movs	r3, #0
 801e7d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e7d8:	78fb      	ldrb	r3, [r7, #3]
 801e7da:	f003 0303 	and.w	r3, r3, #3
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d106      	bne.n	801e7f0 <tcp_enqueue_flags+0x2c>
 801e7e2:	4b67      	ldr	r3, [pc, #412]	@ (801e980 <tcp_enqueue_flags+0x1bc>)
 801e7e4:	f240 4211 	movw	r2, #1041	@ 0x411
 801e7e8:	4966      	ldr	r1, [pc, #408]	@ (801e984 <tcp_enqueue_flags+0x1c0>)
 801e7ea:	4867      	ldr	r0, [pc, #412]	@ (801e988 <tcp_enqueue_flags+0x1c4>)
 801e7ec:	f004 ff3c 	bl	8023668 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d106      	bne.n	801e804 <tcp_enqueue_flags+0x40>
 801e7f6:	4b62      	ldr	r3, [pc, #392]	@ (801e980 <tcp_enqueue_flags+0x1bc>)
 801e7f8:	f240 4213 	movw	r2, #1043	@ 0x413
 801e7fc:	4963      	ldr	r1, [pc, #396]	@ (801e98c <tcp_enqueue_flags+0x1c8>)
 801e7fe:	4862      	ldr	r0, [pc, #392]	@ (801e988 <tcp_enqueue_flags+0x1c4>)
 801e800:	f004 ff32 	bl	8023668 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e804:	78fb      	ldrb	r3, [r7, #3]
 801e806:	f003 0302 	and.w	r3, r3, #2
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d001      	beq.n	801e812 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e80e:	2301      	movs	r3, #1
 801e810:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e812:	7ffb      	ldrb	r3, [r7, #31]
 801e814:	009b      	lsls	r3, r3, #2
 801e816:	b2db      	uxtb	r3, r3
 801e818:	f003 0304 	and.w	r3, r3, #4
 801e81c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e81e:	7dfb      	ldrb	r3, [r7, #23]
 801e820:	b29b      	uxth	r3, r3
 801e822:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e826:	4619      	mov	r1, r3
 801e828:	2036      	movs	r0, #54	@ 0x36
 801e82a:	f7fa f8b3 	bl	8018994 <pbuf_alloc>
 801e82e:	6138      	str	r0, [r7, #16]
 801e830:	693b      	ldr	r3, [r7, #16]
 801e832:	2b00      	cmp	r3, #0
 801e834:	d109      	bne.n	801e84a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	8b5b      	ldrh	r3, [r3, #26]
 801e83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e83e:	b29a      	uxth	r2, r3
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e844:	f04f 33ff 	mov.w	r3, #4294967295
 801e848:	e095      	b.n	801e976 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e84a:	693b      	ldr	r3, [r7, #16]
 801e84c:	895a      	ldrh	r2, [r3, #10]
 801e84e:	7dfb      	ldrb	r3, [r7, #23]
 801e850:	b29b      	uxth	r3, r3
 801e852:	429a      	cmp	r2, r3
 801e854:	d206      	bcs.n	801e864 <tcp_enqueue_flags+0xa0>
 801e856:	4b4a      	ldr	r3, [pc, #296]	@ (801e980 <tcp_enqueue_flags+0x1bc>)
 801e858:	f240 4239 	movw	r2, #1081	@ 0x439
 801e85c:	494c      	ldr	r1, [pc, #304]	@ (801e990 <tcp_enqueue_flags+0x1cc>)
 801e85e:	484a      	ldr	r0, [pc, #296]	@ (801e988 <tcp_enqueue_flags+0x1c4>)
 801e860:	f004 ff02 	bl	8023668 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801e868:	78fa      	ldrb	r2, [r7, #3]
 801e86a:	7ffb      	ldrb	r3, [r7, #31]
 801e86c:	9300      	str	r3, [sp, #0]
 801e86e:	460b      	mov	r3, r1
 801e870:	6939      	ldr	r1, [r7, #16]
 801e872:	6878      	ldr	r0, [r7, #4]
 801e874:	f7ff f91a 	bl	801daac <tcp_create_segment>
 801e878:	60f8      	str	r0, [r7, #12]
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d109      	bne.n	801e894 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	8b5b      	ldrh	r3, [r3, #26]
 801e884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e888:	b29a      	uxth	r2, r3
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e88e:	f04f 33ff 	mov.w	r3, #4294967295
 801e892:	e070      	b.n	801e976 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	68db      	ldr	r3, [r3, #12]
 801e898:	f003 0303 	and.w	r3, r3, #3
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d006      	beq.n	801e8ae <tcp_enqueue_flags+0xea>
 801e8a0:	4b37      	ldr	r3, [pc, #220]	@ (801e980 <tcp_enqueue_flags+0x1bc>)
 801e8a2:	f240 4242 	movw	r2, #1090	@ 0x442
 801e8a6:	493b      	ldr	r1, [pc, #236]	@ (801e994 <tcp_enqueue_flags+0x1d0>)
 801e8a8:	4837      	ldr	r0, [pc, #220]	@ (801e988 <tcp_enqueue_flags+0x1c4>)
 801e8aa:	f004 fedd 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	891b      	ldrh	r3, [r3, #8]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	d006      	beq.n	801e8c4 <tcp_enqueue_flags+0x100>
 801e8b6:	4b32      	ldr	r3, [pc, #200]	@ (801e980 <tcp_enqueue_flags+0x1bc>)
 801e8b8:	f240 4243 	movw	r2, #1091	@ 0x443
 801e8bc:	4936      	ldr	r1, [pc, #216]	@ (801e998 <tcp_enqueue_flags+0x1d4>)
 801e8be:	4832      	ldr	r0, [pc, #200]	@ (801e988 <tcp_enqueue_flags+0x1c4>)
 801e8c0:	f004 fed2 	bl	8023668 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d103      	bne.n	801e8d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	68fa      	ldr	r2, [r7, #12]
 801e8d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 801e8d2:	e00d      	b.n	801e8f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e8d8:	61bb      	str	r3, [r7, #24]
 801e8da:	e002      	b.n	801e8e2 <tcp_enqueue_flags+0x11e>
 801e8dc:	69bb      	ldr	r3, [r7, #24]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	61bb      	str	r3, [r7, #24]
 801e8e2:	69bb      	ldr	r3, [r7, #24]
 801e8e4:	681b      	ldr	r3, [r3, #0]
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d1f8      	bne.n	801e8dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e8ea:	69bb      	ldr	r3, [r7, #24]
 801e8ec:	68fa      	ldr	r2, [r7, #12]
 801e8ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e8f8:	78fb      	ldrb	r3, [r7, #3]
 801e8fa:	f003 0302 	and.w	r3, r3, #2
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d104      	bne.n	801e90c <tcp_enqueue_flags+0x148>
 801e902:	78fb      	ldrb	r3, [r7, #3]
 801e904:	f003 0301 	and.w	r3, r3, #1
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d004      	beq.n	801e916 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e910:	1c5a      	adds	r2, r3, #1
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e916:	78fb      	ldrb	r3, [r7, #3]
 801e918:	f003 0301 	and.w	r3, r3, #1
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d006      	beq.n	801e92e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	8b5b      	ldrh	r3, [r3, #26]
 801e924:	f043 0320 	orr.w	r3, r3, #32
 801e928:	b29a      	uxth	r2, r3
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e92e:	68fb      	ldr	r3, [r7, #12]
 801e930:	685b      	ldr	r3, [r3, #4]
 801e932:	4618      	mov	r0, r3
 801e934:	f7fa fbd2 	bl	80190dc <pbuf_clen>
 801e938:	4603      	mov	r3, r0
 801e93a:	461a      	mov	r2, r3
 801e93c:	687b      	ldr	r3, [r7, #4]
 801e93e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e942:	4413      	add	r3, r2
 801e944:	b29a      	uxth	r2, r3
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e952:	2b00      	cmp	r3, #0
 801e954:	d00e      	beq.n	801e974 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d10a      	bne.n	801e974 <tcp_enqueue_flags+0x1b0>
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e962:	2b00      	cmp	r3, #0
 801e964:	d106      	bne.n	801e974 <tcp_enqueue_flags+0x1b0>
 801e966:	4b06      	ldr	r3, [pc, #24]	@ (801e980 <tcp_enqueue_flags+0x1bc>)
 801e968:	f240 4265 	movw	r2, #1125	@ 0x465
 801e96c:	490b      	ldr	r1, [pc, #44]	@ (801e99c <tcp_enqueue_flags+0x1d8>)
 801e96e:	4806      	ldr	r0, [pc, #24]	@ (801e988 <tcp_enqueue_flags+0x1c4>)
 801e970:	f004 fe7a 	bl	8023668 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e974:	2300      	movs	r3, #0
}
 801e976:	4618      	mov	r0, r3
 801e978:	3720      	adds	r7, #32
 801e97a:	46bd      	mov	sp, r7
 801e97c:	bd80      	pop	{r7, pc}
 801e97e:	bf00      	nop
 801e980:	08026be4 	.word	0x08026be4
 801e984:	08027008 	.word	0x08027008
 801e988:	08026c38 	.word	0x08026c38
 801e98c:	08027060 	.word	0x08027060
 801e990:	08027080 	.word	0x08027080
 801e994:	080270bc 	.word	0x080270bc
 801e998:	080270d4 	.word	0x080270d4
 801e99c:	08027100 	.word	0x08027100

0801e9a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e9a0:	b5b0      	push	{r4, r5, r7, lr}
 801e9a2:	b08a      	sub	sp, #40	@ 0x28
 801e9a4:	af00      	add	r7, sp, #0
 801e9a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d106      	bne.n	801e9bc <tcp_output+0x1c>
 801e9ae:	4b8a      	ldr	r3, [pc, #552]	@ (801ebd8 <tcp_output+0x238>)
 801e9b0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801e9b4:	4989      	ldr	r1, [pc, #548]	@ (801ebdc <tcp_output+0x23c>)
 801e9b6:	488a      	ldr	r0, [pc, #552]	@ (801ebe0 <tcp_output+0x240>)
 801e9b8:	f004 fe56 	bl	8023668 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	7d1b      	ldrb	r3, [r3, #20]
 801e9c0:	2b01      	cmp	r3, #1
 801e9c2:	d106      	bne.n	801e9d2 <tcp_output+0x32>
 801e9c4:	4b84      	ldr	r3, [pc, #528]	@ (801ebd8 <tcp_output+0x238>)
 801e9c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801e9ca:	4986      	ldr	r1, [pc, #536]	@ (801ebe4 <tcp_output+0x244>)
 801e9cc:	4884      	ldr	r0, [pc, #528]	@ (801ebe0 <tcp_output+0x240>)
 801e9ce:	f004 fe4b 	bl	8023668 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e9d2:	4b85      	ldr	r3, [pc, #532]	@ (801ebe8 <tcp_output+0x248>)
 801e9d4:	681b      	ldr	r3, [r3, #0]
 801e9d6:	687a      	ldr	r2, [r7, #4]
 801e9d8:	429a      	cmp	r2, r3
 801e9da:	d101      	bne.n	801e9e0 <tcp_output+0x40>
    return ERR_OK;
 801e9dc:	2300      	movs	r3, #0
 801e9de:	e1ce      	b.n	801ed7e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e9ec:	4293      	cmp	r3, r2
 801e9ee:	bf28      	it	cs
 801e9f0:	4613      	movcs	r3, r2
 801e9f2:	b29b      	uxth	r3, r3
 801e9f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e9fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801e9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d10b      	bne.n	801ea1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	8b5b      	ldrh	r3, [r3, #26]
 801ea06:	f003 0302 	and.w	r3, r3, #2
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	f000 81aa 	beq.w	801ed64 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801ea10:	6878      	ldr	r0, [r7, #4]
 801ea12:	f000 fdcb 	bl	801f5ac <tcp_send_empty_ack>
 801ea16:	4603      	mov	r3, r0
 801ea18:	e1b1      	b.n	801ed7e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ea1a:	6879      	ldr	r1, [r7, #4]
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	3304      	adds	r3, #4
 801ea20:	461a      	mov	r2, r3
 801ea22:	6878      	ldr	r0, [r7, #4]
 801ea24:	f7ff f826 	bl	801da74 <tcp_route>
 801ea28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801ea2a:	697b      	ldr	r3, [r7, #20]
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	d102      	bne.n	801ea36 <tcp_output+0x96>
    return ERR_RTE;
 801ea30:	f06f 0303 	mvn.w	r3, #3
 801ea34:	e1a3      	b.n	801ed7e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d003      	beq.n	801ea44 <tcp_output+0xa4>
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d111      	bne.n	801ea68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ea44:	697b      	ldr	r3, [r7, #20]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d002      	beq.n	801ea50 <tcp_output+0xb0>
 801ea4a:	697b      	ldr	r3, [r7, #20]
 801ea4c:	3304      	adds	r3, #4
 801ea4e:	e000      	b.n	801ea52 <tcp_output+0xb2>
 801ea50:	2300      	movs	r3, #0
 801ea52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ea54:	693b      	ldr	r3, [r7, #16]
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	d102      	bne.n	801ea60 <tcp_output+0xc0>
      return ERR_RTE;
 801ea5a:	f06f 0303 	mvn.w	r3, #3
 801ea5e:	e18e      	b.n	801ed7e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ea60:	693b      	ldr	r3, [r7, #16]
 801ea62:	681a      	ldr	r2, [r3, #0]
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ea68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea6a:	68db      	ldr	r3, [r3, #12]
 801ea6c:	685b      	ldr	r3, [r3, #4]
 801ea6e:	4618      	mov	r0, r3
 801ea70:	f7f8 fe87 	bl	8017782 <lwip_htonl>
 801ea74:	4602      	mov	r2, r0
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ea7a:	1ad3      	subs	r3, r2, r3
 801ea7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ea7e:	8912      	ldrh	r2, [r2, #8]
 801ea80:	4413      	add	r3, r2
 801ea82:	69ba      	ldr	r2, [r7, #24]
 801ea84:	429a      	cmp	r2, r3
 801ea86:	d227      	bcs.n	801ead8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ea8e:	461a      	mov	r2, r3
 801ea90:	69bb      	ldr	r3, [r7, #24]
 801ea92:	4293      	cmp	r3, r2
 801ea94:	d114      	bne.n	801eac0 <tcp_output+0x120>
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	d110      	bne.n	801eac0 <tcp_output+0x120>
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d10b      	bne.n	801eac0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	2200      	movs	r2, #0
 801eaac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	2201      	movs	r2, #1
 801eab4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	2200      	movs	r2, #0
 801eabc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	8b5b      	ldrh	r3, [r3, #26]
 801eac4:	f003 0302 	and.w	r3, r3, #2
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	f000 814d 	beq.w	801ed68 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801eace:	6878      	ldr	r0, [r7, #4]
 801ead0:	f000 fd6c 	bl	801f5ac <tcp_send_empty_ack>
 801ead4:	4603      	mov	r3, r0
 801ead6:	e152      	b.n	801ed7e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	2200      	movs	r2, #0
 801eadc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eae4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801eae6:	6a3b      	ldr	r3, [r7, #32]
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	f000 811c 	beq.w	801ed26 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801eaee:	e002      	b.n	801eaf6 <tcp_output+0x156>
 801eaf0:	6a3b      	ldr	r3, [r7, #32]
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	623b      	str	r3, [r7, #32]
 801eaf6:	6a3b      	ldr	r3, [r7, #32]
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d1f8      	bne.n	801eaf0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801eafe:	e112      	b.n	801ed26 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801eb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb02:	68db      	ldr	r3, [r3, #12]
 801eb04:	899b      	ldrh	r3, [r3, #12]
 801eb06:	b29b      	uxth	r3, r3
 801eb08:	4618      	mov	r0, r3
 801eb0a:	f7f8 fe25 	bl	8017758 <lwip_htons>
 801eb0e:	4603      	mov	r3, r0
 801eb10:	b2db      	uxtb	r3, r3
 801eb12:	f003 0304 	and.w	r3, r3, #4
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d006      	beq.n	801eb28 <tcp_output+0x188>
 801eb1a:	4b2f      	ldr	r3, [pc, #188]	@ (801ebd8 <tcp_output+0x238>)
 801eb1c:	f240 5236 	movw	r2, #1334	@ 0x536
 801eb20:	4932      	ldr	r1, [pc, #200]	@ (801ebec <tcp_output+0x24c>)
 801eb22:	482f      	ldr	r0, [pc, #188]	@ (801ebe0 <tcp_output+0x240>)
 801eb24:	f004 fda0 	bl	8023668 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d01f      	beq.n	801eb70 <tcp_output+0x1d0>
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	8b5b      	ldrh	r3, [r3, #26]
 801eb34:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d119      	bne.n	801eb70 <tcp_output+0x1d0>
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	d00b      	beq.n	801eb5c <tcp_output+0x1bc>
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d110      	bne.n	801eb70 <tcp_output+0x1d0>
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eb52:	891a      	ldrh	r2, [r3, #8]
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801eb58:	429a      	cmp	r2, r3
 801eb5a:	d209      	bcs.n	801eb70 <tcp_output+0x1d0>
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d004      	beq.n	801eb70 <tcp_output+0x1d0>
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801eb6c:	2b0f      	cmp	r3, #15
 801eb6e:	d901      	bls.n	801eb74 <tcp_output+0x1d4>
 801eb70:	2301      	movs	r3, #1
 801eb72:	e000      	b.n	801eb76 <tcp_output+0x1d6>
 801eb74:	2300      	movs	r3, #0
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	d106      	bne.n	801eb88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	8b5b      	ldrh	r3, [r3, #26]
 801eb7e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	f000 80e4 	beq.w	801ed50 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	7d1b      	ldrb	r3, [r3, #20]
 801eb8c:	2b02      	cmp	r3, #2
 801eb8e:	d00d      	beq.n	801ebac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801eb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb92:	68db      	ldr	r3, [r3, #12]
 801eb94:	899b      	ldrh	r3, [r3, #12]
 801eb96:	b29c      	uxth	r4, r3
 801eb98:	2010      	movs	r0, #16
 801eb9a:	f7f8 fddd 	bl	8017758 <lwip_htons>
 801eb9e:	4603      	mov	r3, r0
 801eba0:	461a      	mov	r2, r3
 801eba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eba4:	68db      	ldr	r3, [r3, #12]
 801eba6:	4322      	orrs	r2, r4
 801eba8:	b292      	uxth	r2, r2
 801ebaa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ebac:	697a      	ldr	r2, [r7, #20]
 801ebae:	6879      	ldr	r1, [r7, #4]
 801ebb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ebb2:	f000 f909 	bl	801edc8 <tcp_output_segment>
 801ebb6:	4603      	mov	r3, r0
 801ebb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801ebba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d016      	beq.n	801ebf0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	8b5b      	ldrh	r3, [r3, #26]
 801ebc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ebca:	b29a      	uxth	r2, r3
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	835a      	strh	r2, [r3, #26]
      return err;
 801ebd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ebd4:	e0d3      	b.n	801ed7e <tcp_output+0x3de>
 801ebd6:	bf00      	nop
 801ebd8:	08026be4 	.word	0x08026be4
 801ebdc:	08027128 	.word	0x08027128
 801ebe0:	08026c38 	.word	0x08026c38
 801ebe4:	08027140 	.word	0x08027140
 801ebe8:	20018bfc 	.word	0x20018bfc
 801ebec:	08027168 	.word	0x08027168
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801ebf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebf2:	681a      	ldr	r2, [r3, #0]
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	7d1b      	ldrb	r3, [r3, #20]
 801ebfc:	2b02      	cmp	r3, #2
 801ebfe:	d006      	beq.n	801ec0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	8b5b      	ldrh	r3, [r3, #26]
 801ec04:	f023 0303 	bic.w	r3, r3, #3
 801ec08:	b29a      	uxth	r2, r3
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ec0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec10:	68db      	ldr	r3, [r3, #12]
 801ec12:	685b      	ldr	r3, [r3, #4]
 801ec14:	4618      	mov	r0, r3
 801ec16:	f7f8 fdb4 	bl	8017782 <lwip_htonl>
 801ec1a:	4604      	mov	r4, r0
 801ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec1e:	891b      	ldrh	r3, [r3, #8]
 801ec20:	461d      	mov	r5, r3
 801ec22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec24:	68db      	ldr	r3, [r3, #12]
 801ec26:	899b      	ldrh	r3, [r3, #12]
 801ec28:	b29b      	uxth	r3, r3
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	f7f8 fd94 	bl	8017758 <lwip_htons>
 801ec30:	4603      	mov	r3, r0
 801ec32:	b2db      	uxtb	r3, r3
 801ec34:	f003 0303 	and.w	r3, r3, #3
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d001      	beq.n	801ec40 <tcp_output+0x2a0>
 801ec3c:	2301      	movs	r3, #1
 801ec3e:	e000      	b.n	801ec42 <tcp_output+0x2a2>
 801ec40:	2300      	movs	r3, #0
 801ec42:	442b      	add	r3, r5
 801ec44:	4423      	add	r3, r4
 801ec46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ec4c:	68bb      	ldr	r3, [r7, #8]
 801ec4e:	1ad3      	subs	r3, r2, r3
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	da02      	bge.n	801ec5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	68ba      	ldr	r2, [r7, #8]
 801ec58:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec5c:	891b      	ldrh	r3, [r3, #8]
 801ec5e:	461c      	mov	r4, r3
 801ec60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec62:	68db      	ldr	r3, [r3, #12]
 801ec64:	899b      	ldrh	r3, [r3, #12]
 801ec66:	b29b      	uxth	r3, r3
 801ec68:	4618      	mov	r0, r3
 801ec6a:	f7f8 fd75 	bl	8017758 <lwip_htons>
 801ec6e:	4603      	mov	r3, r0
 801ec70:	b2db      	uxtb	r3, r3
 801ec72:	f003 0303 	and.w	r3, r3, #3
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d001      	beq.n	801ec7e <tcp_output+0x2de>
 801ec7a:	2301      	movs	r3, #1
 801ec7c:	e000      	b.n	801ec80 <tcp_output+0x2e0>
 801ec7e:	2300      	movs	r3, #0
 801ec80:	4423      	add	r3, r4
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	d049      	beq.n	801ed1a <tcp_output+0x37a>
      seg->next = NULL;
 801ec86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec88:	2200      	movs	r2, #0
 801ec8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d105      	bne.n	801eca0 <tcp_output+0x300>
        pcb->unacked = seg;
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec98:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec9c:	623b      	str	r3, [r7, #32]
 801ec9e:	e03f      	b.n	801ed20 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801eca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eca2:	68db      	ldr	r3, [r3, #12]
 801eca4:	685b      	ldr	r3, [r3, #4]
 801eca6:	4618      	mov	r0, r3
 801eca8:	f7f8 fd6b 	bl	8017782 <lwip_htonl>
 801ecac:	4604      	mov	r4, r0
 801ecae:	6a3b      	ldr	r3, [r7, #32]
 801ecb0:	68db      	ldr	r3, [r3, #12]
 801ecb2:	685b      	ldr	r3, [r3, #4]
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	f7f8 fd64 	bl	8017782 <lwip_htonl>
 801ecba:	4603      	mov	r3, r0
 801ecbc:	1ae3      	subs	r3, r4, r3
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	da24      	bge.n	801ed0c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	3370      	adds	r3, #112	@ 0x70
 801ecc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ecc8:	e002      	b.n	801ecd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ecca:	69fb      	ldr	r3, [r7, #28]
 801eccc:	681b      	ldr	r3, [r3, #0]
 801ecce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ecd0:	69fb      	ldr	r3, [r7, #28]
 801ecd2:	681b      	ldr	r3, [r3, #0]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d011      	beq.n	801ecfc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ecd8:	69fb      	ldr	r3, [r7, #28]
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	68db      	ldr	r3, [r3, #12]
 801ecde:	685b      	ldr	r3, [r3, #4]
 801ece0:	4618      	mov	r0, r3
 801ece2:	f7f8 fd4e 	bl	8017782 <lwip_htonl>
 801ece6:	4604      	mov	r4, r0
 801ece8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecea:	68db      	ldr	r3, [r3, #12]
 801ecec:	685b      	ldr	r3, [r3, #4]
 801ecee:	4618      	mov	r0, r3
 801ecf0:	f7f8 fd47 	bl	8017782 <lwip_htonl>
 801ecf4:	4603      	mov	r3, r0
 801ecf6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	dbe6      	blt.n	801ecca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ecfc:	69fb      	ldr	r3, [r7, #28]
 801ecfe:	681a      	ldr	r2, [r3, #0]
 801ed00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ed04:	69fb      	ldr	r3, [r7, #28]
 801ed06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ed08:	601a      	str	r2, [r3, #0]
 801ed0a:	e009      	b.n	801ed20 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ed0c:	6a3b      	ldr	r3, [r7, #32]
 801ed0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ed10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ed12:	6a3b      	ldr	r3, [r7, #32]
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	623b      	str	r3, [r7, #32]
 801ed18:	e002      	b.n	801ed20 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ed1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ed1c:	f7fb ff15 	bl	801ab4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ed24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801ed26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	d012      	beq.n	801ed52 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ed2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed2e:	68db      	ldr	r3, [r3, #12]
 801ed30:	685b      	ldr	r3, [r3, #4]
 801ed32:	4618      	mov	r0, r3
 801ed34:	f7f8 fd25 	bl	8017782 <lwip_htonl>
 801ed38:	4602      	mov	r2, r0
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ed3e:	1ad3      	subs	r3, r2, r3
 801ed40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ed42:	8912      	ldrh	r2, [r2, #8]
 801ed44:	4413      	add	r3, r2
  while (seg != NULL &&
 801ed46:	69ba      	ldr	r2, [r7, #24]
 801ed48:	429a      	cmp	r2, r3
 801ed4a:	f4bf aed9 	bcs.w	801eb00 <tcp_output+0x160>
 801ed4e:	e000      	b.n	801ed52 <tcp_output+0x3b2>
      break;
 801ed50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d108      	bne.n	801ed6c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	2200      	movs	r2, #0
 801ed5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801ed62:	e004      	b.n	801ed6e <tcp_output+0x3ce>
    goto output_done;
 801ed64:	bf00      	nop
 801ed66:	e002      	b.n	801ed6e <tcp_output+0x3ce>
    goto output_done;
 801ed68:	bf00      	nop
 801ed6a:	e000      	b.n	801ed6e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ed6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	8b5b      	ldrh	r3, [r3, #26]
 801ed72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ed76:	b29a      	uxth	r2, r3
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ed7c:	2300      	movs	r3, #0
}
 801ed7e:	4618      	mov	r0, r3
 801ed80:	3728      	adds	r7, #40	@ 0x28
 801ed82:	46bd      	mov	sp, r7
 801ed84:	bdb0      	pop	{r4, r5, r7, pc}
 801ed86:	bf00      	nop

0801ed88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b082      	sub	sp, #8
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d106      	bne.n	801eda4 <tcp_output_segment_busy+0x1c>
 801ed96:	4b09      	ldr	r3, [pc, #36]	@ (801edbc <tcp_output_segment_busy+0x34>)
 801ed98:	f240 529a 	movw	r2, #1434	@ 0x59a
 801ed9c:	4908      	ldr	r1, [pc, #32]	@ (801edc0 <tcp_output_segment_busy+0x38>)
 801ed9e:	4809      	ldr	r0, [pc, #36]	@ (801edc4 <tcp_output_segment_busy+0x3c>)
 801eda0:	f004 fc62 	bl	8023668 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	685b      	ldr	r3, [r3, #4]
 801eda8:	7b9b      	ldrb	r3, [r3, #14]
 801edaa:	2b01      	cmp	r3, #1
 801edac:	d001      	beq.n	801edb2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801edae:	2301      	movs	r3, #1
 801edb0:	e000      	b.n	801edb4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801edb2:	2300      	movs	r3, #0
}
 801edb4:	4618      	mov	r0, r3
 801edb6:	3708      	adds	r7, #8
 801edb8:	46bd      	mov	sp, r7
 801edba:	bd80      	pop	{r7, pc}
 801edbc:	08026be4 	.word	0x08026be4
 801edc0:	08027180 	.word	0x08027180
 801edc4:	08026c38 	.word	0x08026c38

0801edc8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801edc8:	b5b0      	push	{r4, r5, r7, lr}
 801edca:	b08c      	sub	sp, #48	@ 0x30
 801edcc:	af04      	add	r7, sp, #16
 801edce:	60f8      	str	r0, [r7, #12]
 801edd0:	60b9      	str	r1, [r7, #8]
 801edd2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801edd4:	68fb      	ldr	r3, [r7, #12]
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d106      	bne.n	801ede8 <tcp_output_segment+0x20>
 801edda:	4b64      	ldr	r3, [pc, #400]	@ (801ef6c <tcp_output_segment+0x1a4>)
 801eddc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801ede0:	4963      	ldr	r1, [pc, #396]	@ (801ef70 <tcp_output_segment+0x1a8>)
 801ede2:	4864      	ldr	r0, [pc, #400]	@ (801ef74 <tcp_output_segment+0x1ac>)
 801ede4:	f004 fc40 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ede8:	68bb      	ldr	r3, [r7, #8]
 801edea:	2b00      	cmp	r3, #0
 801edec:	d106      	bne.n	801edfc <tcp_output_segment+0x34>
 801edee:	4b5f      	ldr	r3, [pc, #380]	@ (801ef6c <tcp_output_segment+0x1a4>)
 801edf0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801edf4:	4960      	ldr	r1, [pc, #384]	@ (801ef78 <tcp_output_segment+0x1b0>)
 801edf6:	485f      	ldr	r0, [pc, #380]	@ (801ef74 <tcp_output_segment+0x1ac>)
 801edf8:	f004 fc36 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d106      	bne.n	801ee10 <tcp_output_segment+0x48>
 801ee02:	4b5a      	ldr	r3, [pc, #360]	@ (801ef6c <tcp_output_segment+0x1a4>)
 801ee04:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801ee08:	495c      	ldr	r1, [pc, #368]	@ (801ef7c <tcp_output_segment+0x1b4>)
 801ee0a:	485a      	ldr	r0, [pc, #360]	@ (801ef74 <tcp_output_segment+0x1ac>)
 801ee0c:	f004 fc2c 	bl	8023668 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ee10:	68f8      	ldr	r0, [r7, #12]
 801ee12:	f7ff ffb9 	bl	801ed88 <tcp_output_segment_busy>
 801ee16:	4603      	mov	r3, r0
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	d001      	beq.n	801ee20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	e0a1      	b.n	801ef64 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ee20:	68bb      	ldr	r3, [r7, #8]
 801ee22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	68dc      	ldr	r4, [r3, #12]
 801ee28:	4610      	mov	r0, r2
 801ee2a:	f7f8 fcaa 	bl	8017782 <lwip_htonl>
 801ee2e:	4603      	mov	r3, r0
 801ee30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ee32:	68bb      	ldr	r3, [r7, #8]
 801ee34:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	68dc      	ldr	r4, [r3, #12]
 801ee3a:	4610      	mov	r0, r2
 801ee3c:	f7f8 fc8c 	bl	8017758 <lwip_htons>
 801ee40:	4603      	mov	r3, r0
 801ee42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ee44:	68bb      	ldr	r3, [r7, #8]
 801ee46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ee48:	68ba      	ldr	r2, [r7, #8]
 801ee4a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801ee4c:	441a      	add	r2, r3
 801ee4e:	68bb      	ldr	r3, [r7, #8]
 801ee50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ee52:	68fb      	ldr	r3, [r7, #12]
 801ee54:	68db      	ldr	r3, [r3, #12]
 801ee56:	3314      	adds	r3, #20
 801ee58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ee5a:	68fb      	ldr	r3, [r7, #12]
 801ee5c:	7a9b      	ldrb	r3, [r3, #10]
 801ee5e:	f003 0301 	and.w	r3, r3, #1
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d015      	beq.n	801ee92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ee66:	68bb      	ldr	r3, [r7, #8]
 801ee68:	3304      	adds	r3, #4
 801ee6a:	461a      	mov	r2, r3
 801ee6c:	6879      	ldr	r1, [r7, #4]
 801ee6e:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801ee72:	f7fc fa37 	bl	801b2e4 <tcp_eff_send_mss_netif>
 801ee76:	4603      	mov	r3, r0
 801ee78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ee7a:	8b7b      	ldrh	r3, [r7, #26]
 801ee7c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801ee80:	4618      	mov	r0, r3
 801ee82:	f7f8 fc7e 	bl	8017782 <lwip_htonl>
 801ee86:	4602      	mov	r2, r0
 801ee88:	69fb      	ldr	r3, [r7, #28]
 801ee8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ee8c:	69fb      	ldr	r3, [r7, #28]
 801ee8e:	3304      	adds	r3, #4
 801ee90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ee92:	68bb      	ldr	r3, [r7, #8]
 801ee94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	da02      	bge.n	801eea2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ee9c:	68bb      	ldr	r3, [r7, #8]
 801ee9e:	2200      	movs	r2, #0
 801eea0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801eea2:	68bb      	ldr	r3, [r7, #8]
 801eea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d10c      	bne.n	801eec4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801eeaa:	4b35      	ldr	r3, [pc, #212]	@ (801ef80 <tcp_output_segment+0x1b8>)
 801eeac:	681a      	ldr	r2, [r3, #0]
 801eeae:	68bb      	ldr	r3, [r7, #8]
 801eeb0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801eeb2:	68fb      	ldr	r3, [r7, #12]
 801eeb4:	68db      	ldr	r3, [r3, #12]
 801eeb6:	685b      	ldr	r3, [r3, #4]
 801eeb8:	4618      	mov	r0, r3
 801eeba:	f7f8 fc62 	bl	8017782 <lwip_htonl>
 801eebe:	4602      	mov	r2, r0
 801eec0:	68bb      	ldr	r3, [r7, #8]
 801eec2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	68da      	ldr	r2, [r3, #12]
 801eec8:	68fb      	ldr	r3, [r7, #12]
 801eeca:	685b      	ldr	r3, [r3, #4]
 801eecc:	685b      	ldr	r3, [r3, #4]
 801eece:	1ad3      	subs	r3, r2, r3
 801eed0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	685b      	ldr	r3, [r3, #4]
 801eed6:	8959      	ldrh	r1, [r3, #10]
 801eed8:	68fb      	ldr	r3, [r7, #12]
 801eeda:	685b      	ldr	r3, [r3, #4]
 801eedc:	8b3a      	ldrh	r2, [r7, #24]
 801eede:	1a8a      	subs	r2, r1, r2
 801eee0:	b292      	uxth	r2, r2
 801eee2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801eee4:	68fb      	ldr	r3, [r7, #12]
 801eee6:	685b      	ldr	r3, [r3, #4]
 801eee8:	8919      	ldrh	r1, [r3, #8]
 801eeea:	68fb      	ldr	r3, [r7, #12]
 801eeec:	685b      	ldr	r3, [r3, #4]
 801eeee:	8b3a      	ldrh	r2, [r7, #24]
 801eef0:	1a8a      	subs	r2, r1, r2
 801eef2:	b292      	uxth	r2, r2
 801eef4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	685b      	ldr	r3, [r3, #4]
 801eefa:	68fa      	ldr	r2, [r7, #12]
 801eefc:	68d2      	ldr	r2, [r2, #12]
 801eefe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	68db      	ldr	r3, [r3, #12]
 801ef04:	2200      	movs	r2, #0
 801ef06:	741a      	strb	r2, [r3, #16]
 801ef08:	2200      	movs	r2, #0
 801ef0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ef0c:	68fb      	ldr	r3, [r7, #12]
 801ef0e:	68da      	ldr	r2, [r3, #12]
 801ef10:	68fb      	ldr	r3, [r7, #12]
 801ef12:	7a9b      	ldrb	r3, [r3, #10]
 801ef14:	f003 0301 	and.w	r3, r3, #1
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d001      	beq.n	801ef20 <tcp_output_segment+0x158>
 801ef1c:	2318      	movs	r3, #24
 801ef1e:	e000      	b.n	801ef22 <tcp_output_segment+0x15a>
 801ef20:	2314      	movs	r3, #20
 801ef22:	4413      	add	r3, r2
 801ef24:	69fa      	ldr	r2, [r7, #28]
 801ef26:	429a      	cmp	r2, r3
 801ef28:	d006      	beq.n	801ef38 <tcp_output_segment+0x170>
 801ef2a:	4b10      	ldr	r3, [pc, #64]	@ (801ef6c <tcp_output_segment+0x1a4>)
 801ef2c:	f240 621c 	movw	r2, #1564	@ 0x61c
 801ef30:	4914      	ldr	r1, [pc, #80]	@ (801ef84 <tcp_output_segment+0x1bc>)
 801ef32:	4810      	ldr	r0, [pc, #64]	@ (801ef74 <tcp_output_segment+0x1ac>)
 801ef34:	f004 fb98 	bl	8023668 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ef38:	68fb      	ldr	r3, [r7, #12]
 801ef3a:	6858      	ldr	r0, [r3, #4]
 801ef3c:	68b9      	ldr	r1, [r7, #8]
 801ef3e:	68bb      	ldr	r3, [r7, #8]
 801ef40:	1d1c      	adds	r4, r3, #4
 801ef42:	68bb      	ldr	r3, [r7, #8]
 801ef44:	7add      	ldrb	r5, [r3, #11]
 801ef46:	68bb      	ldr	r3, [r7, #8]
 801ef48:	7a9b      	ldrb	r3, [r3, #10]
 801ef4a:	687a      	ldr	r2, [r7, #4]
 801ef4c:	9202      	str	r2, [sp, #8]
 801ef4e:	2206      	movs	r2, #6
 801ef50:	9201      	str	r2, [sp, #4]
 801ef52:	9300      	str	r3, [sp, #0]
 801ef54:	462b      	mov	r3, r5
 801ef56:	4622      	mov	r2, r4
 801ef58:	f002 fbaa 	bl	80216b0 <ip4_output_if>
 801ef5c:	4603      	mov	r3, r0
 801ef5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ef60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ef64:	4618      	mov	r0, r3
 801ef66:	3720      	adds	r7, #32
 801ef68:	46bd      	mov	sp, r7
 801ef6a:	bdb0      	pop	{r4, r5, r7, pc}
 801ef6c:	08026be4 	.word	0x08026be4
 801ef70:	080271a8 	.word	0x080271a8
 801ef74:	08026c38 	.word	0x08026c38
 801ef78:	080271c8 	.word	0x080271c8
 801ef7c:	080271e8 	.word	0x080271e8
 801ef80:	20018bb0 	.word	0x20018bb0
 801ef84:	0802720c 	.word	0x0802720c

0801ef88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ef88:	b5b0      	push	{r4, r5, r7, lr}
 801ef8a:	b084      	sub	sp, #16
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d106      	bne.n	801efa4 <tcp_rexmit_rto_prepare+0x1c>
 801ef96:	4b31      	ldr	r3, [pc, #196]	@ (801f05c <tcp_rexmit_rto_prepare+0xd4>)
 801ef98:	f240 6263 	movw	r2, #1635	@ 0x663
 801ef9c:	4930      	ldr	r1, [pc, #192]	@ (801f060 <tcp_rexmit_rto_prepare+0xd8>)
 801ef9e:	4831      	ldr	r0, [pc, #196]	@ (801f064 <tcp_rexmit_rto_prepare+0xdc>)
 801efa0:	f004 fb62 	bl	8023668 <iprintf>

  if (pcb->unacked == NULL) {
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d102      	bne.n	801efb2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801efac:	f06f 0305 	mvn.w	r3, #5
 801efb0:	e050      	b.n	801f054 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efb6:	60fb      	str	r3, [r7, #12]
 801efb8:	e00b      	b.n	801efd2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801efba:	68f8      	ldr	r0, [r7, #12]
 801efbc:	f7ff fee4 	bl	801ed88 <tcp_output_segment_busy>
 801efc0:	4603      	mov	r3, r0
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d002      	beq.n	801efcc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801efc6:	f06f 0305 	mvn.w	r3, #5
 801efca:	e043      	b.n	801f054 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801efcc:	68fb      	ldr	r3, [r7, #12]
 801efce:	681b      	ldr	r3, [r3, #0]
 801efd0:	60fb      	str	r3, [r7, #12]
 801efd2:	68fb      	ldr	r3, [r7, #12]
 801efd4:	681b      	ldr	r3, [r3, #0]
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d1ef      	bne.n	801efba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801efda:	68f8      	ldr	r0, [r7, #12]
 801efdc:	f7ff fed4 	bl	801ed88 <tcp_output_segment_busy>
 801efe0:	4603      	mov	r3, r0
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d002      	beq.n	801efec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801efe6:	f06f 0305 	mvn.w	r3, #5
 801efea:	e033      	b.n	801f054 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801eff0:	68fb      	ldr	r3, [r7, #12]
 801eff2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	2200      	movs	r2, #0
 801f000:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	8b5b      	ldrh	r3, [r3, #26]
 801f006:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801f00a:	b29a      	uxth	r2, r3
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f010:	68fb      	ldr	r3, [r7, #12]
 801f012:	68db      	ldr	r3, [r3, #12]
 801f014:	685b      	ldr	r3, [r3, #4]
 801f016:	4618      	mov	r0, r3
 801f018:	f7f8 fbb3 	bl	8017782 <lwip_htonl>
 801f01c:	4604      	mov	r4, r0
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	891b      	ldrh	r3, [r3, #8]
 801f022:	461d      	mov	r5, r3
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	68db      	ldr	r3, [r3, #12]
 801f028:	899b      	ldrh	r3, [r3, #12]
 801f02a:	b29b      	uxth	r3, r3
 801f02c:	4618      	mov	r0, r3
 801f02e:	f7f8 fb93 	bl	8017758 <lwip_htons>
 801f032:	4603      	mov	r3, r0
 801f034:	b2db      	uxtb	r3, r3
 801f036:	f003 0303 	and.w	r3, r3, #3
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d001      	beq.n	801f042 <tcp_rexmit_rto_prepare+0xba>
 801f03e:	2301      	movs	r3, #1
 801f040:	e000      	b.n	801f044 <tcp_rexmit_rto_prepare+0xbc>
 801f042:	2300      	movs	r3, #0
 801f044:	442b      	add	r3, r5
 801f046:	18e2      	adds	r2, r4, r3
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	2200      	movs	r2, #0
 801f050:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801f052:	2300      	movs	r3, #0
}
 801f054:	4618      	mov	r0, r3
 801f056:	3710      	adds	r7, #16
 801f058:	46bd      	mov	sp, r7
 801f05a:	bdb0      	pop	{r4, r5, r7, pc}
 801f05c:	08026be4 	.word	0x08026be4
 801f060:	08027220 	.word	0x08027220
 801f064:	08026c38 	.word	0x08026c38

0801f068 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801f068:	b580      	push	{r7, lr}
 801f06a:	b082      	sub	sp, #8
 801f06c:	af00      	add	r7, sp, #0
 801f06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	2b00      	cmp	r3, #0
 801f074:	d106      	bne.n	801f084 <tcp_rexmit_rto_commit+0x1c>
 801f076:	4b0d      	ldr	r3, [pc, #52]	@ (801f0ac <tcp_rexmit_rto_commit+0x44>)
 801f078:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801f07c:	490c      	ldr	r1, [pc, #48]	@ (801f0b0 <tcp_rexmit_rto_commit+0x48>)
 801f07e:	480d      	ldr	r0, [pc, #52]	@ (801f0b4 <tcp_rexmit_rto_commit+0x4c>)
 801f080:	f004 faf2 	bl	8023668 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801f08a:	2bff      	cmp	r3, #255	@ 0xff
 801f08c:	d007      	beq.n	801f09e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801f094:	3301      	adds	r3, #1
 801f096:	b2da      	uxtb	r2, r3
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801f09e:	6878      	ldr	r0, [r7, #4]
 801f0a0:	f7ff fc7e 	bl	801e9a0 <tcp_output>
}
 801f0a4:	bf00      	nop
 801f0a6:	3708      	adds	r7, #8
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd80      	pop	{r7, pc}
 801f0ac:	08026be4 	.word	0x08026be4
 801f0b0:	08027244 	.word	0x08027244
 801f0b4:	08026c38 	.word	0x08026c38

0801f0b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801f0b8:	b580      	push	{r7, lr}
 801f0ba:	b082      	sub	sp, #8
 801f0bc:	af00      	add	r7, sp, #0
 801f0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d106      	bne.n	801f0d4 <tcp_rexmit_rto+0x1c>
 801f0c6:	4b0a      	ldr	r3, [pc, #40]	@ (801f0f0 <tcp_rexmit_rto+0x38>)
 801f0c8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801f0cc:	4909      	ldr	r1, [pc, #36]	@ (801f0f4 <tcp_rexmit_rto+0x3c>)
 801f0ce:	480a      	ldr	r0, [pc, #40]	@ (801f0f8 <tcp_rexmit_rto+0x40>)
 801f0d0:	f004 faca 	bl	8023668 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f0d4:	6878      	ldr	r0, [r7, #4]
 801f0d6:	f7ff ff57 	bl	801ef88 <tcp_rexmit_rto_prepare>
 801f0da:	4603      	mov	r3, r0
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d102      	bne.n	801f0e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801f0e0:	6878      	ldr	r0, [r7, #4]
 801f0e2:	f7ff ffc1 	bl	801f068 <tcp_rexmit_rto_commit>
  }
}
 801f0e6:	bf00      	nop
 801f0e8:	3708      	adds	r7, #8
 801f0ea:	46bd      	mov	sp, r7
 801f0ec:	bd80      	pop	{r7, pc}
 801f0ee:	bf00      	nop
 801f0f0:	08026be4 	.word	0x08026be4
 801f0f4:	08027268 	.word	0x08027268
 801f0f8:	08026c38 	.word	0x08026c38

0801f0fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801f0fc:	b590      	push	{r4, r7, lr}
 801f0fe:	b085      	sub	sp, #20
 801f100:	af00      	add	r7, sp, #0
 801f102:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	2b00      	cmp	r3, #0
 801f108:	d106      	bne.n	801f118 <tcp_rexmit+0x1c>
 801f10a:	4b2f      	ldr	r3, [pc, #188]	@ (801f1c8 <tcp_rexmit+0xcc>)
 801f10c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801f110:	492e      	ldr	r1, [pc, #184]	@ (801f1cc <tcp_rexmit+0xd0>)
 801f112:	482f      	ldr	r0, [pc, #188]	@ (801f1d0 <tcp_rexmit+0xd4>)
 801f114:	f004 faa8 	bl	8023668 <iprintf>

  if (pcb->unacked == NULL) {
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d102      	bne.n	801f126 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801f120:	f06f 0305 	mvn.w	r3, #5
 801f124:	e04c      	b.n	801f1c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f12a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801f12c:	68b8      	ldr	r0, [r7, #8]
 801f12e:	f7ff fe2b 	bl	801ed88 <tcp_output_segment_busy>
 801f132:	4603      	mov	r3, r0
 801f134:	2b00      	cmp	r3, #0
 801f136:	d002      	beq.n	801f13e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801f138:	f06f 0305 	mvn.w	r3, #5
 801f13c:	e040      	b.n	801f1c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801f13e:	68bb      	ldr	r3, [r7, #8]
 801f140:	681a      	ldr	r2, [r3, #0]
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	336c      	adds	r3, #108	@ 0x6c
 801f14a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f14c:	e002      	b.n	801f154 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	681b      	ldr	r3, [r3, #0]
 801f152:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f154:	68fb      	ldr	r3, [r7, #12]
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	2b00      	cmp	r3, #0
 801f15a:	d011      	beq.n	801f180 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	68db      	ldr	r3, [r3, #12]
 801f162:	685b      	ldr	r3, [r3, #4]
 801f164:	4618      	mov	r0, r3
 801f166:	f7f8 fb0c 	bl	8017782 <lwip_htonl>
 801f16a:	4604      	mov	r4, r0
 801f16c:	68bb      	ldr	r3, [r7, #8]
 801f16e:	68db      	ldr	r3, [r3, #12]
 801f170:	685b      	ldr	r3, [r3, #4]
 801f172:	4618      	mov	r0, r3
 801f174:	f7f8 fb05 	bl	8017782 <lwip_htonl>
 801f178:	4603      	mov	r3, r0
 801f17a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	dbe6      	blt.n	801f14e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801f180:	68fb      	ldr	r3, [r7, #12]
 801f182:	681a      	ldr	r2, [r3, #0]
 801f184:	68bb      	ldr	r3, [r7, #8]
 801f186:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801f188:	68fb      	ldr	r3, [r7, #12]
 801f18a:	68ba      	ldr	r2, [r7, #8]
 801f18c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801f18e:	68bb      	ldr	r3, [r7, #8]
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	2b00      	cmp	r3, #0
 801f194:	d103      	bne.n	801f19e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	2200      	movs	r2, #0
 801f19a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801f1a4:	2bff      	cmp	r3, #255	@ 0xff
 801f1a6:	d007      	beq.n	801f1b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801f1ae:	3301      	adds	r3, #1
 801f1b0:	b2da      	uxtb	r2, r3
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801f1be:	2300      	movs	r3, #0
}
 801f1c0:	4618      	mov	r0, r3
 801f1c2:	3714      	adds	r7, #20
 801f1c4:	46bd      	mov	sp, r7
 801f1c6:	bd90      	pop	{r4, r7, pc}
 801f1c8:	08026be4 	.word	0x08026be4
 801f1cc:	08027284 	.word	0x08027284
 801f1d0:	08026c38 	.word	0x08026c38

0801f1d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801f1d4:	b580      	push	{r7, lr}
 801f1d6:	b082      	sub	sp, #8
 801f1d8:	af00      	add	r7, sp, #0
 801f1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d106      	bne.n	801f1f0 <tcp_rexmit_fast+0x1c>
 801f1e2:	4b2a      	ldr	r3, [pc, #168]	@ (801f28c <tcp_rexmit_fast+0xb8>)
 801f1e4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801f1e8:	4929      	ldr	r1, [pc, #164]	@ (801f290 <tcp_rexmit_fast+0xbc>)
 801f1ea:	482a      	ldr	r0, [pc, #168]	@ (801f294 <tcp_rexmit_fast+0xc0>)
 801f1ec:	f004 fa3c 	bl	8023668 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d045      	beq.n	801f284 <tcp_rexmit_fast+0xb0>
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	8b5b      	ldrh	r3, [r3, #26]
 801f1fc:	f003 0304 	and.w	r3, r3, #4
 801f200:	2b00      	cmp	r3, #0
 801f202:	d13f      	bne.n	801f284 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f204:	6878      	ldr	r0, [r7, #4]
 801f206:	f7ff ff79 	bl	801f0fc <tcp_rexmit>
 801f20a:	4603      	mov	r3, r0
 801f20c:	2b00      	cmp	r3, #0
 801f20e:	d139      	bne.n	801f284 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801f21c:	4293      	cmp	r3, r2
 801f21e:	bf28      	it	cs
 801f220:	4613      	movcs	r3, r2
 801f222:	b29b      	uxth	r3, r3
 801f224:	2b00      	cmp	r3, #0
 801f226:	da00      	bge.n	801f22a <tcp_rexmit_fast+0x56>
 801f228:	3301      	adds	r3, #1
 801f22a:	105b      	asrs	r3, r3, #1
 801f22c:	b29a      	uxth	r2, r3
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801f23a:	461a      	mov	r2, r3
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f240:	005b      	lsls	r3, r3, #1
 801f242:	429a      	cmp	r2, r3
 801f244:	d206      	bcs.n	801f254 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f24a:	005b      	lsls	r3, r3, #1
 801f24c:	b29a      	uxth	r2, r3
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801f25a:	687b      	ldr	r3, [r7, #4]
 801f25c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f25e:	4619      	mov	r1, r3
 801f260:	0049      	lsls	r1, r1, #1
 801f262:	440b      	add	r3, r1
 801f264:	b29b      	uxth	r3, r3
 801f266:	4413      	add	r3, r2
 801f268:	b29a      	uxth	r2, r3
 801f26a:	687b      	ldr	r3, [r7, #4]
 801f26c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	8b5b      	ldrh	r3, [r3, #26]
 801f274:	f043 0304 	orr.w	r3, r3, #4
 801f278:	b29a      	uxth	r2, r3
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	2200      	movs	r2, #0
 801f282:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801f284:	bf00      	nop
 801f286:	3708      	adds	r7, #8
 801f288:	46bd      	mov	sp, r7
 801f28a:	bd80      	pop	{r7, pc}
 801f28c:	08026be4 	.word	0x08026be4
 801f290:	0802729c 	.word	0x0802729c
 801f294:	08026c38 	.word	0x08026c38

0801f298 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801f298:	b580      	push	{r7, lr}
 801f29a:	b086      	sub	sp, #24
 801f29c:	af00      	add	r7, sp, #0
 801f29e:	60f8      	str	r0, [r7, #12]
 801f2a0:	607b      	str	r3, [r7, #4]
 801f2a2:	460b      	mov	r3, r1
 801f2a4:	817b      	strh	r3, [r7, #10]
 801f2a6:	4613      	mov	r3, r2
 801f2a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f2aa:	897a      	ldrh	r2, [r7, #10]
 801f2ac:	893b      	ldrh	r3, [r7, #8]
 801f2ae:	4413      	add	r3, r2
 801f2b0:	b29b      	uxth	r3, r3
 801f2b2:	3314      	adds	r3, #20
 801f2b4:	b29b      	uxth	r3, r3
 801f2b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f2ba:	4619      	mov	r1, r3
 801f2bc:	2022      	movs	r0, #34	@ 0x22
 801f2be:	f7f9 fb69 	bl	8018994 <pbuf_alloc>
 801f2c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801f2c4:	697b      	ldr	r3, [r7, #20]
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d04d      	beq.n	801f366 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f2ca:	897b      	ldrh	r3, [r7, #10]
 801f2cc:	3313      	adds	r3, #19
 801f2ce:	697a      	ldr	r2, [r7, #20]
 801f2d0:	8952      	ldrh	r2, [r2, #10]
 801f2d2:	4293      	cmp	r3, r2
 801f2d4:	db06      	blt.n	801f2e4 <tcp_output_alloc_header_common+0x4c>
 801f2d6:	4b26      	ldr	r3, [pc, #152]	@ (801f370 <tcp_output_alloc_header_common+0xd8>)
 801f2d8:	f240 7223 	movw	r2, #1827	@ 0x723
 801f2dc:	4925      	ldr	r1, [pc, #148]	@ (801f374 <tcp_output_alloc_header_common+0xdc>)
 801f2de:	4826      	ldr	r0, [pc, #152]	@ (801f378 <tcp_output_alloc_header_common+0xe0>)
 801f2e0:	f004 f9c2 	bl	8023668 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801f2e4:	697b      	ldr	r3, [r7, #20]
 801f2e6:	685b      	ldr	r3, [r3, #4]
 801f2e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801f2ea:	8c3b      	ldrh	r3, [r7, #32]
 801f2ec:	4618      	mov	r0, r3
 801f2ee:	f7f8 fa33 	bl	8017758 <lwip_htons>
 801f2f2:	4603      	mov	r3, r0
 801f2f4:	461a      	mov	r2, r3
 801f2f6:	693b      	ldr	r3, [r7, #16]
 801f2f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801f2fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f2fc:	4618      	mov	r0, r3
 801f2fe:	f7f8 fa2b 	bl	8017758 <lwip_htons>
 801f302:	4603      	mov	r3, r0
 801f304:	461a      	mov	r2, r3
 801f306:	693b      	ldr	r3, [r7, #16]
 801f308:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801f30a:	693b      	ldr	r3, [r7, #16]
 801f30c:	687a      	ldr	r2, [r7, #4]
 801f30e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801f310:	68f8      	ldr	r0, [r7, #12]
 801f312:	f7f8 fa36 	bl	8017782 <lwip_htonl>
 801f316:	4602      	mov	r2, r0
 801f318:	693b      	ldr	r3, [r7, #16]
 801f31a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f31c:	897b      	ldrh	r3, [r7, #10]
 801f31e:	089b      	lsrs	r3, r3, #2
 801f320:	b29b      	uxth	r3, r3
 801f322:	3305      	adds	r3, #5
 801f324:	b29b      	uxth	r3, r3
 801f326:	031b      	lsls	r3, r3, #12
 801f328:	b29a      	uxth	r2, r3
 801f32a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801f32e:	b29b      	uxth	r3, r3
 801f330:	4313      	orrs	r3, r2
 801f332:	b29b      	uxth	r3, r3
 801f334:	4618      	mov	r0, r3
 801f336:	f7f8 fa0f 	bl	8017758 <lwip_htons>
 801f33a:	4603      	mov	r3, r0
 801f33c:	461a      	mov	r2, r3
 801f33e:	693b      	ldr	r3, [r7, #16]
 801f340:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801f342:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801f344:	4618      	mov	r0, r3
 801f346:	f7f8 fa07 	bl	8017758 <lwip_htons>
 801f34a:	4603      	mov	r3, r0
 801f34c:	461a      	mov	r2, r3
 801f34e:	693b      	ldr	r3, [r7, #16]
 801f350:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801f352:	693b      	ldr	r3, [r7, #16]
 801f354:	2200      	movs	r2, #0
 801f356:	741a      	strb	r2, [r3, #16]
 801f358:	2200      	movs	r2, #0
 801f35a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801f35c:	693b      	ldr	r3, [r7, #16]
 801f35e:	2200      	movs	r2, #0
 801f360:	749a      	strb	r2, [r3, #18]
 801f362:	2200      	movs	r2, #0
 801f364:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801f366:	697b      	ldr	r3, [r7, #20]
}
 801f368:	4618      	mov	r0, r3
 801f36a:	3718      	adds	r7, #24
 801f36c:	46bd      	mov	sp, r7
 801f36e:	bd80      	pop	{r7, pc}
 801f370:	08026be4 	.word	0x08026be4
 801f374:	080272bc 	.word	0x080272bc
 801f378:	08026c38 	.word	0x08026c38

0801f37c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801f37c:	b5b0      	push	{r4, r5, r7, lr}
 801f37e:	b08a      	sub	sp, #40	@ 0x28
 801f380:	af04      	add	r7, sp, #16
 801f382:	60f8      	str	r0, [r7, #12]
 801f384:	607b      	str	r3, [r7, #4]
 801f386:	460b      	mov	r3, r1
 801f388:	817b      	strh	r3, [r7, #10]
 801f38a:	4613      	mov	r3, r2
 801f38c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	2b00      	cmp	r3, #0
 801f392:	d106      	bne.n	801f3a2 <tcp_output_alloc_header+0x26>
 801f394:	4b15      	ldr	r3, [pc, #84]	@ (801f3ec <tcp_output_alloc_header+0x70>)
 801f396:	f240 7242 	movw	r2, #1858	@ 0x742
 801f39a:	4915      	ldr	r1, [pc, #84]	@ (801f3f0 <tcp_output_alloc_header+0x74>)
 801f39c:	4815      	ldr	r0, [pc, #84]	@ (801f3f4 <tcp_output_alloc_header+0x78>)
 801f39e:	f004 f963 	bl	8023668 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801f3a6:	68fb      	ldr	r3, [r7, #12]
 801f3a8:	8adb      	ldrh	r3, [r3, #22]
 801f3aa:	68fa      	ldr	r2, [r7, #12]
 801f3ac:	8b12      	ldrh	r2, [r2, #24]
 801f3ae:	68f9      	ldr	r1, [r7, #12]
 801f3b0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801f3b2:	893d      	ldrh	r5, [r7, #8]
 801f3b4:	897c      	ldrh	r4, [r7, #10]
 801f3b6:	9103      	str	r1, [sp, #12]
 801f3b8:	2110      	movs	r1, #16
 801f3ba:	9102      	str	r1, [sp, #8]
 801f3bc:	9201      	str	r2, [sp, #4]
 801f3be:	9300      	str	r3, [sp, #0]
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	462a      	mov	r2, r5
 801f3c4:	4621      	mov	r1, r4
 801f3c6:	f7ff ff67 	bl	801f298 <tcp_output_alloc_header_common>
 801f3ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801f3cc:	697b      	ldr	r3, [r7, #20]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d006      	beq.n	801f3e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f3d6:	68fa      	ldr	r2, [r7, #12]
 801f3d8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801f3da:	441a      	add	r2, r3
 801f3dc:	68fb      	ldr	r3, [r7, #12]
 801f3de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801f3e0:	697b      	ldr	r3, [r7, #20]
}
 801f3e2:	4618      	mov	r0, r3
 801f3e4:	3718      	adds	r7, #24
 801f3e6:	46bd      	mov	sp, r7
 801f3e8:	bdb0      	pop	{r4, r5, r7, pc}
 801f3ea:	bf00      	nop
 801f3ec:	08026be4 	.word	0x08026be4
 801f3f0:	080272ec 	.word	0x080272ec
 801f3f4:	08026c38 	.word	0x08026c38

0801f3f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801f3f8:	b580      	push	{r7, lr}
 801f3fa:	b088      	sub	sp, #32
 801f3fc:	af00      	add	r7, sp, #0
 801f3fe:	60f8      	str	r0, [r7, #12]
 801f400:	60b9      	str	r1, [r7, #8]
 801f402:	4611      	mov	r1, r2
 801f404:	461a      	mov	r2, r3
 801f406:	460b      	mov	r3, r1
 801f408:	71fb      	strb	r3, [r7, #7]
 801f40a:	4613      	mov	r3, r2
 801f40c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801f40e:	2300      	movs	r3, #0
 801f410:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801f412:	68bb      	ldr	r3, [r7, #8]
 801f414:	2b00      	cmp	r3, #0
 801f416:	d106      	bne.n	801f426 <tcp_output_fill_options+0x2e>
 801f418:	4b12      	ldr	r3, [pc, #72]	@ (801f464 <tcp_output_fill_options+0x6c>)
 801f41a:	f240 7256 	movw	r2, #1878	@ 0x756
 801f41e:	4912      	ldr	r1, [pc, #72]	@ (801f468 <tcp_output_fill_options+0x70>)
 801f420:	4812      	ldr	r0, [pc, #72]	@ (801f46c <tcp_output_fill_options+0x74>)
 801f422:	f004 f921 	bl	8023668 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801f426:	68bb      	ldr	r3, [r7, #8]
 801f428:	685b      	ldr	r3, [r3, #4]
 801f42a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801f42c:	69bb      	ldr	r3, [r7, #24]
 801f42e:	3314      	adds	r3, #20
 801f430:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801f432:	8bfb      	ldrh	r3, [r7, #30]
 801f434:	009b      	lsls	r3, r3, #2
 801f436:	461a      	mov	r2, r3
 801f438:	79fb      	ldrb	r3, [r7, #7]
 801f43a:	009b      	lsls	r3, r3, #2
 801f43c:	f003 0304 	and.w	r3, r3, #4
 801f440:	4413      	add	r3, r2
 801f442:	3314      	adds	r3, #20
 801f444:	69ba      	ldr	r2, [r7, #24]
 801f446:	4413      	add	r3, r2
 801f448:	697a      	ldr	r2, [r7, #20]
 801f44a:	429a      	cmp	r2, r3
 801f44c:	d006      	beq.n	801f45c <tcp_output_fill_options+0x64>
 801f44e:	4b05      	ldr	r3, [pc, #20]	@ (801f464 <tcp_output_fill_options+0x6c>)
 801f450:	f240 7275 	movw	r2, #1909	@ 0x775
 801f454:	4906      	ldr	r1, [pc, #24]	@ (801f470 <tcp_output_fill_options+0x78>)
 801f456:	4805      	ldr	r0, [pc, #20]	@ (801f46c <tcp_output_fill_options+0x74>)
 801f458:	f004 f906 	bl	8023668 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801f45c:	bf00      	nop
 801f45e:	3720      	adds	r7, #32
 801f460:	46bd      	mov	sp, r7
 801f462:	bd80      	pop	{r7, pc}
 801f464:	08026be4 	.word	0x08026be4
 801f468:	08027314 	.word	0x08027314
 801f46c:	08026c38 	.word	0x08026c38
 801f470:	0802720c 	.word	0x0802720c

0801f474 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f474:	b580      	push	{r7, lr}
 801f476:	b08a      	sub	sp, #40	@ 0x28
 801f478:	af04      	add	r7, sp, #16
 801f47a:	60f8      	str	r0, [r7, #12]
 801f47c:	60b9      	str	r1, [r7, #8]
 801f47e:	607a      	str	r2, [r7, #4]
 801f480:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f482:	68bb      	ldr	r3, [r7, #8]
 801f484:	2b00      	cmp	r3, #0
 801f486:	d106      	bne.n	801f496 <tcp_output_control_segment+0x22>
 801f488:	4b1c      	ldr	r3, [pc, #112]	@ (801f4fc <tcp_output_control_segment+0x88>)
 801f48a:	f240 7287 	movw	r2, #1927	@ 0x787
 801f48e:	491c      	ldr	r1, [pc, #112]	@ (801f500 <tcp_output_control_segment+0x8c>)
 801f490:	481c      	ldr	r0, [pc, #112]	@ (801f504 <tcp_output_control_segment+0x90>)
 801f492:	f004 f8e9 	bl	8023668 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801f496:	683a      	ldr	r2, [r7, #0]
 801f498:	6879      	ldr	r1, [r7, #4]
 801f49a:	68f8      	ldr	r0, [r7, #12]
 801f49c:	f7fe faea 	bl	801da74 <tcp_route>
 801f4a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801f4a2:	693b      	ldr	r3, [r7, #16]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d102      	bne.n	801f4ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801f4a8:	23fc      	movs	r3, #252	@ 0xfc
 801f4aa:	75fb      	strb	r3, [r7, #23]
 801f4ac:	e01c      	b.n	801f4e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801f4ae:	68fb      	ldr	r3, [r7, #12]
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d006      	beq.n	801f4c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f4b4:	68fb      	ldr	r3, [r7, #12]
 801f4b6:	7adb      	ldrb	r3, [r3, #11]
 801f4b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801f4ba:	68fb      	ldr	r3, [r7, #12]
 801f4bc:	7a9b      	ldrb	r3, [r3, #10]
 801f4be:	757b      	strb	r3, [r7, #21]
 801f4c0:	e003      	b.n	801f4ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801f4c2:	23ff      	movs	r3, #255	@ 0xff
 801f4c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f4ca:	7dba      	ldrb	r2, [r7, #22]
 801f4cc:	693b      	ldr	r3, [r7, #16]
 801f4ce:	9302      	str	r3, [sp, #8]
 801f4d0:	2306      	movs	r3, #6
 801f4d2:	9301      	str	r3, [sp, #4]
 801f4d4:	7d7b      	ldrb	r3, [r7, #21]
 801f4d6:	9300      	str	r3, [sp, #0]
 801f4d8:	4613      	mov	r3, r2
 801f4da:	683a      	ldr	r2, [r7, #0]
 801f4dc:	6879      	ldr	r1, [r7, #4]
 801f4de:	68b8      	ldr	r0, [r7, #8]
 801f4e0:	f002 f8e6 	bl	80216b0 <ip4_output_if>
 801f4e4:	4603      	mov	r3, r0
 801f4e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801f4e8:	68b8      	ldr	r0, [r7, #8]
 801f4ea:	f7f9 fd69 	bl	8018fc0 <pbuf_free>
  return err;
 801f4ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	3718      	adds	r7, #24
 801f4f6:	46bd      	mov	sp, r7
 801f4f8:	bd80      	pop	{r7, pc}
 801f4fa:	bf00      	nop
 801f4fc:	08026be4 	.word	0x08026be4
 801f500:	0802733c 	.word	0x0802733c
 801f504:	08026c38 	.word	0x08026c38

0801f508 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f508:	b590      	push	{r4, r7, lr}
 801f50a:	b08b      	sub	sp, #44	@ 0x2c
 801f50c:	af04      	add	r7, sp, #16
 801f50e:	60f8      	str	r0, [r7, #12]
 801f510:	60b9      	str	r1, [r7, #8]
 801f512:	607a      	str	r2, [r7, #4]
 801f514:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f516:	683b      	ldr	r3, [r7, #0]
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d106      	bne.n	801f52a <tcp_rst+0x22>
 801f51c:	4b1f      	ldr	r3, [pc, #124]	@ (801f59c <tcp_rst+0x94>)
 801f51e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801f522:	491f      	ldr	r1, [pc, #124]	@ (801f5a0 <tcp_rst+0x98>)
 801f524:	481f      	ldr	r0, [pc, #124]	@ (801f5a4 <tcp_rst+0x9c>)
 801f526:	f004 f89f 	bl	8023668 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d106      	bne.n	801f53e <tcp_rst+0x36>
 801f530:	4b1a      	ldr	r3, [pc, #104]	@ (801f59c <tcp_rst+0x94>)
 801f532:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801f536:	491c      	ldr	r1, [pc, #112]	@ (801f5a8 <tcp_rst+0xa0>)
 801f538:	481a      	ldr	r0, [pc, #104]	@ (801f5a4 <tcp_rst+0x9c>)
 801f53a:	f004 f895 	bl	8023668 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f53e:	2300      	movs	r3, #0
 801f540:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801f542:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801f546:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f548:	7dfb      	ldrb	r3, [r7, #23]
 801f54a:	b29c      	uxth	r4, r3
 801f54c:	68b8      	ldr	r0, [r7, #8]
 801f54e:	f7f8 f918 	bl	8017782 <lwip_htonl>
 801f552:	4602      	mov	r2, r0
 801f554:	8abb      	ldrh	r3, [r7, #20]
 801f556:	9303      	str	r3, [sp, #12]
 801f558:	2314      	movs	r3, #20
 801f55a:	9302      	str	r3, [sp, #8]
 801f55c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801f55e:	9301      	str	r3, [sp, #4]
 801f560:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801f562:	9300      	str	r3, [sp, #0]
 801f564:	4613      	mov	r3, r2
 801f566:	2200      	movs	r2, #0
 801f568:	4621      	mov	r1, r4
 801f56a:	6878      	ldr	r0, [r7, #4]
 801f56c:	f7ff fe94 	bl	801f298 <tcp_output_alloc_header_common>
 801f570:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f572:	693b      	ldr	r3, [r7, #16]
 801f574:	2b00      	cmp	r3, #0
 801f576:	d00c      	beq.n	801f592 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f578:	7dfb      	ldrb	r3, [r7, #23]
 801f57a:	2200      	movs	r2, #0
 801f57c:	6939      	ldr	r1, [r7, #16]
 801f57e:	68f8      	ldr	r0, [r7, #12]
 801f580:	f7ff ff3a 	bl	801f3f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f586:	683a      	ldr	r2, [r7, #0]
 801f588:	6939      	ldr	r1, [r7, #16]
 801f58a:	68f8      	ldr	r0, [r7, #12]
 801f58c:	f7ff ff72 	bl	801f474 <tcp_output_control_segment>
 801f590:	e000      	b.n	801f594 <tcp_rst+0x8c>
    return;
 801f592:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f594:	371c      	adds	r7, #28
 801f596:	46bd      	mov	sp, r7
 801f598:	bd90      	pop	{r4, r7, pc}
 801f59a:	bf00      	nop
 801f59c:	08026be4 	.word	0x08026be4
 801f5a0:	08027368 	.word	0x08027368
 801f5a4:	08026c38 	.word	0x08026c38
 801f5a8:	08027384 	.word	0x08027384

0801f5ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f5ac:	b590      	push	{r4, r7, lr}
 801f5ae:	b087      	sub	sp, #28
 801f5b0:	af00      	add	r7, sp, #0
 801f5b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801f5b4:	2300      	movs	r3, #0
 801f5b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801f5b8:	2300      	movs	r3, #0
 801f5ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d106      	bne.n	801f5d0 <tcp_send_empty_ack+0x24>
 801f5c2:	4b28      	ldr	r3, [pc, #160]	@ (801f664 <tcp_send_empty_ack+0xb8>)
 801f5c4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801f5c8:	4927      	ldr	r1, [pc, #156]	@ (801f668 <tcp_send_empty_ack+0xbc>)
 801f5ca:	4828      	ldr	r0, [pc, #160]	@ (801f66c <tcp_send_empty_ack+0xc0>)
 801f5cc:	f004 f84c 	bl	8023668 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f5d0:	7dfb      	ldrb	r3, [r7, #23]
 801f5d2:	009b      	lsls	r3, r3, #2
 801f5d4:	b2db      	uxtb	r3, r3
 801f5d6:	f003 0304 	and.w	r3, r3, #4
 801f5da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f5dc:	7d7b      	ldrb	r3, [r7, #21]
 801f5de:	b29c      	uxth	r4, r3
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f5e4:	4618      	mov	r0, r3
 801f5e6:	f7f8 f8cc 	bl	8017782 <lwip_htonl>
 801f5ea:	4603      	mov	r3, r0
 801f5ec:	2200      	movs	r2, #0
 801f5ee:	4621      	mov	r1, r4
 801f5f0:	6878      	ldr	r0, [r7, #4]
 801f5f2:	f7ff fec3 	bl	801f37c <tcp_output_alloc_header>
 801f5f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f5f8:	693b      	ldr	r3, [r7, #16]
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	d109      	bne.n	801f612 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	8b5b      	ldrh	r3, [r3, #26]
 801f602:	f043 0303 	orr.w	r3, r3, #3
 801f606:	b29a      	uxth	r2, r3
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801f60c:	f06f 0301 	mvn.w	r3, #1
 801f610:	e023      	b.n	801f65a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801f612:	7dbb      	ldrb	r3, [r7, #22]
 801f614:	7dfa      	ldrb	r2, [r7, #23]
 801f616:	6939      	ldr	r1, [r7, #16]
 801f618:	6878      	ldr	r0, [r7, #4]
 801f61a:	f7ff feed 	bl	801f3f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f61e:	687a      	ldr	r2, [r7, #4]
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	3304      	adds	r3, #4
 801f624:	6939      	ldr	r1, [r7, #16]
 801f626:	6878      	ldr	r0, [r7, #4]
 801f628:	f7ff ff24 	bl	801f474 <tcp_output_control_segment>
 801f62c:	4603      	mov	r3, r0
 801f62e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801f630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f634:	2b00      	cmp	r3, #0
 801f636:	d007      	beq.n	801f648 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	8b5b      	ldrh	r3, [r3, #26]
 801f63c:	f043 0303 	orr.w	r3, r3, #3
 801f640:	b29a      	uxth	r2, r3
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	835a      	strh	r2, [r3, #26]
 801f646:	e006      	b.n	801f656 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	8b5b      	ldrh	r3, [r3, #26]
 801f64c:	f023 0303 	bic.w	r3, r3, #3
 801f650:	b29a      	uxth	r2, r3
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801f656:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f65a:	4618      	mov	r0, r3
 801f65c:	371c      	adds	r7, #28
 801f65e:	46bd      	mov	sp, r7
 801f660:	bd90      	pop	{r4, r7, pc}
 801f662:	bf00      	nop
 801f664:	08026be4 	.word	0x08026be4
 801f668:	080273a0 	.word	0x080273a0
 801f66c:	08026c38 	.word	0x08026c38

0801f670 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f670:	b590      	push	{r4, r7, lr}
 801f672:	b087      	sub	sp, #28
 801f674:	af00      	add	r7, sp, #0
 801f676:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f678:	2300      	movs	r3, #0
 801f67a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	2b00      	cmp	r3, #0
 801f680:	d106      	bne.n	801f690 <tcp_keepalive+0x20>
 801f682:	4b18      	ldr	r3, [pc, #96]	@ (801f6e4 <tcp_keepalive+0x74>)
 801f684:	f640 0224 	movw	r2, #2084	@ 0x824
 801f688:	4917      	ldr	r1, [pc, #92]	@ (801f6e8 <tcp_keepalive+0x78>)
 801f68a:	4818      	ldr	r0, [pc, #96]	@ (801f6ec <tcp_keepalive+0x7c>)
 801f68c:	f003 ffec 	bl	8023668 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f690:	7dfb      	ldrb	r3, [r7, #23]
 801f692:	b29c      	uxth	r4, r3
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f698:	3b01      	subs	r3, #1
 801f69a:	4618      	mov	r0, r3
 801f69c:	f7f8 f871 	bl	8017782 <lwip_htonl>
 801f6a0:	4603      	mov	r3, r0
 801f6a2:	2200      	movs	r2, #0
 801f6a4:	4621      	mov	r1, r4
 801f6a6:	6878      	ldr	r0, [r7, #4]
 801f6a8:	f7ff fe68 	bl	801f37c <tcp_output_alloc_header>
 801f6ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f6ae:	693b      	ldr	r3, [r7, #16]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d102      	bne.n	801f6ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801f6b4:	f04f 33ff 	mov.w	r3, #4294967295
 801f6b8:	e010      	b.n	801f6dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f6ba:	7dfb      	ldrb	r3, [r7, #23]
 801f6bc:	2200      	movs	r2, #0
 801f6be:	6939      	ldr	r1, [r7, #16]
 801f6c0:	6878      	ldr	r0, [r7, #4]
 801f6c2:	f7ff fe99 	bl	801f3f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f6c6:	687a      	ldr	r2, [r7, #4]
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	3304      	adds	r3, #4
 801f6cc:	6939      	ldr	r1, [r7, #16]
 801f6ce:	6878      	ldr	r0, [r7, #4]
 801f6d0:	f7ff fed0 	bl	801f474 <tcp_output_control_segment>
 801f6d4:	4603      	mov	r3, r0
 801f6d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f6d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f6dc:	4618      	mov	r0, r3
 801f6de:	371c      	adds	r7, #28
 801f6e0:	46bd      	mov	sp, r7
 801f6e2:	bd90      	pop	{r4, r7, pc}
 801f6e4:	08026be4 	.word	0x08026be4
 801f6e8:	080273c0 	.word	0x080273c0
 801f6ec:	08026c38 	.word	0x08026c38

0801f6f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f6f0:	b590      	push	{r4, r7, lr}
 801f6f2:	b08b      	sub	sp, #44	@ 0x2c
 801f6f4:	af00      	add	r7, sp, #0
 801f6f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f6f8:	2300      	movs	r3, #0
 801f6fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f6fe:	687b      	ldr	r3, [r7, #4]
 801f700:	2b00      	cmp	r3, #0
 801f702:	d106      	bne.n	801f712 <tcp_zero_window_probe+0x22>
 801f704:	4b4c      	ldr	r3, [pc, #304]	@ (801f838 <tcp_zero_window_probe+0x148>)
 801f706:	f640 024f 	movw	r2, #2127	@ 0x84f
 801f70a:	494c      	ldr	r1, [pc, #304]	@ (801f83c <tcp_zero_window_probe+0x14c>)
 801f70c:	484c      	ldr	r0, [pc, #304]	@ (801f840 <tcp_zero_window_probe+0x150>)
 801f70e:	f003 ffab 	bl	8023668 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f716:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f718:	6a3b      	ldr	r3, [r7, #32]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d101      	bne.n	801f722 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f71e:	2300      	movs	r3, #0
 801f720:	e086      	b.n	801f830 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801f728:	2bff      	cmp	r3, #255	@ 0xff
 801f72a:	d007      	beq.n	801f73c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801f732:	3301      	adds	r3, #1
 801f734:	b2da      	uxtb	r2, r3
 801f736:	687b      	ldr	r3, [r7, #4]
 801f738:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f73c:	6a3b      	ldr	r3, [r7, #32]
 801f73e:	68db      	ldr	r3, [r3, #12]
 801f740:	899b      	ldrh	r3, [r3, #12]
 801f742:	b29b      	uxth	r3, r3
 801f744:	4618      	mov	r0, r3
 801f746:	f7f8 f807 	bl	8017758 <lwip_htons>
 801f74a:	4603      	mov	r3, r0
 801f74c:	b2db      	uxtb	r3, r3
 801f74e:	f003 0301 	and.w	r3, r3, #1
 801f752:	2b00      	cmp	r3, #0
 801f754:	d005      	beq.n	801f762 <tcp_zero_window_probe+0x72>
 801f756:	6a3b      	ldr	r3, [r7, #32]
 801f758:	891b      	ldrh	r3, [r3, #8]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d101      	bne.n	801f762 <tcp_zero_window_probe+0x72>
 801f75e:	2301      	movs	r3, #1
 801f760:	e000      	b.n	801f764 <tcp_zero_window_probe+0x74>
 801f762:	2300      	movs	r3, #0
 801f764:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f766:	7ffb      	ldrb	r3, [r7, #31]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	bf0c      	ite	eq
 801f76c:	2301      	moveq	r3, #1
 801f76e:	2300      	movne	r3, #0
 801f770:	b2db      	uxtb	r3, r3
 801f772:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f778:	b299      	uxth	r1, r3
 801f77a:	6a3b      	ldr	r3, [r7, #32]
 801f77c:	68db      	ldr	r3, [r3, #12]
 801f77e:	685b      	ldr	r3, [r3, #4]
 801f780:	8bba      	ldrh	r2, [r7, #28]
 801f782:	6878      	ldr	r0, [r7, #4]
 801f784:	f7ff fdfa 	bl	801f37c <tcp_output_alloc_header>
 801f788:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f78a:	69bb      	ldr	r3, [r7, #24]
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	d102      	bne.n	801f796 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f790:	f04f 33ff 	mov.w	r3, #4294967295
 801f794:	e04c      	b.n	801f830 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f796:	69bb      	ldr	r3, [r7, #24]
 801f798:	685b      	ldr	r3, [r3, #4]
 801f79a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f79c:	7ffb      	ldrb	r3, [r7, #31]
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d011      	beq.n	801f7c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f7a2:	697b      	ldr	r3, [r7, #20]
 801f7a4:	899b      	ldrh	r3, [r3, #12]
 801f7a6:	b29b      	uxth	r3, r3
 801f7a8:	b21b      	sxth	r3, r3
 801f7aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801f7ae:	b21c      	sxth	r4, r3
 801f7b0:	2011      	movs	r0, #17
 801f7b2:	f7f7 ffd1 	bl	8017758 <lwip_htons>
 801f7b6:	4603      	mov	r3, r0
 801f7b8:	b21b      	sxth	r3, r3
 801f7ba:	4323      	orrs	r3, r4
 801f7bc:	b21b      	sxth	r3, r3
 801f7be:	b29a      	uxth	r2, r3
 801f7c0:	697b      	ldr	r3, [r7, #20]
 801f7c2:	819a      	strh	r2, [r3, #12]
 801f7c4:	e010      	b.n	801f7e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f7c6:	69bb      	ldr	r3, [r7, #24]
 801f7c8:	685b      	ldr	r3, [r3, #4]
 801f7ca:	3314      	adds	r3, #20
 801f7cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f7ce:	6a3b      	ldr	r3, [r7, #32]
 801f7d0:	6858      	ldr	r0, [r3, #4]
 801f7d2:	6a3b      	ldr	r3, [r7, #32]
 801f7d4:	685b      	ldr	r3, [r3, #4]
 801f7d6:	891a      	ldrh	r2, [r3, #8]
 801f7d8:	6a3b      	ldr	r3, [r7, #32]
 801f7da:	891b      	ldrh	r3, [r3, #8]
 801f7dc:	1ad3      	subs	r3, r2, r3
 801f7de:	b29b      	uxth	r3, r3
 801f7e0:	2201      	movs	r2, #1
 801f7e2:	6939      	ldr	r1, [r7, #16]
 801f7e4:	f7f9 fde2 	bl	80193ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f7e8:	6a3b      	ldr	r3, [r7, #32]
 801f7ea:	68db      	ldr	r3, [r3, #12]
 801f7ec:	685b      	ldr	r3, [r3, #4]
 801f7ee:	4618      	mov	r0, r3
 801f7f0:	f7f7 ffc7 	bl	8017782 <lwip_htonl>
 801f7f4:	4603      	mov	r3, r0
 801f7f6:	3301      	adds	r3, #1
 801f7f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	1ad3      	subs	r3, r2, r3
 801f802:	2b00      	cmp	r3, #0
 801f804:	da02      	bge.n	801f80c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	68fa      	ldr	r2, [r7, #12]
 801f80a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f80c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f810:	2200      	movs	r2, #0
 801f812:	69b9      	ldr	r1, [r7, #24]
 801f814:	6878      	ldr	r0, [r7, #4]
 801f816:	f7ff fdef 	bl	801f3f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f81a:	687a      	ldr	r2, [r7, #4]
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	3304      	adds	r3, #4
 801f820:	69b9      	ldr	r1, [r7, #24]
 801f822:	6878      	ldr	r0, [r7, #4]
 801f824:	f7ff fe26 	bl	801f474 <tcp_output_control_segment>
 801f828:	4603      	mov	r3, r0
 801f82a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f82c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f830:	4618      	mov	r0, r3
 801f832:	372c      	adds	r7, #44	@ 0x2c
 801f834:	46bd      	mov	sp, r7
 801f836:	bd90      	pop	{r4, r7, pc}
 801f838:	08026be4 	.word	0x08026be4
 801f83c:	080273dc 	.word	0x080273dc
 801f840:	08026c38 	.word	0x08026c38

0801f844 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f844:	b580      	push	{r7, lr}
 801f846:	b082      	sub	sp, #8
 801f848:	af00      	add	r7, sp, #0
 801f84a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f84c:	f7f9 ff8a 	bl	8019764 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f850:	4b0a      	ldr	r3, [pc, #40]	@ (801f87c <tcpip_tcp_timer+0x38>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	2b00      	cmp	r3, #0
 801f856:	d103      	bne.n	801f860 <tcpip_tcp_timer+0x1c>
 801f858:	4b09      	ldr	r3, [pc, #36]	@ (801f880 <tcpip_tcp_timer+0x3c>)
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d005      	beq.n	801f86c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f860:	2200      	movs	r2, #0
 801f862:	4908      	ldr	r1, [pc, #32]	@ (801f884 <tcpip_tcp_timer+0x40>)
 801f864:	20fa      	movs	r0, #250	@ 0xfa
 801f866:	f000 f8f3 	bl	801fa50 <sys_timeout>
 801f86a:	e003      	b.n	801f874 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f86c:	4b06      	ldr	r3, [pc, #24]	@ (801f888 <tcpip_tcp_timer+0x44>)
 801f86e:	2200      	movs	r2, #0
 801f870:	601a      	str	r2, [r3, #0]
  }
}
 801f872:	bf00      	nop
 801f874:	bf00      	nop
 801f876:	3708      	adds	r7, #8
 801f878:	46bd      	mov	sp, r7
 801f87a:	bd80      	pop	{r7, pc}
 801f87c:	20018bbc 	.word	0x20018bbc
 801f880:	20018bc0 	.word	0x20018bc0
 801f884:	0801f845 	.word	0x0801f845
 801f888:	20018c08 	.word	0x20018c08

0801f88c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f88c:	b580      	push	{r7, lr}
 801f88e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f890:	4b0a      	ldr	r3, [pc, #40]	@ (801f8bc <tcp_timer_needed+0x30>)
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	2b00      	cmp	r3, #0
 801f896:	d10f      	bne.n	801f8b8 <tcp_timer_needed+0x2c>
 801f898:	4b09      	ldr	r3, [pc, #36]	@ (801f8c0 <tcp_timer_needed+0x34>)
 801f89a:	681b      	ldr	r3, [r3, #0]
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d103      	bne.n	801f8a8 <tcp_timer_needed+0x1c>
 801f8a0:	4b08      	ldr	r3, [pc, #32]	@ (801f8c4 <tcp_timer_needed+0x38>)
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d007      	beq.n	801f8b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f8a8:	4b04      	ldr	r3, [pc, #16]	@ (801f8bc <tcp_timer_needed+0x30>)
 801f8aa:	2201      	movs	r2, #1
 801f8ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f8ae:	2200      	movs	r2, #0
 801f8b0:	4905      	ldr	r1, [pc, #20]	@ (801f8c8 <tcp_timer_needed+0x3c>)
 801f8b2:	20fa      	movs	r0, #250	@ 0xfa
 801f8b4:	f000 f8cc 	bl	801fa50 <sys_timeout>
  }
}
 801f8b8:	bf00      	nop
 801f8ba:	bd80      	pop	{r7, pc}
 801f8bc:	20018c08 	.word	0x20018c08
 801f8c0:	20018bbc 	.word	0x20018bbc
 801f8c4:	20018bc0 	.word	0x20018bc0
 801f8c8:	0801f845 	.word	0x0801f845

0801f8cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f8cc:	b580      	push	{r7, lr}
 801f8ce:	b086      	sub	sp, #24
 801f8d0:	af00      	add	r7, sp, #0
 801f8d2:	60f8      	str	r0, [r7, #12]
 801f8d4:	60b9      	str	r1, [r7, #8]
 801f8d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f8d8:	200a      	movs	r0, #10
 801f8da:	f7f8 fc25 	bl	8018128 <memp_malloc>
 801f8de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f8e0:	693b      	ldr	r3, [r7, #16]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d109      	bne.n	801f8fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f8e6:	693b      	ldr	r3, [r7, #16]
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	d151      	bne.n	801f990 <sys_timeout_abs+0xc4>
 801f8ec:	4b2a      	ldr	r3, [pc, #168]	@ (801f998 <sys_timeout_abs+0xcc>)
 801f8ee:	22be      	movs	r2, #190	@ 0xbe
 801f8f0:	492a      	ldr	r1, [pc, #168]	@ (801f99c <sys_timeout_abs+0xd0>)
 801f8f2:	482b      	ldr	r0, [pc, #172]	@ (801f9a0 <sys_timeout_abs+0xd4>)
 801f8f4:	f003 feb8 	bl	8023668 <iprintf>
    return;
 801f8f8:	e04a      	b.n	801f990 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f8fa:	693b      	ldr	r3, [r7, #16]
 801f8fc:	2200      	movs	r2, #0
 801f8fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f900:	693b      	ldr	r3, [r7, #16]
 801f902:	68ba      	ldr	r2, [r7, #8]
 801f904:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f906:	693b      	ldr	r3, [r7, #16]
 801f908:	687a      	ldr	r2, [r7, #4]
 801f90a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f90c:	693b      	ldr	r3, [r7, #16]
 801f90e:	68fa      	ldr	r2, [r7, #12]
 801f910:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f912:	4b24      	ldr	r3, [pc, #144]	@ (801f9a4 <sys_timeout_abs+0xd8>)
 801f914:	681b      	ldr	r3, [r3, #0]
 801f916:	2b00      	cmp	r3, #0
 801f918:	d103      	bne.n	801f922 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f91a:	4a22      	ldr	r2, [pc, #136]	@ (801f9a4 <sys_timeout_abs+0xd8>)
 801f91c:	693b      	ldr	r3, [r7, #16]
 801f91e:	6013      	str	r3, [r2, #0]
    return;
 801f920:	e037      	b.n	801f992 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f922:	693b      	ldr	r3, [r7, #16]
 801f924:	685a      	ldr	r2, [r3, #4]
 801f926:	4b1f      	ldr	r3, [pc, #124]	@ (801f9a4 <sys_timeout_abs+0xd8>)
 801f928:	681b      	ldr	r3, [r3, #0]
 801f92a:	685b      	ldr	r3, [r3, #4]
 801f92c:	1ad3      	subs	r3, r2, r3
 801f92e:	0fdb      	lsrs	r3, r3, #31
 801f930:	f003 0301 	and.w	r3, r3, #1
 801f934:	b2db      	uxtb	r3, r3
 801f936:	2b00      	cmp	r3, #0
 801f938:	d007      	beq.n	801f94a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f93a:	4b1a      	ldr	r3, [pc, #104]	@ (801f9a4 <sys_timeout_abs+0xd8>)
 801f93c:	681a      	ldr	r2, [r3, #0]
 801f93e:	693b      	ldr	r3, [r7, #16]
 801f940:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f942:	4a18      	ldr	r2, [pc, #96]	@ (801f9a4 <sys_timeout_abs+0xd8>)
 801f944:	693b      	ldr	r3, [r7, #16]
 801f946:	6013      	str	r3, [r2, #0]
 801f948:	e023      	b.n	801f992 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f94a:	4b16      	ldr	r3, [pc, #88]	@ (801f9a4 <sys_timeout_abs+0xd8>)
 801f94c:	681b      	ldr	r3, [r3, #0]
 801f94e:	617b      	str	r3, [r7, #20]
 801f950:	e01a      	b.n	801f988 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f952:	697b      	ldr	r3, [r7, #20]
 801f954:	681b      	ldr	r3, [r3, #0]
 801f956:	2b00      	cmp	r3, #0
 801f958:	d00b      	beq.n	801f972 <sys_timeout_abs+0xa6>
 801f95a:	693b      	ldr	r3, [r7, #16]
 801f95c:	685a      	ldr	r2, [r3, #4]
 801f95e:	697b      	ldr	r3, [r7, #20]
 801f960:	681b      	ldr	r3, [r3, #0]
 801f962:	685b      	ldr	r3, [r3, #4]
 801f964:	1ad3      	subs	r3, r2, r3
 801f966:	0fdb      	lsrs	r3, r3, #31
 801f968:	f003 0301 	and.w	r3, r3, #1
 801f96c:	b2db      	uxtb	r3, r3
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d007      	beq.n	801f982 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f972:	697b      	ldr	r3, [r7, #20]
 801f974:	681a      	ldr	r2, [r3, #0]
 801f976:	693b      	ldr	r3, [r7, #16]
 801f978:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f97a:	697b      	ldr	r3, [r7, #20]
 801f97c:	693a      	ldr	r2, [r7, #16]
 801f97e:	601a      	str	r2, [r3, #0]
        break;
 801f980:	e007      	b.n	801f992 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f982:	697b      	ldr	r3, [r7, #20]
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	617b      	str	r3, [r7, #20]
 801f988:	697b      	ldr	r3, [r7, #20]
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	d1e1      	bne.n	801f952 <sys_timeout_abs+0x86>
 801f98e:	e000      	b.n	801f992 <sys_timeout_abs+0xc6>
    return;
 801f990:	bf00      	nop
      }
    }
  }
}
 801f992:	3718      	adds	r7, #24
 801f994:	46bd      	mov	sp, r7
 801f996:	bd80      	pop	{r7, pc}
 801f998:	08027400 	.word	0x08027400
 801f99c:	08027434 	.word	0x08027434
 801f9a0:	08027474 	.word	0x08027474
 801f9a4:	20018c00 	.word	0x20018c00

0801f9a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f9a8:	b580      	push	{r7, lr}
 801f9aa:	b086      	sub	sp, #24
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f9b4:	697b      	ldr	r3, [r7, #20]
 801f9b6:	685b      	ldr	r3, [r3, #4]
 801f9b8:	4798      	blx	r3

  now = sys_now();
 801f9ba:	f7f0 fbe3 	bl	8010184 <sys_now>
 801f9be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f9c0:	697b      	ldr	r3, [r7, #20]
 801f9c2:	681a      	ldr	r2, [r3, #0]
 801f9c4:	4b0f      	ldr	r3, [pc, #60]	@ (801fa04 <lwip_cyclic_timer+0x5c>)
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	4413      	add	r3, r2
 801f9ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f9cc:	68fa      	ldr	r2, [r7, #12]
 801f9ce:	693b      	ldr	r3, [r7, #16]
 801f9d0:	1ad3      	subs	r3, r2, r3
 801f9d2:	0fdb      	lsrs	r3, r3, #31
 801f9d4:	f003 0301 	and.w	r3, r3, #1
 801f9d8:	b2db      	uxtb	r3, r3
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d009      	beq.n	801f9f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f9de:	697b      	ldr	r3, [r7, #20]
 801f9e0:	681a      	ldr	r2, [r3, #0]
 801f9e2:	693b      	ldr	r3, [r7, #16]
 801f9e4:	4413      	add	r3, r2
 801f9e6:	687a      	ldr	r2, [r7, #4]
 801f9e8:	4907      	ldr	r1, [pc, #28]	@ (801fa08 <lwip_cyclic_timer+0x60>)
 801f9ea:	4618      	mov	r0, r3
 801f9ec:	f7ff ff6e 	bl	801f8cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f9f0:	e004      	b.n	801f9fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f9f2:	687a      	ldr	r2, [r7, #4]
 801f9f4:	4904      	ldr	r1, [pc, #16]	@ (801fa08 <lwip_cyclic_timer+0x60>)
 801f9f6:	68f8      	ldr	r0, [r7, #12]
 801f9f8:	f7ff ff68 	bl	801f8cc <sys_timeout_abs>
}
 801f9fc:	bf00      	nop
 801f9fe:	3718      	adds	r7, #24
 801fa00:	46bd      	mov	sp, r7
 801fa02:	bd80      	pop	{r7, pc}
 801fa04:	20018c04 	.word	0x20018c04
 801fa08:	0801f9a9 	.word	0x0801f9a9

0801fa0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801fa0c:	b580      	push	{r7, lr}
 801fa0e:	b082      	sub	sp, #8
 801fa10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fa12:	2301      	movs	r3, #1
 801fa14:	607b      	str	r3, [r7, #4]
 801fa16:	e00e      	b.n	801fa36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801fa18:	4a0b      	ldr	r2, [pc, #44]	@ (801fa48 <sys_timeouts_init+0x3c>)
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801fa20:	687b      	ldr	r3, [r7, #4]
 801fa22:	00db      	lsls	r3, r3, #3
 801fa24:	4a08      	ldr	r2, [pc, #32]	@ (801fa48 <sys_timeouts_init+0x3c>)
 801fa26:	4413      	add	r3, r2
 801fa28:	461a      	mov	r2, r3
 801fa2a:	4908      	ldr	r1, [pc, #32]	@ (801fa4c <sys_timeouts_init+0x40>)
 801fa2c:	f000 f810 	bl	801fa50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	3301      	adds	r3, #1
 801fa34:	607b      	str	r3, [r7, #4]
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	2b02      	cmp	r3, #2
 801fa3a:	d9ed      	bls.n	801fa18 <sys_timeouts_init+0xc>
  }
}
 801fa3c:	bf00      	nop
 801fa3e:	bf00      	nop
 801fa40:	3708      	adds	r7, #8
 801fa42:	46bd      	mov	sp, r7
 801fa44:	bd80      	pop	{r7, pc}
 801fa46:	bf00      	nop
 801fa48:	08028044 	.word	0x08028044
 801fa4c:	0801f9a9 	.word	0x0801f9a9

0801fa50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801fa50:	b580      	push	{r7, lr}
 801fa52:	b086      	sub	sp, #24
 801fa54:	af00      	add	r7, sp, #0
 801fa56:	60f8      	str	r0, [r7, #12]
 801fa58:	60b9      	str	r1, [r7, #8]
 801fa5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fa5c:	68fb      	ldr	r3, [r7, #12]
 801fa5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fa62:	d306      	bcc.n	801fa72 <sys_timeout+0x22>
 801fa64:	4b0a      	ldr	r3, [pc, #40]	@ (801fa90 <sys_timeout+0x40>)
 801fa66:	f240 1229 	movw	r2, #297	@ 0x129
 801fa6a:	490a      	ldr	r1, [pc, #40]	@ (801fa94 <sys_timeout+0x44>)
 801fa6c:	480a      	ldr	r0, [pc, #40]	@ (801fa98 <sys_timeout+0x48>)
 801fa6e:	f003 fdfb 	bl	8023668 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fa72:	f7f0 fb87 	bl	8010184 <sys_now>
 801fa76:	4602      	mov	r2, r0
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	4413      	add	r3, r2
 801fa7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fa7e:	687a      	ldr	r2, [r7, #4]
 801fa80:	68b9      	ldr	r1, [r7, #8]
 801fa82:	6978      	ldr	r0, [r7, #20]
 801fa84:	f7ff ff22 	bl	801f8cc <sys_timeout_abs>
#endif
}
 801fa88:	bf00      	nop
 801fa8a:	3718      	adds	r7, #24
 801fa8c:	46bd      	mov	sp, r7
 801fa8e:	bd80      	pop	{r7, pc}
 801fa90:	08027400 	.word	0x08027400
 801fa94:	0802749c 	.word	0x0802749c
 801fa98:	08027474 	.word	0x08027474

0801fa9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801fa9c:	b580      	push	{r7, lr}
 801fa9e:	b084      	sub	sp, #16
 801faa0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801faa2:	f7f0 fb6f 	bl	8010184 <sys_now>
 801faa6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801faa8:	4b17      	ldr	r3, [pc, #92]	@ (801fb08 <sys_check_timeouts+0x6c>)
 801faaa:	681b      	ldr	r3, [r3, #0]
 801faac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801faae:	68bb      	ldr	r3, [r7, #8]
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	d022      	beq.n	801fafa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801fab4:	68bb      	ldr	r3, [r7, #8]
 801fab6:	685b      	ldr	r3, [r3, #4]
 801fab8:	68fa      	ldr	r2, [r7, #12]
 801faba:	1ad3      	subs	r3, r2, r3
 801fabc:	0fdb      	lsrs	r3, r3, #31
 801fabe:	f003 0301 	and.w	r3, r3, #1
 801fac2:	b2db      	uxtb	r3, r3
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	d11a      	bne.n	801fafe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801fac8:	68bb      	ldr	r3, [r7, #8]
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	4a0e      	ldr	r2, [pc, #56]	@ (801fb08 <sys_check_timeouts+0x6c>)
 801face:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801fad0:	68bb      	ldr	r3, [r7, #8]
 801fad2:	689b      	ldr	r3, [r3, #8]
 801fad4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801fad6:	68bb      	ldr	r3, [r7, #8]
 801fad8:	68db      	ldr	r3, [r3, #12]
 801fada:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801fadc:	68bb      	ldr	r3, [r7, #8]
 801fade:	685b      	ldr	r3, [r3, #4]
 801fae0:	4a0a      	ldr	r2, [pc, #40]	@ (801fb0c <sys_check_timeouts+0x70>)
 801fae2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801fae4:	68b9      	ldr	r1, [r7, #8]
 801fae6:	200a      	movs	r0, #10
 801fae8:	f7f8 fb94 	bl	8018214 <memp_free>
    if (handler != NULL) {
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d0da      	beq.n	801faa8 <sys_check_timeouts+0xc>
      handler(arg);
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	6838      	ldr	r0, [r7, #0]
 801faf6:	4798      	blx	r3
  do {
 801faf8:	e7d6      	b.n	801faa8 <sys_check_timeouts+0xc>
      return;
 801fafa:	bf00      	nop
 801fafc:	e000      	b.n	801fb00 <sys_check_timeouts+0x64>
      return;
 801fafe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801fb00:	3710      	adds	r7, #16
 801fb02:	46bd      	mov	sp, r7
 801fb04:	bd80      	pop	{r7, pc}
 801fb06:	bf00      	nop
 801fb08:	20018c00 	.word	0x20018c00
 801fb0c:	20018c04 	.word	0x20018c04

0801fb10 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801fb10:	b580      	push	{r7, lr}
 801fb12:	b082      	sub	sp, #8
 801fb14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801fb16:	4b16      	ldr	r3, [pc, #88]	@ (801fb70 <sys_timeouts_sleeptime+0x60>)
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d102      	bne.n	801fb24 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801fb1e:	f04f 33ff 	mov.w	r3, #4294967295
 801fb22:	e020      	b.n	801fb66 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801fb24:	f7f0 fb2e 	bl	8010184 <sys_now>
 801fb28:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801fb2a:	4b11      	ldr	r3, [pc, #68]	@ (801fb70 <sys_timeouts_sleeptime+0x60>)
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	685a      	ldr	r2, [r3, #4]
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	1ad3      	subs	r3, r2, r3
 801fb34:	0fdb      	lsrs	r3, r3, #31
 801fb36:	f003 0301 	and.w	r3, r3, #1
 801fb3a:	b2db      	uxtb	r3, r3
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	d001      	beq.n	801fb44 <sys_timeouts_sleeptime+0x34>
    return 0;
 801fb40:	2300      	movs	r3, #0
 801fb42:	e010      	b.n	801fb66 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801fb44:	4b0a      	ldr	r3, [pc, #40]	@ (801fb70 <sys_timeouts_sleeptime+0x60>)
 801fb46:	681b      	ldr	r3, [r3, #0]
 801fb48:	685a      	ldr	r2, [r3, #4]
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	1ad3      	subs	r3, r2, r3
 801fb4e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801fb50:	683b      	ldr	r3, [r7, #0]
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	da06      	bge.n	801fb64 <sys_timeouts_sleeptime+0x54>
 801fb56:	4b07      	ldr	r3, [pc, #28]	@ (801fb74 <sys_timeouts_sleeptime+0x64>)
 801fb58:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801fb5c:	4906      	ldr	r1, [pc, #24]	@ (801fb78 <sys_timeouts_sleeptime+0x68>)
 801fb5e:	4807      	ldr	r0, [pc, #28]	@ (801fb7c <sys_timeouts_sleeptime+0x6c>)
 801fb60:	f003 fd82 	bl	8023668 <iprintf>
    return ret;
 801fb64:	683b      	ldr	r3, [r7, #0]
  }
}
 801fb66:	4618      	mov	r0, r3
 801fb68:	3708      	adds	r7, #8
 801fb6a:	46bd      	mov	sp, r7
 801fb6c:	bd80      	pop	{r7, pc}
 801fb6e:	bf00      	nop
 801fb70:	20018c00 	.word	0x20018c00
 801fb74:	08027400 	.word	0x08027400
 801fb78:	080274d4 	.word	0x080274d4
 801fb7c:	08027474 	.word	0x08027474

0801fb80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801fb80:	b580      	push	{r7, lr}
 801fb82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801fb84:	f003 fbec 	bl	8023360 <rand>
 801fb88:	4603      	mov	r3, r0
 801fb8a:	b29b      	uxth	r3, r3
 801fb8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801fb90:	b29b      	uxth	r3, r3
 801fb92:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801fb96:	b29a      	uxth	r2, r3
 801fb98:	4b01      	ldr	r3, [pc, #4]	@ (801fba0 <udp_init+0x20>)
 801fb9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801fb9c:	bf00      	nop
 801fb9e:	bd80      	pop	{r7, pc}
 801fba0:	2000004c 	.word	0x2000004c

0801fba4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801fba4:	b480      	push	{r7}
 801fba6:	b083      	sub	sp, #12
 801fba8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801fbaa:	2300      	movs	r3, #0
 801fbac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801fbae:	4b17      	ldr	r3, [pc, #92]	@ (801fc0c <udp_new_port+0x68>)
 801fbb0:	881b      	ldrh	r3, [r3, #0]
 801fbb2:	1c5a      	adds	r2, r3, #1
 801fbb4:	b291      	uxth	r1, r2
 801fbb6:	4a15      	ldr	r2, [pc, #84]	@ (801fc0c <udp_new_port+0x68>)
 801fbb8:	8011      	strh	r1, [r2, #0]
 801fbba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801fbbe:	4293      	cmp	r3, r2
 801fbc0:	d103      	bne.n	801fbca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801fbc2:	4b12      	ldr	r3, [pc, #72]	@ (801fc0c <udp_new_port+0x68>)
 801fbc4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801fbc8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fbca:	4b11      	ldr	r3, [pc, #68]	@ (801fc10 <udp_new_port+0x6c>)
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	603b      	str	r3, [r7, #0]
 801fbd0:	e011      	b.n	801fbf6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801fbd2:	683b      	ldr	r3, [r7, #0]
 801fbd4:	8a5a      	ldrh	r2, [r3, #18]
 801fbd6:	4b0d      	ldr	r3, [pc, #52]	@ (801fc0c <udp_new_port+0x68>)
 801fbd8:	881b      	ldrh	r3, [r3, #0]
 801fbda:	429a      	cmp	r2, r3
 801fbdc:	d108      	bne.n	801fbf0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801fbde:	88fb      	ldrh	r3, [r7, #6]
 801fbe0:	3301      	adds	r3, #1
 801fbe2:	80fb      	strh	r3, [r7, #6]
 801fbe4:	88fb      	ldrh	r3, [r7, #6]
 801fbe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fbea:	d3e0      	bcc.n	801fbae <udp_new_port+0xa>
        return 0;
 801fbec:	2300      	movs	r3, #0
 801fbee:	e007      	b.n	801fc00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fbf0:	683b      	ldr	r3, [r7, #0]
 801fbf2:	68db      	ldr	r3, [r3, #12]
 801fbf4:	603b      	str	r3, [r7, #0]
 801fbf6:	683b      	ldr	r3, [r7, #0]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d1ea      	bne.n	801fbd2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801fbfc:	4b03      	ldr	r3, [pc, #12]	@ (801fc0c <udp_new_port+0x68>)
 801fbfe:	881b      	ldrh	r3, [r3, #0]
}
 801fc00:	4618      	mov	r0, r3
 801fc02:	370c      	adds	r7, #12
 801fc04:	46bd      	mov	sp, r7
 801fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc0a:	4770      	bx	lr
 801fc0c:	2000004c 	.word	0x2000004c
 801fc10:	20018c0c 	.word	0x20018c0c

0801fc14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801fc14:	b580      	push	{r7, lr}
 801fc16:	b084      	sub	sp, #16
 801fc18:	af00      	add	r7, sp, #0
 801fc1a:	60f8      	str	r0, [r7, #12]
 801fc1c:	60b9      	str	r1, [r7, #8]
 801fc1e:	4613      	mov	r3, r2
 801fc20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d105      	bne.n	801fc34 <udp_input_local_match+0x20>
 801fc28:	4b27      	ldr	r3, [pc, #156]	@ (801fcc8 <udp_input_local_match+0xb4>)
 801fc2a:	2287      	movs	r2, #135	@ 0x87
 801fc2c:	4927      	ldr	r1, [pc, #156]	@ (801fccc <udp_input_local_match+0xb8>)
 801fc2e:	4828      	ldr	r0, [pc, #160]	@ (801fcd0 <udp_input_local_match+0xbc>)
 801fc30:	f003 fd1a 	bl	8023668 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fc34:	68bb      	ldr	r3, [r7, #8]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d105      	bne.n	801fc46 <udp_input_local_match+0x32>
 801fc3a:	4b23      	ldr	r3, [pc, #140]	@ (801fcc8 <udp_input_local_match+0xb4>)
 801fc3c:	2288      	movs	r2, #136	@ 0x88
 801fc3e:	4925      	ldr	r1, [pc, #148]	@ (801fcd4 <udp_input_local_match+0xc0>)
 801fc40:	4823      	ldr	r0, [pc, #140]	@ (801fcd0 <udp_input_local_match+0xbc>)
 801fc42:	f003 fd11 	bl	8023668 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fc46:	68fb      	ldr	r3, [r7, #12]
 801fc48:	7a1b      	ldrb	r3, [r3, #8]
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d00b      	beq.n	801fc66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fc4e:	68fb      	ldr	r3, [r7, #12]
 801fc50:	7a1a      	ldrb	r2, [r3, #8]
 801fc52:	4b21      	ldr	r3, [pc, #132]	@ (801fcd8 <udp_input_local_match+0xc4>)
 801fc54:	685b      	ldr	r3, [r3, #4]
 801fc56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801fc5a:	3301      	adds	r3, #1
 801fc5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fc5e:	429a      	cmp	r2, r3
 801fc60:	d001      	beq.n	801fc66 <udp_input_local_match+0x52>
    return 0;
 801fc62:	2300      	movs	r3, #0
 801fc64:	e02b      	b.n	801fcbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801fc66:	79fb      	ldrb	r3, [r7, #7]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d018      	beq.n	801fc9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	d013      	beq.n	801fc9a <udp_input_local_match+0x86>
 801fc72:	68fb      	ldr	r3, [r7, #12]
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d00f      	beq.n	801fc9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fc7a:	4b17      	ldr	r3, [pc, #92]	@ (801fcd8 <udp_input_local_match+0xc4>)
 801fc7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc82:	d00a      	beq.n	801fc9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801fc84:	68fb      	ldr	r3, [r7, #12]
 801fc86:	681a      	ldr	r2, [r3, #0]
 801fc88:	4b13      	ldr	r3, [pc, #76]	@ (801fcd8 <udp_input_local_match+0xc4>)
 801fc8a:	695b      	ldr	r3, [r3, #20]
 801fc8c:	405a      	eors	r2, r3
 801fc8e:	68bb      	ldr	r3, [r7, #8]
 801fc90:	3308      	adds	r3, #8
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d110      	bne.n	801fcbc <udp_input_local_match+0xa8>
          return 1;
 801fc9a:	2301      	movs	r3, #1
 801fc9c:	e00f      	b.n	801fcbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801fc9e:	68fb      	ldr	r3, [r7, #12]
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d009      	beq.n	801fcb8 <udp_input_local_match+0xa4>
 801fca4:	68fb      	ldr	r3, [r7, #12]
 801fca6:	681b      	ldr	r3, [r3, #0]
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d005      	beq.n	801fcb8 <udp_input_local_match+0xa4>
 801fcac:	68fb      	ldr	r3, [r7, #12]
 801fcae:	681a      	ldr	r2, [r3, #0]
 801fcb0:	4b09      	ldr	r3, [pc, #36]	@ (801fcd8 <udp_input_local_match+0xc4>)
 801fcb2:	695b      	ldr	r3, [r3, #20]
 801fcb4:	429a      	cmp	r2, r3
 801fcb6:	d101      	bne.n	801fcbc <udp_input_local_match+0xa8>
        return 1;
 801fcb8:	2301      	movs	r3, #1
 801fcba:	e000      	b.n	801fcbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801fcbc:	2300      	movs	r3, #0
}
 801fcbe:	4618      	mov	r0, r3
 801fcc0:	3710      	adds	r7, #16
 801fcc2:	46bd      	mov	sp, r7
 801fcc4:	bd80      	pop	{r7, pc}
 801fcc6:	bf00      	nop
 801fcc8:	080274e8 	.word	0x080274e8
 801fccc:	08027518 	.word	0x08027518
 801fcd0:	0802753c 	.word	0x0802753c
 801fcd4:	08027564 	.word	0x08027564
 801fcd8:	2000dbb4 	.word	0x2000dbb4

0801fcdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801fcdc:	b590      	push	{r4, r7, lr}
 801fcde:	b08d      	sub	sp, #52	@ 0x34
 801fce0:	af02      	add	r7, sp, #8
 801fce2:	6078      	str	r0, [r7, #4]
 801fce4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801fce6:	2300      	movs	r3, #0
 801fce8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d105      	bne.n	801fcfc <udp_input+0x20>
 801fcf0:	4b7c      	ldr	r3, [pc, #496]	@ (801fee4 <udp_input+0x208>)
 801fcf2:	22cf      	movs	r2, #207	@ 0xcf
 801fcf4:	497c      	ldr	r1, [pc, #496]	@ (801fee8 <udp_input+0x20c>)
 801fcf6:	487d      	ldr	r0, [pc, #500]	@ (801feec <udp_input+0x210>)
 801fcf8:	f003 fcb6 	bl	8023668 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fcfc:	683b      	ldr	r3, [r7, #0]
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	d105      	bne.n	801fd0e <udp_input+0x32>
 801fd02:	4b78      	ldr	r3, [pc, #480]	@ (801fee4 <udp_input+0x208>)
 801fd04:	22d0      	movs	r2, #208	@ 0xd0
 801fd06:	497a      	ldr	r1, [pc, #488]	@ (801fef0 <udp_input+0x214>)
 801fd08:	4878      	ldr	r0, [pc, #480]	@ (801feec <udp_input+0x210>)
 801fd0a:	f003 fcad 	bl	8023668 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	895b      	ldrh	r3, [r3, #10]
 801fd12:	2b07      	cmp	r3, #7
 801fd14:	d803      	bhi.n	801fd1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801fd16:	6878      	ldr	r0, [r7, #4]
 801fd18:	f7f9 f952 	bl	8018fc0 <pbuf_free>
    goto end;
 801fd1c:	e0de      	b.n	801fedc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	685b      	ldr	r3, [r3, #4]
 801fd22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801fd24:	4b73      	ldr	r3, [pc, #460]	@ (801fef4 <udp_input+0x218>)
 801fd26:	695b      	ldr	r3, [r3, #20]
 801fd28:	4a72      	ldr	r2, [pc, #456]	@ (801fef4 <udp_input+0x218>)
 801fd2a:	6812      	ldr	r2, [r2, #0]
 801fd2c:	4611      	mov	r1, r2
 801fd2e:	4618      	mov	r0, r3
 801fd30:	f001 fd96 	bl	8021860 <ip4_addr_isbroadcast_u32>
 801fd34:	4603      	mov	r3, r0
 801fd36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801fd38:	697b      	ldr	r3, [r7, #20]
 801fd3a:	881b      	ldrh	r3, [r3, #0]
 801fd3c:	b29b      	uxth	r3, r3
 801fd3e:	4618      	mov	r0, r3
 801fd40:	f7f7 fd0a 	bl	8017758 <lwip_htons>
 801fd44:	4603      	mov	r3, r0
 801fd46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801fd48:	697b      	ldr	r3, [r7, #20]
 801fd4a:	885b      	ldrh	r3, [r3, #2]
 801fd4c:	b29b      	uxth	r3, r3
 801fd4e:	4618      	mov	r0, r3
 801fd50:	f7f7 fd02 	bl	8017758 <lwip_htons>
 801fd54:	4603      	mov	r3, r0
 801fd56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801fd58:	2300      	movs	r3, #0
 801fd5a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801fd5c:	2300      	movs	r3, #0
 801fd5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801fd60:	2300      	movs	r3, #0
 801fd62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fd64:	4b64      	ldr	r3, [pc, #400]	@ (801fef8 <udp_input+0x21c>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	627b      	str	r3, [r7, #36]	@ 0x24
 801fd6a:	e054      	b.n	801fe16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801fd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd6e:	8a5b      	ldrh	r3, [r3, #18]
 801fd70:	89fa      	ldrh	r2, [r7, #14]
 801fd72:	429a      	cmp	r2, r3
 801fd74:	d14a      	bne.n	801fe0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801fd76:	7cfb      	ldrb	r3, [r7, #19]
 801fd78:	461a      	mov	r2, r3
 801fd7a:	6839      	ldr	r1, [r7, #0]
 801fd7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fd7e:	f7ff ff49 	bl	801fc14 <udp_input_local_match>
 801fd82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d041      	beq.n	801fe0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801fd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd8a:	7c1b      	ldrb	r3, [r3, #16]
 801fd8c:	f003 0304 	and.w	r3, r3, #4
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	d11d      	bne.n	801fdd0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801fd94:	69fb      	ldr	r3, [r7, #28]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d102      	bne.n	801fda0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801fd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd9c:	61fb      	str	r3, [r7, #28]
 801fd9e:	e017      	b.n	801fdd0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fda0:	7cfb      	ldrb	r3, [r7, #19]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d014      	beq.n	801fdd0 <udp_input+0xf4>
 801fda6:	4b53      	ldr	r3, [pc, #332]	@ (801fef4 <udp_input+0x218>)
 801fda8:	695b      	ldr	r3, [r3, #20]
 801fdaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fdae:	d10f      	bne.n	801fdd0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801fdb0:	69fb      	ldr	r3, [r7, #28]
 801fdb2:	681a      	ldr	r2, [r3, #0]
 801fdb4:	683b      	ldr	r3, [r7, #0]
 801fdb6:	3304      	adds	r3, #4
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	429a      	cmp	r2, r3
 801fdbc:	d008      	beq.n	801fdd0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801fdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdc0:	681a      	ldr	r2, [r3, #0]
 801fdc2:	683b      	ldr	r3, [r7, #0]
 801fdc4:	3304      	adds	r3, #4
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	429a      	cmp	r2, r3
 801fdca:	d101      	bne.n	801fdd0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801fdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdd2:	8a9b      	ldrh	r3, [r3, #20]
 801fdd4:	8a3a      	ldrh	r2, [r7, #16]
 801fdd6:	429a      	cmp	r2, r3
 801fdd8:	d118      	bne.n	801fe0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fddc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	d005      	beq.n	801fdee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801fde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fde4:	685a      	ldr	r2, [r3, #4]
 801fde6:	4b43      	ldr	r3, [pc, #268]	@ (801fef4 <udp_input+0x218>)
 801fde8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fdea:	429a      	cmp	r2, r3
 801fdec:	d10e      	bne.n	801fe0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801fdee:	6a3b      	ldr	r3, [r7, #32]
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d014      	beq.n	801fe1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdf6:	68da      	ldr	r2, [r3, #12]
 801fdf8:	6a3b      	ldr	r3, [r7, #32]
 801fdfa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801fdfc:	4b3e      	ldr	r3, [pc, #248]	@ (801fef8 <udp_input+0x21c>)
 801fdfe:	681a      	ldr	r2, [r3, #0]
 801fe00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801fe04:	4a3c      	ldr	r2, [pc, #240]	@ (801fef8 <udp_input+0x21c>)
 801fe06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801fe0a:	e008      	b.n	801fe1e <udp_input+0x142>
      }
    }

    prev = pcb;
 801fe0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fe10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe12:	68db      	ldr	r3, [r3, #12]
 801fe14:	627b      	str	r3, [r7, #36]	@ 0x24
 801fe16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d1a7      	bne.n	801fd6c <udp_input+0x90>
 801fe1c:	e000      	b.n	801fe20 <udp_input+0x144>
        break;
 801fe1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801fe20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	d101      	bne.n	801fe2a <udp_input+0x14e>
    pcb = uncon_pcb;
 801fe26:	69fb      	ldr	r3, [r7, #28]
 801fe28:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801fe2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe2c:	2b00      	cmp	r3, #0
 801fe2e:	d002      	beq.n	801fe36 <udp_input+0x15a>
    for_us = 1;
 801fe30:	2301      	movs	r3, #1
 801fe32:	76fb      	strb	r3, [r7, #27]
 801fe34:	e00a      	b.n	801fe4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801fe36:	683b      	ldr	r3, [r7, #0]
 801fe38:	3304      	adds	r3, #4
 801fe3a:	681a      	ldr	r2, [r3, #0]
 801fe3c:	4b2d      	ldr	r3, [pc, #180]	@ (801fef4 <udp_input+0x218>)
 801fe3e:	695b      	ldr	r3, [r3, #20]
 801fe40:	429a      	cmp	r2, r3
 801fe42:	bf0c      	ite	eq
 801fe44:	2301      	moveq	r3, #1
 801fe46:	2300      	movne	r3, #0
 801fe48:	b2db      	uxtb	r3, r3
 801fe4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801fe4c:	7efb      	ldrb	r3, [r7, #27]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d041      	beq.n	801fed6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fe52:	2108      	movs	r1, #8
 801fe54:	6878      	ldr	r0, [r7, #4]
 801fe56:	f7f8 fffb 	bl	8018e50 <pbuf_remove_header>
 801fe5a:	4603      	mov	r3, r0
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d00a      	beq.n	801fe76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801fe60:	4b20      	ldr	r3, [pc, #128]	@ (801fee4 <udp_input+0x208>)
 801fe62:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801fe66:	4925      	ldr	r1, [pc, #148]	@ (801fefc <udp_input+0x220>)
 801fe68:	4820      	ldr	r0, [pc, #128]	@ (801feec <udp_input+0x210>)
 801fe6a:	f003 fbfd 	bl	8023668 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801fe6e:	6878      	ldr	r0, [r7, #4]
 801fe70:	f7f9 f8a6 	bl	8018fc0 <pbuf_free>
      goto end;
 801fe74:	e032      	b.n	801fedc <udp_input+0x200>
    }

    if (pcb != NULL) {
 801fe76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d012      	beq.n	801fea2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fe7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe7e:	699b      	ldr	r3, [r3, #24]
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d00a      	beq.n	801fe9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fe84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe86:	699c      	ldr	r4, [r3, #24]
 801fe88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe8a:	69d8      	ldr	r0, [r3, #28]
 801fe8c:	8a3b      	ldrh	r3, [r7, #16]
 801fe8e:	9300      	str	r3, [sp, #0]
 801fe90:	4b1b      	ldr	r3, [pc, #108]	@ (801ff00 <udp_input+0x224>)
 801fe92:	687a      	ldr	r2, [r7, #4]
 801fe94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801fe96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801fe98:	e021      	b.n	801fede <udp_input+0x202>
        pbuf_free(p);
 801fe9a:	6878      	ldr	r0, [r7, #4]
 801fe9c:	f7f9 f890 	bl	8018fc0 <pbuf_free>
        goto end;
 801fea0:	e01c      	b.n	801fedc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fea2:	7cfb      	ldrb	r3, [r7, #19]
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d112      	bne.n	801fece <udp_input+0x1f2>
 801fea8:	4b12      	ldr	r3, [pc, #72]	@ (801fef4 <udp_input+0x218>)
 801feaa:	695b      	ldr	r3, [r3, #20]
 801feac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801feb0:	2be0      	cmp	r3, #224	@ 0xe0
 801feb2:	d00c      	beq.n	801fece <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801feb4:	4b0f      	ldr	r3, [pc, #60]	@ (801fef4 <udp_input+0x218>)
 801feb6:	899b      	ldrh	r3, [r3, #12]
 801feb8:	3308      	adds	r3, #8
 801feba:	b29b      	uxth	r3, r3
 801febc:	b21b      	sxth	r3, r3
 801febe:	4619      	mov	r1, r3
 801fec0:	6878      	ldr	r0, [r7, #4]
 801fec2:	f7f9 f838 	bl	8018f36 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fec6:	2103      	movs	r1, #3
 801fec8:	6878      	ldr	r0, [r7, #4]
 801feca:	f001 f9a9 	bl	8021220 <icmp_dest_unreach>
      pbuf_free(p);
 801fece:	6878      	ldr	r0, [r7, #4]
 801fed0:	f7f9 f876 	bl	8018fc0 <pbuf_free>
  return;
 801fed4:	e003      	b.n	801fede <udp_input+0x202>
    pbuf_free(p);
 801fed6:	6878      	ldr	r0, [r7, #4]
 801fed8:	f7f9 f872 	bl	8018fc0 <pbuf_free>
  return;
 801fedc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fede:	372c      	adds	r7, #44	@ 0x2c
 801fee0:	46bd      	mov	sp, r7
 801fee2:	bd90      	pop	{r4, r7, pc}
 801fee4:	080274e8 	.word	0x080274e8
 801fee8:	0802758c 	.word	0x0802758c
 801feec:	0802753c 	.word	0x0802753c
 801fef0:	080275a4 	.word	0x080275a4
 801fef4:	2000dbb4 	.word	0x2000dbb4
 801fef8:	20018c0c 	.word	0x20018c0c
 801fefc:	080275c0 	.word	0x080275c0
 801ff00:	2000dbc4 	.word	0x2000dbc4

0801ff04 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ff04:	b580      	push	{r7, lr}
 801ff06:	b086      	sub	sp, #24
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	60f8      	str	r0, [r7, #12]
 801ff0c:	60b9      	str	r1, [r7, #8]
 801ff0e:	4613      	mov	r3, r2
 801ff10:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ff12:	68bb      	ldr	r3, [r7, #8]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d101      	bne.n	801ff1c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801ff18:	4b39      	ldr	r3, [pc, #228]	@ (8020000 <udp_bind+0xfc>)
 801ff1a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff1c:	68fb      	ldr	r3, [r7, #12]
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d109      	bne.n	801ff36 <udp_bind+0x32>
 801ff22:	4b38      	ldr	r3, [pc, #224]	@ (8020004 <udp_bind+0x100>)
 801ff24:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801ff28:	4937      	ldr	r1, [pc, #220]	@ (8020008 <udp_bind+0x104>)
 801ff2a:	4838      	ldr	r0, [pc, #224]	@ (802000c <udp_bind+0x108>)
 801ff2c:	f003 fb9c 	bl	8023668 <iprintf>
 801ff30:	f06f 030f 	mvn.w	r3, #15
 801ff34:	e060      	b.n	801fff8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801ff36:	2300      	movs	r3, #0
 801ff38:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff3a:	4b35      	ldr	r3, [pc, #212]	@ (8020010 <udp_bind+0x10c>)
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	617b      	str	r3, [r7, #20]
 801ff40:	e009      	b.n	801ff56 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ff42:	68fa      	ldr	r2, [r7, #12]
 801ff44:	697b      	ldr	r3, [r7, #20]
 801ff46:	429a      	cmp	r2, r3
 801ff48:	d102      	bne.n	801ff50 <udp_bind+0x4c>
      rebind = 1;
 801ff4a:	2301      	movs	r3, #1
 801ff4c:	74fb      	strb	r3, [r7, #19]
      break;
 801ff4e:	e005      	b.n	801ff5c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff50:	697b      	ldr	r3, [r7, #20]
 801ff52:	68db      	ldr	r3, [r3, #12]
 801ff54:	617b      	str	r3, [r7, #20]
 801ff56:	697b      	ldr	r3, [r7, #20]
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d1f2      	bne.n	801ff42 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ff5c:	88fb      	ldrh	r3, [r7, #6]
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	d109      	bne.n	801ff76 <udp_bind+0x72>
    port = udp_new_port();
 801ff62:	f7ff fe1f 	bl	801fba4 <udp_new_port>
 801ff66:	4603      	mov	r3, r0
 801ff68:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ff6a:	88fb      	ldrh	r3, [r7, #6]
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d12c      	bne.n	801ffca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ff70:	f06f 0307 	mvn.w	r3, #7
 801ff74:	e040      	b.n	801fff8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff76:	4b26      	ldr	r3, [pc, #152]	@ (8020010 <udp_bind+0x10c>)
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	617b      	str	r3, [r7, #20]
 801ff7c:	e022      	b.n	801ffc4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ff7e:	68fa      	ldr	r2, [r7, #12]
 801ff80:	697b      	ldr	r3, [r7, #20]
 801ff82:	429a      	cmp	r2, r3
 801ff84:	d01b      	beq.n	801ffbe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ff86:	697b      	ldr	r3, [r7, #20]
 801ff88:	8a5b      	ldrh	r3, [r3, #18]
 801ff8a:	88fa      	ldrh	r2, [r7, #6]
 801ff8c:	429a      	cmp	r2, r3
 801ff8e:	d116      	bne.n	801ffbe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ff90:	697b      	ldr	r3, [r7, #20]
 801ff92:	681a      	ldr	r2, [r3, #0]
 801ff94:	68bb      	ldr	r3, [r7, #8]
 801ff96:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ff98:	429a      	cmp	r2, r3
 801ff9a:	d00d      	beq.n	801ffb8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ff9c:	68bb      	ldr	r3, [r7, #8]
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	d00a      	beq.n	801ffb8 <udp_bind+0xb4>
 801ffa2:	68bb      	ldr	r3, [r7, #8]
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d006      	beq.n	801ffb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ffaa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d003      	beq.n	801ffb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ffb0:	697b      	ldr	r3, [r7, #20]
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	2b00      	cmp	r3, #0
 801ffb6:	d102      	bne.n	801ffbe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ffb8:	f06f 0307 	mvn.w	r3, #7
 801ffbc:	e01c      	b.n	801fff8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ffbe:	697b      	ldr	r3, [r7, #20]
 801ffc0:	68db      	ldr	r3, [r3, #12]
 801ffc2:	617b      	str	r3, [r7, #20]
 801ffc4:	697b      	ldr	r3, [r7, #20]
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	d1d9      	bne.n	801ff7e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ffca:	68bb      	ldr	r3, [r7, #8]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d002      	beq.n	801ffd6 <udp_bind+0xd2>
 801ffd0:	68bb      	ldr	r3, [r7, #8]
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	e000      	b.n	801ffd8 <udp_bind+0xd4>
 801ffd6:	2300      	movs	r3, #0
 801ffd8:	68fa      	ldr	r2, [r7, #12]
 801ffda:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	88fa      	ldrh	r2, [r7, #6]
 801ffe0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ffe2:	7cfb      	ldrb	r3, [r7, #19]
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d106      	bne.n	801fff6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801ffe8:	4b09      	ldr	r3, [pc, #36]	@ (8020010 <udp_bind+0x10c>)
 801ffea:	681a      	ldr	r2, [r3, #0]
 801ffec:	68fb      	ldr	r3, [r7, #12]
 801ffee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fff0:	4a07      	ldr	r2, [pc, #28]	@ (8020010 <udp_bind+0x10c>)
 801fff2:	68fb      	ldr	r3, [r7, #12]
 801fff4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fff6:	2300      	movs	r3, #0
}
 801fff8:	4618      	mov	r0, r3
 801fffa:	3718      	adds	r7, #24
 801fffc:	46bd      	mov	sp, r7
 801fffe:	bd80      	pop	{r7, pc}
 8020000:	0802805c 	.word	0x0802805c
 8020004:	080274e8 	.word	0x080274e8
 8020008:	080277b0 	.word	0x080277b0
 802000c:	0802753c 	.word	0x0802753c
 8020010:	20018c0c 	.word	0x20018c0c

08020014 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8020014:	b580      	push	{r7, lr}
 8020016:	b084      	sub	sp, #16
 8020018:	af00      	add	r7, sp, #0
 802001a:	60f8      	str	r0, [r7, #12]
 802001c:	60b9      	str	r1, [r7, #8]
 802001e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8020020:	68fb      	ldr	r3, [r7, #12]
 8020022:	2b00      	cmp	r3, #0
 8020024:	d107      	bne.n	8020036 <udp_recv+0x22>
 8020026:	4b08      	ldr	r3, [pc, #32]	@ (8020048 <udp_recv+0x34>)
 8020028:	f240 428a 	movw	r2, #1162	@ 0x48a
 802002c:	4907      	ldr	r1, [pc, #28]	@ (802004c <udp_recv+0x38>)
 802002e:	4808      	ldr	r0, [pc, #32]	@ (8020050 <udp_recv+0x3c>)
 8020030:	f003 fb1a 	bl	8023668 <iprintf>
 8020034:	e005      	b.n	8020042 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8020036:	68fb      	ldr	r3, [r7, #12]
 8020038:	68ba      	ldr	r2, [r7, #8]
 802003a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 802003c:	68fb      	ldr	r3, [r7, #12]
 802003e:	687a      	ldr	r2, [r7, #4]
 8020040:	61da      	str	r2, [r3, #28]
}
 8020042:	3710      	adds	r7, #16
 8020044:	46bd      	mov	sp, r7
 8020046:	bd80      	pop	{r7, pc}
 8020048:	080274e8 	.word	0x080274e8
 802004c:	0802781c 	.word	0x0802781c
 8020050:	0802753c 	.word	0x0802753c

08020054 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8020054:	b580      	push	{r7, lr}
 8020056:	b084      	sub	sp, #16
 8020058:	af00      	add	r7, sp, #0
 802005a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	2b00      	cmp	r3, #0
 8020060:	d107      	bne.n	8020072 <udp_remove+0x1e>
 8020062:	4b19      	ldr	r3, [pc, #100]	@ (80200c8 <udp_remove+0x74>)
 8020064:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8020068:	4918      	ldr	r1, [pc, #96]	@ (80200cc <udp_remove+0x78>)
 802006a:	4819      	ldr	r0, [pc, #100]	@ (80200d0 <udp_remove+0x7c>)
 802006c:	f003 fafc 	bl	8023668 <iprintf>
 8020070:	e026      	b.n	80200c0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8020072:	4b18      	ldr	r3, [pc, #96]	@ (80200d4 <udp_remove+0x80>)
 8020074:	681b      	ldr	r3, [r3, #0]
 8020076:	687a      	ldr	r2, [r7, #4]
 8020078:	429a      	cmp	r2, r3
 802007a:	d105      	bne.n	8020088 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 802007c:	4b15      	ldr	r3, [pc, #84]	@ (80200d4 <udp_remove+0x80>)
 802007e:	681b      	ldr	r3, [r3, #0]
 8020080:	68db      	ldr	r3, [r3, #12]
 8020082:	4a14      	ldr	r2, [pc, #80]	@ (80200d4 <udp_remove+0x80>)
 8020084:	6013      	str	r3, [r2, #0]
 8020086:	e017      	b.n	80200b8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020088:	4b12      	ldr	r3, [pc, #72]	@ (80200d4 <udp_remove+0x80>)
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	60fb      	str	r3, [r7, #12]
 802008e:	e010      	b.n	80200b2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8020090:	68fb      	ldr	r3, [r7, #12]
 8020092:	68db      	ldr	r3, [r3, #12]
 8020094:	2b00      	cmp	r3, #0
 8020096:	d009      	beq.n	80200ac <udp_remove+0x58>
 8020098:	68fb      	ldr	r3, [r7, #12]
 802009a:	68db      	ldr	r3, [r3, #12]
 802009c:	687a      	ldr	r2, [r7, #4]
 802009e:	429a      	cmp	r2, r3
 80200a0:	d104      	bne.n	80200ac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	68da      	ldr	r2, [r3, #12]
 80200a6:	68fb      	ldr	r3, [r7, #12]
 80200a8:	60da      	str	r2, [r3, #12]
        break;
 80200aa:	e005      	b.n	80200b8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80200ac:	68fb      	ldr	r3, [r7, #12]
 80200ae:	68db      	ldr	r3, [r3, #12]
 80200b0:	60fb      	str	r3, [r7, #12]
 80200b2:	68fb      	ldr	r3, [r7, #12]
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d1eb      	bne.n	8020090 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80200b8:	6879      	ldr	r1, [r7, #4]
 80200ba:	2000      	movs	r0, #0
 80200bc:	f7f8 f8aa 	bl	8018214 <memp_free>
}
 80200c0:	3710      	adds	r7, #16
 80200c2:	46bd      	mov	sp, r7
 80200c4:	bd80      	pop	{r7, pc}
 80200c6:	bf00      	nop
 80200c8:	080274e8 	.word	0x080274e8
 80200cc:	08027834 	.word	0x08027834
 80200d0:	0802753c 	.word	0x0802753c
 80200d4:	20018c0c 	.word	0x20018c0c

080200d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80200d8:	b580      	push	{r7, lr}
 80200da:	b082      	sub	sp, #8
 80200dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80200de:	2000      	movs	r0, #0
 80200e0:	f7f8 f822 	bl	8018128 <memp_malloc>
 80200e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d007      	beq.n	80200fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80200ec:	2220      	movs	r2, #32
 80200ee:	2100      	movs	r1, #0
 80200f0:	6878      	ldr	r0, [r7, #4]
 80200f2:	f003 fb6c 	bl	80237ce <memset>
    pcb->ttl = UDP_TTL;
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	22ff      	movs	r2, #255	@ 0xff
 80200fa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80200fc:	687b      	ldr	r3, [r7, #4]
}
 80200fe:	4618      	mov	r0, r3
 8020100:	3708      	adds	r7, #8
 8020102:	46bd      	mov	sp, r7
 8020104:	bd80      	pop	{r7, pc}

08020106 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8020106:	b580      	push	{r7, lr}
 8020108:	b084      	sub	sp, #16
 802010a:	af00      	add	r7, sp, #0
 802010c:	4603      	mov	r3, r0
 802010e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8020110:	f7ff ffe2 	bl	80200d8 <udp_new>
 8020114:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8020116:	68fb      	ldr	r3, [r7, #12]
}
 8020118:	4618      	mov	r0, r3
 802011a:	3710      	adds	r7, #16
 802011c:	46bd      	mov	sp, r7
 802011e:	bd80      	pop	{r7, pc}

08020120 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8020120:	b480      	push	{r7}
 8020122:	b085      	sub	sp, #20
 8020124:	af00      	add	r7, sp, #0
 8020126:	6078      	str	r0, [r7, #4]
 8020128:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	2b00      	cmp	r3, #0
 802012e:	d01e      	beq.n	802016e <udp_netif_ip_addr_changed+0x4e>
 8020130:	687b      	ldr	r3, [r7, #4]
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	2b00      	cmp	r3, #0
 8020136:	d01a      	beq.n	802016e <udp_netif_ip_addr_changed+0x4e>
 8020138:	683b      	ldr	r3, [r7, #0]
 802013a:	2b00      	cmp	r3, #0
 802013c:	d017      	beq.n	802016e <udp_netif_ip_addr_changed+0x4e>
 802013e:	683b      	ldr	r3, [r7, #0]
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	2b00      	cmp	r3, #0
 8020144:	d013      	beq.n	802016e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020146:	4b0d      	ldr	r3, [pc, #52]	@ (802017c <udp_netif_ip_addr_changed+0x5c>)
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	60fb      	str	r3, [r7, #12]
 802014c:	e00c      	b.n	8020168 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802014e:	68fb      	ldr	r3, [r7, #12]
 8020150:	681a      	ldr	r2, [r3, #0]
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	429a      	cmp	r2, r3
 8020158:	d103      	bne.n	8020162 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802015a:	683b      	ldr	r3, [r7, #0]
 802015c:	681a      	ldr	r2, [r3, #0]
 802015e:	68fb      	ldr	r3, [r7, #12]
 8020160:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	68db      	ldr	r3, [r3, #12]
 8020166:	60fb      	str	r3, [r7, #12]
 8020168:	68fb      	ldr	r3, [r7, #12]
 802016a:	2b00      	cmp	r3, #0
 802016c:	d1ef      	bne.n	802014e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802016e:	bf00      	nop
 8020170:	3714      	adds	r7, #20
 8020172:	46bd      	mov	sp, r7
 8020174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020178:	4770      	bx	lr
 802017a:	bf00      	nop
 802017c:	20018c0c 	.word	0x20018c0c

08020180 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8020180:	b580      	push	{r7, lr}
 8020182:	b082      	sub	sp, #8
 8020184:	af00      	add	r7, sp, #0
 8020186:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8020188:	4915      	ldr	r1, [pc, #84]	@ (80201e0 <etharp_free_entry+0x60>)
 802018a:	687a      	ldr	r2, [r7, #4]
 802018c:	4613      	mov	r3, r2
 802018e:	005b      	lsls	r3, r3, #1
 8020190:	4413      	add	r3, r2
 8020192:	00db      	lsls	r3, r3, #3
 8020194:	440b      	add	r3, r1
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	2b00      	cmp	r3, #0
 802019a:	d013      	beq.n	80201c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 802019c:	4910      	ldr	r1, [pc, #64]	@ (80201e0 <etharp_free_entry+0x60>)
 802019e:	687a      	ldr	r2, [r7, #4]
 80201a0:	4613      	mov	r3, r2
 80201a2:	005b      	lsls	r3, r3, #1
 80201a4:	4413      	add	r3, r2
 80201a6:	00db      	lsls	r3, r3, #3
 80201a8:	440b      	add	r3, r1
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	4618      	mov	r0, r3
 80201ae:	f7f8 ff07 	bl	8018fc0 <pbuf_free>
    arp_table[i].q = NULL;
 80201b2:	490b      	ldr	r1, [pc, #44]	@ (80201e0 <etharp_free_entry+0x60>)
 80201b4:	687a      	ldr	r2, [r7, #4]
 80201b6:	4613      	mov	r3, r2
 80201b8:	005b      	lsls	r3, r3, #1
 80201ba:	4413      	add	r3, r2
 80201bc:	00db      	lsls	r3, r3, #3
 80201be:	440b      	add	r3, r1
 80201c0:	2200      	movs	r2, #0
 80201c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80201c4:	4906      	ldr	r1, [pc, #24]	@ (80201e0 <etharp_free_entry+0x60>)
 80201c6:	687a      	ldr	r2, [r7, #4]
 80201c8:	4613      	mov	r3, r2
 80201ca:	005b      	lsls	r3, r3, #1
 80201cc:	4413      	add	r3, r2
 80201ce:	00db      	lsls	r3, r3, #3
 80201d0:	440b      	add	r3, r1
 80201d2:	3314      	adds	r3, #20
 80201d4:	2200      	movs	r2, #0
 80201d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80201d8:	bf00      	nop
 80201da:	3708      	adds	r7, #8
 80201dc:	46bd      	mov	sp, r7
 80201de:	bd80      	pop	{r7, pc}
 80201e0:	20018c10 	.word	0x20018c10

080201e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80201e4:	b580      	push	{r7, lr}
 80201e6:	b082      	sub	sp, #8
 80201e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80201ea:	2300      	movs	r3, #0
 80201ec:	607b      	str	r3, [r7, #4]
 80201ee:	e096      	b.n	802031e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80201f0:	494f      	ldr	r1, [pc, #316]	@ (8020330 <etharp_tmr+0x14c>)
 80201f2:	687a      	ldr	r2, [r7, #4]
 80201f4:	4613      	mov	r3, r2
 80201f6:	005b      	lsls	r3, r3, #1
 80201f8:	4413      	add	r3, r2
 80201fa:	00db      	lsls	r3, r3, #3
 80201fc:	440b      	add	r3, r1
 80201fe:	3314      	adds	r3, #20
 8020200:	781b      	ldrb	r3, [r3, #0]
 8020202:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8020204:	78fb      	ldrb	r3, [r7, #3]
 8020206:	2b00      	cmp	r3, #0
 8020208:	f000 8086 	beq.w	8020318 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 802020c:	4948      	ldr	r1, [pc, #288]	@ (8020330 <etharp_tmr+0x14c>)
 802020e:	687a      	ldr	r2, [r7, #4]
 8020210:	4613      	mov	r3, r2
 8020212:	005b      	lsls	r3, r3, #1
 8020214:	4413      	add	r3, r2
 8020216:	00db      	lsls	r3, r3, #3
 8020218:	440b      	add	r3, r1
 802021a:	3312      	adds	r3, #18
 802021c:	881b      	ldrh	r3, [r3, #0]
 802021e:	3301      	adds	r3, #1
 8020220:	b298      	uxth	r0, r3
 8020222:	4943      	ldr	r1, [pc, #268]	@ (8020330 <etharp_tmr+0x14c>)
 8020224:	687a      	ldr	r2, [r7, #4]
 8020226:	4613      	mov	r3, r2
 8020228:	005b      	lsls	r3, r3, #1
 802022a:	4413      	add	r3, r2
 802022c:	00db      	lsls	r3, r3, #3
 802022e:	440b      	add	r3, r1
 8020230:	3312      	adds	r3, #18
 8020232:	4602      	mov	r2, r0
 8020234:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020236:	493e      	ldr	r1, [pc, #248]	@ (8020330 <etharp_tmr+0x14c>)
 8020238:	687a      	ldr	r2, [r7, #4]
 802023a:	4613      	mov	r3, r2
 802023c:	005b      	lsls	r3, r3, #1
 802023e:	4413      	add	r3, r2
 8020240:	00db      	lsls	r3, r3, #3
 8020242:	440b      	add	r3, r1
 8020244:	3312      	adds	r3, #18
 8020246:	881b      	ldrh	r3, [r3, #0]
 8020248:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 802024c:	d215      	bcs.n	802027a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802024e:	4938      	ldr	r1, [pc, #224]	@ (8020330 <etharp_tmr+0x14c>)
 8020250:	687a      	ldr	r2, [r7, #4]
 8020252:	4613      	mov	r3, r2
 8020254:	005b      	lsls	r3, r3, #1
 8020256:	4413      	add	r3, r2
 8020258:	00db      	lsls	r3, r3, #3
 802025a:	440b      	add	r3, r1
 802025c:	3314      	adds	r3, #20
 802025e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020260:	2b01      	cmp	r3, #1
 8020262:	d10e      	bne.n	8020282 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8020264:	4932      	ldr	r1, [pc, #200]	@ (8020330 <etharp_tmr+0x14c>)
 8020266:	687a      	ldr	r2, [r7, #4]
 8020268:	4613      	mov	r3, r2
 802026a:	005b      	lsls	r3, r3, #1
 802026c:	4413      	add	r3, r2
 802026e:	00db      	lsls	r3, r3, #3
 8020270:	440b      	add	r3, r1
 8020272:	3312      	adds	r3, #18
 8020274:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020276:	2b04      	cmp	r3, #4
 8020278:	d903      	bls.n	8020282 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802027a:	6878      	ldr	r0, [r7, #4]
 802027c:	f7ff ff80 	bl	8020180 <etharp_free_entry>
 8020280:	e04a      	b.n	8020318 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8020282:	492b      	ldr	r1, [pc, #172]	@ (8020330 <etharp_tmr+0x14c>)
 8020284:	687a      	ldr	r2, [r7, #4]
 8020286:	4613      	mov	r3, r2
 8020288:	005b      	lsls	r3, r3, #1
 802028a:	4413      	add	r3, r2
 802028c:	00db      	lsls	r3, r3, #3
 802028e:	440b      	add	r3, r1
 8020290:	3314      	adds	r3, #20
 8020292:	781b      	ldrb	r3, [r3, #0]
 8020294:	2b03      	cmp	r3, #3
 8020296:	d10a      	bne.n	80202ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8020298:	4925      	ldr	r1, [pc, #148]	@ (8020330 <etharp_tmr+0x14c>)
 802029a:	687a      	ldr	r2, [r7, #4]
 802029c:	4613      	mov	r3, r2
 802029e:	005b      	lsls	r3, r3, #1
 80202a0:	4413      	add	r3, r2
 80202a2:	00db      	lsls	r3, r3, #3
 80202a4:	440b      	add	r3, r1
 80202a6:	3314      	adds	r3, #20
 80202a8:	2204      	movs	r2, #4
 80202aa:	701a      	strb	r2, [r3, #0]
 80202ac:	e034      	b.n	8020318 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80202ae:	4920      	ldr	r1, [pc, #128]	@ (8020330 <etharp_tmr+0x14c>)
 80202b0:	687a      	ldr	r2, [r7, #4]
 80202b2:	4613      	mov	r3, r2
 80202b4:	005b      	lsls	r3, r3, #1
 80202b6:	4413      	add	r3, r2
 80202b8:	00db      	lsls	r3, r3, #3
 80202ba:	440b      	add	r3, r1
 80202bc:	3314      	adds	r3, #20
 80202be:	781b      	ldrb	r3, [r3, #0]
 80202c0:	2b04      	cmp	r3, #4
 80202c2:	d10a      	bne.n	80202da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80202c4:	491a      	ldr	r1, [pc, #104]	@ (8020330 <etharp_tmr+0x14c>)
 80202c6:	687a      	ldr	r2, [r7, #4]
 80202c8:	4613      	mov	r3, r2
 80202ca:	005b      	lsls	r3, r3, #1
 80202cc:	4413      	add	r3, r2
 80202ce:	00db      	lsls	r3, r3, #3
 80202d0:	440b      	add	r3, r1
 80202d2:	3314      	adds	r3, #20
 80202d4:	2202      	movs	r2, #2
 80202d6:	701a      	strb	r2, [r3, #0]
 80202d8:	e01e      	b.n	8020318 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80202da:	4915      	ldr	r1, [pc, #84]	@ (8020330 <etharp_tmr+0x14c>)
 80202dc:	687a      	ldr	r2, [r7, #4]
 80202de:	4613      	mov	r3, r2
 80202e0:	005b      	lsls	r3, r3, #1
 80202e2:	4413      	add	r3, r2
 80202e4:	00db      	lsls	r3, r3, #3
 80202e6:	440b      	add	r3, r1
 80202e8:	3314      	adds	r3, #20
 80202ea:	781b      	ldrb	r3, [r3, #0]
 80202ec:	2b01      	cmp	r3, #1
 80202ee:	d113      	bne.n	8020318 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80202f0:	490f      	ldr	r1, [pc, #60]	@ (8020330 <etharp_tmr+0x14c>)
 80202f2:	687a      	ldr	r2, [r7, #4]
 80202f4:	4613      	mov	r3, r2
 80202f6:	005b      	lsls	r3, r3, #1
 80202f8:	4413      	add	r3, r2
 80202fa:	00db      	lsls	r3, r3, #3
 80202fc:	440b      	add	r3, r1
 80202fe:	3308      	adds	r3, #8
 8020300:	6818      	ldr	r0, [r3, #0]
 8020302:	687a      	ldr	r2, [r7, #4]
 8020304:	4613      	mov	r3, r2
 8020306:	005b      	lsls	r3, r3, #1
 8020308:	4413      	add	r3, r2
 802030a:	00db      	lsls	r3, r3, #3
 802030c:	4a08      	ldr	r2, [pc, #32]	@ (8020330 <etharp_tmr+0x14c>)
 802030e:	4413      	add	r3, r2
 8020310:	3304      	adds	r3, #4
 8020312:	4619      	mov	r1, r3
 8020314:	f000 fe6e 	bl	8020ff4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	3301      	adds	r3, #1
 802031c:	607b      	str	r3, [r7, #4]
 802031e:	687b      	ldr	r3, [r7, #4]
 8020320:	2b09      	cmp	r3, #9
 8020322:	f77f af65 	ble.w	80201f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8020326:	bf00      	nop
 8020328:	bf00      	nop
 802032a:	3708      	adds	r7, #8
 802032c:	46bd      	mov	sp, r7
 802032e:	bd80      	pop	{r7, pc}
 8020330:	20018c10 	.word	0x20018c10

08020334 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020334:	b580      	push	{r7, lr}
 8020336:	b08a      	sub	sp, #40	@ 0x28
 8020338:	af00      	add	r7, sp, #0
 802033a:	60f8      	str	r0, [r7, #12]
 802033c:	460b      	mov	r3, r1
 802033e:	607a      	str	r2, [r7, #4]
 8020340:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020342:	230a      	movs	r3, #10
 8020344:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8020346:	230a      	movs	r3, #10
 8020348:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802034a:	230a      	movs	r3, #10
 802034c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 802034e:	2300      	movs	r3, #0
 8020350:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020352:	230a      	movs	r3, #10
 8020354:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020356:	2300      	movs	r3, #0
 8020358:	83bb      	strh	r3, [r7, #28]
 802035a:	2300      	movs	r3, #0
 802035c:	837b      	strh	r3, [r7, #26]
 802035e:	2300      	movs	r3, #0
 8020360:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020362:	2300      	movs	r3, #0
 8020364:	843b      	strh	r3, [r7, #32]
 8020366:	e0ae      	b.n	80204c6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8020368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802036c:	49a6      	ldr	r1, [pc, #664]	@ (8020608 <etharp_find_entry+0x2d4>)
 802036e:	4613      	mov	r3, r2
 8020370:	005b      	lsls	r3, r3, #1
 8020372:	4413      	add	r3, r2
 8020374:	00db      	lsls	r3, r3, #3
 8020376:	440b      	add	r3, r1
 8020378:	3314      	adds	r3, #20
 802037a:	781b      	ldrb	r3, [r3, #0]
 802037c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802037e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8020382:	2b0a      	cmp	r3, #10
 8020384:	d105      	bne.n	8020392 <etharp_find_entry+0x5e>
 8020386:	7dfb      	ldrb	r3, [r7, #23]
 8020388:	2b00      	cmp	r3, #0
 802038a:	d102      	bne.n	8020392 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 802038c:	8c3b      	ldrh	r3, [r7, #32]
 802038e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8020390:	e095      	b.n	80204be <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8020392:	7dfb      	ldrb	r3, [r7, #23]
 8020394:	2b00      	cmp	r3, #0
 8020396:	f000 8092 	beq.w	80204be <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802039a:	7dfb      	ldrb	r3, [r7, #23]
 802039c:	2b01      	cmp	r3, #1
 802039e:	d009      	beq.n	80203b4 <etharp_find_entry+0x80>
 80203a0:	7dfb      	ldrb	r3, [r7, #23]
 80203a2:	2b01      	cmp	r3, #1
 80203a4:	d806      	bhi.n	80203b4 <etharp_find_entry+0x80>
 80203a6:	4b99      	ldr	r3, [pc, #612]	@ (802060c <etharp_find_entry+0x2d8>)
 80203a8:	f240 1223 	movw	r2, #291	@ 0x123
 80203ac:	4998      	ldr	r1, [pc, #608]	@ (8020610 <etharp_find_entry+0x2dc>)
 80203ae:	4899      	ldr	r0, [pc, #612]	@ (8020614 <etharp_find_entry+0x2e0>)
 80203b0:	f003 f95a 	bl	8023668 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80203b4:	68fb      	ldr	r3, [r7, #12]
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d020      	beq.n	80203fc <etharp_find_entry+0xc8>
 80203ba:	68fb      	ldr	r3, [r7, #12]
 80203bc:	6819      	ldr	r1, [r3, #0]
 80203be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203c2:	4891      	ldr	r0, [pc, #580]	@ (8020608 <etharp_find_entry+0x2d4>)
 80203c4:	4613      	mov	r3, r2
 80203c6:	005b      	lsls	r3, r3, #1
 80203c8:	4413      	add	r3, r2
 80203ca:	00db      	lsls	r3, r3, #3
 80203cc:	4403      	add	r3, r0
 80203ce:	3304      	adds	r3, #4
 80203d0:	681b      	ldr	r3, [r3, #0]
 80203d2:	4299      	cmp	r1, r3
 80203d4:	d112      	bne.n	80203fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d00c      	beq.n	80203f6 <etharp_find_entry+0xc2>
 80203dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203e0:	4989      	ldr	r1, [pc, #548]	@ (8020608 <etharp_find_entry+0x2d4>)
 80203e2:	4613      	mov	r3, r2
 80203e4:	005b      	lsls	r3, r3, #1
 80203e6:	4413      	add	r3, r2
 80203e8:	00db      	lsls	r3, r3, #3
 80203ea:	440b      	add	r3, r1
 80203ec:	3308      	adds	r3, #8
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	687a      	ldr	r2, [r7, #4]
 80203f2:	429a      	cmp	r2, r3
 80203f4:	d102      	bne.n	80203fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80203f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80203fa:	e100      	b.n	80205fe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80203fc:	7dfb      	ldrb	r3, [r7, #23]
 80203fe:	2b01      	cmp	r3, #1
 8020400:	d140      	bne.n	8020484 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8020402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020406:	4980      	ldr	r1, [pc, #512]	@ (8020608 <etharp_find_entry+0x2d4>)
 8020408:	4613      	mov	r3, r2
 802040a:	005b      	lsls	r3, r3, #1
 802040c:	4413      	add	r3, r2
 802040e:	00db      	lsls	r3, r3, #3
 8020410:	440b      	add	r3, r1
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	2b00      	cmp	r3, #0
 8020416:	d01a      	beq.n	802044e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8020418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802041c:	497a      	ldr	r1, [pc, #488]	@ (8020608 <etharp_find_entry+0x2d4>)
 802041e:	4613      	mov	r3, r2
 8020420:	005b      	lsls	r3, r3, #1
 8020422:	4413      	add	r3, r2
 8020424:	00db      	lsls	r3, r3, #3
 8020426:	440b      	add	r3, r1
 8020428:	3312      	adds	r3, #18
 802042a:	881b      	ldrh	r3, [r3, #0]
 802042c:	8bba      	ldrh	r2, [r7, #28]
 802042e:	429a      	cmp	r2, r3
 8020430:	d845      	bhi.n	80204be <etharp_find_entry+0x18a>
            old_queue = i;
 8020432:	8c3b      	ldrh	r3, [r7, #32]
 8020434:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8020436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802043a:	4973      	ldr	r1, [pc, #460]	@ (8020608 <etharp_find_entry+0x2d4>)
 802043c:	4613      	mov	r3, r2
 802043e:	005b      	lsls	r3, r3, #1
 8020440:	4413      	add	r3, r2
 8020442:	00db      	lsls	r3, r3, #3
 8020444:	440b      	add	r3, r1
 8020446:	3312      	adds	r3, #18
 8020448:	881b      	ldrh	r3, [r3, #0]
 802044a:	83bb      	strh	r3, [r7, #28]
 802044c:	e037      	b.n	80204be <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802044e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020452:	496d      	ldr	r1, [pc, #436]	@ (8020608 <etharp_find_entry+0x2d4>)
 8020454:	4613      	mov	r3, r2
 8020456:	005b      	lsls	r3, r3, #1
 8020458:	4413      	add	r3, r2
 802045a:	00db      	lsls	r3, r3, #3
 802045c:	440b      	add	r3, r1
 802045e:	3312      	adds	r3, #18
 8020460:	881b      	ldrh	r3, [r3, #0]
 8020462:	8b7a      	ldrh	r2, [r7, #26]
 8020464:	429a      	cmp	r2, r3
 8020466:	d82a      	bhi.n	80204be <etharp_find_entry+0x18a>
            old_pending = i;
 8020468:	8c3b      	ldrh	r3, [r7, #32]
 802046a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 802046c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020470:	4965      	ldr	r1, [pc, #404]	@ (8020608 <etharp_find_entry+0x2d4>)
 8020472:	4613      	mov	r3, r2
 8020474:	005b      	lsls	r3, r3, #1
 8020476:	4413      	add	r3, r2
 8020478:	00db      	lsls	r3, r3, #3
 802047a:	440b      	add	r3, r1
 802047c:	3312      	adds	r3, #18
 802047e:	881b      	ldrh	r3, [r3, #0]
 8020480:	837b      	strh	r3, [r7, #26]
 8020482:	e01c      	b.n	80204be <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8020484:	7dfb      	ldrb	r3, [r7, #23]
 8020486:	2b01      	cmp	r3, #1
 8020488:	d919      	bls.n	80204be <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802048a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802048e:	495e      	ldr	r1, [pc, #376]	@ (8020608 <etharp_find_entry+0x2d4>)
 8020490:	4613      	mov	r3, r2
 8020492:	005b      	lsls	r3, r3, #1
 8020494:	4413      	add	r3, r2
 8020496:	00db      	lsls	r3, r3, #3
 8020498:	440b      	add	r3, r1
 802049a:	3312      	adds	r3, #18
 802049c:	881b      	ldrh	r3, [r3, #0]
 802049e:	8b3a      	ldrh	r2, [r7, #24]
 80204a0:	429a      	cmp	r2, r3
 80204a2:	d80c      	bhi.n	80204be <etharp_find_entry+0x18a>
            old_stable = i;
 80204a4:	8c3b      	ldrh	r3, [r7, #32]
 80204a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80204a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80204ac:	4956      	ldr	r1, [pc, #344]	@ (8020608 <etharp_find_entry+0x2d4>)
 80204ae:	4613      	mov	r3, r2
 80204b0:	005b      	lsls	r3, r3, #1
 80204b2:	4413      	add	r3, r2
 80204b4:	00db      	lsls	r3, r3, #3
 80204b6:	440b      	add	r3, r1
 80204b8:	3312      	adds	r3, #18
 80204ba:	881b      	ldrh	r3, [r3, #0]
 80204bc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80204be:	8c3b      	ldrh	r3, [r7, #32]
 80204c0:	3301      	adds	r3, #1
 80204c2:	b29b      	uxth	r3, r3
 80204c4:	843b      	strh	r3, [r7, #32]
 80204c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80204ca:	2b09      	cmp	r3, #9
 80204cc:	f77f af4c 	ble.w	8020368 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80204d0:	7afb      	ldrb	r3, [r7, #11]
 80204d2:	f003 0302 	and.w	r3, r3, #2
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d108      	bne.n	80204ec <etharp_find_entry+0x1b8>
 80204da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80204de:	2b0a      	cmp	r3, #10
 80204e0:	d107      	bne.n	80204f2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80204e2:	7afb      	ldrb	r3, [r7, #11]
 80204e4:	f003 0301 	and.w	r3, r3, #1
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d102      	bne.n	80204f2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80204ec:	f04f 33ff 	mov.w	r3, #4294967295
 80204f0:	e085      	b.n	80205fe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80204f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80204f6:	2b09      	cmp	r3, #9
 80204f8:	dc02      	bgt.n	8020500 <etharp_find_entry+0x1cc>
    i = empty;
 80204fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80204fc:	843b      	strh	r3, [r7, #32]
 80204fe:	e039      	b.n	8020574 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8020500:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8020504:	2b09      	cmp	r3, #9
 8020506:	dc14      	bgt.n	8020532 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8020508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802050a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802050c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020510:	493d      	ldr	r1, [pc, #244]	@ (8020608 <etharp_find_entry+0x2d4>)
 8020512:	4613      	mov	r3, r2
 8020514:	005b      	lsls	r3, r3, #1
 8020516:	4413      	add	r3, r2
 8020518:	00db      	lsls	r3, r3, #3
 802051a:	440b      	add	r3, r1
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	2b00      	cmp	r3, #0
 8020520:	d018      	beq.n	8020554 <etharp_find_entry+0x220>
 8020522:	4b3a      	ldr	r3, [pc, #232]	@ (802060c <etharp_find_entry+0x2d8>)
 8020524:	f240 126d 	movw	r2, #365	@ 0x16d
 8020528:	493b      	ldr	r1, [pc, #236]	@ (8020618 <etharp_find_entry+0x2e4>)
 802052a:	483a      	ldr	r0, [pc, #232]	@ (8020614 <etharp_find_entry+0x2e0>)
 802052c:	f003 f89c 	bl	8023668 <iprintf>
 8020530:	e010      	b.n	8020554 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8020532:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8020536:	2b09      	cmp	r3, #9
 8020538:	dc02      	bgt.n	8020540 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 802053a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802053c:	843b      	strh	r3, [r7, #32]
 802053e:	e009      	b.n	8020554 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020540:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020544:	2b09      	cmp	r3, #9
 8020546:	dc02      	bgt.n	802054e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8020548:	8bfb      	ldrh	r3, [r7, #30]
 802054a:	843b      	strh	r3, [r7, #32]
 802054c:	e002      	b.n	8020554 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802054e:	f04f 33ff 	mov.w	r3, #4294967295
 8020552:	e054      	b.n	80205fe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020554:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020558:	2b09      	cmp	r3, #9
 802055a:	dd06      	ble.n	802056a <etharp_find_entry+0x236>
 802055c:	4b2b      	ldr	r3, [pc, #172]	@ (802060c <etharp_find_entry+0x2d8>)
 802055e:	f240 127f 	movw	r2, #383	@ 0x17f
 8020562:	492e      	ldr	r1, [pc, #184]	@ (802061c <etharp_find_entry+0x2e8>)
 8020564:	482b      	ldr	r0, [pc, #172]	@ (8020614 <etharp_find_entry+0x2e0>)
 8020566:	f003 f87f 	bl	8023668 <iprintf>
    etharp_free_entry(i);
 802056a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802056e:	4618      	mov	r0, r3
 8020570:	f7ff fe06 	bl	8020180 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020574:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020578:	2b09      	cmp	r3, #9
 802057a:	dd06      	ble.n	802058a <etharp_find_entry+0x256>
 802057c:	4b23      	ldr	r3, [pc, #140]	@ (802060c <etharp_find_entry+0x2d8>)
 802057e:	f240 1283 	movw	r2, #387	@ 0x183
 8020582:	4926      	ldr	r1, [pc, #152]	@ (802061c <etharp_find_entry+0x2e8>)
 8020584:	4823      	ldr	r0, [pc, #140]	@ (8020614 <etharp_find_entry+0x2e0>)
 8020586:	f003 f86f 	bl	8023668 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802058a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802058e:	491e      	ldr	r1, [pc, #120]	@ (8020608 <etharp_find_entry+0x2d4>)
 8020590:	4613      	mov	r3, r2
 8020592:	005b      	lsls	r3, r3, #1
 8020594:	4413      	add	r3, r2
 8020596:	00db      	lsls	r3, r3, #3
 8020598:	440b      	add	r3, r1
 802059a:	3314      	adds	r3, #20
 802059c:	781b      	ldrb	r3, [r3, #0]
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d006      	beq.n	80205b0 <etharp_find_entry+0x27c>
 80205a2:	4b1a      	ldr	r3, [pc, #104]	@ (802060c <etharp_find_entry+0x2d8>)
 80205a4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80205a8:	491d      	ldr	r1, [pc, #116]	@ (8020620 <etharp_find_entry+0x2ec>)
 80205aa:	481a      	ldr	r0, [pc, #104]	@ (8020614 <etharp_find_entry+0x2e0>)
 80205ac:	f003 f85c 	bl	8023668 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80205b0:	68fb      	ldr	r3, [r7, #12]
 80205b2:	2b00      	cmp	r3, #0
 80205b4:	d00b      	beq.n	80205ce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80205b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80205ba:	68fb      	ldr	r3, [r7, #12]
 80205bc:	6819      	ldr	r1, [r3, #0]
 80205be:	4812      	ldr	r0, [pc, #72]	@ (8020608 <etharp_find_entry+0x2d4>)
 80205c0:	4613      	mov	r3, r2
 80205c2:	005b      	lsls	r3, r3, #1
 80205c4:	4413      	add	r3, r2
 80205c6:	00db      	lsls	r3, r3, #3
 80205c8:	4403      	add	r3, r0
 80205ca:	3304      	adds	r3, #4
 80205cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80205ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80205d2:	490d      	ldr	r1, [pc, #52]	@ (8020608 <etharp_find_entry+0x2d4>)
 80205d4:	4613      	mov	r3, r2
 80205d6:	005b      	lsls	r3, r3, #1
 80205d8:	4413      	add	r3, r2
 80205da:	00db      	lsls	r3, r3, #3
 80205dc:	440b      	add	r3, r1
 80205de:	3312      	adds	r3, #18
 80205e0:	2200      	movs	r2, #0
 80205e2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80205e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80205e8:	4907      	ldr	r1, [pc, #28]	@ (8020608 <etharp_find_entry+0x2d4>)
 80205ea:	4613      	mov	r3, r2
 80205ec:	005b      	lsls	r3, r3, #1
 80205ee:	4413      	add	r3, r2
 80205f0:	00db      	lsls	r3, r3, #3
 80205f2:	440b      	add	r3, r1
 80205f4:	3308      	adds	r3, #8
 80205f6:	687a      	ldr	r2, [r7, #4]
 80205f8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80205fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80205fe:	4618      	mov	r0, r3
 8020600:	3728      	adds	r7, #40	@ 0x28
 8020602:	46bd      	mov	sp, r7
 8020604:	bd80      	pop	{r7, pc}
 8020606:	bf00      	nop
 8020608:	20018c10 	.word	0x20018c10
 802060c:	0802784c 	.word	0x0802784c
 8020610:	08027884 	.word	0x08027884
 8020614:	080278c4 	.word	0x080278c4
 8020618:	080278ec 	.word	0x080278ec
 802061c:	08027904 	.word	0x08027904
 8020620:	08027918 	.word	0x08027918

08020624 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8020624:	b580      	push	{r7, lr}
 8020626:	b088      	sub	sp, #32
 8020628:	af02      	add	r7, sp, #8
 802062a:	60f8      	str	r0, [r7, #12]
 802062c:	60b9      	str	r1, [r7, #8]
 802062e:	607a      	str	r2, [r7, #4]
 8020630:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8020632:	68fb      	ldr	r3, [r7, #12]
 8020634:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8020638:	2b06      	cmp	r3, #6
 802063a:	d006      	beq.n	802064a <etharp_update_arp_entry+0x26>
 802063c:	4b48      	ldr	r3, [pc, #288]	@ (8020760 <etharp_update_arp_entry+0x13c>)
 802063e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8020642:	4948      	ldr	r1, [pc, #288]	@ (8020764 <etharp_update_arp_entry+0x140>)
 8020644:	4848      	ldr	r0, [pc, #288]	@ (8020768 <etharp_update_arp_entry+0x144>)
 8020646:	f003 f80f 	bl	8023668 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 802064a:	68bb      	ldr	r3, [r7, #8]
 802064c:	2b00      	cmp	r3, #0
 802064e:	d012      	beq.n	8020676 <etharp_update_arp_entry+0x52>
 8020650:	68bb      	ldr	r3, [r7, #8]
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	2b00      	cmp	r3, #0
 8020656:	d00e      	beq.n	8020676 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020658:	68bb      	ldr	r3, [r7, #8]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	68f9      	ldr	r1, [r7, #12]
 802065e:	4618      	mov	r0, r3
 8020660:	f001 f8fe 	bl	8021860 <ip4_addr_isbroadcast_u32>
 8020664:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8020666:	2b00      	cmp	r3, #0
 8020668:	d105      	bne.n	8020676 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 802066a:	68bb      	ldr	r3, [r7, #8]
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020672:	2be0      	cmp	r3, #224	@ 0xe0
 8020674:	d102      	bne.n	802067c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020676:	f06f 030f 	mvn.w	r3, #15
 802067a:	e06c      	b.n	8020756 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 802067c:	78fb      	ldrb	r3, [r7, #3]
 802067e:	68fa      	ldr	r2, [r7, #12]
 8020680:	4619      	mov	r1, r3
 8020682:	68b8      	ldr	r0, [r7, #8]
 8020684:	f7ff fe56 	bl	8020334 <etharp_find_entry>
 8020688:	4603      	mov	r3, r0
 802068a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 802068c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020690:	2b00      	cmp	r3, #0
 8020692:	da02      	bge.n	802069a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8020694:	8afb      	ldrh	r3, [r7, #22]
 8020696:	b25b      	sxtb	r3, r3
 8020698:	e05d      	b.n	8020756 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802069a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802069e:	4933      	ldr	r1, [pc, #204]	@ (802076c <etharp_update_arp_entry+0x148>)
 80206a0:	4613      	mov	r3, r2
 80206a2:	005b      	lsls	r3, r3, #1
 80206a4:	4413      	add	r3, r2
 80206a6:	00db      	lsls	r3, r3, #3
 80206a8:	440b      	add	r3, r1
 80206aa:	3314      	adds	r3, #20
 80206ac:	2202      	movs	r2, #2
 80206ae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80206b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80206b4:	492d      	ldr	r1, [pc, #180]	@ (802076c <etharp_update_arp_entry+0x148>)
 80206b6:	4613      	mov	r3, r2
 80206b8:	005b      	lsls	r3, r3, #1
 80206ba:	4413      	add	r3, r2
 80206bc:	00db      	lsls	r3, r3, #3
 80206be:	440b      	add	r3, r1
 80206c0:	3308      	adds	r3, #8
 80206c2:	68fa      	ldr	r2, [r7, #12]
 80206c4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80206c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80206ca:	4613      	mov	r3, r2
 80206cc:	005b      	lsls	r3, r3, #1
 80206ce:	4413      	add	r3, r2
 80206d0:	00db      	lsls	r3, r3, #3
 80206d2:	3308      	adds	r3, #8
 80206d4:	4a25      	ldr	r2, [pc, #148]	@ (802076c <etharp_update_arp_entry+0x148>)
 80206d6:	4413      	add	r3, r2
 80206d8:	3304      	adds	r3, #4
 80206da:	2206      	movs	r2, #6
 80206dc:	6879      	ldr	r1, [r7, #4]
 80206de:	4618      	mov	r0, r3
 80206e0:	f003 f969 	bl	80239b6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80206e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80206e8:	4920      	ldr	r1, [pc, #128]	@ (802076c <etharp_update_arp_entry+0x148>)
 80206ea:	4613      	mov	r3, r2
 80206ec:	005b      	lsls	r3, r3, #1
 80206ee:	4413      	add	r3, r2
 80206f0:	00db      	lsls	r3, r3, #3
 80206f2:	440b      	add	r3, r1
 80206f4:	3312      	adds	r3, #18
 80206f6:	2200      	movs	r2, #0
 80206f8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80206fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80206fe:	491b      	ldr	r1, [pc, #108]	@ (802076c <etharp_update_arp_entry+0x148>)
 8020700:	4613      	mov	r3, r2
 8020702:	005b      	lsls	r3, r3, #1
 8020704:	4413      	add	r3, r2
 8020706:	00db      	lsls	r3, r3, #3
 8020708:	440b      	add	r3, r1
 802070a:	681b      	ldr	r3, [r3, #0]
 802070c:	2b00      	cmp	r3, #0
 802070e:	d021      	beq.n	8020754 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8020710:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020714:	4915      	ldr	r1, [pc, #84]	@ (802076c <etharp_update_arp_entry+0x148>)
 8020716:	4613      	mov	r3, r2
 8020718:	005b      	lsls	r3, r3, #1
 802071a:	4413      	add	r3, r2
 802071c:	00db      	lsls	r3, r3, #3
 802071e:	440b      	add	r3, r1
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8020724:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020728:	4910      	ldr	r1, [pc, #64]	@ (802076c <etharp_update_arp_entry+0x148>)
 802072a:	4613      	mov	r3, r2
 802072c:	005b      	lsls	r3, r3, #1
 802072e:	4413      	add	r3, r2
 8020730:	00db      	lsls	r3, r3, #3
 8020732:	440b      	add	r3, r1
 8020734:	2200      	movs	r2, #0
 8020736:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8020738:	68fb      	ldr	r3, [r7, #12]
 802073a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 802073e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8020742:	9300      	str	r3, [sp, #0]
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	6939      	ldr	r1, [r7, #16]
 8020748:	68f8      	ldr	r0, [r7, #12]
 802074a:	f002 f827 	bl	802279c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802074e:	6938      	ldr	r0, [r7, #16]
 8020750:	f7f8 fc36 	bl	8018fc0 <pbuf_free>
  }
  return ERR_OK;
 8020754:	2300      	movs	r3, #0
}
 8020756:	4618      	mov	r0, r3
 8020758:	3718      	adds	r7, #24
 802075a:	46bd      	mov	sp, r7
 802075c:	bd80      	pop	{r7, pc}
 802075e:	bf00      	nop
 8020760:	0802784c 	.word	0x0802784c
 8020764:	08027944 	.word	0x08027944
 8020768:	080278c4 	.word	0x080278c4
 802076c:	20018c10 	.word	0x20018c10

08020770 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020770:	b580      	push	{r7, lr}
 8020772:	b084      	sub	sp, #16
 8020774:	af00      	add	r7, sp, #0
 8020776:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020778:	2300      	movs	r3, #0
 802077a:	60fb      	str	r3, [r7, #12]
 802077c:	e01e      	b.n	80207bc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802077e:	4913      	ldr	r1, [pc, #76]	@ (80207cc <etharp_cleanup_netif+0x5c>)
 8020780:	68fa      	ldr	r2, [r7, #12]
 8020782:	4613      	mov	r3, r2
 8020784:	005b      	lsls	r3, r3, #1
 8020786:	4413      	add	r3, r2
 8020788:	00db      	lsls	r3, r3, #3
 802078a:	440b      	add	r3, r1
 802078c:	3314      	adds	r3, #20
 802078e:	781b      	ldrb	r3, [r3, #0]
 8020790:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8020792:	7afb      	ldrb	r3, [r7, #11]
 8020794:	2b00      	cmp	r3, #0
 8020796:	d00e      	beq.n	80207b6 <etharp_cleanup_netif+0x46>
 8020798:	490c      	ldr	r1, [pc, #48]	@ (80207cc <etharp_cleanup_netif+0x5c>)
 802079a:	68fa      	ldr	r2, [r7, #12]
 802079c:	4613      	mov	r3, r2
 802079e:	005b      	lsls	r3, r3, #1
 80207a0:	4413      	add	r3, r2
 80207a2:	00db      	lsls	r3, r3, #3
 80207a4:	440b      	add	r3, r1
 80207a6:	3308      	adds	r3, #8
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	687a      	ldr	r2, [r7, #4]
 80207ac:	429a      	cmp	r2, r3
 80207ae:	d102      	bne.n	80207b6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80207b0:	68f8      	ldr	r0, [r7, #12]
 80207b2:	f7ff fce5 	bl	8020180 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80207b6:	68fb      	ldr	r3, [r7, #12]
 80207b8:	3301      	adds	r3, #1
 80207ba:	60fb      	str	r3, [r7, #12]
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	2b09      	cmp	r3, #9
 80207c0:	dddd      	ble.n	802077e <etharp_cleanup_netif+0xe>
    }
  }
}
 80207c2:	bf00      	nop
 80207c4:	bf00      	nop
 80207c6:	3710      	adds	r7, #16
 80207c8:	46bd      	mov	sp, r7
 80207ca:	bd80      	pop	{r7, pc}
 80207cc:	20018c10 	.word	0x20018c10

080207d0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80207d0:	b5b0      	push	{r4, r5, r7, lr}
 80207d2:	b08a      	sub	sp, #40	@ 0x28
 80207d4:	af04      	add	r7, sp, #16
 80207d6:	6078      	str	r0, [r7, #4]
 80207d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80207da:	683b      	ldr	r3, [r7, #0]
 80207dc:	2b00      	cmp	r3, #0
 80207de:	d107      	bne.n	80207f0 <etharp_input+0x20>
 80207e0:	4b3d      	ldr	r3, [pc, #244]	@ (80208d8 <etharp_input+0x108>)
 80207e2:	f240 228a 	movw	r2, #650	@ 0x28a
 80207e6:	493d      	ldr	r1, [pc, #244]	@ (80208dc <etharp_input+0x10c>)
 80207e8:	483d      	ldr	r0, [pc, #244]	@ (80208e0 <etharp_input+0x110>)
 80207ea:	f002 ff3d 	bl	8023668 <iprintf>
 80207ee:	e06f      	b.n	80208d0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	685b      	ldr	r3, [r3, #4]
 80207f4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80207f6:	693b      	ldr	r3, [r7, #16]
 80207f8:	881b      	ldrh	r3, [r3, #0]
 80207fa:	b29b      	uxth	r3, r3
 80207fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020800:	d10c      	bne.n	802081c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020802:	693b      	ldr	r3, [r7, #16]
 8020804:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020806:	2b06      	cmp	r3, #6
 8020808:	d108      	bne.n	802081c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802080a:	693b      	ldr	r3, [r7, #16]
 802080c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802080e:	2b04      	cmp	r3, #4
 8020810:	d104      	bne.n	802081c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8020812:	693b      	ldr	r3, [r7, #16]
 8020814:	885b      	ldrh	r3, [r3, #2]
 8020816:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020818:	2b08      	cmp	r3, #8
 802081a:	d003      	beq.n	8020824 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 802081c:	6878      	ldr	r0, [r7, #4]
 802081e:	f7f8 fbcf 	bl	8018fc0 <pbuf_free>
    return;
 8020822:	e055      	b.n	80208d0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8020824:	693b      	ldr	r3, [r7, #16]
 8020826:	330e      	adds	r3, #14
 8020828:	681b      	ldr	r3, [r3, #0]
 802082a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 802082c:	693b      	ldr	r3, [r7, #16]
 802082e:	3318      	adds	r3, #24
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020834:	683b      	ldr	r3, [r7, #0]
 8020836:	3304      	adds	r3, #4
 8020838:	681b      	ldr	r3, [r3, #0]
 802083a:	2b00      	cmp	r3, #0
 802083c:	d102      	bne.n	8020844 <etharp_input+0x74>
    for_us = 0;
 802083e:	2300      	movs	r3, #0
 8020840:	75fb      	strb	r3, [r7, #23]
 8020842:	e009      	b.n	8020858 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020844:	68ba      	ldr	r2, [r7, #8]
 8020846:	683b      	ldr	r3, [r7, #0]
 8020848:	3304      	adds	r3, #4
 802084a:	681b      	ldr	r3, [r3, #0]
 802084c:	429a      	cmp	r2, r3
 802084e:	bf0c      	ite	eq
 8020850:	2301      	moveq	r3, #1
 8020852:	2300      	movne	r3, #0
 8020854:	b2db      	uxtb	r3, r3
 8020856:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020858:	693b      	ldr	r3, [r7, #16]
 802085a:	f103 0208 	add.w	r2, r3, #8
 802085e:	7dfb      	ldrb	r3, [r7, #23]
 8020860:	2b00      	cmp	r3, #0
 8020862:	d001      	beq.n	8020868 <etharp_input+0x98>
 8020864:	2301      	movs	r3, #1
 8020866:	e000      	b.n	802086a <etharp_input+0x9a>
 8020868:	2302      	movs	r3, #2
 802086a:	f107 010c 	add.w	r1, r7, #12
 802086e:	6838      	ldr	r0, [r7, #0]
 8020870:	f7ff fed8 	bl	8020624 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020874:	693b      	ldr	r3, [r7, #16]
 8020876:	88db      	ldrh	r3, [r3, #6]
 8020878:	b29b      	uxth	r3, r3
 802087a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802087e:	d003      	beq.n	8020888 <etharp_input+0xb8>
 8020880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020884:	d01e      	beq.n	80208c4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8020886:	e020      	b.n	80208ca <etharp_input+0xfa>
      if (for_us) {
 8020888:	7dfb      	ldrb	r3, [r7, #23]
 802088a:	2b00      	cmp	r3, #0
 802088c:	d01c      	beq.n	80208c8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802088e:	683b      	ldr	r3, [r7, #0]
 8020890:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8020894:	693b      	ldr	r3, [r7, #16]
 8020896:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802089a:	683b      	ldr	r3, [r7, #0]
 802089c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80208a0:	683b      	ldr	r3, [r7, #0]
 80208a2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80208a4:	693a      	ldr	r2, [r7, #16]
 80208a6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80208a8:	2102      	movs	r1, #2
 80208aa:	9103      	str	r1, [sp, #12]
 80208ac:	f107 010c 	add.w	r1, r7, #12
 80208b0:	9102      	str	r1, [sp, #8]
 80208b2:	9201      	str	r2, [sp, #4]
 80208b4:	9300      	str	r3, [sp, #0]
 80208b6:	462b      	mov	r3, r5
 80208b8:	4622      	mov	r2, r4
 80208ba:	4601      	mov	r1, r0
 80208bc:	6838      	ldr	r0, [r7, #0]
 80208be:	f000 faeb 	bl	8020e98 <etharp_raw>
      break;
 80208c2:	e001      	b.n	80208c8 <etharp_input+0xf8>
      break;
 80208c4:	bf00      	nop
 80208c6:	e000      	b.n	80208ca <etharp_input+0xfa>
      break;
 80208c8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80208ca:	6878      	ldr	r0, [r7, #4]
 80208cc:	f7f8 fb78 	bl	8018fc0 <pbuf_free>
}
 80208d0:	3718      	adds	r7, #24
 80208d2:	46bd      	mov	sp, r7
 80208d4:	bdb0      	pop	{r4, r5, r7, pc}
 80208d6:	bf00      	nop
 80208d8:	0802784c 	.word	0x0802784c
 80208dc:	0802799c 	.word	0x0802799c
 80208e0:	080278c4 	.word	0x080278c4

080208e4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80208e4:	b580      	push	{r7, lr}
 80208e6:	b086      	sub	sp, #24
 80208e8:	af02      	add	r7, sp, #8
 80208ea:	60f8      	str	r0, [r7, #12]
 80208ec:	60b9      	str	r1, [r7, #8]
 80208ee:	4613      	mov	r3, r2
 80208f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80208f2:	79fa      	ldrb	r2, [r7, #7]
 80208f4:	4944      	ldr	r1, [pc, #272]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 80208f6:	4613      	mov	r3, r2
 80208f8:	005b      	lsls	r3, r3, #1
 80208fa:	4413      	add	r3, r2
 80208fc:	00db      	lsls	r3, r3, #3
 80208fe:	440b      	add	r3, r1
 8020900:	3314      	adds	r3, #20
 8020902:	781b      	ldrb	r3, [r3, #0]
 8020904:	2b01      	cmp	r3, #1
 8020906:	d806      	bhi.n	8020916 <etharp_output_to_arp_index+0x32>
 8020908:	4b40      	ldr	r3, [pc, #256]	@ (8020a0c <etharp_output_to_arp_index+0x128>)
 802090a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 802090e:	4940      	ldr	r1, [pc, #256]	@ (8020a10 <etharp_output_to_arp_index+0x12c>)
 8020910:	4840      	ldr	r0, [pc, #256]	@ (8020a14 <etharp_output_to_arp_index+0x130>)
 8020912:	f002 fea9 	bl	8023668 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8020916:	79fa      	ldrb	r2, [r7, #7]
 8020918:	493b      	ldr	r1, [pc, #236]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 802091a:	4613      	mov	r3, r2
 802091c:	005b      	lsls	r3, r3, #1
 802091e:	4413      	add	r3, r2
 8020920:	00db      	lsls	r3, r3, #3
 8020922:	440b      	add	r3, r1
 8020924:	3314      	adds	r3, #20
 8020926:	781b      	ldrb	r3, [r3, #0]
 8020928:	2b02      	cmp	r3, #2
 802092a:	d153      	bne.n	80209d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802092c:	79fa      	ldrb	r2, [r7, #7]
 802092e:	4936      	ldr	r1, [pc, #216]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 8020930:	4613      	mov	r3, r2
 8020932:	005b      	lsls	r3, r3, #1
 8020934:	4413      	add	r3, r2
 8020936:	00db      	lsls	r3, r3, #3
 8020938:	440b      	add	r3, r1
 802093a:	3312      	adds	r3, #18
 802093c:	881b      	ldrh	r3, [r3, #0]
 802093e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8020942:	d919      	bls.n	8020978 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8020944:	79fa      	ldrb	r2, [r7, #7]
 8020946:	4613      	mov	r3, r2
 8020948:	005b      	lsls	r3, r3, #1
 802094a:	4413      	add	r3, r2
 802094c:	00db      	lsls	r3, r3, #3
 802094e:	4a2e      	ldr	r2, [pc, #184]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 8020950:	4413      	add	r3, r2
 8020952:	3304      	adds	r3, #4
 8020954:	4619      	mov	r1, r3
 8020956:	68f8      	ldr	r0, [r7, #12]
 8020958:	f000 fb4c 	bl	8020ff4 <etharp_request>
 802095c:	4603      	mov	r3, r0
 802095e:	2b00      	cmp	r3, #0
 8020960:	d138      	bne.n	80209d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020962:	79fa      	ldrb	r2, [r7, #7]
 8020964:	4928      	ldr	r1, [pc, #160]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 8020966:	4613      	mov	r3, r2
 8020968:	005b      	lsls	r3, r3, #1
 802096a:	4413      	add	r3, r2
 802096c:	00db      	lsls	r3, r3, #3
 802096e:	440b      	add	r3, r1
 8020970:	3314      	adds	r3, #20
 8020972:	2203      	movs	r2, #3
 8020974:	701a      	strb	r2, [r3, #0]
 8020976:	e02d      	b.n	80209d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020978:	79fa      	ldrb	r2, [r7, #7]
 802097a:	4923      	ldr	r1, [pc, #140]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 802097c:	4613      	mov	r3, r2
 802097e:	005b      	lsls	r3, r3, #1
 8020980:	4413      	add	r3, r2
 8020982:	00db      	lsls	r3, r3, #3
 8020984:	440b      	add	r3, r1
 8020986:	3312      	adds	r3, #18
 8020988:	881b      	ldrh	r3, [r3, #0]
 802098a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 802098e:	d321      	bcc.n	80209d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020990:	79fa      	ldrb	r2, [r7, #7]
 8020992:	4613      	mov	r3, r2
 8020994:	005b      	lsls	r3, r3, #1
 8020996:	4413      	add	r3, r2
 8020998:	00db      	lsls	r3, r3, #3
 802099a:	4a1b      	ldr	r2, [pc, #108]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 802099c:	4413      	add	r3, r2
 802099e:	1d19      	adds	r1, r3, #4
 80209a0:	79fa      	ldrb	r2, [r7, #7]
 80209a2:	4613      	mov	r3, r2
 80209a4:	005b      	lsls	r3, r3, #1
 80209a6:	4413      	add	r3, r2
 80209a8:	00db      	lsls	r3, r3, #3
 80209aa:	3308      	adds	r3, #8
 80209ac:	4a16      	ldr	r2, [pc, #88]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 80209ae:	4413      	add	r3, r2
 80209b0:	3304      	adds	r3, #4
 80209b2:	461a      	mov	r2, r3
 80209b4:	68f8      	ldr	r0, [r7, #12]
 80209b6:	f000 fafb 	bl	8020fb0 <etharp_request_dst>
 80209ba:	4603      	mov	r3, r0
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d109      	bne.n	80209d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80209c0:	79fa      	ldrb	r2, [r7, #7]
 80209c2:	4911      	ldr	r1, [pc, #68]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 80209c4:	4613      	mov	r3, r2
 80209c6:	005b      	lsls	r3, r3, #1
 80209c8:	4413      	add	r3, r2
 80209ca:	00db      	lsls	r3, r3, #3
 80209cc:	440b      	add	r3, r1
 80209ce:	3314      	adds	r3, #20
 80209d0:	2203      	movs	r2, #3
 80209d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80209d4:	68fb      	ldr	r3, [r7, #12]
 80209d6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80209da:	79fa      	ldrb	r2, [r7, #7]
 80209dc:	4613      	mov	r3, r2
 80209de:	005b      	lsls	r3, r3, #1
 80209e0:	4413      	add	r3, r2
 80209e2:	00db      	lsls	r3, r3, #3
 80209e4:	3308      	adds	r3, #8
 80209e6:	4a08      	ldr	r2, [pc, #32]	@ (8020a08 <etharp_output_to_arp_index+0x124>)
 80209e8:	4413      	add	r3, r2
 80209ea:	3304      	adds	r3, #4
 80209ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80209f0:	9200      	str	r2, [sp, #0]
 80209f2:	460a      	mov	r2, r1
 80209f4:	68b9      	ldr	r1, [r7, #8]
 80209f6:	68f8      	ldr	r0, [r7, #12]
 80209f8:	f001 fed0 	bl	802279c <ethernet_output>
 80209fc:	4603      	mov	r3, r0
}
 80209fe:	4618      	mov	r0, r3
 8020a00:	3710      	adds	r7, #16
 8020a02:	46bd      	mov	sp, r7
 8020a04:	bd80      	pop	{r7, pc}
 8020a06:	bf00      	nop
 8020a08:	20018c10 	.word	0x20018c10
 8020a0c:	0802784c 	.word	0x0802784c
 8020a10:	080279bc 	.word	0x080279bc
 8020a14:	080278c4 	.word	0x080278c4

08020a18 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8020a18:	b580      	push	{r7, lr}
 8020a1a:	b08a      	sub	sp, #40	@ 0x28
 8020a1c:	af02      	add	r7, sp, #8
 8020a1e:	60f8      	str	r0, [r7, #12]
 8020a20:	60b9      	str	r1, [r7, #8]
 8020a22:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020a28:	68fb      	ldr	r3, [r7, #12]
 8020a2a:	2b00      	cmp	r3, #0
 8020a2c:	d106      	bne.n	8020a3c <etharp_output+0x24>
 8020a2e:	4b73      	ldr	r3, [pc, #460]	@ (8020bfc <etharp_output+0x1e4>)
 8020a30:	f240 321e 	movw	r2, #798	@ 0x31e
 8020a34:	4972      	ldr	r1, [pc, #456]	@ (8020c00 <etharp_output+0x1e8>)
 8020a36:	4873      	ldr	r0, [pc, #460]	@ (8020c04 <etharp_output+0x1ec>)
 8020a38:	f002 fe16 	bl	8023668 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	d106      	bne.n	8020a50 <etharp_output+0x38>
 8020a42:	4b6e      	ldr	r3, [pc, #440]	@ (8020bfc <etharp_output+0x1e4>)
 8020a44:	f240 321f 	movw	r2, #799	@ 0x31f
 8020a48:	496f      	ldr	r1, [pc, #444]	@ (8020c08 <etharp_output+0x1f0>)
 8020a4a:	486e      	ldr	r0, [pc, #440]	@ (8020c04 <etharp_output+0x1ec>)
 8020a4c:	f002 fe0c 	bl	8023668 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020a50:	687b      	ldr	r3, [r7, #4]
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d106      	bne.n	8020a64 <etharp_output+0x4c>
 8020a56:	4b69      	ldr	r3, [pc, #420]	@ (8020bfc <etharp_output+0x1e4>)
 8020a58:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8020a5c:	496b      	ldr	r1, [pc, #428]	@ (8020c0c <etharp_output+0x1f4>)
 8020a5e:	4869      	ldr	r0, [pc, #420]	@ (8020c04 <etharp_output+0x1ec>)
 8020a60:	f002 fe02 	bl	8023668 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	681b      	ldr	r3, [r3, #0]
 8020a68:	68f9      	ldr	r1, [r7, #12]
 8020a6a:	4618      	mov	r0, r3
 8020a6c:	f000 fef8 	bl	8021860 <ip4_addr_isbroadcast_u32>
 8020a70:	4603      	mov	r3, r0
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	d002      	beq.n	8020a7c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8020a76:	4b66      	ldr	r3, [pc, #408]	@ (8020c10 <etharp_output+0x1f8>)
 8020a78:	61fb      	str	r3, [r7, #28]
 8020a7a:	e0af      	b.n	8020bdc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020a84:	2be0      	cmp	r3, #224	@ 0xe0
 8020a86:	d118      	bne.n	8020aba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020a88:	2301      	movs	r3, #1
 8020a8a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020a8c:	2300      	movs	r3, #0
 8020a8e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020a90:	235e      	movs	r3, #94	@ 0x5e
 8020a92:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	3301      	adds	r3, #1
 8020a98:	781b      	ldrb	r3, [r3, #0]
 8020a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020a9e:	b2db      	uxtb	r3, r3
 8020aa0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020aa2:	687b      	ldr	r3, [r7, #4]
 8020aa4:	3302      	adds	r3, #2
 8020aa6:	781b      	ldrb	r3, [r3, #0]
 8020aa8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	3303      	adds	r3, #3
 8020aae:	781b      	ldrb	r3, [r3, #0]
 8020ab0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020ab2:	f107 0310 	add.w	r3, r7, #16
 8020ab6:	61fb      	str	r3, [r7, #28]
 8020ab8:	e090      	b.n	8020bdc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	681a      	ldr	r2, [r3, #0]
 8020abe:	68fb      	ldr	r3, [r7, #12]
 8020ac0:	3304      	adds	r3, #4
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	405a      	eors	r2, r3
 8020ac6:	68fb      	ldr	r3, [r7, #12]
 8020ac8:	3308      	adds	r3, #8
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	4013      	ands	r3, r2
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d012      	beq.n	8020af8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020ad8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8020adc:	4293      	cmp	r3, r2
 8020ade:	d00b      	beq.n	8020af8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020ae0:	68fb      	ldr	r3, [r7, #12]
 8020ae2:	330c      	adds	r3, #12
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d003      	beq.n	8020af2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020aea:	68fb      	ldr	r3, [r7, #12]
 8020aec:	330c      	adds	r3, #12
 8020aee:	61bb      	str	r3, [r7, #24]
 8020af0:	e002      	b.n	8020af8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8020af2:	f06f 0303 	mvn.w	r3, #3
 8020af6:	e07d      	b.n	8020bf4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020af8:	4b46      	ldr	r3, [pc, #280]	@ (8020c14 <etharp_output+0x1fc>)
 8020afa:	781b      	ldrb	r3, [r3, #0]
 8020afc:	4619      	mov	r1, r3
 8020afe:	4a46      	ldr	r2, [pc, #280]	@ (8020c18 <etharp_output+0x200>)
 8020b00:	460b      	mov	r3, r1
 8020b02:	005b      	lsls	r3, r3, #1
 8020b04:	440b      	add	r3, r1
 8020b06:	00db      	lsls	r3, r3, #3
 8020b08:	4413      	add	r3, r2
 8020b0a:	3314      	adds	r3, #20
 8020b0c:	781b      	ldrb	r3, [r3, #0]
 8020b0e:	2b01      	cmp	r3, #1
 8020b10:	d925      	bls.n	8020b5e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020b12:	4b40      	ldr	r3, [pc, #256]	@ (8020c14 <etharp_output+0x1fc>)
 8020b14:	781b      	ldrb	r3, [r3, #0]
 8020b16:	4619      	mov	r1, r3
 8020b18:	4a3f      	ldr	r2, [pc, #252]	@ (8020c18 <etharp_output+0x200>)
 8020b1a:	460b      	mov	r3, r1
 8020b1c:	005b      	lsls	r3, r3, #1
 8020b1e:	440b      	add	r3, r1
 8020b20:	00db      	lsls	r3, r3, #3
 8020b22:	4413      	add	r3, r2
 8020b24:	3308      	adds	r3, #8
 8020b26:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020b28:	68fa      	ldr	r2, [r7, #12]
 8020b2a:	429a      	cmp	r2, r3
 8020b2c:	d117      	bne.n	8020b5e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8020b2e:	69bb      	ldr	r3, [r7, #24]
 8020b30:	681a      	ldr	r2, [r3, #0]
 8020b32:	4b38      	ldr	r3, [pc, #224]	@ (8020c14 <etharp_output+0x1fc>)
 8020b34:	781b      	ldrb	r3, [r3, #0]
 8020b36:	4618      	mov	r0, r3
 8020b38:	4937      	ldr	r1, [pc, #220]	@ (8020c18 <etharp_output+0x200>)
 8020b3a:	4603      	mov	r3, r0
 8020b3c:	005b      	lsls	r3, r3, #1
 8020b3e:	4403      	add	r3, r0
 8020b40:	00db      	lsls	r3, r3, #3
 8020b42:	440b      	add	r3, r1
 8020b44:	3304      	adds	r3, #4
 8020b46:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020b48:	429a      	cmp	r2, r3
 8020b4a:	d108      	bne.n	8020b5e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8020b4c:	4b31      	ldr	r3, [pc, #196]	@ (8020c14 <etharp_output+0x1fc>)
 8020b4e:	781b      	ldrb	r3, [r3, #0]
 8020b50:	461a      	mov	r2, r3
 8020b52:	68b9      	ldr	r1, [r7, #8]
 8020b54:	68f8      	ldr	r0, [r7, #12]
 8020b56:	f7ff fec5 	bl	80208e4 <etharp_output_to_arp_index>
 8020b5a:	4603      	mov	r3, r0
 8020b5c:	e04a      	b.n	8020bf4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020b5e:	2300      	movs	r3, #0
 8020b60:	75fb      	strb	r3, [r7, #23]
 8020b62:	e031      	b.n	8020bc8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020b64:	7dfa      	ldrb	r2, [r7, #23]
 8020b66:	492c      	ldr	r1, [pc, #176]	@ (8020c18 <etharp_output+0x200>)
 8020b68:	4613      	mov	r3, r2
 8020b6a:	005b      	lsls	r3, r3, #1
 8020b6c:	4413      	add	r3, r2
 8020b6e:	00db      	lsls	r3, r3, #3
 8020b70:	440b      	add	r3, r1
 8020b72:	3314      	adds	r3, #20
 8020b74:	781b      	ldrb	r3, [r3, #0]
 8020b76:	2b01      	cmp	r3, #1
 8020b78:	d923      	bls.n	8020bc2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020b7a:	7dfa      	ldrb	r2, [r7, #23]
 8020b7c:	4926      	ldr	r1, [pc, #152]	@ (8020c18 <etharp_output+0x200>)
 8020b7e:	4613      	mov	r3, r2
 8020b80:	005b      	lsls	r3, r3, #1
 8020b82:	4413      	add	r3, r2
 8020b84:	00db      	lsls	r3, r3, #3
 8020b86:	440b      	add	r3, r1
 8020b88:	3308      	adds	r3, #8
 8020b8a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020b8c:	68fa      	ldr	r2, [r7, #12]
 8020b8e:	429a      	cmp	r2, r3
 8020b90:	d117      	bne.n	8020bc2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020b92:	69bb      	ldr	r3, [r7, #24]
 8020b94:	6819      	ldr	r1, [r3, #0]
 8020b96:	7dfa      	ldrb	r2, [r7, #23]
 8020b98:	481f      	ldr	r0, [pc, #124]	@ (8020c18 <etharp_output+0x200>)
 8020b9a:	4613      	mov	r3, r2
 8020b9c:	005b      	lsls	r3, r3, #1
 8020b9e:	4413      	add	r3, r2
 8020ba0:	00db      	lsls	r3, r3, #3
 8020ba2:	4403      	add	r3, r0
 8020ba4:	3304      	adds	r3, #4
 8020ba6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020ba8:	4299      	cmp	r1, r3
 8020baa:	d10a      	bne.n	8020bc2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020bac:	4a19      	ldr	r2, [pc, #100]	@ (8020c14 <etharp_output+0x1fc>)
 8020bae:	7dfb      	ldrb	r3, [r7, #23]
 8020bb0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020bb2:	7dfb      	ldrb	r3, [r7, #23]
 8020bb4:	461a      	mov	r2, r3
 8020bb6:	68b9      	ldr	r1, [r7, #8]
 8020bb8:	68f8      	ldr	r0, [r7, #12]
 8020bba:	f7ff fe93 	bl	80208e4 <etharp_output_to_arp_index>
 8020bbe:	4603      	mov	r3, r0
 8020bc0:	e018      	b.n	8020bf4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020bc2:	7dfb      	ldrb	r3, [r7, #23]
 8020bc4:	3301      	adds	r3, #1
 8020bc6:	75fb      	strb	r3, [r7, #23]
 8020bc8:	7dfb      	ldrb	r3, [r7, #23]
 8020bca:	2b09      	cmp	r3, #9
 8020bcc:	d9ca      	bls.n	8020b64 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020bce:	68ba      	ldr	r2, [r7, #8]
 8020bd0:	69b9      	ldr	r1, [r7, #24]
 8020bd2:	68f8      	ldr	r0, [r7, #12]
 8020bd4:	f000 f822 	bl	8020c1c <etharp_query>
 8020bd8:	4603      	mov	r3, r0
 8020bda:	e00b      	b.n	8020bf4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020bdc:	68fb      	ldr	r3, [r7, #12]
 8020bde:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8020be2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8020be6:	9300      	str	r3, [sp, #0]
 8020be8:	69fb      	ldr	r3, [r7, #28]
 8020bea:	68b9      	ldr	r1, [r7, #8]
 8020bec:	68f8      	ldr	r0, [r7, #12]
 8020bee:	f001 fdd5 	bl	802279c <ethernet_output>
 8020bf2:	4603      	mov	r3, r0
}
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	3720      	adds	r7, #32
 8020bf8:	46bd      	mov	sp, r7
 8020bfa:	bd80      	pop	{r7, pc}
 8020bfc:	0802784c 	.word	0x0802784c
 8020c00:	0802799c 	.word	0x0802799c
 8020c04:	080278c4 	.word	0x080278c4
 8020c08:	080279ec 	.word	0x080279ec
 8020c0c:	0802798c 	.word	0x0802798c
 8020c10:	08028060 	.word	0x08028060
 8020c14:	20018d00 	.word	0x20018d00
 8020c18:	20018c10 	.word	0x20018c10

08020c1c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020c1c:	b580      	push	{r7, lr}
 8020c1e:	b08c      	sub	sp, #48	@ 0x30
 8020c20:	af02      	add	r7, sp, #8
 8020c22:	60f8      	str	r0, [r7, #12]
 8020c24:	60b9      	str	r1, [r7, #8]
 8020c26:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020c28:	68fb      	ldr	r3, [r7, #12]
 8020c2a:	3326      	adds	r3, #38	@ 0x26
 8020c2c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020c2e:	23ff      	movs	r3, #255	@ 0xff
 8020c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8020c34:	2300      	movs	r3, #0
 8020c36:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020c38:	68bb      	ldr	r3, [r7, #8]
 8020c3a:	681b      	ldr	r3, [r3, #0]
 8020c3c:	68f9      	ldr	r1, [r7, #12]
 8020c3e:	4618      	mov	r0, r3
 8020c40:	f000 fe0e 	bl	8021860 <ip4_addr_isbroadcast_u32>
 8020c44:	4603      	mov	r3, r0
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d10c      	bne.n	8020c64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020c4a:	68bb      	ldr	r3, [r7, #8]
 8020c4c:	681b      	ldr	r3, [r3, #0]
 8020c4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020c52:	2be0      	cmp	r3, #224	@ 0xe0
 8020c54:	d006      	beq.n	8020c64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020c56:	68bb      	ldr	r3, [r7, #8]
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d003      	beq.n	8020c64 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020c5c:	68bb      	ldr	r3, [r7, #8]
 8020c5e:	681b      	ldr	r3, [r3, #0]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d102      	bne.n	8020c6a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020c64:	f06f 030f 	mvn.w	r3, #15
 8020c68:	e101      	b.n	8020e6e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020c6a:	68fa      	ldr	r2, [r7, #12]
 8020c6c:	2101      	movs	r1, #1
 8020c6e:	68b8      	ldr	r0, [r7, #8]
 8020c70:	f7ff fb60 	bl	8020334 <etharp_find_entry>
 8020c74:	4603      	mov	r3, r0
 8020c76:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020c78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	da02      	bge.n	8020c86 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020c80:	8a7b      	ldrh	r3, [r7, #18]
 8020c82:	b25b      	sxtb	r3, r3
 8020c84:	e0f3      	b.n	8020e6e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020c86:	8a7b      	ldrh	r3, [r7, #18]
 8020c88:	2b7e      	cmp	r3, #126	@ 0x7e
 8020c8a:	d906      	bls.n	8020c9a <etharp_query+0x7e>
 8020c8c:	4b7a      	ldr	r3, [pc, #488]	@ (8020e78 <etharp_query+0x25c>)
 8020c8e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8020c92:	497a      	ldr	r1, [pc, #488]	@ (8020e7c <etharp_query+0x260>)
 8020c94:	487a      	ldr	r0, [pc, #488]	@ (8020e80 <etharp_query+0x264>)
 8020c96:	f002 fce7 	bl	8023668 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020c9a:	8a7b      	ldrh	r3, [r7, #18]
 8020c9c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020c9e:	7c7a      	ldrb	r2, [r7, #17]
 8020ca0:	4978      	ldr	r1, [pc, #480]	@ (8020e84 <etharp_query+0x268>)
 8020ca2:	4613      	mov	r3, r2
 8020ca4:	005b      	lsls	r3, r3, #1
 8020ca6:	4413      	add	r3, r2
 8020ca8:	00db      	lsls	r3, r3, #3
 8020caa:	440b      	add	r3, r1
 8020cac:	3314      	adds	r3, #20
 8020cae:	781b      	ldrb	r3, [r3, #0]
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	d115      	bne.n	8020ce0 <etharp_query+0xc4>
    is_new_entry = 1;
 8020cb4:	2301      	movs	r3, #1
 8020cb6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020cb8:	7c7a      	ldrb	r2, [r7, #17]
 8020cba:	4972      	ldr	r1, [pc, #456]	@ (8020e84 <etharp_query+0x268>)
 8020cbc:	4613      	mov	r3, r2
 8020cbe:	005b      	lsls	r3, r3, #1
 8020cc0:	4413      	add	r3, r2
 8020cc2:	00db      	lsls	r3, r3, #3
 8020cc4:	440b      	add	r3, r1
 8020cc6:	3314      	adds	r3, #20
 8020cc8:	2201      	movs	r2, #1
 8020cca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020ccc:	7c7a      	ldrb	r2, [r7, #17]
 8020cce:	496d      	ldr	r1, [pc, #436]	@ (8020e84 <etharp_query+0x268>)
 8020cd0:	4613      	mov	r3, r2
 8020cd2:	005b      	lsls	r3, r3, #1
 8020cd4:	4413      	add	r3, r2
 8020cd6:	00db      	lsls	r3, r3, #3
 8020cd8:	440b      	add	r3, r1
 8020cda:	3308      	adds	r3, #8
 8020cdc:	68fa      	ldr	r2, [r7, #12]
 8020cde:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020ce0:	7c7a      	ldrb	r2, [r7, #17]
 8020ce2:	4968      	ldr	r1, [pc, #416]	@ (8020e84 <etharp_query+0x268>)
 8020ce4:	4613      	mov	r3, r2
 8020ce6:	005b      	lsls	r3, r3, #1
 8020ce8:	4413      	add	r3, r2
 8020cea:	00db      	lsls	r3, r3, #3
 8020cec:	440b      	add	r3, r1
 8020cee:	3314      	adds	r3, #20
 8020cf0:	781b      	ldrb	r3, [r3, #0]
 8020cf2:	2b01      	cmp	r3, #1
 8020cf4:	d011      	beq.n	8020d1a <etharp_query+0xfe>
 8020cf6:	7c7a      	ldrb	r2, [r7, #17]
 8020cf8:	4962      	ldr	r1, [pc, #392]	@ (8020e84 <etharp_query+0x268>)
 8020cfa:	4613      	mov	r3, r2
 8020cfc:	005b      	lsls	r3, r3, #1
 8020cfe:	4413      	add	r3, r2
 8020d00:	00db      	lsls	r3, r3, #3
 8020d02:	440b      	add	r3, r1
 8020d04:	3314      	adds	r3, #20
 8020d06:	781b      	ldrb	r3, [r3, #0]
 8020d08:	2b01      	cmp	r3, #1
 8020d0a:	d806      	bhi.n	8020d1a <etharp_query+0xfe>
 8020d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8020e78 <etharp_query+0x25c>)
 8020d0e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8020d12:	495d      	ldr	r1, [pc, #372]	@ (8020e88 <etharp_query+0x26c>)
 8020d14:	485a      	ldr	r0, [pc, #360]	@ (8020e80 <etharp_query+0x264>)
 8020d16:	f002 fca7 	bl	8023668 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020d1a:	6a3b      	ldr	r3, [r7, #32]
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d102      	bne.n	8020d26 <etharp_query+0x10a>
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d10c      	bne.n	8020d40 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020d26:	68b9      	ldr	r1, [r7, #8]
 8020d28:	68f8      	ldr	r0, [r7, #12]
 8020d2a:	f000 f963 	bl	8020ff4 <etharp_request>
 8020d2e:	4603      	mov	r3, r0
 8020d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d102      	bne.n	8020d40 <etharp_query+0x124>
      return result;
 8020d3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8020d3e:	e096      	b.n	8020e6e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d106      	bne.n	8020d54 <etharp_query+0x138>
 8020d46:	4b4c      	ldr	r3, [pc, #304]	@ (8020e78 <etharp_query+0x25c>)
 8020d48:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8020d4c:	494f      	ldr	r1, [pc, #316]	@ (8020e8c <etharp_query+0x270>)
 8020d4e:	484c      	ldr	r0, [pc, #304]	@ (8020e80 <etharp_query+0x264>)
 8020d50:	f002 fc8a 	bl	8023668 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020d54:	7c7a      	ldrb	r2, [r7, #17]
 8020d56:	494b      	ldr	r1, [pc, #300]	@ (8020e84 <etharp_query+0x268>)
 8020d58:	4613      	mov	r3, r2
 8020d5a:	005b      	lsls	r3, r3, #1
 8020d5c:	4413      	add	r3, r2
 8020d5e:	00db      	lsls	r3, r3, #3
 8020d60:	440b      	add	r3, r1
 8020d62:	3314      	adds	r3, #20
 8020d64:	781b      	ldrb	r3, [r3, #0]
 8020d66:	2b01      	cmp	r3, #1
 8020d68:	d917      	bls.n	8020d9a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020d6a:	4a49      	ldr	r2, [pc, #292]	@ (8020e90 <etharp_query+0x274>)
 8020d6c:	7c7b      	ldrb	r3, [r7, #17]
 8020d6e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020d70:	7c7a      	ldrb	r2, [r7, #17]
 8020d72:	4613      	mov	r3, r2
 8020d74:	005b      	lsls	r3, r3, #1
 8020d76:	4413      	add	r3, r2
 8020d78:	00db      	lsls	r3, r3, #3
 8020d7a:	3308      	adds	r3, #8
 8020d7c:	4a41      	ldr	r2, [pc, #260]	@ (8020e84 <etharp_query+0x268>)
 8020d7e:	4413      	add	r3, r2
 8020d80:	3304      	adds	r3, #4
 8020d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8020d86:	9200      	str	r2, [sp, #0]
 8020d88:	697a      	ldr	r2, [r7, #20]
 8020d8a:	6879      	ldr	r1, [r7, #4]
 8020d8c:	68f8      	ldr	r0, [r7, #12]
 8020d8e:	f001 fd05 	bl	802279c <ethernet_output>
 8020d92:	4603      	mov	r3, r0
 8020d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8020d98:	e067      	b.n	8020e6a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020d9a:	7c7a      	ldrb	r2, [r7, #17]
 8020d9c:	4939      	ldr	r1, [pc, #228]	@ (8020e84 <etharp_query+0x268>)
 8020d9e:	4613      	mov	r3, r2
 8020da0:	005b      	lsls	r3, r3, #1
 8020da2:	4413      	add	r3, r2
 8020da4:	00db      	lsls	r3, r3, #3
 8020da6:	440b      	add	r3, r1
 8020da8:	3314      	adds	r3, #20
 8020daa:	781b      	ldrb	r3, [r3, #0]
 8020dac:	2b01      	cmp	r3, #1
 8020dae:	d15c      	bne.n	8020e6a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020db0:	2300      	movs	r3, #0
 8020db2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020db8:	e01c      	b.n	8020df4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020dba:	69fb      	ldr	r3, [r7, #28]
 8020dbc:	895a      	ldrh	r2, [r3, #10]
 8020dbe:	69fb      	ldr	r3, [r7, #28]
 8020dc0:	891b      	ldrh	r3, [r3, #8]
 8020dc2:	429a      	cmp	r2, r3
 8020dc4:	d10a      	bne.n	8020ddc <etharp_query+0x1c0>
 8020dc6:	69fb      	ldr	r3, [r7, #28]
 8020dc8:	681b      	ldr	r3, [r3, #0]
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	d006      	beq.n	8020ddc <etharp_query+0x1c0>
 8020dce:	4b2a      	ldr	r3, [pc, #168]	@ (8020e78 <etharp_query+0x25c>)
 8020dd0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8020dd4:	492f      	ldr	r1, [pc, #188]	@ (8020e94 <etharp_query+0x278>)
 8020dd6:	482a      	ldr	r0, [pc, #168]	@ (8020e80 <etharp_query+0x264>)
 8020dd8:	f002 fc46 	bl	8023668 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020ddc:	69fb      	ldr	r3, [r7, #28]
 8020dde:	7b1b      	ldrb	r3, [r3, #12]
 8020de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d002      	beq.n	8020dee <etharp_query+0x1d2>
        copy_needed = 1;
 8020de8:	2301      	movs	r3, #1
 8020dea:	61bb      	str	r3, [r7, #24]
        break;
 8020dec:	e005      	b.n	8020dfa <etharp_query+0x1de>
      }
      p = p->next;
 8020dee:	69fb      	ldr	r3, [r7, #28]
 8020df0:	681b      	ldr	r3, [r3, #0]
 8020df2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020df4:	69fb      	ldr	r3, [r7, #28]
 8020df6:	2b00      	cmp	r3, #0
 8020df8:	d1df      	bne.n	8020dba <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020dfa:	69bb      	ldr	r3, [r7, #24]
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	d007      	beq.n	8020e10 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020e00:	687a      	ldr	r2, [r7, #4]
 8020e02:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8020e06:	200e      	movs	r0, #14
 8020e08:	f7f8 fb6c 	bl	80194e4 <pbuf_clone>
 8020e0c:	61f8      	str	r0, [r7, #28]
 8020e0e:	e004      	b.n	8020e1a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020e14:	69f8      	ldr	r0, [r7, #28]
 8020e16:	f7f8 f979 	bl	801910c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020e1a:	69fb      	ldr	r3, [r7, #28]
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	d021      	beq.n	8020e64 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020e20:	7c7a      	ldrb	r2, [r7, #17]
 8020e22:	4918      	ldr	r1, [pc, #96]	@ (8020e84 <etharp_query+0x268>)
 8020e24:	4613      	mov	r3, r2
 8020e26:	005b      	lsls	r3, r3, #1
 8020e28:	4413      	add	r3, r2
 8020e2a:	00db      	lsls	r3, r3, #3
 8020e2c:	440b      	add	r3, r1
 8020e2e:	681b      	ldr	r3, [r3, #0]
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d00a      	beq.n	8020e4a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020e34:	7c7a      	ldrb	r2, [r7, #17]
 8020e36:	4913      	ldr	r1, [pc, #76]	@ (8020e84 <etharp_query+0x268>)
 8020e38:	4613      	mov	r3, r2
 8020e3a:	005b      	lsls	r3, r3, #1
 8020e3c:	4413      	add	r3, r2
 8020e3e:	00db      	lsls	r3, r3, #3
 8020e40:	440b      	add	r3, r1
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	4618      	mov	r0, r3
 8020e46:	f7f8 f8bb 	bl	8018fc0 <pbuf_free>
      }
      arp_table[i].q = p;
 8020e4a:	7c7a      	ldrb	r2, [r7, #17]
 8020e4c:	490d      	ldr	r1, [pc, #52]	@ (8020e84 <etharp_query+0x268>)
 8020e4e:	4613      	mov	r3, r2
 8020e50:	005b      	lsls	r3, r3, #1
 8020e52:	4413      	add	r3, r2
 8020e54:	00db      	lsls	r3, r3, #3
 8020e56:	440b      	add	r3, r1
 8020e58:	69fa      	ldr	r2, [r7, #28]
 8020e5a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8020e62:	e002      	b.n	8020e6a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020e64:	23ff      	movs	r3, #255	@ 0xff
 8020e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8020e6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8020e6e:	4618      	mov	r0, r3
 8020e70:	3728      	adds	r7, #40	@ 0x28
 8020e72:	46bd      	mov	sp, r7
 8020e74:	bd80      	pop	{r7, pc}
 8020e76:	bf00      	nop
 8020e78:	0802784c 	.word	0x0802784c
 8020e7c:	080279f8 	.word	0x080279f8
 8020e80:	080278c4 	.word	0x080278c4
 8020e84:	20018c10 	.word	0x20018c10
 8020e88:	08027a08 	.word	0x08027a08
 8020e8c:	080279ec 	.word	0x080279ec
 8020e90:	20018d00 	.word	0x20018d00
 8020e94:	08027a30 	.word	0x08027a30

08020e98 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020e98:	b580      	push	{r7, lr}
 8020e9a:	b08a      	sub	sp, #40	@ 0x28
 8020e9c:	af02      	add	r7, sp, #8
 8020e9e:	60f8      	str	r0, [r7, #12]
 8020ea0:	60b9      	str	r1, [r7, #8]
 8020ea2:	607a      	str	r2, [r7, #4]
 8020ea4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020ea6:	2300      	movs	r3, #0
 8020ea8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020eaa:	68fb      	ldr	r3, [r7, #12]
 8020eac:	2b00      	cmp	r3, #0
 8020eae:	d106      	bne.n	8020ebe <etharp_raw+0x26>
 8020eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8020f9c <etharp_raw+0x104>)
 8020eb2:	f240 4257 	movw	r2, #1111	@ 0x457
 8020eb6:	493a      	ldr	r1, [pc, #232]	@ (8020fa0 <etharp_raw+0x108>)
 8020eb8:	483a      	ldr	r0, [pc, #232]	@ (8020fa4 <etharp_raw+0x10c>)
 8020eba:	f002 fbd5 	bl	8023668 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020ebe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020ec2:	211c      	movs	r1, #28
 8020ec4:	200e      	movs	r0, #14
 8020ec6:	f7f7 fd65 	bl	8018994 <pbuf_alloc>
 8020eca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020ecc:	69bb      	ldr	r3, [r7, #24]
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d102      	bne.n	8020ed8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8020ed6:	e05d      	b.n	8020f94 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020ed8:	69bb      	ldr	r3, [r7, #24]
 8020eda:	895b      	ldrh	r3, [r3, #10]
 8020edc:	2b1b      	cmp	r3, #27
 8020ede:	d806      	bhi.n	8020eee <etharp_raw+0x56>
 8020ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8020f9c <etharp_raw+0x104>)
 8020ee2:	f240 4262 	movw	r2, #1122	@ 0x462
 8020ee6:	4930      	ldr	r1, [pc, #192]	@ (8020fa8 <etharp_raw+0x110>)
 8020ee8:	482e      	ldr	r0, [pc, #184]	@ (8020fa4 <etharp_raw+0x10c>)
 8020eea:	f002 fbbd 	bl	8023668 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020eee:	69bb      	ldr	r3, [r7, #24]
 8020ef0:	685b      	ldr	r3, [r3, #4]
 8020ef2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020ef4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	f7f6 fc2e 	bl	8017758 <lwip_htons>
 8020efc:	4603      	mov	r3, r0
 8020efe:	461a      	mov	r2, r3
 8020f00:	697b      	ldr	r3, [r7, #20]
 8020f02:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020f04:	68fb      	ldr	r3, [r7, #12]
 8020f06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8020f0a:	2b06      	cmp	r3, #6
 8020f0c:	d006      	beq.n	8020f1c <etharp_raw+0x84>
 8020f0e:	4b23      	ldr	r3, [pc, #140]	@ (8020f9c <etharp_raw+0x104>)
 8020f10:	f240 4269 	movw	r2, #1129	@ 0x469
 8020f14:	4925      	ldr	r1, [pc, #148]	@ (8020fac <etharp_raw+0x114>)
 8020f16:	4823      	ldr	r0, [pc, #140]	@ (8020fa4 <etharp_raw+0x10c>)
 8020f18:	f002 fba6 	bl	8023668 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020f1c:	697b      	ldr	r3, [r7, #20]
 8020f1e:	3308      	adds	r3, #8
 8020f20:	2206      	movs	r2, #6
 8020f22:	6839      	ldr	r1, [r7, #0]
 8020f24:	4618      	mov	r0, r3
 8020f26:	f002 fd46 	bl	80239b6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020f2a:	697b      	ldr	r3, [r7, #20]
 8020f2c:	3312      	adds	r3, #18
 8020f2e:	2206      	movs	r2, #6
 8020f30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020f32:	4618      	mov	r0, r3
 8020f34:	f002 fd3f 	bl	80239b6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020f38:	697b      	ldr	r3, [r7, #20]
 8020f3a:	330e      	adds	r3, #14
 8020f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020f3e:	6812      	ldr	r2, [r2, #0]
 8020f40:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020f42:	697b      	ldr	r3, [r7, #20]
 8020f44:	3318      	adds	r3, #24
 8020f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020f48:	6812      	ldr	r2, [r2, #0]
 8020f4a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020f4c:	697b      	ldr	r3, [r7, #20]
 8020f4e:	2200      	movs	r2, #0
 8020f50:	701a      	strb	r2, [r3, #0]
 8020f52:	2200      	movs	r2, #0
 8020f54:	f042 0201 	orr.w	r2, r2, #1
 8020f58:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020f5a:	697b      	ldr	r3, [r7, #20]
 8020f5c:	2200      	movs	r2, #0
 8020f5e:	f042 0208 	orr.w	r2, r2, #8
 8020f62:	709a      	strb	r2, [r3, #2]
 8020f64:	2200      	movs	r2, #0
 8020f66:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020f68:	697b      	ldr	r3, [r7, #20]
 8020f6a:	2206      	movs	r2, #6
 8020f6c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020f6e:	697b      	ldr	r3, [r7, #20]
 8020f70:	2204      	movs	r2, #4
 8020f72:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020f74:	f640 0306 	movw	r3, #2054	@ 0x806
 8020f78:	9300      	str	r3, [sp, #0]
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	68ba      	ldr	r2, [r7, #8]
 8020f7e:	69b9      	ldr	r1, [r7, #24]
 8020f80:	68f8      	ldr	r0, [r7, #12]
 8020f82:	f001 fc0b 	bl	802279c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020f86:	69b8      	ldr	r0, [r7, #24]
 8020f88:	f7f8 f81a 	bl	8018fc0 <pbuf_free>
  p = NULL;
 8020f8c:	2300      	movs	r3, #0
 8020f8e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020f90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020f94:	4618      	mov	r0, r3
 8020f96:	3720      	adds	r7, #32
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}
 8020f9c:	0802784c 	.word	0x0802784c
 8020fa0:	0802799c 	.word	0x0802799c
 8020fa4:	080278c4 	.word	0x080278c4
 8020fa8:	08027a4c 	.word	0x08027a4c
 8020fac:	08027a80 	.word	0x08027a80

08020fb0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020fb0:	b580      	push	{r7, lr}
 8020fb2:	b088      	sub	sp, #32
 8020fb4:	af04      	add	r7, sp, #16
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020fc2:	68fb      	ldr	r3, [r7, #12]
 8020fc4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8020fc8:	68fb      	ldr	r3, [r7, #12]
 8020fca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020fcc:	2201      	movs	r2, #1
 8020fce:	9203      	str	r2, [sp, #12]
 8020fd0:	68ba      	ldr	r2, [r7, #8]
 8020fd2:	9202      	str	r2, [sp, #8]
 8020fd4:	4a06      	ldr	r2, [pc, #24]	@ (8020ff0 <etharp_request_dst+0x40>)
 8020fd6:	9201      	str	r2, [sp, #4]
 8020fd8:	9300      	str	r3, [sp, #0]
 8020fda:	4603      	mov	r3, r0
 8020fdc:	687a      	ldr	r2, [r7, #4]
 8020fde:	68f8      	ldr	r0, [r7, #12]
 8020fe0:	f7ff ff5a 	bl	8020e98 <etharp_raw>
 8020fe4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020fe6:	4618      	mov	r0, r3
 8020fe8:	3710      	adds	r7, #16
 8020fea:	46bd      	mov	sp, r7
 8020fec:	bd80      	pop	{r7, pc}
 8020fee:	bf00      	nop
 8020ff0:	08028068 	.word	0x08028068

08020ff4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b082      	sub	sp, #8
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	6078      	str	r0, [r7, #4]
 8020ffc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020ffe:	4a05      	ldr	r2, [pc, #20]	@ (8021014 <etharp_request+0x20>)
 8021000:	6839      	ldr	r1, [r7, #0]
 8021002:	6878      	ldr	r0, [r7, #4]
 8021004:	f7ff ffd4 	bl	8020fb0 <etharp_request_dst>
 8021008:	4603      	mov	r3, r0
}
 802100a:	4618      	mov	r0, r3
 802100c:	3708      	adds	r7, #8
 802100e:	46bd      	mov	sp, r7
 8021010:	bd80      	pop	{r7, pc}
 8021012:	bf00      	nop
 8021014:	08028060 	.word	0x08028060

08021018 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8021018:	b580      	push	{r7, lr}
 802101a:	b08e      	sub	sp, #56	@ 0x38
 802101c:	af04      	add	r7, sp, #16
 802101e:	6078      	str	r0, [r7, #4]
 8021020:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8021022:	4b79      	ldr	r3, [pc, #484]	@ (8021208 <icmp_input+0x1f0>)
 8021024:	689b      	ldr	r3, [r3, #8]
 8021026:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8021028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802102a:	781b      	ldrb	r3, [r3, #0]
 802102c:	f003 030f 	and.w	r3, r3, #15
 8021030:	b2db      	uxtb	r3, r3
 8021032:	009b      	lsls	r3, r3, #2
 8021034:	b2db      	uxtb	r3, r3
 8021036:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8021038:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802103a:	2b13      	cmp	r3, #19
 802103c:	f240 80cd 	bls.w	80211da <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	895b      	ldrh	r3, [r3, #10]
 8021044:	2b03      	cmp	r3, #3
 8021046:	f240 80ca 	bls.w	80211de <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	685b      	ldr	r3, [r3, #4]
 802104e:	781b      	ldrb	r3, [r3, #0]
 8021050:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8021054:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8021058:	2b00      	cmp	r3, #0
 802105a:	f000 80b7 	beq.w	80211cc <icmp_input+0x1b4>
 802105e:	2b08      	cmp	r3, #8
 8021060:	f040 80b7 	bne.w	80211d2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8021064:	4b69      	ldr	r3, [pc, #420]	@ (802120c <icmp_input+0x1f4>)
 8021066:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021068:	4b67      	ldr	r3, [pc, #412]	@ (8021208 <icmp_input+0x1f0>)
 802106a:	695b      	ldr	r3, [r3, #20]
 802106c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021070:	2be0      	cmp	r3, #224	@ 0xe0
 8021072:	f000 80bb 	beq.w	80211ec <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8021076:	4b64      	ldr	r3, [pc, #400]	@ (8021208 <icmp_input+0x1f0>)
 8021078:	695b      	ldr	r3, [r3, #20]
 802107a:	4a63      	ldr	r2, [pc, #396]	@ (8021208 <icmp_input+0x1f0>)
 802107c:	6812      	ldr	r2, [r2, #0]
 802107e:	4611      	mov	r1, r2
 8021080:	4618      	mov	r0, r3
 8021082:	f000 fbed 	bl	8021860 <ip4_addr_isbroadcast_u32>
 8021086:	4603      	mov	r3, r0
 8021088:	2b00      	cmp	r3, #0
 802108a:	f040 80b1 	bne.w	80211f0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802108e:	687b      	ldr	r3, [r7, #4]
 8021090:	891b      	ldrh	r3, [r3, #8]
 8021092:	2b07      	cmp	r3, #7
 8021094:	f240 80a5 	bls.w	80211e2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021098:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802109a:	330e      	adds	r3, #14
 802109c:	4619      	mov	r1, r3
 802109e:	6878      	ldr	r0, [r7, #4]
 80210a0:	f7f7 fec6 	bl	8018e30 <pbuf_add_header>
 80210a4:	4603      	mov	r3, r0
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d04b      	beq.n	8021142 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	891a      	ldrh	r2, [r3, #8]
 80210ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80210b0:	4413      	add	r3, r2
 80210b2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	891b      	ldrh	r3, [r3, #8]
 80210b8:	8b7a      	ldrh	r2, [r7, #26]
 80210ba:	429a      	cmp	r2, r3
 80210bc:	f0c0 809a 	bcc.w	80211f4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80210c0:	8b7b      	ldrh	r3, [r7, #26]
 80210c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80210c6:	4619      	mov	r1, r3
 80210c8:	200e      	movs	r0, #14
 80210ca:	f7f7 fc63 	bl	8018994 <pbuf_alloc>
 80210ce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80210d0:	697b      	ldr	r3, [r7, #20]
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	f000 8090 	beq.w	80211f8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80210d8:	697b      	ldr	r3, [r7, #20]
 80210da:	895b      	ldrh	r3, [r3, #10]
 80210dc:	461a      	mov	r2, r3
 80210de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80210e0:	3308      	adds	r3, #8
 80210e2:	429a      	cmp	r2, r3
 80210e4:	d203      	bcs.n	80210ee <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80210e6:	6978      	ldr	r0, [r7, #20]
 80210e8:	f7f7 ff6a 	bl	8018fc0 <pbuf_free>
          goto icmperr;
 80210ec:	e085      	b.n	80211fa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80210ee:	697b      	ldr	r3, [r7, #20]
 80210f0:	685b      	ldr	r3, [r3, #4]
 80210f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80210f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80210f6:	4618      	mov	r0, r3
 80210f8:	f002 fc5d 	bl	80239b6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80210fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80210fe:	4619      	mov	r1, r3
 8021100:	6978      	ldr	r0, [r7, #20]
 8021102:	f7f7 fea5 	bl	8018e50 <pbuf_remove_header>
 8021106:	4603      	mov	r3, r0
 8021108:	2b00      	cmp	r3, #0
 802110a:	d009      	beq.n	8021120 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802110c:	4b40      	ldr	r3, [pc, #256]	@ (8021210 <icmp_input+0x1f8>)
 802110e:	22b6      	movs	r2, #182	@ 0xb6
 8021110:	4940      	ldr	r1, [pc, #256]	@ (8021214 <icmp_input+0x1fc>)
 8021112:	4841      	ldr	r0, [pc, #260]	@ (8021218 <icmp_input+0x200>)
 8021114:	f002 faa8 	bl	8023668 <iprintf>
          pbuf_free(r);
 8021118:	6978      	ldr	r0, [r7, #20]
 802111a:	f7f7 ff51 	bl	8018fc0 <pbuf_free>
          goto icmperr;
 802111e:	e06c      	b.n	80211fa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8021120:	6879      	ldr	r1, [r7, #4]
 8021122:	6978      	ldr	r0, [r7, #20]
 8021124:	f7f8 f870 	bl	8019208 <pbuf_copy>
 8021128:	4603      	mov	r3, r0
 802112a:	2b00      	cmp	r3, #0
 802112c:	d003      	beq.n	8021136 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 802112e:	6978      	ldr	r0, [r7, #20]
 8021130:	f7f7 ff46 	bl	8018fc0 <pbuf_free>
          goto icmperr;
 8021134:	e061      	b.n	80211fa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8021136:	6878      	ldr	r0, [r7, #4]
 8021138:	f7f7 ff42 	bl	8018fc0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 802113c:	697b      	ldr	r3, [r7, #20]
 802113e:	607b      	str	r3, [r7, #4]
 8021140:	e00f      	b.n	8021162 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021142:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021144:	330e      	adds	r3, #14
 8021146:	4619      	mov	r1, r3
 8021148:	6878      	ldr	r0, [r7, #4]
 802114a:	f7f7 fe81 	bl	8018e50 <pbuf_remove_header>
 802114e:	4603      	mov	r3, r0
 8021150:	2b00      	cmp	r3, #0
 8021152:	d006      	beq.n	8021162 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021154:	4b2e      	ldr	r3, [pc, #184]	@ (8021210 <icmp_input+0x1f8>)
 8021156:	22c7      	movs	r2, #199	@ 0xc7
 8021158:	4930      	ldr	r1, [pc, #192]	@ (802121c <icmp_input+0x204>)
 802115a:	482f      	ldr	r0, [pc, #188]	@ (8021218 <icmp_input+0x200>)
 802115c:	f002 fa84 	bl	8023668 <iprintf>
          goto icmperr;
 8021160:	e04b      	b.n	80211fa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	685b      	ldr	r3, [r3, #4]
 8021166:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8021168:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802116a:	4619      	mov	r1, r3
 802116c:	6878      	ldr	r0, [r7, #4]
 802116e:	f7f7 fe5f 	bl	8018e30 <pbuf_add_header>
 8021172:	4603      	mov	r3, r0
 8021174:	2b00      	cmp	r3, #0
 8021176:	d12b      	bne.n	80211d0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	685b      	ldr	r3, [r3, #4]
 802117c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802117e:	69fb      	ldr	r3, [r7, #28]
 8021180:	681a      	ldr	r2, [r3, #0]
 8021182:	68fb      	ldr	r3, [r7, #12]
 8021184:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8021186:	4b20      	ldr	r3, [pc, #128]	@ (8021208 <icmp_input+0x1f0>)
 8021188:	691a      	ldr	r2, [r3, #16]
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802118e:	693b      	ldr	r3, [r7, #16]
 8021190:	2200      	movs	r2, #0
 8021192:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8021194:	693b      	ldr	r3, [r7, #16]
 8021196:	2200      	movs	r2, #0
 8021198:	709a      	strb	r2, [r3, #2]
 802119a:	2200      	movs	r2, #0
 802119c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	22ff      	movs	r2, #255	@ 0xff
 80211a2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80211a4:	68fb      	ldr	r3, [r7, #12]
 80211a6:	2200      	movs	r2, #0
 80211a8:	729a      	strb	r2, [r3, #10]
 80211aa:	2200      	movs	r2, #0
 80211ac:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80211ae:	683b      	ldr	r3, [r7, #0]
 80211b0:	9302      	str	r3, [sp, #8]
 80211b2:	2301      	movs	r3, #1
 80211b4:	9301      	str	r3, [sp, #4]
 80211b6:	2300      	movs	r3, #0
 80211b8:	9300      	str	r3, [sp, #0]
 80211ba:	23ff      	movs	r3, #255	@ 0xff
 80211bc:	2200      	movs	r2, #0
 80211be:	69f9      	ldr	r1, [r7, #28]
 80211c0:	6878      	ldr	r0, [r7, #4]
 80211c2:	f000 fa75 	bl	80216b0 <ip4_output_if>
 80211c6:	4603      	mov	r3, r0
 80211c8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80211ca:	e001      	b.n	80211d0 <icmp_input+0x1b8>
      break;
 80211cc:	bf00      	nop
 80211ce:	e000      	b.n	80211d2 <icmp_input+0x1ba>
      break;
 80211d0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80211d2:	6878      	ldr	r0, [r7, #4]
 80211d4:	f7f7 fef4 	bl	8018fc0 <pbuf_free>
  return;
 80211d8:	e013      	b.n	8021202 <icmp_input+0x1ea>
    goto lenerr;
 80211da:	bf00      	nop
 80211dc:	e002      	b.n	80211e4 <icmp_input+0x1cc>
    goto lenerr;
 80211de:	bf00      	nop
 80211e0:	e000      	b.n	80211e4 <icmp_input+0x1cc>
        goto lenerr;
 80211e2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80211e4:	6878      	ldr	r0, [r7, #4]
 80211e6:	f7f7 feeb 	bl	8018fc0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80211ea:	e00a      	b.n	8021202 <icmp_input+0x1ea>
        goto icmperr;
 80211ec:	bf00      	nop
 80211ee:	e004      	b.n	80211fa <icmp_input+0x1e2>
        goto icmperr;
 80211f0:	bf00      	nop
 80211f2:	e002      	b.n	80211fa <icmp_input+0x1e2>
          goto icmperr;
 80211f4:	bf00      	nop
 80211f6:	e000      	b.n	80211fa <icmp_input+0x1e2>
          goto icmperr;
 80211f8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80211fa:	6878      	ldr	r0, [r7, #4]
 80211fc:	f7f7 fee0 	bl	8018fc0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8021200:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8021202:	3728      	adds	r7, #40	@ 0x28
 8021204:	46bd      	mov	sp, r7
 8021206:	bd80      	pop	{r7, pc}
 8021208:	2000dbb4 	.word	0x2000dbb4
 802120c:	2000dbc8 	.word	0x2000dbc8
 8021210:	08027ac4 	.word	0x08027ac4
 8021214:	08027afc 	.word	0x08027afc
 8021218:	08027b34 	.word	0x08027b34
 802121c:	08027b5c 	.word	0x08027b5c

08021220 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8021220:	b580      	push	{r7, lr}
 8021222:	b082      	sub	sp, #8
 8021224:	af00      	add	r7, sp, #0
 8021226:	6078      	str	r0, [r7, #4]
 8021228:	460b      	mov	r3, r1
 802122a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 802122c:	78fb      	ldrb	r3, [r7, #3]
 802122e:	461a      	mov	r2, r3
 8021230:	2103      	movs	r1, #3
 8021232:	6878      	ldr	r0, [r7, #4]
 8021234:	f000 f814 	bl	8021260 <icmp_send_response>
}
 8021238:	bf00      	nop
 802123a:	3708      	adds	r7, #8
 802123c:	46bd      	mov	sp, r7
 802123e:	bd80      	pop	{r7, pc}

08021240 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8021240:	b580      	push	{r7, lr}
 8021242:	b082      	sub	sp, #8
 8021244:	af00      	add	r7, sp, #0
 8021246:	6078      	str	r0, [r7, #4]
 8021248:	460b      	mov	r3, r1
 802124a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 802124c:	78fb      	ldrb	r3, [r7, #3]
 802124e:	461a      	mov	r2, r3
 8021250:	210b      	movs	r1, #11
 8021252:	6878      	ldr	r0, [r7, #4]
 8021254:	f000 f804 	bl	8021260 <icmp_send_response>
}
 8021258:	bf00      	nop
 802125a:	3708      	adds	r7, #8
 802125c:	46bd      	mov	sp, r7
 802125e:	bd80      	pop	{r7, pc}

08021260 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021260:	b580      	push	{r7, lr}
 8021262:	b08c      	sub	sp, #48	@ 0x30
 8021264:	af04      	add	r7, sp, #16
 8021266:	6078      	str	r0, [r7, #4]
 8021268:	460b      	mov	r3, r1
 802126a:	70fb      	strb	r3, [r7, #3]
 802126c:	4613      	mov	r3, r2
 802126e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021270:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021274:	2124      	movs	r1, #36	@ 0x24
 8021276:	2022      	movs	r0, #34	@ 0x22
 8021278:	f7f7 fb8c 	bl	8018994 <pbuf_alloc>
 802127c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802127e:	69fb      	ldr	r3, [r7, #28]
 8021280:	2b00      	cmp	r3, #0
 8021282:	d04c      	beq.n	802131e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021284:	69fb      	ldr	r3, [r7, #28]
 8021286:	895b      	ldrh	r3, [r3, #10]
 8021288:	2b23      	cmp	r3, #35	@ 0x23
 802128a:	d806      	bhi.n	802129a <icmp_send_response+0x3a>
 802128c:	4b26      	ldr	r3, [pc, #152]	@ (8021328 <icmp_send_response+0xc8>)
 802128e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8021292:	4926      	ldr	r1, [pc, #152]	@ (802132c <icmp_send_response+0xcc>)
 8021294:	4826      	ldr	r0, [pc, #152]	@ (8021330 <icmp_send_response+0xd0>)
 8021296:	f002 f9e7 	bl	8023668 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	685b      	ldr	r3, [r3, #4]
 802129e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80212a0:	69fb      	ldr	r3, [r7, #28]
 80212a2:	685b      	ldr	r3, [r3, #4]
 80212a4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80212a6:	697b      	ldr	r3, [r7, #20]
 80212a8:	78fa      	ldrb	r2, [r7, #3]
 80212aa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80212ac:	697b      	ldr	r3, [r7, #20]
 80212ae:	78ba      	ldrb	r2, [r7, #2]
 80212b0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	2200      	movs	r2, #0
 80212b6:	711a      	strb	r2, [r3, #4]
 80212b8:	2200      	movs	r2, #0
 80212ba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80212bc:	697b      	ldr	r3, [r7, #20]
 80212be:	2200      	movs	r2, #0
 80212c0:	719a      	strb	r2, [r3, #6]
 80212c2:	2200      	movs	r2, #0
 80212c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80212c6:	69fb      	ldr	r3, [r7, #28]
 80212c8:	685b      	ldr	r3, [r3, #4]
 80212ca:	f103 0008 	add.w	r0, r3, #8
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	685b      	ldr	r3, [r3, #4]
 80212d2:	221c      	movs	r2, #28
 80212d4:	4619      	mov	r1, r3
 80212d6:	f002 fb6e 	bl	80239b6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80212da:	69bb      	ldr	r3, [r7, #24]
 80212dc:	68db      	ldr	r3, [r3, #12]
 80212de:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80212e0:	f107 030c 	add.w	r3, r7, #12
 80212e4:	4618      	mov	r0, r3
 80212e6:	f000 f825 	bl	8021334 <ip4_route>
 80212ea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80212ec:	693b      	ldr	r3, [r7, #16]
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	d011      	beq.n	8021316 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80212f2:	697b      	ldr	r3, [r7, #20]
 80212f4:	2200      	movs	r2, #0
 80212f6:	709a      	strb	r2, [r3, #2]
 80212f8:	2200      	movs	r2, #0
 80212fa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80212fc:	f107 020c 	add.w	r2, r7, #12
 8021300:	693b      	ldr	r3, [r7, #16]
 8021302:	9302      	str	r3, [sp, #8]
 8021304:	2301      	movs	r3, #1
 8021306:	9301      	str	r3, [sp, #4]
 8021308:	2300      	movs	r3, #0
 802130a:	9300      	str	r3, [sp, #0]
 802130c:	23ff      	movs	r3, #255	@ 0xff
 802130e:	2100      	movs	r1, #0
 8021310:	69f8      	ldr	r0, [r7, #28]
 8021312:	f000 f9cd 	bl	80216b0 <ip4_output_if>
  }
  pbuf_free(q);
 8021316:	69f8      	ldr	r0, [r7, #28]
 8021318:	f7f7 fe52 	bl	8018fc0 <pbuf_free>
 802131c:	e000      	b.n	8021320 <icmp_send_response+0xc0>
    return;
 802131e:	bf00      	nop
}
 8021320:	3720      	adds	r7, #32
 8021322:	46bd      	mov	sp, r7
 8021324:	bd80      	pop	{r7, pc}
 8021326:	bf00      	nop
 8021328:	08027ac4 	.word	0x08027ac4
 802132c:	08027b90 	.word	0x08027b90
 8021330:	08027b34 	.word	0x08027b34

08021334 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021334:	b480      	push	{r7}
 8021336:	b085      	sub	sp, #20
 8021338:	af00      	add	r7, sp, #0
 802133a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 802133c:	4b33      	ldr	r3, [pc, #204]	@ (802140c <ip4_route+0xd8>)
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	60fb      	str	r3, [r7, #12]
 8021342:	e036      	b.n	80213b2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802134a:	f003 0301 	and.w	r3, r3, #1
 802134e:	b2db      	uxtb	r3, r3
 8021350:	2b00      	cmp	r3, #0
 8021352:	d02b      	beq.n	80213ac <ip4_route+0x78>
 8021354:	68fb      	ldr	r3, [r7, #12]
 8021356:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802135a:	089b      	lsrs	r3, r3, #2
 802135c:	f003 0301 	and.w	r3, r3, #1
 8021360:	b2db      	uxtb	r3, r3
 8021362:	2b00      	cmp	r3, #0
 8021364:	d022      	beq.n	80213ac <ip4_route+0x78>
 8021366:	68fb      	ldr	r3, [r7, #12]
 8021368:	3304      	adds	r3, #4
 802136a:	681b      	ldr	r3, [r3, #0]
 802136c:	2b00      	cmp	r3, #0
 802136e:	d01d      	beq.n	80213ac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021370:	687b      	ldr	r3, [r7, #4]
 8021372:	681a      	ldr	r2, [r3, #0]
 8021374:	68fb      	ldr	r3, [r7, #12]
 8021376:	3304      	adds	r3, #4
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	405a      	eors	r2, r3
 802137c:	68fb      	ldr	r3, [r7, #12]
 802137e:	3308      	adds	r3, #8
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	4013      	ands	r3, r2
 8021384:	2b00      	cmp	r3, #0
 8021386:	d101      	bne.n	802138c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8021388:	68fb      	ldr	r3, [r7, #12]
 802138a:	e038      	b.n	80213fe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802138c:	68fb      	ldr	r3, [r7, #12]
 802138e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8021392:	f003 0302 	and.w	r3, r3, #2
 8021396:	2b00      	cmp	r3, #0
 8021398:	d108      	bne.n	80213ac <ip4_route+0x78>
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	681a      	ldr	r2, [r3, #0]
 802139e:	68fb      	ldr	r3, [r7, #12]
 80213a0:	330c      	adds	r3, #12
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	429a      	cmp	r2, r3
 80213a6:	d101      	bne.n	80213ac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80213a8:	68fb      	ldr	r3, [r7, #12]
 80213aa:	e028      	b.n	80213fe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80213ac:	68fb      	ldr	r3, [r7, #12]
 80213ae:	681b      	ldr	r3, [r3, #0]
 80213b0:	60fb      	str	r3, [r7, #12]
 80213b2:	68fb      	ldr	r3, [r7, #12]
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d1c5      	bne.n	8021344 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80213b8:	4b15      	ldr	r3, [pc, #84]	@ (8021410 <ip4_route+0xdc>)
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	2b00      	cmp	r3, #0
 80213be:	d01a      	beq.n	80213f6 <ip4_route+0xc2>
 80213c0:	4b13      	ldr	r3, [pc, #76]	@ (8021410 <ip4_route+0xdc>)
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80213c8:	f003 0301 	and.w	r3, r3, #1
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d012      	beq.n	80213f6 <ip4_route+0xc2>
 80213d0:	4b0f      	ldr	r3, [pc, #60]	@ (8021410 <ip4_route+0xdc>)
 80213d2:	681b      	ldr	r3, [r3, #0]
 80213d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80213d8:	f003 0304 	and.w	r3, r3, #4
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d00a      	beq.n	80213f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80213e0:	4b0b      	ldr	r3, [pc, #44]	@ (8021410 <ip4_route+0xdc>)
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	3304      	adds	r3, #4
 80213e6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d004      	beq.n	80213f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	b2db      	uxtb	r3, r3
 80213f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80213f4:	d101      	bne.n	80213fa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80213f6:	2300      	movs	r3, #0
 80213f8:	e001      	b.n	80213fe <ip4_route+0xca>
  }

  return netif_default;
 80213fa:	4b05      	ldr	r3, [pc, #20]	@ (8021410 <ip4_route+0xdc>)
 80213fc:	681b      	ldr	r3, [r3, #0]
}
 80213fe:	4618      	mov	r0, r3
 8021400:	3714      	adds	r7, #20
 8021402:	46bd      	mov	sp, r7
 8021404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021408:	4770      	bx	lr
 802140a:	bf00      	nop
 802140c:	20018ba4 	.word	0x20018ba4
 8021410:	20018ba8 	.word	0x20018ba8

08021414 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8021414:	b580      	push	{r7, lr}
 8021416:	b082      	sub	sp, #8
 8021418:	af00      	add	r7, sp, #0
 802141a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8021422:	f003 0301 	and.w	r3, r3, #1
 8021426:	b2db      	uxtb	r3, r3
 8021428:	2b00      	cmp	r3, #0
 802142a:	d016      	beq.n	802145a <ip4_input_accept+0x46>
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	3304      	adds	r3, #4
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	2b00      	cmp	r3, #0
 8021434:	d011      	beq.n	802145a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021436:	4b0b      	ldr	r3, [pc, #44]	@ (8021464 <ip4_input_accept+0x50>)
 8021438:	695a      	ldr	r2, [r3, #20]
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	3304      	adds	r3, #4
 802143e:	681b      	ldr	r3, [r3, #0]
 8021440:	429a      	cmp	r2, r3
 8021442:	d008      	beq.n	8021456 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021444:	4b07      	ldr	r3, [pc, #28]	@ (8021464 <ip4_input_accept+0x50>)
 8021446:	695b      	ldr	r3, [r3, #20]
 8021448:	6879      	ldr	r1, [r7, #4]
 802144a:	4618      	mov	r0, r3
 802144c:	f000 fa08 	bl	8021860 <ip4_addr_isbroadcast_u32>
 8021450:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021452:	2b00      	cmp	r3, #0
 8021454:	d001      	beq.n	802145a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8021456:	2301      	movs	r3, #1
 8021458:	e000      	b.n	802145c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802145a:	2300      	movs	r3, #0
}
 802145c:	4618      	mov	r0, r3
 802145e:	3708      	adds	r7, #8
 8021460:	46bd      	mov	sp, r7
 8021462:	bd80      	pop	{r7, pc}
 8021464:	2000dbb4 	.word	0x2000dbb4

08021468 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8021468:	b580      	push	{r7, lr}
 802146a:	b086      	sub	sp, #24
 802146c:	af00      	add	r7, sp, #0
 802146e:	6078      	str	r0, [r7, #4]
 8021470:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	685b      	ldr	r3, [r3, #4]
 8021476:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8021478:	697b      	ldr	r3, [r7, #20]
 802147a:	781b      	ldrb	r3, [r3, #0]
 802147c:	091b      	lsrs	r3, r3, #4
 802147e:	b2db      	uxtb	r3, r3
 8021480:	2b04      	cmp	r3, #4
 8021482:	d004      	beq.n	802148e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8021484:	6878      	ldr	r0, [r7, #4]
 8021486:	f7f7 fd9b 	bl	8018fc0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802148a:	2300      	movs	r3, #0
 802148c:	e107      	b.n	802169e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802148e:	697b      	ldr	r3, [r7, #20]
 8021490:	781b      	ldrb	r3, [r3, #0]
 8021492:	f003 030f 	and.w	r3, r3, #15
 8021496:	b2db      	uxtb	r3, r3
 8021498:	009b      	lsls	r3, r3, #2
 802149a:	b2db      	uxtb	r3, r3
 802149c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802149e:	697b      	ldr	r3, [r7, #20]
 80214a0:	885b      	ldrh	r3, [r3, #2]
 80214a2:	b29b      	uxth	r3, r3
 80214a4:	4618      	mov	r0, r3
 80214a6:	f7f6 f957 	bl	8017758 <lwip_htons>
 80214aa:	4603      	mov	r3, r0
 80214ac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	891b      	ldrh	r3, [r3, #8]
 80214b2:	89ba      	ldrh	r2, [r7, #12]
 80214b4:	429a      	cmp	r2, r3
 80214b6:	d204      	bcs.n	80214c2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80214b8:	89bb      	ldrh	r3, [r7, #12]
 80214ba:	4619      	mov	r1, r3
 80214bc:	6878      	ldr	r0, [r7, #4]
 80214be:	f7f7 fbc7 	bl	8018c50 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	895b      	ldrh	r3, [r3, #10]
 80214c6:	89fa      	ldrh	r2, [r7, #14]
 80214c8:	429a      	cmp	r2, r3
 80214ca:	d807      	bhi.n	80214dc <ip4_input+0x74>
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	891b      	ldrh	r3, [r3, #8]
 80214d0:	89ba      	ldrh	r2, [r7, #12]
 80214d2:	429a      	cmp	r2, r3
 80214d4:	d802      	bhi.n	80214dc <ip4_input+0x74>
 80214d6:	89fb      	ldrh	r3, [r7, #14]
 80214d8:	2b13      	cmp	r3, #19
 80214da:	d804      	bhi.n	80214e6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80214dc:	6878      	ldr	r0, [r7, #4]
 80214de:	f7f7 fd6f 	bl	8018fc0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80214e2:	2300      	movs	r3, #0
 80214e4:	e0db      	b.n	802169e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80214e6:	697b      	ldr	r3, [r7, #20]
 80214e8:	691b      	ldr	r3, [r3, #16]
 80214ea:	4a6f      	ldr	r2, [pc, #444]	@ (80216a8 <ip4_input+0x240>)
 80214ec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80214ee:	697b      	ldr	r3, [r7, #20]
 80214f0:	68db      	ldr	r3, [r3, #12]
 80214f2:	4a6d      	ldr	r2, [pc, #436]	@ (80216a8 <ip4_input+0x240>)
 80214f4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80214f6:	4b6c      	ldr	r3, [pc, #432]	@ (80216a8 <ip4_input+0x240>)
 80214f8:	695b      	ldr	r3, [r3, #20]
 80214fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80214fe:	2be0      	cmp	r3, #224	@ 0xe0
 8021500:	d112      	bne.n	8021528 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021502:	683b      	ldr	r3, [r7, #0]
 8021504:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8021508:	f003 0301 	and.w	r3, r3, #1
 802150c:	b2db      	uxtb	r3, r3
 802150e:	2b00      	cmp	r3, #0
 8021510:	d007      	beq.n	8021522 <ip4_input+0xba>
 8021512:	683b      	ldr	r3, [r7, #0]
 8021514:	3304      	adds	r3, #4
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	2b00      	cmp	r3, #0
 802151a:	d002      	beq.n	8021522 <ip4_input+0xba>
      netif = inp;
 802151c:	683b      	ldr	r3, [r7, #0]
 802151e:	613b      	str	r3, [r7, #16]
 8021520:	e02a      	b.n	8021578 <ip4_input+0x110>
    } else {
      netif = NULL;
 8021522:	2300      	movs	r3, #0
 8021524:	613b      	str	r3, [r7, #16]
 8021526:	e027      	b.n	8021578 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8021528:	6838      	ldr	r0, [r7, #0]
 802152a:	f7ff ff73 	bl	8021414 <ip4_input_accept>
 802152e:	4603      	mov	r3, r0
 8021530:	2b00      	cmp	r3, #0
 8021532:	d002      	beq.n	802153a <ip4_input+0xd2>
      netif = inp;
 8021534:	683b      	ldr	r3, [r7, #0]
 8021536:	613b      	str	r3, [r7, #16]
 8021538:	e01e      	b.n	8021578 <ip4_input+0x110>
    } else {
      netif = NULL;
 802153a:	2300      	movs	r3, #0
 802153c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802153e:	4b5a      	ldr	r3, [pc, #360]	@ (80216a8 <ip4_input+0x240>)
 8021540:	695b      	ldr	r3, [r3, #20]
 8021542:	b2db      	uxtb	r3, r3
 8021544:	2b7f      	cmp	r3, #127	@ 0x7f
 8021546:	d017      	beq.n	8021578 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8021548:	4b58      	ldr	r3, [pc, #352]	@ (80216ac <ip4_input+0x244>)
 802154a:	681b      	ldr	r3, [r3, #0]
 802154c:	613b      	str	r3, [r7, #16]
 802154e:	e00e      	b.n	802156e <ip4_input+0x106>
          if (netif == inp) {
 8021550:	693a      	ldr	r2, [r7, #16]
 8021552:	683b      	ldr	r3, [r7, #0]
 8021554:	429a      	cmp	r2, r3
 8021556:	d006      	beq.n	8021566 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8021558:	6938      	ldr	r0, [r7, #16]
 802155a:	f7ff ff5b 	bl	8021414 <ip4_input_accept>
 802155e:	4603      	mov	r3, r0
 8021560:	2b00      	cmp	r3, #0
 8021562:	d108      	bne.n	8021576 <ip4_input+0x10e>
 8021564:	e000      	b.n	8021568 <ip4_input+0x100>
            continue;
 8021566:	bf00      	nop
        NETIF_FOREACH(netif) {
 8021568:	693b      	ldr	r3, [r7, #16]
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	613b      	str	r3, [r7, #16]
 802156e:	693b      	ldr	r3, [r7, #16]
 8021570:	2b00      	cmp	r3, #0
 8021572:	d1ed      	bne.n	8021550 <ip4_input+0xe8>
 8021574:	e000      	b.n	8021578 <ip4_input+0x110>
            break;
 8021576:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021578:	4b4b      	ldr	r3, [pc, #300]	@ (80216a8 <ip4_input+0x240>)
 802157a:	691b      	ldr	r3, [r3, #16]
 802157c:	6839      	ldr	r1, [r7, #0]
 802157e:	4618      	mov	r0, r3
 8021580:	f000 f96e 	bl	8021860 <ip4_addr_isbroadcast_u32>
 8021584:	4603      	mov	r3, r0
 8021586:	2b00      	cmp	r3, #0
 8021588:	d105      	bne.n	8021596 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802158a:	4b47      	ldr	r3, [pc, #284]	@ (80216a8 <ip4_input+0x240>)
 802158c:	691b      	ldr	r3, [r3, #16]
 802158e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021592:	2be0      	cmp	r3, #224	@ 0xe0
 8021594:	d104      	bne.n	80215a0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8021596:	6878      	ldr	r0, [r7, #4]
 8021598:	f7f7 fd12 	bl	8018fc0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 802159c:	2300      	movs	r3, #0
 802159e:	e07e      	b.n	802169e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80215a0:	693b      	ldr	r3, [r7, #16]
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	d104      	bne.n	80215b0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80215a6:	6878      	ldr	r0, [r7, #4]
 80215a8:	f7f7 fd0a 	bl	8018fc0 <pbuf_free>
    return ERR_OK;
 80215ac:	2300      	movs	r3, #0
 80215ae:	e076      	b.n	802169e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80215b0:	697b      	ldr	r3, [r7, #20]
 80215b2:	88db      	ldrh	r3, [r3, #6]
 80215b4:	b29b      	uxth	r3, r3
 80215b6:	461a      	mov	r2, r3
 80215b8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80215bc:	4013      	ands	r3, r2
 80215be:	2b00      	cmp	r3, #0
 80215c0:	d00b      	beq.n	80215da <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80215c2:	6878      	ldr	r0, [r7, #4]
 80215c4:	f000 fd22 	bl	802200c <ip4_reass>
 80215c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d101      	bne.n	80215d4 <ip4_input+0x16c>
      return ERR_OK;
 80215d0:	2300      	movs	r3, #0
 80215d2:	e064      	b.n	802169e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	685b      	ldr	r3, [r3, #4]
 80215d8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80215da:	4a33      	ldr	r2, [pc, #204]	@ (80216a8 <ip4_input+0x240>)
 80215dc:	693b      	ldr	r3, [r7, #16]
 80215de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80215e0:	4a31      	ldr	r2, [pc, #196]	@ (80216a8 <ip4_input+0x240>)
 80215e2:	683b      	ldr	r3, [r7, #0]
 80215e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80215e6:	4a30      	ldr	r2, [pc, #192]	@ (80216a8 <ip4_input+0x240>)
 80215e8:	697b      	ldr	r3, [r7, #20]
 80215ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80215ec:	697b      	ldr	r3, [r7, #20]
 80215ee:	781b      	ldrb	r3, [r3, #0]
 80215f0:	f003 030f 	and.w	r3, r3, #15
 80215f4:	b2db      	uxtb	r3, r3
 80215f6:	009b      	lsls	r3, r3, #2
 80215f8:	b2db      	uxtb	r3, r3
 80215fa:	461a      	mov	r2, r3
 80215fc:	4b2a      	ldr	r3, [pc, #168]	@ (80216a8 <ip4_input+0x240>)
 80215fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021600:	89fb      	ldrh	r3, [r7, #14]
 8021602:	4619      	mov	r1, r3
 8021604:	6878      	ldr	r0, [r7, #4]
 8021606:	f7f7 fc23 	bl	8018e50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802160a:	697b      	ldr	r3, [r7, #20]
 802160c:	7a5b      	ldrb	r3, [r3, #9]
 802160e:	2b11      	cmp	r3, #17
 8021610:	d006      	beq.n	8021620 <ip4_input+0x1b8>
 8021612:	2b11      	cmp	r3, #17
 8021614:	dc13      	bgt.n	802163e <ip4_input+0x1d6>
 8021616:	2b01      	cmp	r3, #1
 8021618:	d00c      	beq.n	8021634 <ip4_input+0x1cc>
 802161a:	2b06      	cmp	r3, #6
 802161c:	d005      	beq.n	802162a <ip4_input+0x1c2>
 802161e:	e00e      	b.n	802163e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8021620:	6839      	ldr	r1, [r7, #0]
 8021622:	6878      	ldr	r0, [r7, #4]
 8021624:	f7fe fb5a 	bl	801fcdc <udp_input>
        break;
 8021628:	e026      	b.n	8021678 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 802162a:	6839      	ldr	r1, [r7, #0]
 802162c:	6878      	ldr	r0, [r7, #4]
 802162e:	f7f9 ff17 	bl	801b460 <tcp_input>
        break;
 8021632:	e021      	b.n	8021678 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8021634:	6839      	ldr	r1, [r7, #0]
 8021636:	6878      	ldr	r0, [r7, #4]
 8021638:	f7ff fcee 	bl	8021018 <icmp_input>
        break;
 802163c:	e01c      	b.n	8021678 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802163e:	4b1a      	ldr	r3, [pc, #104]	@ (80216a8 <ip4_input+0x240>)
 8021640:	695b      	ldr	r3, [r3, #20]
 8021642:	6939      	ldr	r1, [r7, #16]
 8021644:	4618      	mov	r0, r3
 8021646:	f000 f90b 	bl	8021860 <ip4_addr_isbroadcast_u32>
 802164a:	4603      	mov	r3, r0
 802164c:	2b00      	cmp	r3, #0
 802164e:	d10f      	bne.n	8021670 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021650:	4b15      	ldr	r3, [pc, #84]	@ (80216a8 <ip4_input+0x240>)
 8021652:	695b      	ldr	r3, [r3, #20]
 8021654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021658:	2be0      	cmp	r3, #224	@ 0xe0
 802165a:	d009      	beq.n	8021670 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 802165c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021660:	4619      	mov	r1, r3
 8021662:	6878      	ldr	r0, [r7, #4]
 8021664:	f7f7 fc67 	bl	8018f36 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8021668:	2102      	movs	r1, #2
 802166a:	6878      	ldr	r0, [r7, #4]
 802166c:	f7ff fdd8 	bl	8021220 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8021670:	6878      	ldr	r0, [r7, #4]
 8021672:	f7f7 fca5 	bl	8018fc0 <pbuf_free>
        break;
 8021676:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8021678:	4b0b      	ldr	r3, [pc, #44]	@ (80216a8 <ip4_input+0x240>)
 802167a:	2200      	movs	r2, #0
 802167c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802167e:	4b0a      	ldr	r3, [pc, #40]	@ (80216a8 <ip4_input+0x240>)
 8021680:	2200      	movs	r2, #0
 8021682:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021684:	4b08      	ldr	r3, [pc, #32]	@ (80216a8 <ip4_input+0x240>)
 8021686:	2200      	movs	r2, #0
 8021688:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802168a:	4b07      	ldr	r3, [pc, #28]	@ (80216a8 <ip4_input+0x240>)
 802168c:	2200      	movs	r2, #0
 802168e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021690:	4b05      	ldr	r3, [pc, #20]	@ (80216a8 <ip4_input+0x240>)
 8021692:	2200      	movs	r2, #0
 8021694:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8021696:	4b04      	ldr	r3, [pc, #16]	@ (80216a8 <ip4_input+0x240>)
 8021698:	2200      	movs	r2, #0
 802169a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 802169c:	2300      	movs	r3, #0
}
 802169e:	4618      	mov	r0, r3
 80216a0:	3718      	adds	r7, #24
 80216a2:	46bd      	mov	sp, r7
 80216a4:	bd80      	pop	{r7, pc}
 80216a6:	bf00      	nop
 80216a8:	2000dbb4 	.word	0x2000dbb4
 80216ac:	20018ba4 	.word	0x20018ba4

080216b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80216b0:	b580      	push	{r7, lr}
 80216b2:	b08a      	sub	sp, #40	@ 0x28
 80216b4:	af04      	add	r7, sp, #16
 80216b6:	60f8      	str	r0, [r7, #12]
 80216b8:	60b9      	str	r1, [r7, #8]
 80216ba:	607a      	str	r2, [r7, #4]
 80216bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80216be:	68bb      	ldr	r3, [r7, #8]
 80216c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d009      	beq.n	80216dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80216c8:	68bb      	ldr	r3, [r7, #8]
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d003      	beq.n	80216d6 <ip4_output_if+0x26>
 80216ce:	68bb      	ldr	r3, [r7, #8]
 80216d0:	681b      	ldr	r3, [r3, #0]
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d102      	bne.n	80216dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80216d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80216d8:	3304      	adds	r3, #4
 80216da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80216dc:	78fa      	ldrb	r2, [r7, #3]
 80216de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80216e0:	9302      	str	r3, [sp, #8]
 80216e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80216e6:	9301      	str	r3, [sp, #4]
 80216e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80216ec:	9300      	str	r3, [sp, #0]
 80216ee:	4613      	mov	r3, r2
 80216f0:	687a      	ldr	r2, [r7, #4]
 80216f2:	6979      	ldr	r1, [r7, #20]
 80216f4:	68f8      	ldr	r0, [r7, #12]
 80216f6:	f000 f805 	bl	8021704 <ip4_output_if_src>
 80216fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80216fc:	4618      	mov	r0, r3
 80216fe:	3718      	adds	r7, #24
 8021700:	46bd      	mov	sp, r7
 8021702:	bd80      	pop	{r7, pc}

08021704 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021704:	b580      	push	{r7, lr}
 8021706:	b088      	sub	sp, #32
 8021708:	af00      	add	r7, sp, #0
 802170a:	60f8      	str	r0, [r7, #12]
 802170c:	60b9      	str	r1, [r7, #8]
 802170e:	607a      	str	r2, [r7, #4]
 8021710:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021712:	68fb      	ldr	r3, [r7, #12]
 8021714:	7b9b      	ldrb	r3, [r3, #14]
 8021716:	2b01      	cmp	r3, #1
 8021718:	d006      	beq.n	8021728 <ip4_output_if_src+0x24>
 802171a:	4b4b      	ldr	r3, [pc, #300]	@ (8021848 <ip4_output_if_src+0x144>)
 802171c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8021720:	494a      	ldr	r1, [pc, #296]	@ (802184c <ip4_output_if_src+0x148>)
 8021722:	484b      	ldr	r0, [pc, #300]	@ (8021850 <ip4_output_if_src+0x14c>)
 8021724:	f001 ffa0 	bl	8023668 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d060      	beq.n	80217f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 802172e:	2314      	movs	r3, #20
 8021730:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8021732:	2114      	movs	r1, #20
 8021734:	68f8      	ldr	r0, [r7, #12]
 8021736:	f7f7 fb7b 	bl	8018e30 <pbuf_add_header>
 802173a:	4603      	mov	r3, r0
 802173c:	2b00      	cmp	r3, #0
 802173e:	d002      	beq.n	8021746 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021740:	f06f 0301 	mvn.w	r3, #1
 8021744:	e07c      	b.n	8021840 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8021746:	68fb      	ldr	r3, [r7, #12]
 8021748:	685b      	ldr	r3, [r3, #4]
 802174a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	895b      	ldrh	r3, [r3, #10]
 8021750:	2b13      	cmp	r3, #19
 8021752:	d806      	bhi.n	8021762 <ip4_output_if_src+0x5e>
 8021754:	4b3c      	ldr	r3, [pc, #240]	@ (8021848 <ip4_output_if_src+0x144>)
 8021756:	f44f 7262 	mov.w	r2, #904	@ 0x388
 802175a:	493e      	ldr	r1, [pc, #248]	@ (8021854 <ip4_output_if_src+0x150>)
 802175c:	483c      	ldr	r0, [pc, #240]	@ (8021850 <ip4_output_if_src+0x14c>)
 802175e:	f001 ff83 	bl	8023668 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021762:	69fb      	ldr	r3, [r7, #28]
 8021764:	78fa      	ldrb	r2, [r7, #3]
 8021766:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8021768:	69fb      	ldr	r3, [r7, #28]
 802176a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 802176e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	681a      	ldr	r2, [r3, #0]
 8021774:	69fb      	ldr	r3, [r7, #28]
 8021776:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021778:	8b7b      	ldrh	r3, [r7, #26]
 802177a:	089b      	lsrs	r3, r3, #2
 802177c:	b29b      	uxth	r3, r3
 802177e:	b2db      	uxtb	r3, r3
 8021780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021784:	b2da      	uxtb	r2, r3
 8021786:	69fb      	ldr	r3, [r7, #28]
 8021788:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 802178a:	69fb      	ldr	r3, [r7, #28]
 802178c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8021790:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021792:	68fb      	ldr	r3, [r7, #12]
 8021794:	891b      	ldrh	r3, [r3, #8]
 8021796:	4618      	mov	r0, r3
 8021798:	f7f5 ffde 	bl	8017758 <lwip_htons>
 802179c:	4603      	mov	r3, r0
 802179e:	461a      	mov	r2, r3
 80217a0:	69fb      	ldr	r3, [r7, #28]
 80217a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80217a4:	69fb      	ldr	r3, [r7, #28]
 80217a6:	2200      	movs	r2, #0
 80217a8:	719a      	strb	r2, [r3, #6]
 80217aa:	2200      	movs	r2, #0
 80217ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80217ae:	4b2a      	ldr	r3, [pc, #168]	@ (8021858 <ip4_output_if_src+0x154>)
 80217b0:	881b      	ldrh	r3, [r3, #0]
 80217b2:	4618      	mov	r0, r3
 80217b4:	f7f5 ffd0 	bl	8017758 <lwip_htons>
 80217b8:	4603      	mov	r3, r0
 80217ba:	461a      	mov	r2, r3
 80217bc:	69fb      	ldr	r3, [r7, #28]
 80217be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80217c0:	4b25      	ldr	r3, [pc, #148]	@ (8021858 <ip4_output_if_src+0x154>)
 80217c2:	881b      	ldrh	r3, [r3, #0]
 80217c4:	3301      	adds	r3, #1
 80217c6:	b29a      	uxth	r2, r3
 80217c8:	4b23      	ldr	r3, [pc, #140]	@ (8021858 <ip4_output_if_src+0x154>)
 80217ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80217cc:	68bb      	ldr	r3, [r7, #8]
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d104      	bne.n	80217dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80217d2:	4b22      	ldr	r3, [pc, #136]	@ (802185c <ip4_output_if_src+0x158>)
 80217d4:	681a      	ldr	r2, [r3, #0]
 80217d6:	69fb      	ldr	r3, [r7, #28]
 80217d8:	60da      	str	r2, [r3, #12]
 80217da:	e003      	b.n	80217e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80217dc:	68bb      	ldr	r3, [r7, #8]
 80217de:	681a      	ldr	r2, [r3, #0]
 80217e0:	69fb      	ldr	r3, [r7, #28]
 80217e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80217e4:	69fb      	ldr	r3, [r7, #28]
 80217e6:	2200      	movs	r2, #0
 80217e8:	729a      	strb	r2, [r3, #10]
 80217ea:	2200      	movs	r2, #0
 80217ec:	72da      	strb	r2, [r3, #11]
 80217ee:	e00f      	b.n	8021810 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80217f0:	68fb      	ldr	r3, [r7, #12]
 80217f2:	895b      	ldrh	r3, [r3, #10]
 80217f4:	2b13      	cmp	r3, #19
 80217f6:	d802      	bhi.n	80217fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80217f8:	f06f 0301 	mvn.w	r3, #1
 80217fc:	e020      	b.n	8021840 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80217fe:	68fb      	ldr	r3, [r7, #12]
 8021800:	685b      	ldr	r3, [r3, #4]
 8021802:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021804:	69fb      	ldr	r3, [r7, #28]
 8021806:	691b      	ldr	r3, [r3, #16]
 8021808:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802180a:	f107 0314 	add.w	r3, r7, #20
 802180e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021812:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8021814:	2b00      	cmp	r3, #0
 8021816:	d00c      	beq.n	8021832 <ip4_output_if_src+0x12e>
 8021818:	68fb      	ldr	r3, [r7, #12]
 802181a:	891a      	ldrh	r2, [r3, #8]
 802181c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802181e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8021820:	429a      	cmp	r2, r3
 8021822:	d906      	bls.n	8021832 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8021824:	687a      	ldr	r2, [r7, #4]
 8021826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8021828:	68f8      	ldr	r0, [r7, #12]
 802182a:	f000 fde3 	bl	80223f4 <ip4_frag>
 802182e:	4603      	mov	r3, r0
 8021830:	e006      	b.n	8021840 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021834:	695b      	ldr	r3, [r3, #20]
 8021836:	687a      	ldr	r2, [r7, #4]
 8021838:	68f9      	ldr	r1, [r7, #12]
 802183a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802183c:	4798      	blx	r3
 802183e:	4603      	mov	r3, r0
}
 8021840:	4618      	mov	r0, r3
 8021842:	3720      	adds	r7, #32
 8021844:	46bd      	mov	sp, r7
 8021846:	bd80      	pop	{r7, pc}
 8021848:	08027bbc 	.word	0x08027bbc
 802184c:	08027bf0 	.word	0x08027bf0
 8021850:	08027bfc 	.word	0x08027bfc
 8021854:	08027c24 	.word	0x08027c24
 8021858:	20018d02 	.word	0x20018d02
 802185c:	0802805c 	.word	0x0802805c

08021860 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021860:	b480      	push	{r7}
 8021862:	b085      	sub	sp, #20
 8021864:	af00      	add	r7, sp, #0
 8021866:	6078      	str	r0, [r7, #4]
 8021868:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802186e:	687b      	ldr	r3, [r7, #4]
 8021870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021874:	d002      	beq.n	802187c <ip4_addr_isbroadcast_u32+0x1c>
 8021876:	687b      	ldr	r3, [r7, #4]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d101      	bne.n	8021880 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 802187c:	2301      	movs	r3, #1
 802187e:	e02a      	b.n	80218d6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021880:	683b      	ldr	r3, [r7, #0]
 8021882:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8021886:	f003 0302 	and.w	r3, r3, #2
 802188a:	2b00      	cmp	r3, #0
 802188c:	d101      	bne.n	8021892 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802188e:	2300      	movs	r3, #0
 8021890:	e021      	b.n	80218d6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021892:	683b      	ldr	r3, [r7, #0]
 8021894:	3304      	adds	r3, #4
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	687a      	ldr	r2, [r7, #4]
 802189a:	429a      	cmp	r2, r3
 802189c:	d101      	bne.n	80218a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802189e:	2300      	movs	r3, #0
 80218a0:	e019      	b.n	80218d6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80218a2:	68fa      	ldr	r2, [r7, #12]
 80218a4:	683b      	ldr	r3, [r7, #0]
 80218a6:	3304      	adds	r3, #4
 80218a8:	681b      	ldr	r3, [r3, #0]
 80218aa:	405a      	eors	r2, r3
 80218ac:	683b      	ldr	r3, [r7, #0]
 80218ae:	3308      	adds	r3, #8
 80218b0:	681b      	ldr	r3, [r3, #0]
 80218b2:	4013      	ands	r3, r2
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	d10d      	bne.n	80218d4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80218b8:	683b      	ldr	r3, [r7, #0]
 80218ba:	3308      	adds	r3, #8
 80218bc:	681b      	ldr	r3, [r3, #0]
 80218be:	43da      	mvns	r2, r3
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80218c4:	683b      	ldr	r3, [r7, #0]
 80218c6:	3308      	adds	r3, #8
 80218c8:	681b      	ldr	r3, [r3, #0]
 80218ca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80218cc:	429a      	cmp	r2, r3
 80218ce:	d101      	bne.n	80218d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80218d0:	2301      	movs	r3, #1
 80218d2:	e000      	b.n	80218d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80218d4:	2300      	movs	r3, #0
  }
}
 80218d6:	4618      	mov	r0, r3
 80218d8:	3714      	adds	r7, #20
 80218da:	46bd      	mov	sp, r7
 80218dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218e0:	4770      	bx	lr
	...

080218e4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80218e4:	b580      	push	{r7, lr}
 80218e6:	b082      	sub	sp, #8
 80218e8:	af00      	add	r7, sp, #0
 80218ea:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80218ec:	2210      	movs	r2, #16
 80218ee:	4904      	ldr	r1, [pc, #16]	@ (8021900 <ip4addr_ntoa+0x1c>)
 80218f0:	6878      	ldr	r0, [r7, #4]
 80218f2:	f000 f807 	bl	8021904 <ip4addr_ntoa_r>
 80218f6:	4603      	mov	r3, r0
}
 80218f8:	4618      	mov	r0, r3
 80218fa:	3708      	adds	r7, #8
 80218fc:	46bd      	mov	sp, r7
 80218fe:	bd80      	pop	{r7, pc}
 8021900:	20018d04 	.word	0x20018d04

08021904 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8021904:	b480      	push	{r7}
 8021906:	b08d      	sub	sp, #52	@ 0x34
 8021908:	af00      	add	r7, sp, #0
 802190a:	60f8      	str	r0, [r7, #12]
 802190c:	60b9      	str	r1, [r7, #8]
 802190e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8021910:	2300      	movs	r3, #0
 8021912:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	681b      	ldr	r3, [r3, #0]
 8021918:	61bb      	str	r3, [r7, #24]

  rp = buf;
 802191a:	68bb      	ldr	r3, [r7, #8]
 802191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 802191e:	f107 0318 	add.w	r3, r7, #24
 8021922:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8021924:	2300      	movs	r3, #0
 8021926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 802192a:	e058      	b.n	80219de <ip4addr_ntoa_r+0xda>
    i = 0;
 802192c:	2300      	movs	r3, #0
 802192e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8021932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021934:	781a      	ldrb	r2, [r3, #0]
 8021936:	4b32      	ldr	r3, [pc, #200]	@ (8021a00 <ip4addr_ntoa_r+0xfc>)
 8021938:	fba3 1302 	umull	r1, r3, r3, r2
 802193c:	08d9      	lsrs	r1, r3, #3
 802193e:	460b      	mov	r3, r1
 8021940:	009b      	lsls	r3, r3, #2
 8021942:	440b      	add	r3, r1
 8021944:	005b      	lsls	r3, r3, #1
 8021946:	1ad3      	subs	r3, r2, r3
 8021948:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 802194a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802194c:	781b      	ldrb	r3, [r3, #0]
 802194e:	4a2c      	ldr	r2, [pc, #176]	@ (8021a00 <ip4addr_ntoa_r+0xfc>)
 8021950:	fba2 2303 	umull	r2, r3, r2, r3
 8021954:	08db      	lsrs	r3, r3, #3
 8021956:	b2da      	uxtb	r2, r3
 8021958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802195a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 802195c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8021960:	1c5a      	adds	r2, r3, #1
 8021962:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8021966:	4619      	mov	r1, r3
 8021968:	7ffb      	ldrb	r3, [r7, #31]
 802196a:	3330      	adds	r3, #48	@ 0x30
 802196c:	b2da      	uxtb	r2, r3
 802196e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8021972:	443b      	add	r3, r7
 8021974:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8021978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802197a:	781b      	ldrb	r3, [r3, #0]
 802197c:	2b00      	cmp	r3, #0
 802197e:	d1d8      	bne.n	8021932 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8021980:	e011      	b.n	80219a6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8021982:	6a3b      	ldr	r3, [r7, #32]
 8021984:	1c5a      	adds	r2, r3, #1
 8021986:	623a      	str	r2, [r7, #32]
 8021988:	687a      	ldr	r2, [r7, #4]
 802198a:	429a      	cmp	r2, r3
 802198c:	dc01      	bgt.n	8021992 <ip4addr_ntoa_r+0x8e>
        return NULL;
 802198e:	2300      	movs	r3, #0
 8021990:	e030      	b.n	80219f4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8021992:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8021996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021998:	1c59      	adds	r1, r3, #1
 802199a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802199c:	3230      	adds	r2, #48	@ 0x30
 802199e:	443a      	add	r2, r7
 80219a0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80219a4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80219a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80219aa:	1e5a      	subs	r2, r3, #1
 80219ac:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d1e6      	bne.n	8021982 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80219b4:	6a3b      	ldr	r3, [r7, #32]
 80219b6:	1c5a      	adds	r2, r3, #1
 80219b8:	623a      	str	r2, [r7, #32]
 80219ba:	687a      	ldr	r2, [r7, #4]
 80219bc:	429a      	cmp	r2, r3
 80219be:	dc01      	bgt.n	80219c4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80219c0:	2300      	movs	r3, #0
 80219c2:	e017      	b.n	80219f4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80219c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80219c6:	1c5a      	adds	r2, r3, #1
 80219c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80219ca:	222e      	movs	r2, #46	@ 0x2e
 80219cc:	701a      	strb	r2, [r3, #0]
    ap++;
 80219ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80219d0:	3301      	adds	r3, #1
 80219d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80219d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80219d8:	3301      	adds	r3, #1
 80219da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80219de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80219e2:	2b03      	cmp	r3, #3
 80219e4:	d9a2      	bls.n	802192c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80219e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80219e8:	3b01      	subs	r3, #1
 80219ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80219ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80219ee:	2200      	movs	r2, #0
 80219f0:	701a      	strb	r2, [r3, #0]
  return buf;
 80219f2:	68bb      	ldr	r3, [r7, #8]
}
 80219f4:	4618      	mov	r0, r3
 80219f6:	3734      	adds	r7, #52	@ 0x34
 80219f8:	46bd      	mov	sp, r7
 80219fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219fe:	4770      	bx	lr
 8021a00:	cccccccd 	.word	0xcccccccd

08021a04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021a04:	b580      	push	{r7, lr}
 8021a06:	b084      	sub	sp, #16
 8021a08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8021a0a:	2300      	movs	r3, #0
 8021a0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8021a0e:	4b12      	ldr	r3, [pc, #72]	@ (8021a58 <ip_reass_tmr+0x54>)
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021a14:	e018      	b.n	8021a48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8021a16:	68fb      	ldr	r3, [r7, #12]
 8021a18:	7fdb      	ldrb	r3, [r3, #31]
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d00b      	beq.n	8021a36 <ip_reass_tmr+0x32>
      r->timer--;
 8021a1e:	68fb      	ldr	r3, [r7, #12]
 8021a20:	7fdb      	ldrb	r3, [r3, #31]
 8021a22:	3b01      	subs	r3, #1
 8021a24:	b2da      	uxtb	r2, r3
 8021a26:	68fb      	ldr	r3, [r7, #12]
 8021a28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8021a2a:	68fb      	ldr	r3, [r7, #12]
 8021a2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021a2e:	68fb      	ldr	r3, [r7, #12]
 8021a30:	681b      	ldr	r3, [r3, #0]
 8021a32:	60fb      	str	r3, [r7, #12]
 8021a34:	e008      	b.n	8021a48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8021a36:	68fb      	ldr	r3, [r7, #12]
 8021a38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8021a3a:	68fb      	ldr	r3, [r7, #12]
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021a40:	68b9      	ldr	r1, [r7, #8]
 8021a42:	6878      	ldr	r0, [r7, #4]
 8021a44:	f000 f80a 	bl	8021a5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8021a48:	68fb      	ldr	r3, [r7, #12]
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d1e3      	bne.n	8021a16 <ip_reass_tmr+0x12>
    }
  }
}
 8021a4e:	bf00      	nop
 8021a50:	bf00      	nop
 8021a52:	3710      	adds	r7, #16
 8021a54:	46bd      	mov	sp, r7
 8021a56:	bd80      	pop	{r7, pc}
 8021a58:	20018d14 	.word	0x20018d14

08021a5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021a5c:	b580      	push	{r7, lr}
 8021a5e:	b088      	sub	sp, #32
 8021a60:	af00      	add	r7, sp, #0
 8021a62:	6078      	str	r0, [r7, #4]
 8021a64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021a66:	2300      	movs	r3, #0
 8021a68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021a6a:	683a      	ldr	r2, [r7, #0]
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	429a      	cmp	r2, r3
 8021a70:	d105      	bne.n	8021a7e <ip_reass_free_complete_datagram+0x22>
 8021a72:	4b45      	ldr	r3, [pc, #276]	@ (8021b88 <ip_reass_free_complete_datagram+0x12c>)
 8021a74:	22ab      	movs	r2, #171	@ 0xab
 8021a76:	4945      	ldr	r1, [pc, #276]	@ (8021b8c <ip_reass_free_complete_datagram+0x130>)
 8021a78:	4845      	ldr	r0, [pc, #276]	@ (8021b90 <ip_reass_free_complete_datagram+0x134>)
 8021a7a:	f001 fdf5 	bl	8023668 <iprintf>
  if (prev != NULL) {
 8021a7e:	683b      	ldr	r3, [r7, #0]
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d00a      	beq.n	8021a9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021a84:	683b      	ldr	r3, [r7, #0]
 8021a86:	681b      	ldr	r3, [r3, #0]
 8021a88:	687a      	ldr	r2, [r7, #4]
 8021a8a:	429a      	cmp	r2, r3
 8021a8c:	d005      	beq.n	8021a9a <ip_reass_free_complete_datagram+0x3e>
 8021a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8021b88 <ip_reass_free_complete_datagram+0x12c>)
 8021a90:	22ad      	movs	r2, #173	@ 0xad
 8021a92:	4940      	ldr	r1, [pc, #256]	@ (8021b94 <ip_reass_free_complete_datagram+0x138>)
 8021a94:	483e      	ldr	r0, [pc, #248]	@ (8021b90 <ip_reass_free_complete_datagram+0x134>)
 8021a96:	f001 fde7 	bl	8023668 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	685b      	ldr	r3, [r3, #4]
 8021a9e:	685b      	ldr	r3, [r3, #4]
 8021aa0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021aa2:	697b      	ldr	r3, [r7, #20]
 8021aa4:	889b      	ldrh	r3, [r3, #4]
 8021aa6:	b29b      	uxth	r3, r3
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d12a      	bne.n	8021b02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	685b      	ldr	r3, [r3, #4]
 8021ab0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021ab2:	697b      	ldr	r3, [r7, #20]
 8021ab4:	681a      	ldr	r2, [r3, #0]
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021aba:	69bb      	ldr	r3, [r7, #24]
 8021abc:	6858      	ldr	r0, [r3, #4]
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	3308      	adds	r3, #8
 8021ac2:	2214      	movs	r2, #20
 8021ac4:	4619      	mov	r1, r3
 8021ac6:	f001 ff76 	bl	80239b6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021aca:	2101      	movs	r1, #1
 8021acc:	69b8      	ldr	r0, [r7, #24]
 8021ace:	f7ff fbb7 	bl	8021240 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021ad2:	69b8      	ldr	r0, [r7, #24]
 8021ad4:	f7f7 fb02 	bl	80190dc <pbuf_clen>
 8021ad8:	4603      	mov	r3, r0
 8021ada:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021adc:	8bfa      	ldrh	r2, [r7, #30]
 8021ade:	8a7b      	ldrh	r3, [r7, #18]
 8021ae0:	4413      	add	r3, r2
 8021ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021ae6:	db05      	blt.n	8021af4 <ip_reass_free_complete_datagram+0x98>
 8021ae8:	4b27      	ldr	r3, [pc, #156]	@ (8021b88 <ip_reass_free_complete_datagram+0x12c>)
 8021aea:	22bc      	movs	r2, #188	@ 0xbc
 8021aec:	492a      	ldr	r1, [pc, #168]	@ (8021b98 <ip_reass_free_complete_datagram+0x13c>)
 8021aee:	4828      	ldr	r0, [pc, #160]	@ (8021b90 <ip_reass_free_complete_datagram+0x134>)
 8021af0:	f001 fdba 	bl	8023668 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021af4:	8bfa      	ldrh	r2, [r7, #30]
 8021af6:	8a7b      	ldrh	r3, [r7, #18]
 8021af8:	4413      	add	r3, r2
 8021afa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021afc:	69b8      	ldr	r0, [r7, #24]
 8021afe:	f7f7 fa5f 	bl	8018fc0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	685b      	ldr	r3, [r3, #4]
 8021b06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8021b08:	e01f      	b.n	8021b4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8021b0a:	69bb      	ldr	r3, [r7, #24]
 8021b0c:	685b      	ldr	r3, [r3, #4]
 8021b0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021b10:	69bb      	ldr	r3, [r7, #24]
 8021b12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021b14:	697b      	ldr	r3, [r7, #20]
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8021b1a:	68f8      	ldr	r0, [r7, #12]
 8021b1c:	f7f7 fade 	bl	80190dc <pbuf_clen>
 8021b20:	4603      	mov	r3, r0
 8021b22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021b24:	8bfa      	ldrh	r2, [r7, #30]
 8021b26:	8a7b      	ldrh	r3, [r7, #18]
 8021b28:	4413      	add	r3, r2
 8021b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021b2e:	db05      	blt.n	8021b3c <ip_reass_free_complete_datagram+0xe0>
 8021b30:	4b15      	ldr	r3, [pc, #84]	@ (8021b88 <ip_reass_free_complete_datagram+0x12c>)
 8021b32:	22cc      	movs	r2, #204	@ 0xcc
 8021b34:	4918      	ldr	r1, [pc, #96]	@ (8021b98 <ip_reass_free_complete_datagram+0x13c>)
 8021b36:	4816      	ldr	r0, [pc, #88]	@ (8021b90 <ip_reass_free_complete_datagram+0x134>)
 8021b38:	f001 fd96 	bl	8023668 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021b3c:	8bfa      	ldrh	r2, [r7, #30]
 8021b3e:	8a7b      	ldrh	r3, [r7, #18]
 8021b40:	4413      	add	r3, r2
 8021b42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8021b44:	68f8      	ldr	r0, [r7, #12]
 8021b46:	f7f7 fa3b 	bl	8018fc0 <pbuf_free>
  while (p != NULL) {
 8021b4a:	69bb      	ldr	r3, [r7, #24]
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d1dc      	bne.n	8021b0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021b50:	6839      	ldr	r1, [r7, #0]
 8021b52:	6878      	ldr	r0, [r7, #4]
 8021b54:	f000 f8c2 	bl	8021cdc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021b58:	4b10      	ldr	r3, [pc, #64]	@ (8021b9c <ip_reass_free_complete_datagram+0x140>)
 8021b5a:	881b      	ldrh	r3, [r3, #0]
 8021b5c:	8bfa      	ldrh	r2, [r7, #30]
 8021b5e:	429a      	cmp	r2, r3
 8021b60:	d905      	bls.n	8021b6e <ip_reass_free_complete_datagram+0x112>
 8021b62:	4b09      	ldr	r3, [pc, #36]	@ (8021b88 <ip_reass_free_complete_datagram+0x12c>)
 8021b64:	22d2      	movs	r2, #210	@ 0xd2
 8021b66:	490e      	ldr	r1, [pc, #56]	@ (8021ba0 <ip_reass_free_complete_datagram+0x144>)
 8021b68:	4809      	ldr	r0, [pc, #36]	@ (8021b90 <ip_reass_free_complete_datagram+0x134>)
 8021b6a:	f001 fd7d 	bl	8023668 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8021b9c <ip_reass_free_complete_datagram+0x140>)
 8021b70:	881a      	ldrh	r2, [r3, #0]
 8021b72:	8bfb      	ldrh	r3, [r7, #30]
 8021b74:	1ad3      	subs	r3, r2, r3
 8021b76:	b29a      	uxth	r2, r3
 8021b78:	4b08      	ldr	r3, [pc, #32]	@ (8021b9c <ip_reass_free_complete_datagram+0x140>)
 8021b7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021b7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8021b7e:	4618      	mov	r0, r3
 8021b80:	3720      	adds	r7, #32
 8021b82:	46bd      	mov	sp, r7
 8021b84:	bd80      	pop	{r7, pc}
 8021b86:	bf00      	nop
 8021b88:	08027c54 	.word	0x08027c54
 8021b8c:	08027c90 	.word	0x08027c90
 8021b90:	08027c9c 	.word	0x08027c9c
 8021b94:	08027cc4 	.word	0x08027cc4
 8021b98:	08027cd8 	.word	0x08027cd8
 8021b9c:	20018d18 	.word	0x20018d18
 8021ba0:	08027cf8 	.word	0x08027cf8

08021ba4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021ba4:	b580      	push	{r7, lr}
 8021ba6:	b08a      	sub	sp, #40	@ 0x28
 8021ba8:	af00      	add	r7, sp, #0
 8021baa:	6078      	str	r0, [r7, #4]
 8021bac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021bae:	2300      	movs	r3, #0
 8021bb0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021bb2:	2300      	movs	r3, #0
 8021bb4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021bba:	2300      	movs	r3, #0
 8021bbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021bbe:	2300      	movs	r3, #0
 8021bc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021bc2:	4b28      	ldr	r3, [pc, #160]	@ (8021c64 <ip_reass_remove_oldest_datagram+0xc0>)
 8021bc4:	681b      	ldr	r3, [r3, #0]
 8021bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8021bc8:	e030      	b.n	8021c2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8021bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021bcc:	695a      	ldr	r2, [r3, #20]
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	68db      	ldr	r3, [r3, #12]
 8021bd2:	429a      	cmp	r2, r3
 8021bd4:	d10c      	bne.n	8021bf0 <ip_reass_remove_oldest_datagram+0x4c>
 8021bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021bd8:	699a      	ldr	r2, [r3, #24]
 8021bda:	687b      	ldr	r3, [r7, #4]
 8021bdc:	691b      	ldr	r3, [r3, #16]
 8021bde:	429a      	cmp	r2, r3
 8021be0:	d106      	bne.n	8021bf0 <ip_reass_remove_oldest_datagram+0x4c>
 8021be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021be4:	899a      	ldrh	r2, [r3, #12]
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	889b      	ldrh	r3, [r3, #4]
 8021bea:	b29b      	uxth	r3, r3
 8021bec:	429a      	cmp	r2, r3
 8021bee:	d014      	beq.n	8021c1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021bf0:	693b      	ldr	r3, [r7, #16]
 8021bf2:	3301      	adds	r3, #1
 8021bf4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021bf6:	6a3b      	ldr	r3, [r7, #32]
 8021bf8:	2b00      	cmp	r3, #0
 8021bfa:	d104      	bne.n	8021c06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021bfe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021c00:	69fb      	ldr	r3, [r7, #28]
 8021c02:	61bb      	str	r3, [r7, #24]
 8021c04:	e009      	b.n	8021c1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c08:	7fda      	ldrb	r2, [r3, #31]
 8021c0a:	6a3b      	ldr	r3, [r7, #32]
 8021c0c:	7fdb      	ldrb	r3, [r3, #31]
 8021c0e:	429a      	cmp	r2, r3
 8021c10:	d803      	bhi.n	8021c1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021c16:	69fb      	ldr	r3, [r7, #28]
 8021c18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8021c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	d001      	beq.n	8021c26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c28:	681b      	ldr	r3, [r3, #0]
 8021c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8021c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	d1cb      	bne.n	8021bca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021c32:	6a3b      	ldr	r3, [r7, #32]
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d008      	beq.n	8021c4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021c38:	69b9      	ldr	r1, [r7, #24]
 8021c3a:	6a38      	ldr	r0, [r7, #32]
 8021c3c:	f7ff ff0e 	bl	8021a5c <ip_reass_free_complete_datagram>
 8021c40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021c42:	697a      	ldr	r2, [r7, #20]
 8021c44:	68fb      	ldr	r3, [r7, #12]
 8021c46:	4413      	add	r3, r2
 8021c48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021c4a:	697a      	ldr	r2, [r7, #20]
 8021c4c:	683b      	ldr	r3, [r7, #0]
 8021c4e:	429a      	cmp	r2, r3
 8021c50:	da02      	bge.n	8021c58 <ip_reass_remove_oldest_datagram+0xb4>
 8021c52:	693b      	ldr	r3, [r7, #16]
 8021c54:	2b01      	cmp	r3, #1
 8021c56:	dcac      	bgt.n	8021bb2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021c58:	697b      	ldr	r3, [r7, #20]
}
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	3728      	adds	r7, #40	@ 0x28
 8021c5e:	46bd      	mov	sp, r7
 8021c60:	bd80      	pop	{r7, pc}
 8021c62:	bf00      	nop
 8021c64:	20018d14 	.word	0x20018d14

08021c68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021c68:	b580      	push	{r7, lr}
 8021c6a:	b084      	sub	sp, #16
 8021c6c:	af00      	add	r7, sp, #0
 8021c6e:	6078      	str	r0, [r7, #4]
 8021c70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021c72:	2004      	movs	r0, #4
 8021c74:	f7f6 fa58 	bl	8018128 <memp_malloc>
 8021c78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021c7a:	68fb      	ldr	r3, [r7, #12]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d110      	bne.n	8021ca2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021c80:	6839      	ldr	r1, [r7, #0]
 8021c82:	6878      	ldr	r0, [r7, #4]
 8021c84:	f7ff ff8e 	bl	8021ba4 <ip_reass_remove_oldest_datagram>
 8021c88:	4602      	mov	r2, r0
 8021c8a:	683b      	ldr	r3, [r7, #0]
 8021c8c:	4293      	cmp	r3, r2
 8021c8e:	dc03      	bgt.n	8021c98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021c90:	2004      	movs	r0, #4
 8021c92:	f7f6 fa49 	bl	8018128 <memp_malloc>
 8021c96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021c98:	68fb      	ldr	r3, [r7, #12]
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d101      	bne.n	8021ca2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021c9e:	2300      	movs	r3, #0
 8021ca0:	e016      	b.n	8021cd0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021ca2:	2220      	movs	r2, #32
 8021ca4:	2100      	movs	r1, #0
 8021ca6:	68f8      	ldr	r0, [r7, #12]
 8021ca8:	f001 fd91 	bl	80237ce <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021cac:	68fb      	ldr	r3, [r7, #12]
 8021cae:	220f      	movs	r2, #15
 8021cb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021cb2:	4b09      	ldr	r3, [pc, #36]	@ (8021cd8 <ip_reass_enqueue_new_datagram+0x70>)
 8021cb4:	681a      	ldr	r2, [r3, #0]
 8021cb6:	68fb      	ldr	r3, [r7, #12]
 8021cb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021cba:	4a07      	ldr	r2, [pc, #28]	@ (8021cd8 <ip_reass_enqueue_new_datagram+0x70>)
 8021cbc:	68fb      	ldr	r3, [r7, #12]
 8021cbe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	3308      	adds	r3, #8
 8021cc4:	2214      	movs	r2, #20
 8021cc6:	6879      	ldr	r1, [r7, #4]
 8021cc8:	4618      	mov	r0, r3
 8021cca:	f001 fe74 	bl	80239b6 <memcpy>
  return ipr;
 8021cce:	68fb      	ldr	r3, [r7, #12]
}
 8021cd0:	4618      	mov	r0, r3
 8021cd2:	3710      	adds	r7, #16
 8021cd4:	46bd      	mov	sp, r7
 8021cd6:	bd80      	pop	{r7, pc}
 8021cd8:	20018d14 	.word	0x20018d14

08021cdc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021cdc:	b580      	push	{r7, lr}
 8021cde:	b082      	sub	sp, #8
 8021ce0:	af00      	add	r7, sp, #0
 8021ce2:	6078      	str	r0, [r7, #4]
 8021ce4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021ce6:	4b10      	ldr	r3, [pc, #64]	@ (8021d28 <ip_reass_dequeue_datagram+0x4c>)
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	687a      	ldr	r2, [r7, #4]
 8021cec:	429a      	cmp	r2, r3
 8021cee:	d104      	bne.n	8021cfa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	681b      	ldr	r3, [r3, #0]
 8021cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8021d28 <ip_reass_dequeue_datagram+0x4c>)
 8021cf6:	6013      	str	r3, [r2, #0]
 8021cf8:	e00d      	b.n	8021d16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021cfa:	683b      	ldr	r3, [r7, #0]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d106      	bne.n	8021d0e <ip_reass_dequeue_datagram+0x32>
 8021d00:	4b0a      	ldr	r3, [pc, #40]	@ (8021d2c <ip_reass_dequeue_datagram+0x50>)
 8021d02:	f240 1245 	movw	r2, #325	@ 0x145
 8021d06:	490a      	ldr	r1, [pc, #40]	@ (8021d30 <ip_reass_dequeue_datagram+0x54>)
 8021d08:	480a      	ldr	r0, [pc, #40]	@ (8021d34 <ip_reass_dequeue_datagram+0x58>)
 8021d0a:	f001 fcad 	bl	8023668 <iprintf>
    prev->next = ipr->next;
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	681a      	ldr	r2, [r3, #0]
 8021d12:	683b      	ldr	r3, [r7, #0]
 8021d14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021d16:	6879      	ldr	r1, [r7, #4]
 8021d18:	2004      	movs	r0, #4
 8021d1a:	f7f6 fa7b 	bl	8018214 <memp_free>
}
 8021d1e:	bf00      	nop
 8021d20:	3708      	adds	r7, #8
 8021d22:	46bd      	mov	sp, r7
 8021d24:	bd80      	pop	{r7, pc}
 8021d26:	bf00      	nop
 8021d28:	20018d14 	.word	0x20018d14
 8021d2c:	08027c54 	.word	0x08027c54
 8021d30:	08027d1c 	.word	0x08027d1c
 8021d34:	08027c9c 	.word	0x08027c9c

08021d38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021d38:	b580      	push	{r7, lr}
 8021d3a:	b08c      	sub	sp, #48	@ 0x30
 8021d3c:	af00      	add	r7, sp, #0
 8021d3e:	60f8      	str	r0, [r7, #12]
 8021d40:	60b9      	str	r1, [r7, #8]
 8021d42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021d44:	2300      	movs	r3, #0
 8021d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021d48:	2301      	movs	r3, #1
 8021d4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021d4c:	68bb      	ldr	r3, [r7, #8]
 8021d4e:	685b      	ldr	r3, [r3, #4]
 8021d50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021d52:	69fb      	ldr	r3, [r7, #28]
 8021d54:	885b      	ldrh	r3, [r3, #2]
 8021d56:	b29b      	uxth	r3, r3
 8021d58:	4618      	mov	r0, r3
 8021d5a:	f7f5 fcfd 	bl	8017758 <lwip_htons>
 8021d5e:	4603      	mov	r3, r0
 8021d60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021d62:	69fb      	ldr	r3, [r7, #28]
 8021d64:	781b      	ldrb	r3, [r3, #0]
 8021d66:	f003 030f 	and.w	r3, r3, #15
 8021d6a:	b2db      	uxtb	r3, r3
 8021d6c:	009b      	lsls	r3, r3, #2
 8021d6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021d70:	7e7b      	ldrb	r3, [r7, #25]
 8021d72:	b29b      	uxth	r3, r3
 8021d74:	8b7a      	ldrh	r2, [r7, #26]
 8021d76:	429a      	cmp	r2, r3
 8021d78:	d202      	bcs.n	8021d80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8021d7e:	e135      	b.n	8021fec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021d80:	7e7b      	ldrb	r3, [r7, #25]
 8021d82:	b29b      	uxth	r3, r3
 8021d84:	8b7a      	ldrh	r2, [r7, #26]
 8021d86:	1ad3      	subs	r3, r2, r3
 8021d88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021d8a:	69fb      	ldr	r3, [r7, #28]
 8021d8c:	88db      	ldrh	r3, [r3, #6]
 8021d8e:	b29b      	uxth	r3, r3
 8021d90:	4618      	mov	r0, r3
 8021d92:	f7f5 fce1 	bl	8017758 <lwip_htons>
 8021d96:	4603      	mov	r3, r0
 8021d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021d9c:	b29b      	uxth	r3, r3
 8021d9e:	00db      	lsls	r3, r3, #3
 8021da0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021da2:	68bb      	ldr	r3, [r7, #8]
 8021da4:	685b      	ldr	r3, [r3, #4]
 8021da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8021da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021daa:	2200      	movs	r2, #0
 8021dac:	701a      	strb	r2, [r3, #0]
 8021dae:	2200      	movs	r2, #0
 8021db0:	705a      	strb	r2, [r3, #1]
 8021db2:	2200      	movs	r2, #0
 8021db4:	709a      	strb	r2, [r3, #2]
 8021db6:	2200      	movs	r2, #0
 8021db8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021dbc:	8afa      	ldrh	r2, [r7, #22]
 8021dbe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021dc0:	8afa      	ldrh	r2, [r7, #22]
 8021dc2:	8b7b      	ldrh	r3, [r7, #26]
 8021dc4:	4413      	add	r3, r2
 8021dc6:	b29a      	uxth	r2, r3
 8021dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021dca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021dce:	88db      	ldrh	r3, [r3, #6]
 8021dd0:	b29b      	uxth	r3, r3
 8021dd2:	8afa      	ldrh	r2, [r7, #22]
 8021dd4:	429a      	cmp	r2, r3
 8021dd6:	d902      	bls.n	8021dde <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8021ddc:	e106      	b.n	8021fec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021dde:	68fb      	ldr	r3, [r7, #12]
 8021de0:	685b      	ldr	r3, [r3, #4]
 8021de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8021de4:	e068      	b.n	8021eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021de8:	685b      	ldr	r3, [r3, #4]
 8021dea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021dee:	889b      	ldrh	r3, [r3, #4]
 8021df0:	b29a      	uxth	r2, r3
 8021df2:	693b      	ldr	r3, [r7, #16]
 8021df4:	889b      	ldrh	r3, [r3, #4]
 8021df6:	b29b      	uxth	r3, r3
 8021df8:	429a      	cmp	r2, r3
 8021dfa:	d235      	bcs.n	8021e68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021e00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	d020      	beq.n	8021e4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e0a:	889b      	ldrh	r3, [r3, #4]
 8021e0c:	b29a      	uxth	r2, r3
 8021e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e10:	88db      	ldrh	r3, [r3, #6]
 8021e12:	b29b      	uxth	r3, r3
 8021e14:	429a      	cmp	r2, r3
 8021e16:	d307      	bcc.n	8021e28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e1a:	88db      	ldrh	r3, [r3, #6]
 8021e1c:	b29a      	uxth	r2, r3
 8021e1e:	693b      	ldr	r3, [r7, #16]
 8021e20:	889b      	ldrh	r3, [r3, #4]
 8021e22:	b29b      	uxth	r3, r3
 8021e24:	429a      	cmp	r2, r3
 8021e26:	d902      	bls.n	8021e2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e28:	f04f 33ff 	mov.w	r3, #4294967295
 8021e2c:	e0de      	b.n	8021fec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e30:	68ba      	ldr	r2, [r7, #8]
 8021e32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e36:	88db      	ldrh	r3, [r3, #6]
 8021e38:	b29a      	uxth	r2, r3
 8021e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e3c:	889b      	ldrh	r3, [r3, #4]
 8021e3e:	b29b      	uxth	r3, r3
 8021e40:	429a      	cmp	r2, r3
 8021e42:	d03d      	beq.n	8021ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021e44:	2300      	movs	r3, #0
 8021e46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021e48:	e03a      	b.n	8021ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e4c:	88db      	ldrh	r3, [r3, #6]
 8021e4e:	b29a      	uxth	r2, r3
 8021e50:	693b      	ldr	r3, [r7, #16]
 8021e52:	889b      	ldrh	r3, [r3, #4]
 8021e54:	b29b      	uxth	r3, r3
 8021e56:	429a      	cmp	r2, r3
 8021e58:	d902      	bls.n	8021e60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8021e5e:	e0c5      	b.n	8021fec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021e60:	68fb      	ldr	r3, [r7, #12]
 8021e62:	68ba      	ldr	r2, [r7, #8]
 8021e64:	605a      	str	r2, [r3, #4]
      break;
 8021e66:	e02b      	b.n	8021ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e6a:	889b      	ldrh	r3, [r3, #4]
 8021e6c:	b29a      	uxth	r2, r3
 8021e6e:	693b      	ldr	r3, [r7, #16]
 8021e70:	889b      	ldrh	r3, [r3, #4]
 8021e72:	b29b      	uxth	r3, r3
 8021e74:	429a      	cmp	r2, r3
 8021e76:	d102      	bne.n	8021e7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e78:	f04f 33ff 	mov.w	r3, #4294967295
 8021e7c:	e0b6      	b.n	8021fec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e80:	889b      	ldrh	r3, [r3, #4]
 8021e82:	b29a      	uxth	r2, r3
 8021e84:	693b      	ldr	r3, [r7, #16]
 8021e86:	88db      	ldrh	r3, [r3, #6]
 8021e88:	b29b      	uxth	r3, r3
 8021e8a:	429a      	cmp	r2, r3
 8021e8c:	d202      	bcs.n	8021e94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8021e92:	e0ab      	b.n	8021fec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d009      	beq.n	8021eae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e9c:	88db      	ldrh	r3, [r3, #6]
 8021e9e:	b29a      	uxth	r2, r3
 8021ea0:	693b      	ldr	r3, [r7, #16]
 8021ea2:	889b      	ldrh	r3, [r3, #4]
 8021ea4:	b29b      	uxth	r3, r3
 8021ea6:	429a      	cmp	r2, r3
 8021ea8:	d001      	beq.n	8021eae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021eaa:	2300      	movs	r3, #0
 8021eac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021eae:	693b      	ldr	r3, [r7, #16]
 8021eb0:	681b      	ldr	r3, [r3, #0]
 8021eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8021eb4:	693b      	ldr	r3, [r7, #16]
 8021eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8021eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d193      	bne.n	8021de6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021ebe:	e000      	b.n	8021ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021ec0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ec4:	2b00      	cmp	r3, #0
 8021ec6:	d12d      	bne.n	8021f24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d01c      	beq.n	8021f08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ed0:	88db      	ldrh	r3, [r3, #6]
 8021ed2:	b29a      	uxth	r2, r3
 8021ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021ed6:	889b      	ldrh	r3, [r3, #4]
 8021ed8:	b29b      	uxth	r3, r3
 8021eda:	429a      	cmp	r2, r3
 8021edc:	d906      	bls.n	8021eec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021ede:	4b45      	ldr	r3, [pc, #276]	@ (8021ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021ee0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8021ee4:	4944      	ldr	r1, [pc, #272]	@ (8021ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021ee6:	4845      	ldr	r0, [pc, #276]	@ (8021ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021ee8:	f001 fbbe 	bl	8023668 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021eee:	68ba      	ldr	r2, [r7, #8]
 8021ef0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ef4:	88db      	ldrh	r3, [r3, #6]
 8021ef6:	b29a      	uxth	r2, r3
 8021ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021efa:	889b      	ldrh	r3, [r3, #4]
 8021efc:	b29b      	uxth	r3, r3
 8021efe:	429a      	cmp	r2, r3
 8021f00:	d010      	beq.n	8021f24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021f02:	2300      	movs	r3, #0
 8021f04:	623b      	str	r3, [r7, #32]
 8021f06:	e00d      	b.n	8021f24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	685b      	ldr	r3, [r3, #4]
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	d006      	beq.n	8021f1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021f10:	4b38      	ldr	r3, [pc, #224]	@ (8021ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021f12:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8021f16:	493a      	ldr	r1, [pc, #232]	@ (8022000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021f18:	4838      	ldr	r0, [pc, #224]	@ (8021ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021f1a:	f001 fba5 	bl	8023668 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021f1e:	68fb      	ldr	r3, [r7, #12]
 8021f20:	68ba      	ldr	r2, [r7, #8]
 8021f22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d105      	bne.n	8021f36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021f2a:	68fb      	ldr	r3, [r7, #12]
 8021f2c:	7f9b      	ldrb	r3, [r3, #30]
 8021f2e:	f003 0301 	and.w	r3, r3, #1
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	d059      	beq.n	8021fea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021f36:	6a3b      	ldr	r3, [r7, #32]
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	d04f      	beq.n	8021fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021f3c:	68fb      	ldr	r3, [r7, #12]
 8021f3e:	685b      	ldr	r3, [r3, #4]
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d006      	beq.n	8021f52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021f44:	68fb      	ldr	r3, [r7, #12]
 8021f46:	685b      	ldr	r3, [r3, #4]
 8021f48:	685b      	ldr	r3, [r3, #4]
 8021f4a:	889b      	ldrh	r3, [r3, #4]
 8021f4c:	b29b      	uxth	r3, r3
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	d002      	beq.n	8021f58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021f52:	2300      	movs	r3, #0
 8021f54:	623b      	str	r3, [r7, #32]
 8021f56:	e041      	b.n	8021fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8021f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8021f62:	e012      	b.n	8021f8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f66:	685b      	ldr	r3, [r3, #4]
 8021f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8021f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021f6c:	88db      	ldrh	r3, [r3, #6]
 8021f6e:	b29a      	uxth	r2, r3
 8021f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f72:	889b      	ldrh	r3, [r3, #4]
 8021f74:	b29b      	uxth	r3, r3
 8021f76:	429a      	cmp	r2, r3
 8021f78:	d002      	beq.n	8021f80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	623b      	str	r3, [r7, #32]
            break;
 8021f7e:	e007      	b.n	8021f90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f82:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8021f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8021f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d1e9      	bne.n	8021f64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021f90:	6a3b      	ldr	r3, [r7, #32]
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d022      	beq.n	8021fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021f96:	68fb      	ldr	r3, [r7, #12]
 8021f98:	685b      	ldr	r3, [r3, #4]
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d106      	bne.n	8021fac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021f9e:	4b15      	ldr	r3, [pc, #84]	@ (8021ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021fa0:	f240 12df 	movw	r2, #479	@ 0x1df
 8021fa4:	4917      	ldr	r1, [pc, #92]	@ (8022004 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021fa6:	4815      	ldr	r0, [pc, #84]	@ (8021ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021fa8:	f001 fb5e 	bl	8023668 <iprintf>
          LWIP_ASSERT("sanity check",
 8021fac:	68fb      	ldr	r3, [r7, #12]
 8021fae:	685b      	ldr	r3, [r3, #4]
 8021fb0:	685b      	ldr	r3, [r3, #4]
 8021fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021fb4:	429a      	cmp	r2, r3
 8021fb6:	d106      	bne.n	8021fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8021ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021fba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8021fbe:	4911      	ldr	r1, [pc, #68]	@ (8022004 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021fc0:	480e      	ldr	r0, [pc, #56]	@ (8021ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021fc2:	f001 fb51 	bl	8023668 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d006      	beq.n	8021fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021fce:	4b09      	ldr	r3, [pc, #36]	@ (8021ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021fd0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8021fd4:	490c      	ldr	r1, [pc, #48]	@ (8022008 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021fd6:	4809      	ldr	r0, [pc, #36]	@ (8021ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021fd8:	f001 fb46 	bl	8023668 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021fdc:	6a3b      	ldr	r3, [r7, #32]
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	bf14      	ite	ne
 8021fe2:	2301      	movne	r3, #1
 8021fe4:	2300      	moveq	r3, #0
 8021fe6:	b2db      	uxtb	r3, r3
 8021fe8:	e000      	b.n	8021fec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021fea:	2300      	movs	r3, #0
}
 8021fec:	4618      	mov	r0, r3
 8021fee:	3730      	adds	r7, #48	@ 0x30
 8021ff0:	46bd      	mov	sp, r7
 8021ff2:	bd80      	pop	{r7, pc}
 8021ff4:	08027c54 	.word	0x08027c54
 8021ff8:	08027d38 	.word	0x08027d38
 8021ffc:	08027c9c 	.word	0x08027c9c
 8022000:	08027d58 	.word	0x08027d58
 8022004:	08027d90 	.word	0x08027d90
 8022008:	08027da0 	.word	0x08027da0

0802200c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 802200c:	b580      	push	{r7, lr}
 802200e:	b08e      	sub	sp, #56	@ 0x38
 8022010:	af00      	add	r7, sp, #0
 8022012:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	685b      	ldr	r3, [r3, #4]
 8022018:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802201a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802201c:	781b      	ldrb	r3, [r3, #0]
 802201e:	f003 030f 	and.w	r3, r3, #15
 8022022:	b2db      	uxtb	r3, r3
 8022024:	009b      	lsls	r3, r3, #2
 8022026:	b2db      	uxtb	r3, r3
 8022028:	2b14      	cmp	r3, #20
 802202a:	f040 8171 	bne.w	8022310 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802202e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022030:	88db      	ldrh	r3, [r3, #6]
 8022032:	b29b      	uxth	r3, r3
 8022034:	4618      	mov	r0, r3
 8022036:	f7f5 fb8f 	bl	8017758 <lwip_htons>
 802203a:	4603      	mov	r3, r0
 802203c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022040:	b29b      	uxth	r3, r3
 8022042:	00db      	lsls	r3, r3, #3
 8022044:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022048:	885b      	ldrh	r3, [r3, #2]
 802204a:	b29b      	uxth	r3, r3
 802204c:	4618      	mov	r0, r3
 802204e:	f7f5 fb83 	bl	8017758 <lwip_htons>
 8022052:	4603      	mov	r3, r0
 8022054:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8022056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022058:	781b      	ldrb	r3, [r3, #0]
 802205a:	f003 030f 	and.w	r3, r3, #15
 802205e:	b2db      	uxtb	r3, r3
 8022060:	009b      	lsls	r3, r3, #2
 8022062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8022066:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 802206a:	b29b      	uxth	r3, r3
 802206c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 802206e:	429a      	cmp	r2, r3
 8022070:	f0c0 8150 	bcc.w	8022314 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8022074:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8022078:	b29b      	uxth	r3, r3
 802207a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 802207c:	1ad3      	subs	r3, r2, r3
 802207e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8022080:	6878      	ldr	r0, [r7, #4]
 8022082:	f7f7 f82b 	bl	80190dc <pbuf_clen>
 8022086:	4603      	mov	r3, r0
 8022088:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802208a:	4b8c      	ldr	r3, [pc, #560]	@ (80222bc <ip4_reass+0x2b0>)
 802208c:	881b      	ldrh	r3, [r3, #0]
 802208e:	461a      	mov	r2, r3
 8022090:	8c3b      	ldrh	r3, [r7, #32]
 8022092:	4413      	add	r3, r2
 8022094:	2b0a      	cmp	r3, #10
 8022096:	dd10      	ble.n	80220ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022098:	8c3b      	ldrh	r3, [r7, #32]
 802209a:	4619      	mov	r1, r3
 802209c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802209e:	f7ff fd81 	bl	8021ba4 <ip_reass_remove_oldest_datagram>
 80220a2:	4603      	mov	r3, r0
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	f000 8137 	beq.w	8022318 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80220aa:	4b84      	ldr	r3, [pc, #528]	@ (80222bc <ip4_reass+0x2b0>)
 80220ac:	881b      	ldrh	r3, [r3, #0]
 80220ae:	461a      	mov	r2, r3
 80220b0:	8c3b      	ldrh	r3, [r7, #32]
 80220b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80220b4:	2b0a      	cmp	r3, #10
 80220b6:	f300 812f 	bgt.w	8022318 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80220ba:	4b81      	ldr	r3, [pc, #516]	@ (80222c0 <ip4_reass+0x2b4>)
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	633b      	str	r3, [r7, #48]	@ 0x30
 80220c0:	e015      	b.n	80220ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80220c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80220c4:	695a      	ldr	r2, [r3, #20]
 80220c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80220c8:	68db      	ldr	r3, [r3, #12]
 80220ca:	429a      	cmp	r2, r3
 80220cc:	d10c      	bne.n	80220e8 <ip4_reass+0xdc>
 80220ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80220d0:	699a      	ldr	r2, [r3, #24]
 80220d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80220d4:	691b      	ldr	r3, [r3, #16]
 80220d6:	429a      	cmp	r2, r3
 80220d8:	d106      	bne.n	80220e8 <ip4_reass+0xdc>
 80220da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80220dc:	899a      	ldrh	r2, [r3, #12]
 80220de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80220e0:	889b      	ldrh	r3, [r3, #4]
 80220e2:	b29b      	uxth	r3, r3
 80220e4:	429a      	cmp	r2, r3
 80220e6:	d006      	beq.n	80220f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80220e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80220ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d1e6      	bne.n	80220c2 <ip4_reass+0xb6>
 80220f4:	e000      	b.n	80220f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80220f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80220f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d109      	bne.n	8022112 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80220fe:	8c3b      	ldrh	r3, [r7, #32]
 8022100:	4619      	mov	r1, r3
 8022102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022104:	f7ff fdb0 	bl	8021c68 <ip_reass_enqueue_new_datagram>
 8022108:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802210a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802210c:	2b00      	cmp	r3, #0
 802210e:	d11c      	bne.n	802214a <ip4_reass+0x13e>
      goto nullreturn;
 8022110:	e105      	b.n	802231e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022114:	88db      	ldrh	r3, [r3, #6]
 8022116:	b29b      	uxth	r3, r3
 8022118:	4618      	mov	r0, r3
 802211a:	f7f5 fb1d 	bl	8017758 <lwip_htons>
 802211e:	4603      	mov	r3, r0
 8022120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022124:	2b00      	cmp	r3, #0
 8022126:	d110      	bne.n	802214a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8022128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802212a:	89db      	ldrh	r3, [r3, #14]
 802212c:	4618      	mov	r0, r3
 802212e:	f7f5 fb13 	bl	8017758 <lwip_htons>
 8022132:	4603      	mov	r3, r0
 8022134:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022138:	2b00      	cmp	r3, #0
 802213a:	d006      	beq.n	802214a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802213c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802213e:	3308      	adds	r3, #8
 8022140:	2214      	movs	r2, #20
 8022142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022144:	4618      	mov	r0, r3
 8022146:	f001 fc36 	bl	80239b6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802214c:	88db      	ldrh	r3, [r3, #6]
 802214e:	b29b      	uxth	r3, r3
 8022150:	f003 0320 	and.w	r3, r3, #32
 8022154:	2b00      	cmp	r3, #0
 8022156:	bf0c      	ite	eq
 8022158:	2301      	moveq	r3, #1
 802215a:	2300      	movne	r3, #0
 802215c:	b2db      	uxtb	r3, r3
 802215e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8022160:	69fb      	ldr	r3, [r7, #28]
 8022162:	2b00      	cmp	r3, #0
 8022164:	d00e      	beq.n	8022184 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8022166:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8022168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802216a:	4413      	add	r3, r2
 802216c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802216e:	8b7a      	ldrh	r2, [r7, #26]
 8022170:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8022172:	429a      	cmp	r2, r3
 8022174:	f0c0 80a0 	bcc.w	80222b8 <ip4_reass+0x2ac>
 8022178:	8b7b      	ldrh	r3, [r7, #26]
 802217a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 802217e:	4293      	cmp	r3, r2
 8022180:	f200 809a 	bhi.w	80222b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8022184:	69fa      	ldr	r2, [r7, #28]
 8022186:	6879      	ldr	r1, [r7, #4]
 8022188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802218a:	f7ff fdd5 	bl	8021d38 <ip_reass_chain_frag_into_datagram_and_validate>
 802218e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8022190:	697b      	ldr	r3, [r7, #20]
 8022192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022196:	f000 809b 	beq.w	80222d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802219a:	4b48      	ldr	r3, [pc, #288]	@ (80222bc <ip4_reass+0x2b0>)
 802219c:	881a      	ldrh	r2, [r3, #0]
 802219e:	8c3b      	ldrh	r3, [r7, #32]
 80221a0:	4413      	add	r3, r2
 80221a2:	b29a      	uxth	r2, r3
 80221a4:	4b45      	ldr	r3, [pc, #276]	@ (80222bc <ip4_reass+0x2b0>)
 80221a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80221a8:	69fb      	ldr	r3, [r7, #28]
 80221aa:	2b00      	cmp	r3, #0
 80221ac:	d00d      	beq.n	80221ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80221ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80221b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80221b2:	4413      	add	r3, r2
 80221b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80221b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80221b8:	8a7a      	ldrh	r2, [r7, #18]
 80221ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80221bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80221be:	7f9b      	ldrb	r3, [r3, #30]
 80221c0:	f043 0301 	orr.w	r3, r3, #1
 80221c4:	b2da      	uxtb	r2, r3
 80221c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80221c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80221ca:	697b      	ldr	r3, [r7, #20]
 80221cc:	2b01      	cmp	r3, #1
 80221ce:	d171      	bne.n	80222b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80221d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80221d2:	8b9b      	ldrh	r3, [r3, #28]
 80221d4:	3314      	adds	r3, #20
 80221d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80221d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80221da:	685b      	ldr	r3, [r3, #4]
 80221dc:	685b      	ldr	r3, [r3, #4]
 80221de:	681b      	ldr	r3, [r3, #0]
 80221e0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80221e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80221e4:	685b      	ldr	r3, [r3, #4]
 80221e6:	685b      	ldr	r3, [r3, #4]
 80221e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80221ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80221ec:	3308      	adds	r3, #8
 80221ee:	2214      	movs	r2, #20
 80221f0:	4619      	mov	r1, r3
 80221f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80221f4:	f001 fbdf 	bl	80239b6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80221f8:	8a3b      	ldrh	r3, [r7, #16]
 80221fa:	4618      	mov	r0, r3
 80221fc:	f7f5 faac 	bl	8017758 <lwip_htons>
 8022200:	4603      	mov	r3, r0
 8022202:	461a      	mov	r2, r3
 8022204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022206:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8022208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802220a:	2200      	movs	r2, #0
 802220c:	719a      	strb	r2, [r3, #6]
 802220e:	2200      	movs	r2, #0
 8022210:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8022212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022214:	2200      	movs	r2, #0
 8022216:	729a      	strb	r2, [r3, #10]
 8022218:	2200      	movs	r2, #0
 802221a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802221e:	685b      	ldr	r3, [r3, #4]
 8022220:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8022222:	e00d      	b.n	8022240 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8022224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022226:	685b      	ldr	r3, [r3, #4]
 8022228:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802222a:	2114      	movs	r1, #20
 802222c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 802222e:	f7f6 fe0f 	bl	8018e50 <pbuf_remove_header>
      pbuf_cat(p, r);
 8022232:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8022234:	6878      	ldr	r0, [r7, #4]
 8022236:	f7f6 ff91 	bl	801915c <pbuf_cat>
      r = iprh->next_pbuf;
 802223a:	68fb      	ldr	r3, [r7, #12]
 802223c:	681b      	ldr	r3, [r3, #0]
 802223e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8022240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022242:	2b00      	cmp	r3, #0
 8022244:	d1ee      	bne.n	8022224 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8022246:	4b1e      	ldr	r3, [pc, #120]	@ (80222c0 <ip4_reass+0x2b4>)
 8022248:	681b      	ldr	r3, [r3, #0]
 802224a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802224c:	429a      	cmp	r2, r3
 802224e:	d102      	bne.n	8022256 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8022250:	2300      	movs	r3, #0
 8022252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022254:	e010      	b.n	8022278 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022256:	4b1a      	ldr	r3, [pc, #104]	@ (80222c0 <ip4_reass+0x2b4>)
 8022258:	681b      	ldr	r3, [r3, #0]
 802225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802225c:	e007      	b.n	802226e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802225e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022260:	681b      	ldr	r3, [r3, #0]
 8022262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8022264:	429a      	cmp	r2, r3
 8022266:	d006      	beq.n	8022276 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802226e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022270:	2b00      	cmp	r3, #0
 8022272:	d1f4      	bne.n	802225e <ip4_reass+0x252>
 8022274:	e000      	b.n	8022278 <ip4_reass+0x26c>
          break;
 8022276:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8022278:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802227a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802227c:	f7ff fd2e 	bl	8021cdc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8022280:	6878      	ldr	r0, [r7, #4]
 8022282:	f7f6 ff2b 	bl	80190dc <pbuf_clen>
 8022286:	4603      	mov	r3, r0
 8022288:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802228a:	4b0c      	ldr	r3, [pc, #48]	@ (80222bc <ip4_reass+0x2b0>)
 802228c:	881b      	ldrh	r3, [r3, #0]
 802228e:	8c3a      	ldrh	r2, [r7, #32]
 8022290:	429a      	cmp	r2, r3
 8022292:	d906      	bls.n	80222a2 <ip4_reass+0x296>
 8022294:	4b0b      	ldr	r3, [pc, #44]	@ (80222c4 <ip4_reass+0x2b8>)
 8022296:	f240 229b 	movw	r2, #667	@ 0x29b
 802229a:	490b      	ldr	r1, [pc, #44]	@ (80222c8 <ip4_reass+0x2bc>)
 802229c:	480b      	ldr	r0, [pc, #44]	@ (80222cc <ip4_reass+0x2c0>)
 802229e:	f001 f9e3 	bl	8023668 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80222a2:	4b06      	ldr	r3, [pc, #24]	@ (80222bc <ip4_reass+0x2b0>)
 80222a4:	881a      	ldrh	r2, [r3, #0]
 80222a6:	8c3b      	ldrh	r3, [r7, #32]
 80222a8:	1ad3      	subs	r3, r2, r3
 80222aa:	b29a      	uxth	r2, r3
 80222ac:	4b03      	ldr	r3, [pc, #12]	@ (80222bc <ip4_reass+0x2b0>)
 80222ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80222b0:	687b      	ldr	r3, [r7, #4]
 80222b2:	e038      	b.n	8022326 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80222b4:	2300      	movs	r3, #0
 80222b6:	e036      	b.n	8022326 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80222b8:	bf00      	nop
 80222ba:	e00a      	b.n	80222d2 <ip4_reass+0x2c6>
 80222bc:	20018d18 	.word	0x20018d18
 80222c0:	20018d14 	.word	0x20018d14
 80222c4:	08027c54 	.word	0x08027c54
 80222c8:	08027dc4 	.word	0x08027dc4
 80222cc:	08027c9c 	.word	0x08027c9c
    goto nullreturn_ipr;
 80222d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80222d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d106      	bne.n	80222e6 <ip4_reass+0x2da>
 80222d8:	4b15      	ldr	r3, [pc, #84]	@ (8022330 <ip4_reass+0x324>)
 80222da:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80222de:	4915      	ldr	r1, [pc, #84]	@ (8022334 <ip4_reass+0x328>)
 80222e0:	4815      	ldr	r0, [pc, #84]	@ (8022338 <ip4_reass+0x32c>)
 80222e2:	f001 f9c1 	bl	8023668 <iprintf>
  if (ipr->p == NULL) {
 80222e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80222e8:	685b      	ldr	r3, [r3, #4]
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	d116      	bne.n	802231c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80222ee:	4b13      	ldr	r3, [pc, #76]	@ (802233c <ip4_reass+0x330>)
 80222f0:	681b      	ldr	r3, [r3, #0]
 80222f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80222f4:	429a      	cmp	r2, r3
 80222f6:	d006      	beq.n	8022306 <ip4_reass+0x2fa>
 80222f8:	4b0d      	ldr	r3, [pc, #52]	@ (8022330 <ip4_reass+0x324>)
 80222fa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80222fe:	4910      	ldr	r1, [pc, #64]	@ (8022340 <ip4_reass+0x334>)
 8022300:	480d      	ldr	r0, [pc, #52]	@ (8022338 <ip4_reass+0x32c>)
 8022302:	f001 f9b1 	bl	8023668 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8022306:	2100      	movs	r1, #0
 8022308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802230a:	f7ff fce7 	bl	8021cdc <ip_reass_dequeue_datagram>
 802230e:	e006      	b.n	802231e <ip4_reass+0x312>
    goto nullreturn;
 8022310:	bf00      	nop
 8022312:	e004      	b.n	802231e <ip4_reass+0x312>
    goto nullreturn;
 8022314:	bf00      	nop
 8022316:	e002      	b.n	802231e <ip4_reass+0x312>
      goto nullreturn;
 8022318:	bf00      	nop
 802231a:	e000      	b.n	802231e <ip4_reass+0x312>
  }

nullreturn:
 802231c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802231e:	6878      	ldr	r0, [r7, #4]
 8022320:	f7f6 fe4e 	bl	8018fc0 <pbuf_free>
  return NULL;
 8022324:	2300      	movs	r3, #0
}
 8022326:	4618      	mov	r0, r3
 8022328:	3738      	adds	r7, #56	@ 0x38
 802232a:	46bd      	mov	sp, r7
 802232c:	bd80      	pop	{r7, pc}
 802232e:	bf00      	nop
 8022330:	08027c54 	.word	0x08027c54
 8022334:	08027de0 	.word	0x08027de0
 8022338:	08027c9c 	.word	0x08027c9c
 802233c:	20018d14 	.word	0x20018d14
 8022340:	08027dec 	.word	0x08027dec

08022344 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8022344:	b580      	push	{r7, lr}
 8022346:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8022348:	2005      	movs	r0, #5
 802234a:	f7f5 feed 	bl	8018128 <memp_malloc>
 802234e:	4603      	mov	r3, r0
}
 8022350:	4618      	mov	r0, r3
 8022352:	bd80      	pop	{r7, pc}

08022354 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8022354:	b580      	push	{r7, lr}
 8022356:	b082      	sub	sp, #8
 8022358:	af00      	add	r7, sp, #0
 802235a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	2b00      	cmp	r3, #0
 8022360:	d106      	bne.n	8022370 <ip_frag_free_pbuf_custom_ref+0x1c>
 8022362:	4b07      	ldr	r3, [pc, #28]	@ (8022380 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022364:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8022368:	4906      	ldr	r1, [pc, #24]	@ (8022384 <ip_frag_free_pbuf_custom_ref+0x30>)
 802236a:	4807      	ldr	r0, [pc, #28]	@ (8022388 <ip_frag_free_pbuf_custom_ref+0x34>)
 802236c:	f001 f97c 	bl	8023668 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8022370:	6879      	ldr	r1, [r7, #4]
 8022372:	2005      	movs	r0, #5
 8022374:	f7f5 ff4e 	bl	8018214 <memp_free>
}
 8022378:	bf00      	nop
 802237a:	3708      	adds	r7, #8
 802237c:	46bd      	mov	sp, r7
 802237e:	bd80      	pop	{r7, pc}
 8022380:	08027c54 	.word	0x08027c54
 8022384:	08027e0c 	.word	0x08027e0c
 8022388:	08027c9c 	.word	0x08027c9c

0802238c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 802238c:	b580      	push	{r7, lr}
 802238e:	b084      	sub	sp, #16
 8022390:	af00      	add	r7, sp, #0
 8022392:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022398:	68fb      	ldr	r3, [r7, #12]
 802239a:	2b00      	cmp	r3, #0
 802239c:	d106      	bne.n	80223ac <ipfrag_free_pbuf_custom+0x20>
 802239e:	4b11      	ldr	r3, [pc, #68]	@ (80223e4 <ipfrag_free_pbuf_custom+0x58>)
 80223a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80223a4:	4910      	ldr	r1, [pc, #64]	@ (80223e8 <ipfrag_free_pbuf_custom+0x5c>)
 80223a6:	4811      	ldr	r0, [pc, #68]	@ (80223ec <ipfrag_free_pbuf_custom+0x60>)
 80223a8:	f001 f95e 	bl	8023668 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80223ac:	68fa      	ldr	r2, [r7, #12]
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	429a      	cmp	r2, r3
 80223b2:	d006      	beq.n	80223c2 <ipfrag_free_pbuf_custom+0x36>
 80223b4:	4b0b      	ldr	r3, [pc, #44]	@ (80223e4 <ipfrag_free_pbuf_custom+0x58>)
 80223b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80223ba:	490d      	ldr	r1, [pc, #52]	@ (80223f0 <ipfrag_free_pbuf_custom+0x64>)
 80223bc:	480b      	ldr	r0, [pc, #44]	@ (80223ec <ipfrag_free_pbuf_custom+0x60>)
 80223be:	f001 f953 	bl	8023668 <iprintf>
  if (pcr->original != NULL) {
 80223c2:	68fb      	ldr	r3, [r7, #12]
 80223c4:	695b      	ldr	r3, [r3, #20]
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	d004      	beq.n	80223d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80223ca:	68fb      	ldr	r3, [r7, #12]
 80223cc:	695b      	ldr	r3, [r3, #20]
 80223ce:	4618      	mov	r0, r3
 80223d0:	f7f6 fdf6 	bl	8018fc0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80223d4:	68f8      	ldr	r0, [r7, #12]
 80223d6:	f7ff ffbd 	bl	8022354 <ip_frag_free_pbuf_custom_ref>
}
 80223da:	bf00      	nop
 80223dc:	3710      	adds	r7, #16
 80223de:	46bd      	mov	sp, r7
 80223e0:	bd80      	pop	{r7, pc}
 80223e2:	bf00      	nop
 80223e4:	08027c54 	.word	0x08027c54
 80223e8:	08027e18 	.word	0x08027e18
 80223ec:	08027c9c 	.word	0x08027c9c
 80223f0:	08027e24 	.word	0x08027e24

080223f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80223f4:	b580      	push	{r7, lr}
 80223f6:	b094      	sub	sp, #80	@ 0x50
 80223f8:	af02      	add	r7, sp, #8
 80223fa:	60f8      	str	r0, [r7, #12]
 80223fc:	60b9      	str	r1, [r7, #8]
 80223fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8022400:	2300      	movs	r3, #0
 8022402:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022406:	68bb      	ldr	r3, [r7, #8]
 8022408:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 802240a:	3b14      	subs	r3, #20
 802240c:	2b00      	cmp	r3, #0
 802240e:	da00      	bge.n	8022412 <ip4_frag+0x1e>
 8022410:	3307      	adds	r3, #7
 8022412:	10db      	asrs	r3, r3, #3
 8022414:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8022416:	2314      	movs	r3, #20
 8022418:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802241a:	68fb      	ldr	r3, [r7, #12]
 802241c:	685b      	ldr	r3, [r3, #4]
 802241e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8022420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022422:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022426:	781b      	ldrb	r3, [r3, #0]
 8022428:	f003 030f 	and.w	r3, r3, #15
 802242c:	b2db      	uxtb	r3, r3
 802242e:	009b      	lsls	r3, r3, #2
 8022430:	b2db      	uxtb	r3, r3
 8022432:	2b14      	cmp	r3, #20
 8022434:	d002      	beq.n	802243c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8022436:	f06f 0305 	mvn.w	r3, #5
 802243a:	e110      	b.n	802265e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 802243c:	68fb      	ldr	r3, [r7, #12]
 802243e:	895b      	ldrh	r3, [r3, #10]
 8022440:	2b13      	cmp	r3, #19
 8022442:	d809      	bhi.n	8022458 <ip4_frag+0x64>
 8022444:	4b88      	ldr	r3, [pc, #544]	@ (8022668 <ip4_frag+0x274>)
 8022446:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 802244a:	4988      	ldr	r1, [pc, #544]	@ (802266c <ip4_frag+0x278>)
 802244c:	4888      	ldr	r0, [pc, #544]	@ (8022670 <ip4_frag+0x27c>)
 802244e:	f001 f90b 	bl	8023668 <iprintf>
 8022452:	f06f 0305 	mvn.w	r3, #5
 8022456:	e102      	b.n	802265e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8022458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802245a:	88db      	ldrh	r3, [r3, #6]
 802245c:	b29b      	uxth	r3, r3
 802245e:	4618      	mov	r0, r3
 8022460:	f7f5 f97a 	bl	8017758 <lwip_htons>
 8022464:	4603      	mov	r3, r0
 8022466:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8022468:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802246a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802246e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8022472:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8022474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022478:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802247a:	68fb      	ldr	r3, [r7, #12]
 802247c:	891b      	ldrh	r3, [r3, #8]
 802247e:	3b14      	subs	r3, #20
 8022480:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8022484:	e0e1      	b.n	802264a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022486:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8022488:	00db      	lsls	r3, r3, #3
 802248a:	b29b      	uxth	r3, r3
 802248c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8022490:	4293      	cmp	r3, r2
 8022492:	bf28      	it	cs
 8022494:	4613      	movcs	r3, r2
 8022496:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8022498:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802249c:	2114      	movs	r1, #20
 802249e:	200e      	movs	r0, #14
 80224a0:	f7f6 fa78 	bl	8018994 <pbuf_alloc>
 80224a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80224a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	f000 80d5 	beq.w	8022658 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80224ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224b0:	895b      	ldrh	r3, [r3, #10]
 80224b2:	2b13      	cmp	r3, #19
 80224b4:	d806      	bhi.n	80224c4 <ip4_frag+0xd0>
 80224b6:	4b6c      	ldr	r3, [pc, #432]	@ (8022668 <ip4_frag+0x274>)
 80224b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80224bc:	496d      	ldr	r1, [pc, #436]	@ (8022674 <ip4_frag+0x280>)
 80224be:	486c      	ldr	r0, [pc, #432]	@ (8022670 <ip4_frag+0x27c>)
 80224c0:	f001 f8d2 	bl	8023668 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80224c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224c6:	685b      	ldr	r3, [r3, #4]
 80224c8:	2214      	movs	r2, #20
 80224ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80224cc:	4618      	mov	r0, r3
 80224ce:	f001 fa72 	bl	80239b6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80224d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224d4:	685b      	ldr	r3, [r3, #4]
 80224d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80224d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80224da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80224de:	e064      	b.n	80225aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80224e0:	68fb      	ldr	r3, [r7, #12]
 80224e2:	895a      	ldrh	r2, [r3, #10]
 80224e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80224e6:	1ad3      	subs	r3, r2, r3
 80224e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80224ea:	68fb      	ldr	r3, [r7, #12]
 80224ec:	895b      	ldrh	r3, [r3, #10]
 80224ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80224f0:	429a      	cmp	r2, r3
 80224f2:	d906      	bls.n	8022502 <ip4_frag+0x10e>
 80224f4:	4b5c      	ldr	r3, [pc, #368]	@ (8022668 <ip4_frag+0x274>)
 80224f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80224fa:	495f      	ldr	r1, [pc, #380]	@ (8022678 <ip4_frag+0x284>)
 80224fc:	485c      	ldr	r0, [pc, #368]	@ (8022670 <ip4_frag+0x27c>)
 80224fe:	f001 f8b3 	bl	8023668 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8022502:	8bfa      	ldrh	r2, [r7, #30]
 8022504:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8022508:	4293      	cmp	r3, r2
 802250a:	bf28      	it	cs
 802250c:	4613      	movcs	r3, r2
 802250e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8022512:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8022516:	2b00      	cmp	r3, #0
 8022518:	d105      	bne.n	8022526 <ip4_frag+0x132>
        poff = 0;
 802251a:	2300      	movs	r3, #0
 802251c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	681b      	ldr	r3, [r3, #0]
 8022522:	60fb      	str	r3, [r7, #12]
        continue;
 8022524:	e041      	b.n	80225aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8022526:	f7ff ff0d 	bl	8022344 <ip_frag_alloc_pbuf_custom_ref>
 802252a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 802252c:	69bb      	ldr	r3, [r7, #24]
 802252e:	2b00      	cmp	r3, #0
 8022530:	d103      	bne.n	802253a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8022532:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8022534:	f7f6 fd44 	bl	8018fc0 <pbuf_free>
        goto memerr;
 8022538:	e08f      	b.n	802265a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802253a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 802253c:	68fb      	ldr	r3, [r7, #12]
 802253e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022540:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8022542:	4413      	add	r3, r2
 8022544:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8022548:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 802254c:	9201      	str	r2, [sp, #4]
 802254e:	9300      	str	r3, [sp, #0]
 8022550:	4603      	mov	r3, r0
 8022552:	2241      	movs	r2, #65	@ 0x41
 8022554:	2000      	movs	r0, #0
 8022556:	f7f6 fb47 	bl	8018be8 <pbuf_alloced_custom>
 802255a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 802255c:	697b      	ldr	r3, [r7, #20]
 802255e:	2b00      	cmp	r3, #0
 8022560:	d106      	bne.n	8022570 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8022562:	69b8      	ldr	r0, [r7, #24]
 8022564:	f7ff fef6 	bl	8022354 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8022568:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802256a:	f7f6 fd29 	bl	8018fc0 <pbuf_free>
        goto memerr;
 802256e:	e074      	b.n	802265a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022570:	68f8      	ldr	r0, [r7, #12]
 8022572:	f7f6 fdcb 	bl	801910c <pbuf_ref>
      pcr->original = p;
 8022576:	69bb      	ldr	r3, [r7, #24]
 8022578:	68fa      	ldr	r2, [r7, #12]
 802257a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802257c:	69bb      	ldr	r3, [r7, #24]
 802257e:	4a3f      	ldr	r2, [pc, #252]	@ (802267c <ip4_frag+0x288>)
 8022580:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8022582:	6979      	ldr	r1, [r7, #20]
 8022584:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8022586:	f7f6 fde9 	bl	801915c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802258a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 802258e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8022592:	1ad3      	subs	r3, r2, r3
 8022594:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8022598:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 802259c:	2b00      	cmp	r3, #0
 802259e:	d004      	beq.n	80225aa <ip4_frag+0x1b6>
        poff = 0;
 80225a0:	2300      	movs	r3, #0
 80225a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80225a4:	68fb      	ldr	r3, [r7, #12]
 80225a6:	681b      	ldr	r3, [r3, #0]
 80225a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80225aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d196      	bne.n	80224e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80225b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80225b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80225b8:	4413      	add	r3, r2
 80225ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80225bc:	68bb      	ldr	r3, [r7, #8]
 80225be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80225c0:	f1a3 0213 	sub.w	r2, r3, #19
 80225c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80225c8:	429a      	cmp	r2, r3
 80225ca:	bfcc      	ite	gt
 80225cc:	2301      	movgt	r3, #1
 80225ce:	2300      	movle	r3, #0
 80225d0:	b2db      	uxtb	r3, r3
 80225d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80225d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80225d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80225dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80225de:	6a3b      	ldr	r3, [r7, #32]
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d002      	beq.n	80225ea <ip4_frag+0x1f6>
 80225e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	d003      	beq.n	80225f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80225ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80225ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80225f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80225f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80225f4:	4618      	mov	r0, r3
 80225f6:	f7f5 f8af 	bl	8017758 <lwip_htons>
 80225fa:	4603      	mov	r3, r0
 80225fc:	461a      	mov	r2, r3
 80225fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022600:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022602:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8022604:	3314      	adds	r3, #20
 8022606:	b29b      	uxth	r3, r3
 8022608:	4618      	mov	r0, r3
 802260a:	f7f5 f8a5 	bl	8017758 <lwip_htons>
 802260e:	4603      	mov	r3, r0
 8022610:	461a      	mov	r2, r3
 8022612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022614:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8022616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022618:	2200      	movs	r2, #0
 802261a:	729a      	strb	r2, [r3, #10]
 802261c:	2200      	movs	r2, #0
 802261e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8022620:	68bb      	ldr	r3, [r7, #8]
 8022622:	695b      	ldr	r3, [r3, #20]
 8022624:	687a      	ldr	r2, [r7, #4]
 8022626:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8022628:	68b8      	ldr	r0, [r7, #8]
 802262a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802262c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802262e:	f7f6 fcc7 	bl	8018fc0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8022632:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8022636:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8022638:	1ad3      	subs	r3, r2, r3
 802263a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 802263e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8022642:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8022644:	4413      	add	r3, r2
 8022646:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 802264a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 802264e:	2b00      	cmp	r3, #0
 8022650:	f47f af19 	bne.w	8022486 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022654:	2300      	movs	r3, #0
 8022656:	e002      	b.n	802265e <ip4_frag+0x26a>
      goto memerr;
 8022658:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802265a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802265e:	4618      	mov	r0, r3
 8022660:	3748      	adds	r7, #72	@ 0x48
 8022662:	46bd      	mov	sp, r7
 8022664:	bd80      	pop	{r7, pc}
 8022666:	bf00      	nop
 8022668:	08027c54 	.word	0x08027c54
 802266c:	08027e30 	.word	0x08027e30
 8022670:	08027c9c 	.word	0x08027c9c
 8022674:	08027e4c 	.word	0x08027e4c
 8022678:	08027e6c 	.word	0x08027e6c
 802267c:	0802238d 	.word	0x0802238d

08022680 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022680:	b580      	push	{r7, lr}
 8022682:	b086      	sub	sp, #24
 8022684:	af00      	add	r7, sp, #0
 8022686:	6078      	str	r0, [r7, #4]
 8022688:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802268a:	230e      	movs	r3, #14
 802268c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	895b      	ldrh	r3, [r3, #10]
 8022692:	2b0e      	cmp	r3, #14
 8022694:	d96e      	bls.n	8022774 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022696:	687b      	ldr	r3, [r7, #4]
 8022698:	7bdb      	ldrb	r3, [r3, #15]
 802269a:	2b00      	cmp	r3, #0
 802269c:	d106      	bne.n	80226ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802269e:	683b      	ldr	r3, [r7, #0]
 80226a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80226a4:	3301      	adds	r3, #1
 80226a6:	b2da      	uxtb	r2, r3
 80226a8:	687b      	ldr	r3, [r7, #4]
 80226aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	685b      	ldr	r3, [r3, #4]
 80226b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80226b2:	693b      	ldr	r3, [r7, #16]
 80226b4:	7b1a      	ldrb	r2, [r3, #12]
 80226b6:	7b5b      	ldrb	r3, [r3, #13]
 80226b8:	021b      	lsls	r3, r3, #8
 80226ba:	4313      	orrs	r3, r2
 80226bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80226be:	693b      	ldr	r3, [r7, #16]
 80226c0:	781b      	ldrb	r3, [r3, #0]
 80226c2:	f003 0301 	and.w	r3, r3, #1
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d023      	beq.n	8022712 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80226ca:	693b      	ldr	r3, [r7, #16]
 80226cc:	781b      	ldrb	r3, [r3, #0]
 80226ce:	2b01      	cmp	r3, #1
 80226d0:	d10f      	bne.n	80226f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80226d2:	693b      	ldr	r3, [r7, #16]
 80226d4:	785b      	ldrb	r3, [r3, #1]
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	d11b      	bne.n	8022712 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80226da:	693b      	ldr	r3, [r7, #16]
 80226dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80226de:	2b5e      	cmp	r3, #94	@ 0x5e
 80226e0:	d117      	bne.n	8022712 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	7b5b      	ldrb	r3, [r3, #13]
 80226e6:	f043 0310 	orr.w	r3, r3, #16
 80226ea:	b2da      	uxtb	r2, r3
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	735a      	strb	r2, [r3, #13]
 80226f0:	e00f      	b.n	8022712 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80226f2:	693b      	ldr	r3, [r7, #16]
 80226f4:	2206      	movs	r2, #6
 80226f6:	4928      	ldr	r1, [pc, #160]	@ (8022798 <ethernet_input+0x118>)
 80226f8:	4618      	mov	r0, r3
 80226fa:	f001 f83e 	bl	802377a <memcmp>
 80226fe:	4603      	mov	r3, r0
 8022700:	2b00      	cmp	r3, #0
 8022702:	d106      	bne.n	8022712 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	7b5b      	ldrb	r3, [r3, #13]
 8022708:	f043 0308 	orr.w	r3, r3, #8
 802270c:	b2da      	uxtb	r2, r3
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022712:	89fb      	ldrh	r3, [r7, #14]
 8022714:	2b08      	cmp	r3, #8
 8022716:	d003      	beq.n	8022720 <ethernet_input+0xa0>
 8022718:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 802271c:	d014      	beq.n	8022748 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802271e:	e032      	b.n	8022786 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022720:	683b      	ldr	r3, [r7, #0]
 8022722:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022726:	f003 0308 	and.w	r3, r3, #8
 802272a:	2b00      	cmp	r3, #0
 802272c:	d024      	beq.n	8022778 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802272e:	8afb      	ldrh	r3, [r7, #22]
 8022730:	4619      	mov	r1, r3
 8022732:	6878      	ldr	r0, [r7, #4]
 8022734:	f7f6 fb8c 	bl	8018e50 <pbuf_remove_header>
 8022738:	4603      	mov	r3, r0
 802273a:	2b00      	cmp	r3, #0
 802273c:	d11e      	bne.n	802277c <ethernet_input+0xfc>
        ip4_input(p, netif);
 802273e:	6839      	ldr	r1, [r7, #0]
 8022740:	6878      	ldr	r0, [r7, #4]
 8022742:	f7fe fe91 	bl	8021468 <ip4_input>
      break;
 8022746:	e013      	b.n	8022770 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022748:	683b      	ldr	r3, [r7, #0]
 802274a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802274e:	f003 0308 	and.w	r3, r3, #8
 8022752:	2b00      	cmp	r3, #0
 8022754:	d014      	beq.n	8022780 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022756:	8afb      	ldrh	r3, [r7, #22]
 8022758:	4619      	mov	r1, r3
 802275a:	6878      	ldr	r0, [r7, #4]
 802275c:	f7f6 fb78 	bl	8018e50 <pbuf_remove_header>
 8022760:	4603      	mov	r3, r0
 8022762:	2b00      	cmp	r3, #0
 8022764:	d10e      	bne.n	8022784 <ethernet_input+0x104>
        etharp_input(p, netif);
 8022766:	6839      	ldr	r1, [r7, #0]
 8022768:	6878      	ldr	r0, [r7, #4]
 802276a:	f7fe f831 	bl	80207d0 <etharp_input>
      break;
 802276e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022770:	2300      	movs	r3, #0
 8022772:	e00c      	b.n	802278e <ethernet_input+0x10e>
    goto free_and_return;
 8022774:	bf00      	nop
 8022776:	e006      	b.n	8022786 <ethernet_input+0x106>
        goto free_and_return;
 8022778:	bf00      	nop
 802277a:	e004      	b.n	8022786 <ethernet_input+0x106>
        goto free_and_return;
 802277c:	bf00      	nop
 802277e:	e002      	b.n	8022786 <ethernet_input+0x106>
        goto free_and_return;
 8022780:	bf00      	nop
 8022782:	e000      	b.n	8022786 <ethernet_input+0x106>
        goto free_and_return;
 8022784:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022786:	6878      	ldr	r0, [r7, #4]
 8022788:	f7f6 fc1a 	bl	8018fc0 <pbuf_free>
  return ERR_OK;
 802278c:	2300      	movs	r3, #0
}
 802278e:	4618      	mov	r0, r3
 8022790:	3718      	adds	r7, #24
 8022792:	46bd      	mov	sp, r7
 8022794:	bd80      	pop	{r7, pc}
 8022796:	bf00      	nop
 8022798:	08028060 	.word	0x08028060

0802279c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 802279c:	b580      	push	{r7, lr}
 802279e:	b086      	sub	sp, #24
 80227a0:	af00      	add	r7, sp, #0
 80227a2:	60f8      	str	r0, [r7, #12]
 80227a4:	60b9      	str	r1, [r7, #8]
 80227a6:	607a      	str	r2, [r7, #4]
 80227a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80227aa:	8c3b      	ldrh	r3, [r7, #32]
 80227ac:	4618      	mov	r0, r3
 80227ae:	f7f4 ffd3 	bl	8017758 <lwip_htons>
 80227b2:	4603      	mov	r3, r0
 80227b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80227b6:	210e      	movs	r1, #14
 80227b8:	68b8      	ldr	r0, [r7, #8]
 80227ba:	f7f6 fb39 	bl	8018e30 <pbuf_add_header>
 80227be:	4603      	mov	r3, r0
 80227c0:	2b00      	cmp	r3, #0
 80227c2:	d125      	bne.n	8022810 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80227c4:	68bb      	ldr	r3, [r7, #8]
 80227c6:	685b      	ldr	r3, [r3, #4]
 80227c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80227ca:	693b      	ldr	r3, [r7, #16]
 80227cc:	8afa      	ldrh	r2, [r7, #22]
 80227ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80227d0:	693b      	ldr	r3, [r7, #16]
 80227d2:	2206      	movs	r2, #6
 80227d4:	6839      	ldr	r1, [r7, #0]
 80227d6:	4618      	mov	r0, r3
 80227d8:	f001 f8ed 	bl	80239b6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80227dc:	693b      	ldr	r3, [r7, #16]
 80227de:	3306      	adds	r3, #6
 80227e0:	2206      	movs	r2, #6
 80227e2:	6879      	ldr	r1, [r7, #4]
 80227e4:	4618      	mov	r0, r3
 80227e6:	f001 f8e6 	bl	80239b6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80227ea:	68fb      	ldr	r3, [r7, #12]
 80227ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80227f0:	2b06      	cmp	r3, #6
 80227f2:	d006      	beq.n	8022802 <ethernet_output+0x66>
 80227f4:	4b0a      	ldr	r3, [pc, #40]	@ (8022820 <ethernet_output+0x84>)
 80227f6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80227fa:	490a      	ldr	r1, [pc, #40]	@ (8022824 <ethernet_output+0x88>)
 80227fc:	480a      	ldr	r0, [pc, #40]	@ (8022828 <ethernet_output+0x8c>)
 80227fe:	f000 ff33 	bl	8023668 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022802:	68fb      	ldr	r3, [r7, #12]
 8022804:	699b      	ldr	r3, [r3, #24]
 8022806:	68b9      	ldr	r1, [r7, #8]
 8022808:	68f8      	ldr	r0, [r7, #12]
 802280a:	4798      	blx	r3
 802280c:	4603      	mov	r3, r0
 802280e:	e002      	b.n	8022816 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022810:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022812:	f06f 0301 	mvn.w	r3, #1
}
 8022816:	4618      	mov	r0, r3
 8022818:	3718      	adds	r7, #24
 802281a:	46bd      	mov	sp, r7
 802281c:	bd80      	pop	{r7, pc}
 802281e:	bf00      	nop
 8022820:	08027e7c 	.word	0x08027e7c
 8022824:	08027eb4 	.word	0x08027eb4
 8022828:	08027ee8 	.word	0x08027ee8

0802282c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b086      	sub	sp, #24
 8022830:	af00      	add	r7, sp, #0
 8022832:	6078      	str	r0, [r7, #4]
 8022834:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8022836:	683b      	ldr	r3, [r7, #0]
 8022838:	60bb      	str	r3, [r7, #8]
 802283a:	2304      	movs	r3, #4
 802283c:	60fb      	str	r3, [r7, #12]
 802283e:	2300      	movs	r3, #0
 8022840:	613b      	str	r3, [r7, #16]
 8022842:	2300      	movs	r3, #0
 8022844:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022846:	f107 0308 	add.w	r3, r7, #8
 802284a:	2100      	movs	r1, #0
 802284c:	4618      	mov	r0, r3
 802284e:	f7f0 fb8e 	bl	8012f6e <osMessageCreate>
 8022852:	4602      	mov	r2, r0
 8022854:	687b      	ldr	r3, [r7, #4]
 8022856:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	681b      	ldr	r3, [r3, #0]
 802285c:	2b00      	cmp	r3, #0
 802285e:	d102      	bne.n	8022866 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8022860:	f04f 33ff 	mov.w	r3, #4294967295
 8022864:	e000      	b.n	8022868 <sys_mbox_new+0x3c>

  return ERR_OK;
 8022866:	2300      	movs	r3, #0
}
 8022868:	4618      	mov	r0, r3
 802286a:	3718      	adds	r7, #24
 802286c:	46bd      	mov	sp, r7
 802286e:	bd80      	pop	{r7, pc}

08022870 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022870:	b580      	push	{r7, lr}
 8022872:	b082      	sub	sp, #8
 8022874:	af00      	add	r7, sp, #0
 8022876:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	681b      	ldr	r3, [r3, #0]
 802287c:	4618      	mov	r0, r3
 802287e:	f7f0 fc53 	bl	8013128 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	681b      	ldr	r3, [r3, #0]
 8022886:	4618      	mov	r0, r3
 8022888:	f7f0 fc64 	bl	8013154 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 802288c:	bf00      	nop
 802288e:	3708      	adds	r7, #8
 8022890:	46bd      	mov	sp, r7
 8022892:	bd80      	pop	{r7, pc}

08022894 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022894:	b580      	push	{r7, lr}
 8022896:	b084      	sub	sp, #16
 8022898:	af00      	add	r7, sp, #0
 802289a:	6078      	str	r0, [r7, #4]
 802289c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	6839      	ldr	r1, [r7, #0]
 80228a4:	2200      	movs	r2, #0
 80228a6:	4618      	mov	r0, r3
 80228a8:	f7f0 fb8a 	bl	8012fc0 <osMessagePut>
 80228ac:	4603      	mov	r3, r0
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	d102      	bne.n	80228b8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80228b2:	2300      	movs	r3, #0
 80228b4:	73fb      	strb	r3, [r7, #15]
 80228b6:	e001      	b.n	80228bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80228b8:	23ff      	movs	r3, #255	@ 0xff
 80228ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80228bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80228c0:	4618      	mov	r0, r3
 80228c2:	3710      	adds	r7, #16
 80228c4:	46bd      	mov	sp, r7
 80228c6:	bd80      	pop	{r7, pc}

080228c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80228c8:	b580      	push	{r7, lr}
 80228ca:	b08c      	sub	sp, #48	@ 0x30
 80228cc:	af00      	add	r7, sp, #0
 80228ce:	61f8      	str	r0, [r7, #28]
 80228d0:	61b9      	str	r1, [r7, #24]
 80228d2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80228d4:	f7f0 f95c 	bl	8012b90 <osKernelSysTick>
 80228d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80228da:	697b      	ldr	r3, [r7, #20]
 80228dc:	2b00      	cmp	r3, #0
 80228de:	d017      	beq.n	8022910 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80228e0:	69fb      	ldr	r3, [r7, #28]
 80228e2:	6819      	ldr	r1, [r3, #0]
 80228e4:	f107 0320 	add.w	r3, r7, #32
 80228e8:	697a      	ldr	r2, [r7, #20]
 80228ea:	4618      	mov	r0, r3
 80228ec:	f7f0 fba8 	bl	8013040 <osMessageGet>

    if(event.status == osEventMessage)
 80228f0:	6a3b      	ldr	r3, [r7, #32]
 80228f2:	2b10      	cmp	r3, #16
 80228f4:	d109      	bne.n	802290a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80228f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228f8:	461a      	mov	r2, r3
 80228fa:	69bb      	ldr	r3, [r7, #24]
 80228fc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80228fe:	f7f0 f947 	bl	8012b90 <osKernelSysTick>
 8022902:	4602      	mov	r2, r0
 8022904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022906:	1ad3      	subs	r3, r2, r3
 8022908:	e019      	b.n	802293e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802290a:	f04f 33ff 	mov.w	r3, #4294967295
 802290e:	e016      	b.n	802293e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8022910:	69fb      	ldr	r3, [r7, #28]
 8022912:	6819      	ldr	r1, [r3, #0]
 8022914:	463b      	mov	r3, r7
 8022916:	f04f 32ff 	mov.w	r2, #4294967295
 802291a:	4618      	mov	r0, r3
 802291c:	f7f0 fb90 	bl	8013040 <osMessageGet>
 8022920:	f107 0320 	add.w	r3, r7, #32
 8022924:	463a      	mov	r2, r7
 8022926:	ca07      	ldmia	r2, {r0, r1, r2}
 8022928:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 802292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802292e:	461a      	mov	r2, r3
 8022930:	69bb      	ldr	r3, [r7, #24]
 8022932:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8022934:	f7f0 f92c 	bl	8012b90 <osKernelSysTick>
 8022938:	4602      	mov	r2, r0
 802293a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802293c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 802293e:	4618      	mov	r0, r3
 8022940:	3730      	adds	r7, #48	@ 0x30
 8022942:	46bd      	mov	sp, r7
 8022944:	bd80      	pop	{r7, pc}

08022946 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8022946:	b580      	push	{r7, lr}
 8022948:	b086      	sub	sp, #24
 802294a:	af00      	add	r7, sp, #0
 802294c:	6078      	str	r0, [r7, #4]
 802294e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	6819      	ldr	r1, [r3, #0]
 8022954:	f107 030c 	add.w	r3, r7, #12
 8022958:	2200      	movs	r2, #0
 802295a:	4618      	mov	r0, r3
 802295c:	f7f0 fb70 	bl	8013040 <osMessageGet>

  if(event.status == osEventMessage)
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	2b10      	cmp	r3, #16
 8022964:	d105      	bne.n	8022972 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8022966:	693b      	ldr	r3, [r7, #16]
 8022968:	461a      	mov	r2, r3
 802296a:	683b      	ldr	r3, [r7, #0]
 802296c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 802296e:	2300      	movs	r3, #0
 8022970:	e001      	b.n	8022976 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8022972:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8022976:	4618      	mov	r0, r3
 8022978:	3718      	adds	r7, #24
 802297a:	46bd      	mov	sp, r7
 802297c:	bd80      	pop	{r7, pc}

0802297e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 802297e:	b480      	push	{r7}
 8022980:	b083      	sub	sp, #12
 8022982:	af00      	add	r7, sp, #0
 8022984:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	681b      	ldr	r3, [r3, #0]
 802298a:	2b00      	cmp	r3, #0
 802298c:	d101      	bne.n	8022992 <sys_mbox_valid+0x14>
    return 0;
 802298e:	2300      	movs	r3, #0
 8022990:	e000      	b.n	8022994 <sys_mbox_valid+0x16>
  else
    return 1;
 8022992:	2301      	movs	r3, #1
}
 8022994:	4618      	mov	r0, r3
 8022996:	370c      	adds	r7, #12
 8022998:	46bd      	mov	sp, r7
 802299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802299e:	4770      	bx	lr

080229a0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80229a0:	b480      	push	{r7}
 80229a2:	b083      	sub	sp, #12
 80229a4:	af00      	add	r7, sp, #0
 80229a6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	2200      	movs	r2, #0
 80229ac:	601a      	str	r2, [r3, #0]
}
 80229ae:	bf00      	nop
 80229b0:	370c      	adds	r7, #12
 80229b2:	46bd      	mov	sp, r7
 80229b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229b8:	4770      	bx	lr

080229ba <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80229ba:	b580      	push	{r7, lr}
 80229bc:	b084      	sub	sp, #16
 80229be:	af00      	add	r7, sp, #0
 80229c0:	6078      	str	r0, [r7, #4]
 80229c2:	460b      	mov	r3, r1
 80229c4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80229c6:	2300      	movs	r3, #0
 80229c8:	60bb      	str	r3, [r7, #8]
 80229ca:	2300      	movs	r3, #0
 80229cc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80229ce:	f107 0308 	add.w	r3, r7, #8
 80229d2:	2101      	movs	r1, #1
 80229d4:	4618      	mov	r0, r3
 80229d6:	f7f0 f9f3 	bl	8012dc0 <osSemaphoreCreate>
 80229da:	4602      	mov	r2, r0
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	681b      	ldr	r3, [r3, #0]
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d102      	bne.n	80229ee <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80229e8:	f04f 33ff 	mov.w	r3, #4294967295
 80229ec:	e009      	b.n	8022a02 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80229ee:	78fb      	ldrb	r3, [r7, #3]
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	d105      	bne.n	8022a00 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	2100      	movs	r1, #0
 80229fa:	4618      	mov	r0, r3
 80229fc:	f7f0 fa20 	bl	8012e40 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8022a00:	2300      	movs	r3, #0
}
 8022a02:	4618      	mov	r0, r3
 8022a04:	3710      	adds	r7, #16
 8022a06:	46bd      	mov	sp, r7
 8022a08:	bd80      	pop	{r7, pc}

08022a0a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8022a0a:	b580      	push	{r7, lr}
 8022a0c:	b084      	sub	sp, #16
 8022a0e:	af00      	add	r7, sp, #0
 8022a10:	6078      	str	r0, [r7, #4]
 8022a12:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8022a14:	f7f0 f8bc 	bl	8012b90 <osKernelSysTick>
 8022a18:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8022a1a:	683b      	ldr	r3, [r7, #0]
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d011      	beq.n	8022a44 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8022a20:	687b      	ldr	r3, [r7, #4]
 8022a22:	681b      	ldr	r3, [r3, #0]
 8022a24:	6839      	ldr	r1, [r7, #0]
 8022a26:	4618      	mov	r0, r3
 8022a28:	f7f0 fa0a 	bl	8012e40 <osSemaphoreWait>
 8022a2c:	4603      	mov	r3, r0
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	d105      	bne.n	8022a3e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8022a32:	f7f0 f8ad 	bl	8012b90 <osKernelSysTick>
 8022a36:	4602      	mov	r2, r0
 8022a38:	68fb      	ldr	r3, [r7, #12]
 8022a3a:	1ad3      	subs	r3, r2, r3
 8022a3c:	e012      	b.n	8022a64 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8022a42:	e00f      	b.n	8022a64 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8022a44:	bf00      	nop
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8022a4e:	4618      	mov	r0, r3
 8022a50:	f7f0 f9f6 	bl	8012e40 <osSemaphoreWait>
 8022a54:	4603      	mov	r3, r0
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	d1f5      	bne.n	8022a46 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8022a5a:	f7f0 f899 	bl	8012b90 <osKernelSysTick>
 8022a5e:	4602      	mov	r2, r0
 8022a60:	68fb      	ldr	r3, [r7, #12]
 8022a62:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022a64:	4618      	mov	r0, r3
 8022a66:	3710      	adds	r7, #16
 8022a68:	46bd      	mov	sp, r7
 8022a6a:	bd80      	pop	{r7, pc}

08022a6c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022a6c:	b580      	push	{r7, lr}
 8022a6e:	b082      	sub	sp, #8
 8022a70:	af00      	add	r7, sp, #0
 8022a72:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	4618      	mov	r0, r3
 8022a7a:	f7f0 fa2f 	bl	8012edc <osSemaphoreRelease>
}
 8022a7e:	bf00      	nop
 8022a80:	3708      	adds	r7, #8
 8022a82:	46bd      	mov	sp, r7
 8022a84:	bd80      	pop	{r7, pc}

08022a86 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8022a86:	b580      	push	{r7, lr}
 8022a88:	b082      	sub	sp, #8
 8022a8a:	af00      	add	r7, sp, #0
 8022a8c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	4618      	mov	r0, r3
 8022a94:	f7f0 fa58 	bl	8012f48 <osSemaphoreDelete>
}
 8022a98:	bf00      	nop
 8022a9a:	3708      	adds	r7, #8
 8022a9c:	46bd      	mov	sp, r7
 8022a9e:	bd80      	pop	{r7, pc}

08022aa0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022aa0:	b480      	push	{r7}
 8022aa2:	b083      	sub	sp, #12
 8022aa4:	af00      	add	r7, sp, #0
 8022aa6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	681b      	ldr	r3, [r3, #0]
 8022aac:	2b00      	cmp	r3, #0
 8022aae:	d101      	bne.n	8022ab4 <sys_sem_valid+0x14>
    return 0;
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	e000      	b.n	8022ab6 <sys_sem_valid+0x16>
  else
    return 1;
 8022ab4:	2301      	movs	r3, #1
}
 8022ab6:	4618      	mov	r0, r3
 8022ab8:	370c      	adds	r7, #12
 8022aba:	46bd      	mov	sp, r7
 8022abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ac0:	4770      	bx	lr

08022ac2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8022ac2:	b480      	push	{r7}
 8022ac4:	b083      	sub	sp, #12
 8022ac6:	af00      	add	r7, sp, #0
 8022ac8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	2200      	movs	r2, #0
 8022ace:	601a      	str	r2, [r3, #0]
}
 8022ad0:	bf00      	nop
 8022ad2:	370c      	adds	r7, #12
 8022ad4:	46bd      	mov	sp, r7
 8022ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ada:	4770      	bx	lr

08022adc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022adc:	b580      	push	{r7, lr}
 8022ade:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022ae0:	4803      	ldr	r0, [pc, #12]	@ (8022af0 <sys_init+0x14>)
 8022ae2:	f7f0 f8d1 	bl	8012c88 <osMutexCreate>
 8022ae6:	4603      	mov	r3, r0
 8022ae8:	4a02      	ldr	r2, [pc, #8]	@ (8022af4 <sys_init+0x18>)
 8022aea:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8022aec:	bf00      	nop
 8022aee:	bd80      	pop	{r7, pc}
 8022af0:	08028070 	.word	0x08028070
 8022af4:	20018d1c 	.word	0x20018d1c

08022af8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022af8:	b580      	push	{r7, lr}
 8022afa:	b084      	sub	sp, #16
 8022afc:	af00      	add	r7, sp, #0
 8022afe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8022b00:	2300      	movs	r3, #0
 8022b02:	60bb      	str	r3, [r7, #8]
 8022b04:	2300      	movs	r3, #0
 8022b06:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022b08:	f107 0308 	add.w	r3, r7, #8
 8022b0c:	4618      	mov	r0, r3
 8022b0e:	f7f0 f8bb 	bl	8012c88 <osMutexCreate>
 8022b12:	4602      	mov	r2, r0
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d102      	bne.n	8022b26 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022b20:	f04f 33ff 	mov.w	r3, #4294967295
 8022b24:	e000      	b.n	8022b28 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022b26:	2300      	movs	r3, #0
}
 8022b28:	4618      	mov	r0, r3
 8022b2a:	3710      	adds	r7, #16
 8022b2c:	46bd      	mov	sp, r7
 8022b2e:	bd80      	pop	{r7, pc}

08022b30 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022b30:	b580      	push	{r7, lr}
 8022b32:	b082      	sub	sp, #8
 8022b34:	af00      	add	r7, sp, #0
 8022b36:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8022b40:	4618      	mov	r0, r3
 8022b42:	f7f0 f8b9 	bl	8012cb8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8022b46:	bf00      	nop
 8022b48:	3708      	adds	r7, #8
 8022b4a:	46bd      	mov	sp, r7
 8022b4c:	bd80      	pop	{r7, pc}

08022b4e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022b4e:	b580      	push	{r7, lr}
 8022b50:	b082      	sub	sp, #8
 8022b52:	af00      	add	r7, sp, #0
 8022b54:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	4618      	mov	r0, r3
 8022b5c:	f7f0 f8fa 	bl	8012d54 <osMutexRelease>
}
 8022b60:	bf00      	nop
 8022b62:	3708      	adds	r7, #8
 8022b64:	46bd      	mov	sp, r7
 8022b66:	bd80      	pop	{r7, pc}

08022b68 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8022b68:	b580      	push	{r7, lr}
 8022b6a:	b08c      	sub	sp, #48	@ 0x30
 8022b6c:	af00      	add	r7, sp, #0
 8022b6e:	60f8      	str	r0, [r7, #12]
 8022b70:	60b9      	str	r1, [r7, #8]
 8022b72:	607a      	str	r2, [r7, #4]
 8022b74:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022b76:	f107 0314 	add.w	r3, r7, #20
 8022b7a:	2200      	movs	r2, #0
 8022b7c:	601a      	str	r2, [r3, #0]
 8022b7e:	605a      	str	r2, [r3, #4]
 8022b80:	609a      	str	r2, [r3, #8]
 8022b82:	60da      	str	r2, [r3, #12]
 8022b84:	611a      	str	r2, [r3, #16]
 8022b86:	615a      	str	r2, [r3, #20]
 8022b88:	619a      	str	r2, [r3, #24]
 8022b8a:	68fb      	ldr	r3, [r7, #12]
 8022b8c:	617b      	str	r3, [r7, #20]
 8022b8e:	68bb      	ldr	r3, [r7, #8]
 8022b90:	61bb      	str	r3, [r7, #24]
 8022b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022b94:	b21b      	sxth	r3, r3
 8022b96:	83bb      	strh	r3, [r7, #28]
 8022b98:	683b      	ldr	r3, [r7, #0]
 8022b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8022b9c:	f107 0314 	add.w	r3, r7, #20
 8022ba0:	6879      	ldr	r1, [r7, #4]
 8022ba2:	4618      	mov	r0, r3
 8022ba4:	f7f0 f804 	bl	8012bb0 <osThreadCreate>
 8022ba8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8022baa:	4618      	mov	r0, r3
 8022bac:	3730      	adds	r7, #48	@ 0x30
 8022bae:	46bd      	mov	sp, r7
 8022bb0:	bd80      	pop	{r7, pc}
	...

08022bb4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022bb4:	b580      	push	{r7, lr}
 8022bb6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8022bb8:	4b04      	ldr	r3, [pc, #16]	@ (8022bcc <sys_arch_protect+0x18>)
 8022bba:	681b      	ldr	r3, [r3, #0]
 8022bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8022bc0:	4618      	mov	r0, r3
 8022bc2:	f7f0 f879 	bl	8012cb8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8022bc6:	2301      	movs	r3, #1
}
 8022bc8:	4618      	mov	r0, r3
 8022bca:	bd80      	pop	{r7, pc}
 8022bcc:	20018d1c 	.word	0x20018d1c

08022bd0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022bd0:	b580      	push	{r7, lr}
 8022bd2:	b082      	sub	sp, #8
 8022bd4:	af00      	add	r7, sp, #0
 8022bd6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022bd8:	4b04      	ldr	r3, [pc, #16]	@ (8022bec <sys_arch_unprotect+0x1c>)
 8022bda:	681b      	ldr	r3, [r3, #0]
 8022bdc:	4618      	mov	r0, r3
 8022bde:	f7f0 f8b9 	bl	8012d54 <osMutexRelease>
}
 8022be2:	bf00      	nop
 8022be4:	3708      	adds	r7, #8
 8022be6:	46bd      	mov	sp, r7
 8022be8:	bd80      	pop	{r7, pc}
 8022bea:	bf00      	nop
 8022bec:	20018d1c 	.word	0x20018d1c

08022bf0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8022bf0:	b580      	push	{r7, lr}
 8022bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8022bf4:	2201      	movs	r2, #1
 8022bf6:	490e      	ldr	r1, [pc, #56]	@ (8022c30 <MX_USB_HOST_Init+0x40>)
 8022bf8:	480e      	ldr	r0, [pc, #56]	@ (8022c34 <MX_USB_HOST_Init+0x44>)
 8022bfa:	f7ee f8c1 	bl	8010d80 <USBH_Init>
 8022bfe:	4603      	mov	r3, r0
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d001      	beq.n	8022c08 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8022c04:	f7df fc9e 	bl	8002544 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8022c08:	490b      	ldr	r1, [pc, #44]	@ (8022c38 <MX_USB_HOST_Init+0x48>)
 8022c0a:	480a      	ldr	r0, [pc, #40]	@ (8022c34 <MX_USB_HOST_Init+0x44>)
 8022c0c:	f7ee f98d 	bl	8010f2a <USBH_RegisterClass>
 8022c10:	4603      	mov	r3, r0
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d001      	beq.n	8022c1a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8022c16:	f7df fc95 	bl	8002544 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8022c1a:	4806      	ldr	r0, [pc, #24]	@ (8022c34 <MX_USB_HOST_Init+0x44>)
 8022c1c:	f7ee fa11 	bl	8011042 <USBH_Start>
 8022c20:	4603      	mov	r3, r0
 8022c22:	2b00      	cmp	r3, #0
 8022c24:	d001      	beq.n	8022c2a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8022c26:	f7df fc8d 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8022c2a:	bf00      	nop
 8022c2c:	bd80      	pop	{r7, pc}
 8022c2e:	bf00      	nop
 8022c30:	08022c3d 	.word	0x08022c3d
 8022c34:	20018d20 	.word	0x20018d20
 8022c38:	20000020 	.word	0x20000020

08022c3c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8022c3c:	b480      	push	{r7}
 8022c3e:	b083      	sub	sp, #12
 8022c40:	af00      	add	r7, sp, #0
 8022c42:	6078      	str	r0, [r7, #4]
 8022c44:	460b      	mov	r3, r1
 8022c46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8022c48:	78fb      	ldrb	r3, [r7, #3]
 8022c4a:	3b01      	subs	r3, #1
 8022c4c:	2b04      	cmp	r3, #4
 8022c4e:	d819      	bhi.n	8022c84 <USBH_UserProcess+0x48>
 8022c50:	a201      	add	r2, pc, #4	@ (adr r2, 8022c58 <USBH_UserProcess+0x1c>)
 8022c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022c56:	bf00      	nop
 8022c58:	08022c85 	.word	0x08022c85
 8022c5c:	08022c75 	.word	0x08022c75
 8022c60:	08022c85 	.word	0x08022c85
 8022c64:	08022c7d 	.word	0x08022c7d
 8022c68:	08022c6d 	.word	0x08022c6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8022c6c:	4b09      	ldr	r3, [pc, #36]	@ (8022c94 <USBH_UserProcess+0x58>)
 8022c6e:	2203      	movs	r2, #3
 8022c70:	701a      	strb	r2, [r3, #0]
  break;
 8022c72:	e008      	b.n	8022c86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8022c74:	4b07      	ldr	r3, [pc, #28]	@ (8022c94 <USBH_UserProcess+0x58>)
 8022c76:	2202      	movs	r2, #2
 8022c78:	701a      	strb	r2, [r3, #0]
  break;
 8022c7a:	e004      	b.n	8022c86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8022c7c:	4b05      	ldr	r3, [pc, #20]	@ (8022c94 <USBH_UserProcess+0x58>)
 8022c7e:	2201      	movs	r2, #1
 8022c80:	701a      	strb	r2, [r3, #0]
  break;
 8022c82:	e000      	b.n	8022c86 <USBH_UserProcess+0x4a>

  default:
  break;
 8022c84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8022c86:	bf00      	nop
 8022c88:	370c      	adds	r7, #12
 8022c8a:	46bd      	mov	sp, r7
 8022c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c90:	4770      	bx	lr
 8022c92:	bf00      	nop
 8022c94:	20019104 	.word	0x20019104

08022c98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8022c98:	b580      	push	{r7, lr}
 8022c9a:	b08a      	sub	sp, #40	@ 0x28
 8022c9c:	af00      	add	r7, sp, #0
 8022c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022ca0:	f107 0314 	add.w	r3, r7, #20
 8022ca4:	2200      	movs	r2, #0
 8022ca6:	601a      	str	r2, [r3, #0]
 8022ca8:	605a      	str	r2, [r3, #4]
 8022caa:	609a      	str	r2, [r3, #8]
 8022cac:	60da      	str	r2, [r3, #12]
 8022cae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	681b      	ldr	r3, [r3, #0]
 8022cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8022cb8:	d13c      	bne.n	8022d34 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022cba:	4b20      	ldr	r3, [pc, #128]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022cc0:	f043 0301 	orr.w	r3, r3, #1
 8022cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8022cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022cca:	f003 0301 	and.w	r3, r3, #1
 8022cce:	613b      	str	r3, [r7, #16]
 8022cd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8022cd2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8022cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022cd8:	2302      	movs	r3, #2
 8022cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022cdc:	2300      	movs	r3, #0
 8022cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022ce0:	2303      	movs	r3, #3
 8022ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022ce4:	230a      	movs	r3, #10
 8022ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022ce8:	f107 0314 	add.w	r3, r7, #20
 8022cec:	4619      	mov	r1, r3
 8022cee:	4814      	ldr	r0, [pc, #80]	@ (8022d40 <HAL_HCD_MspInit+0xa8>)
 8022cf0:	f7e3 fa26 	bl	8006140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022cf4:	4b11      	ldr	r3, [pc, #68]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022cf8:	4a10      	ldr	r2, [pc, #64]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022cfe:	6353      	str	r3, [r2, #52]	@ 0x34
 8022d00:	4b0e      	ldr	r3, [pc, #56]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022d08:	60fb      	str	r3, [r7, #12]
 8022d0a:	68fb      	ldr	r3, [r7, #12]
 8022d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022d10:	4a0a      	ldr	r2, [pc, #40]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8022d16:	6453      	str	r3, [r2, #68]	@ 0x44
 8022d18:	4b08      	ldr	r3, [pc, #32]	@ (8022d3c <HAL_HCD_MspInit+0xa4>)
 8022d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022d20:	60bb      	str	r3, [r7, #8]
 8022d22:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8022d24:	2200      	movs	r2, #0
 8022d26:	2105      	movs	r1, #5
 8022d28:	2043      	movs	r0, #67	@ 0x43
 8022d2a:	f7e1 fba7 	bl	800447c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022d2e:	2043      	movs	r0, #67	@ 0x43
 8022d30:	f7e1 fbc0 	bl	80044b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022d34:	bf00      	nop
 8022d36:	3728      	adds	r7, #40	@ 0x28
 8022d38:	46bd      	mov	sp, r7
 8022d3a:	bd80      	pop	{r7, pc}
 8022d3c:	40023800 	.word	0x40023800
 8022d40:	40020000 	.word	0x40020000

08022d44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8022d44:	b580      	push	{r7, lr}
 8022d46:	b082      	sub	sp, #8
 8022d48:	af00      	add	r7, sp, #0
 8022d4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8022d52:	4618      	mov	r0, r3
 8022d54:	f7ee fe27 	bl	80119a6 <USBH_LL_IncTimer>
}
 8022d58:	bf00      	nop
 8022d5a:	3708      	adds	r7, #8
 8022d5c:	46bd      	mov	sp, r7
 8022d5e:	bd80      	pop	{r7, pc}

08022d60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8022d60:	b580      	push	{r7, lr}
 8022d62:	b082      	sub	sp, #8
 8022d64:	af00      	add	r7, sp, #0
 8022d66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8022d6e:	4618      	mov	r0, r3
 8022d70:	f7ee fe6b 	bl	8011a4a <USBH_LL_Connect>
}
 8022d74:	bf00      	nop
 8022d76:	3708      	adds	r7, #8
 8022d78:	46bd      	mov	sp, r7
 8022d7a:	bd80      	pop	{r7, pc}

08022d7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8022d7c:	b580      	push	{r7, lr}
 8022d7e:	b082      	sub	sp, #8
 8022d80:	af00      	add	r7, sp, #0
 8022d82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8022d84:	687b      	ldr	r3, [r7, #4]
 8022d86:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	f7ee fe80 	bl	8011a90 <USBH_LL_Disconnect>
}
 8022d90:	bf00      	nop
 8022d92:	3708      	adds	r7, #8
 8022d94:	46bd      	mov	sp, r7
 8022d96:	bd80      	pop	{r7, pc}

08022d98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b082      	sub	sp, #8
 8022d9c:	af00      	add	r7, sp, #0
 8022d9e:	6078      	str	r0, [r7, #4]
 8022da0:	460b      	mov	r3, r1
 8022da2:	70fb      	strb	r3, [r7, #3]
 8022da4:	4613      	mov	r3, r2
 8022da6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8022dae:	4618      	mov	r0, r3
 8022db0:	f7ee feb5 	bl	8011b1e <USBH_LL_NotifyURBChange>
#endif
}
 8022db4:	bf00      	nop
 8022db6:	3708      	adds	r7, #8
 8022db8:	46bd      	mov	sp, r7
 8022dba:	bd80      	pop	{r7, pc}

08022dbc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8022dbc:	b580      	push	{r7, lr}
 8022dbe:	b082      	sub	sp, #8
 8022dc0:	af00      	add	r7, sp, #0
 8022dc2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8022dca:	4618      	mov	r0, r3
 8022dcc:	f7ee fe15 	bl	80119fa <USBH_LL_PortEnabled>
}
 8022dd0:	bf00      	nop
 8022dd2:	3708      	adds	r7, #8
 8022dd4:	46bd      	mov	sp, r7
 8022dd6:	bd80      	pop	{r7, pc}

08022dd8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8022dd8:	b580      	push	{r7, lr}
 8022dda:	b082      	sub	sp, #8
 8022ddc:	af00      	add	r7, sp, #0
 8022dde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8022de0:	687b      	ldr	r3, [r7, #4]
 8022de2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8022de6:	4618      	mov	r0, r3
 8022de8:	f7ee fe21 	bl	8011a2e <USBH_LL_PortDisabled>
}
 8022dec:	bf00      	nop
 8022dee:	3708      	adds	r7, #8
 8022df0:	46bd      	mov	sp, r7
 8022df2:	bd80      	pop	{r7, pc}

08022df4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8022df4:	b580      	push	{r7, lr}
 8022df6:	b082      	sub	sp, #8
 8022df8:	af00      	add	r7, sp, #0
 8022dfa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8022dfc:	687b      	ldr	r3, [r7, #4]
 8022dfe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8022e02:	2b01      	cmp	r3, #1
 8022e04:	d12a      	bne.n	8022e5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8022e06:	4a18      	ldr	r2, [pc, #96]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	4a15      	ldr	r2, [pc, #84]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e12:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022e16:	4b14      	ldr	r3, [pc, #80]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8022e1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8022e1e:	4b12      	ldr	r3, [pc, #72]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e20:	2208      	movs	r2, #8
 8022e22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8022e24:	4b10      	ldr	r3, [pc, #64]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e26:	2201      	movs	r2, #1
 8022e28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e2c:	2200      	movs	r2, #0
 8022e2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8022e30:	4b0d      	ldr	r3, [pc, #52]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e32:	2202      	movs	r2, #2
 8022e34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022e36:	4b0c      	ldr	r3, [pc, #48]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e38:	2200      	movs	r2, #0
 8022e3a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8022e3c:	480a      	ldr	r0, [pc, #40]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e3e:	f7e3 fb5c 	bl	80064fa <HAL_HCD_Init>
 8022e42:	4603      	mov	r3, r0
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	d001      	beq.n	8022e4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8022e48:	f7df fb7c 	bl	8002544 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8022e4c:	4806      	ldr	r0, [pc, #24]	@ (8022e68 <USBH_LL_Init+0x74>)
 8022e4e:	f7e3 ff40 	bl	8006cd2 <HAL_HCD_GetCurrentFrame>
 8022e52:	4603      	mov	r3, r0
 8022e54:	4619      	mov	r1, r3
 8022e56:	6878      	ldr	r0, [r7, #4]
 8022e58:	f7ee fd96 	bl	8011988 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8022e5c:	2300      	movs	r3, #0
}
 8022e5e:	4618      	mov	r0, r3
 8022e60:	3708      	adds	r7, #8
 8022e62:	46bd      	mov	sp, r7
 8022e64:	bd80      	pop	{r7, pc}
 8022e66:	bf00      	nop
 8022e68:	20019108 	.word	0x20019108

08022e6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b084      	sub	sp, #16
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022e74:	2300      	movs	r3, #0
 8022e76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022e78:	2300      	movs	r3, #0
 8022e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8022e82:	4618      	mov	r0, r3
 8022e84:	f7e3 feaf 	bl	8006be6 <HAL_HCD_Start>
 8022e88:	4603      	mov	r3, r0
 8022e8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8022e8c:	7bfb      	ldrb	r3, [r7, #15]
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f000 f95c 	bl	802314c <USBH_Get_USB_Status>
 8022e94:	4603      	mov	r3, r0
 8022e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	3710      	adds	r7, #16
 8022e9e:	46bd      	mov	sp, r7
 8022ea0:	bd80      	pop	{r7, pc}

08022ea2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8022ea2:	b580      	push	{r7, lr}
 8022ea4:	b084      	sub	sp, #16
 8022ea6:	af00      	add	r7, sp, #0
 8022ea8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022eaa:	2300      	movs	r3, #0
 8022eac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022eae:	2300      	movs	r3, #0
 8022eb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8022eb8:	4618      	mov	r0, r3
 8022eba:	f7e3 feb7 	bl	8006c2c <HAL_HCD_Stop>
 8022ebe:	4603      	mov	r3, r0
 8022ec0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8022ec2:	7bfb      	ldrb	r3, [r7, #15]
 8022ec4:	4618      	mov	r0, r3
 8022ec6:	f000 f941 	bl	802314c <USBH_Get_USB_Status>
 8022eca:	4603      	mov	r3, r0
 8022ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8022ed0:	4618      	mov	r0, r3
 8022ed2:	3710      	adds	r7, #16
 8022ed4:	46bd      	mov	sp, r7
 8022ed6:	bd80      	pop	{r7, pc}

08022ed8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8022ed8:	b580      	push	{r7, lr}
 8022eda:	b084      	sub	sp, #16
 8022edc:	af00      	add	r7, sp, #0
 8022ede:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8022ee0:	2301      	movs	r3, #1
 8022ee2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8022eea:	4618      	mov	r0, r3
 8022eec:	f7e3 feff 	bl	8006cee <HAL_HCD_GetCurrentSpeed>
 8022ef0:	4603      	mov	r3, r0
 8022ef2:	2b02      	cmp	r3, #2
 8022ef4:	d00c      	beq.n	8022f10 <USBH_LL_GetSpeed+0x38>
 8022ef6:	2b02      	cmp	r3, #2
 8022ef8:	d80d      	bhi.n	8022f16 <USBH_LL_GetSpeed+0x3e>
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d002      	beq.n	8022f04 <USBH_LL_GetSpeed+0x2c>
 8022efe:	2b01      	cmp	r3, #1
 8022f00:	d003      	beq.n	8022f0a <USBH_LL_GetSpeed+0x32>
 8022f02:	e008      	b.n	8022f16 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8022f04:	2300      	movs	r3, #0
 8022f06:	73fb      	strb	r3, [r7, #15]
    break;
 8022f08:	e008      	b.n	8022f1c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8022f0a:	2301      	movs	r3, #1
 8022f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8022f0e:	e005      	b.n	8022f1c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8022f10:	2302      	movs	r3, #2
 8022f12:	73fb      	strb	r3, [r7, #15]
    break;
 8022f14:	e002      	b.n	8022f1c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8022f16:	2301      	movs	r3, #1
 8022f18:	73fb      	strb	r3, [r7, #15]
    break;
 8022f1a:	bf00      	nop
  }
  return  speed;
 8022f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8022f1e:	4618      	mov	r0, r3
 8022f20:	3710      	adds	r7, #16
 8022f22:	46bd      	mov	sp, r7
 8022f24:	bd80      	pop	{r7, pc}

08022f26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8022f26:	b580      	push	{r7, lr}
 8022f28:	b084      	sub	sp, #16
 8022f2a:	af00      	add	r7, sp, #0
 8022f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022f2e:	2300      	movs	r3, #0
 8022f30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022f32:	2300      	movs	r3, #0
 8022f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8022f3c:	4618      	mov	r0, r3
 8022f3e:	f7e3 fe92 	bl	8006c66 <HAL_HCD_ResetPort>
 8022f42:	4603      	mov	r3, r0
 8022f44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8022f46:	7bfb      	ldrb	r3, [r7, #15]
 8022f48:	4618      	mov	r0, r3
 8022f4a:	f000 f8ff 	bl	802314c <USBH_Get_USB_Status>
 8022f4e:	4603      	mov	r3, r0
 8022f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8022f54:	4618      	mov	r0, r3
 8022f56:	3710      	adds	r7, #16
 8022f58:	46bd      	mov	sp, r7
 8022f5a:	bd80      	pop	{r7, pc}

08022f5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8022f5c:	b580      	push	{r7, lr}
 8022f5e:	b082      	sub	sp, #8
 8022f60:	af00      	add	r7, sp, #0
 8022f62:	6078      	str	r0, [r7, #4]
 8022f64:	460b      	mov	r3, r1
 8022f66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8022f6e:	78fa      	ldrb	r2, [r7, #3]
 8022f70:	4611      	mov	r1, r2
 8022f72:	4618      	mov	r0, r3
 8022f74:	f7e3 fe99 	bl	8006caa <HAL_HCD_HC_GetXferCount>
 8022f78:	4603      	mov	r3, r0
}
 8022f7a:	4618      	mov	r0, r3
 8022f7c:	3708      	adds	r7, #8
 8022f7e:	46bd      	mov	sp, r7
 8022f80:	bd80      	pop	{r7, pc}

08022f82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8022f82:	b590      	push	{r4, r7, lr}
 8022f84:	b089      	sub	sp, #36	@ 0x24
 8022f86:	af04      	add	r7, sp, #16
 8022f88:	6078      	str	r0, [r7, #4]
 8022f8a:	4608      	mov	r0, r1
 8022f8c:	4611      	mov	r1, r2
 8022f8e:	461a      	mov	r2, r3
 8022f90:	4603      	mov	r3, r0
 8022f92:	70fb      	strb	r3, [r7, #3]
 8022f94:	460b      	mov	r3, r1
 8022f96:	70bb      	strb	r3, [r7, #2]
 8022f98:	4613      	mov	r3, r2
 8022f9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022f9c:	2300      	movs	r3, #0
 8022f9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022fa0:	2300      	movs	r3, #0
 8022fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8022faa:	787c      	ldrb	r4, [r7, #1]
 8022fac:	78ba      	ldrb	r2, [r7, #2]
 8022fae:	78f9      	ldrb	r1, [r7, #3]
 8022fb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8022fb2:	9302      	str	r3, [sp, #8]
 8022fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8022fb8:	9301      	str	r3, [sp, #4]
 8022fba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8022fbe:	9300      	str	r3, [sp, #0]
 8022fc0:	4623      	mov	r3, r4
 8022fc2:	f7e3 fafc 	bl	80065be <HAL_HCD_HC_Init>
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8022fca:	7bfb      	ldrb	r3, [r7, #15]
 8022fcc:	4618      	mov	r0, r3
 8022fce:	f000 f8bd 	bl	802314c <USBH_Get_USB_Status>
 8022fd2:	4603      	mov	r3, r0
 8022fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8022fd8:	4618      	mov	r0, r3
 8022fda:	3714      	adds	r7, #20
 8022fdc:	46bd      	mov	sp, r7
 8022fde:	bd90      	pop	{r4, r7, pc}

08022fe0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8022fe0:	b580      	push	{r7, lr}
 8022fe2:	b084      	sub	sp, #16
 8022fe4:	af00      	add	r7, sp, #0
 8022fe6:	6078      	str	r0, [r7, #4]
 8022fe8:	460b      	mov	r3, r1
 8022fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022fec:	2300      	movs	r3, #0
 8022fee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8022ff0:	2300      	movs	r3, #0
 8022ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8022ffa:	78fa      	ldrb	r2, [r7, #3]
 8022ffc:	4611      	mov	r1, r2
 8022ffe:	4618      	mov	r0, r3
 8023000:	f7e3 fb6c 	bl	80066dc <HAL_HCD_HC_Halt>
 8023004:	4603      	mov	r3, r0
 8023006:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023008:	7bfb      	ldrb	r3, [r7, #15]
 802300a:	4618      	mov	r0, r3
 802300c:	f000 f89e 	bl	802314c <USBH_Get_USB_Status>
 8023010:	4603      	mov	r3, r0
 8023012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023014:	7bbb      	ldrb	r3, [r7, #14]
}
 8023016:	4618      	mov	r0, r3
 8023018:	3710      	adds	r7, #16
 802301a:	46bd      	mov	sp, r7
 802301c:	bd80      	pop	{r7, pc}

0802301e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802301e:	b590      	push	{r4, r7, lr}
 8023020:	b089      	sub	sp, #36	@ 0x24
 8023022:	af04      	add	r7, sp, #16
 8023024:	6078      	str	r0, [r7, #4]
 8023026:	4608      	mov	r0, r1
 8023028:	4611      	mov	r1, r2
 802302a:	461a      	mov	r2, r3
 802302c:	4603      	mov	r3, r0
 802302e:	70fb      	strb	r3, [r7, #3]
 8023030:	460b      	mov	r3, r1
 8023032:	70bb      	strb	r3, [r7, #2]
 8023034:	4613      	mov	r3, r2
 8023036:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023038:	2300      	movs	r3, #0
 802303a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802303c:	2300      	movs	r3, #0
 802303e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8023040:	687b      	ldr	r3, [r7, #4]
 8023042:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8023046:	787c      	ldrb	r4, [r7, #1]
 8023048:	78ba      	ldrb	r2, [r7, #2]
 802304a:	78f9      	ldrb	r1, [r7, #3]
 802304c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8023050:	9303      	str	r3, [sp, #12]
 8023052:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8023054:	9302      	str	r3, [sp, #8]
 8023056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023058:	9301      	str	r3, [sp, #4]
 802305a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802305e:	9300      	str	r3, [sp, #0]
 8023060:	4623      	mov	r3, r4
 8023062:	f7e3 fb5f 	bl	8006724 <HAL_HCD_HC_SubmitRequest>
 8023066:	4603      	mov	r3, r0
 8023068:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802306a:	7bfb      	ldrb	r3, [r7, #15]
 802306c:	4618      	mov	r0, r3
 802306e:	f000 f86d 	bl	802314c <USBH_Get_USB_Status>
 8023072:	4603      	mov	r3, r0
 8023074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023076:	7bbb      	ldrb	r3, [r7, #14]
}
 8023078:	4618      	mov	r0, r3
 802307a:	3714      	adds	r7, #20
 802307c:	46bd      	mov	sp, r7
 802307e:	bd90      	pop	{r4, r7, pc}

08023080 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023080:	b580      	push	{r7, lr}
 8023082:	b082      	sub	sp, #8
 8023084:	af00      	add	r7, sp, #0
 8023086:	6078      	str	r0, [r7, #4]
 8023088:	460b      	mov	r3, r1
 802308a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8023092:	78fa      	ldrb	r2, [r7, #3]
 8023094:	4611      	mov	r1, r2
 8023096:	4618      	mov	r0, r3
 8023098:	f7e3 fdf3 	bl	8006c82 <HAL_HCD_HC_GetURBState>
 802309c:	4603      	mov	r3, r0
}
 802309e:	4618      	mov	r0, r3
 80230a0:	3708      	adds	r7, #8
 80230a2:	46bd      	mov	sp, r7
 80230a4:	bd80      	pop	{r7, pc}

080230a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80230a6:	b580      	push	{r7, lr}
 80230a8:	b082      	sub	sp, #8
 80230aa:	af00      	add	r7, sp, #0
 80230ac:	6078      	str	r0, [r7, #4]
 80230ae:	460b      	mov	r3, r1
 80230b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80230b8:	2b01      	cmp	r3, #1
 80230ba:	d103      	bne.n	80230c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80230bc:	78fb      	ldrb	r3, [r7, #3]
 80230be:	4618      	mov	r0, r3
 80230c0:	f000 f870 	bl	80231a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80230c4:	20c8      	movs	r0, #200	@ 0xc8
 80230c6:	f7e0 fe5d 	bl	8003d84 <HAL_Delay>
  return USBH_OK;
 80230ca:	2300      	movs	r3, #0
}
 80230cc:	4618      	mov	r0, r3
 80230ce:	3708      	adds	r7, #8
 80230d0:	46bd      	mov	sp, r7
 80230d2:	bd80      	pop	{r7, pc}

080230d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80230d4:	b480      	push	{r7}
 80230d6:	b085      	sub	sp, #20
 80230d8:	af00      	add	r7, sp, #0
 80230da:	6078      	str	r0, [r7, #4]
 80230dc:	460b      	mov	r3, r1
 80230de:	70fb      	strb	r3, [r7, #3]
 80230e0:	4613      	mov	r3, r2
 80230e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80230e4:	687b      	ldr	r3, [r7, #4]
 80230e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80230ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80230ec:	78fb      	ldrb	r3, [r7, #3]
 80230ee:	68fa      	ldr	r2, [r7, #12]
 80230f0:	212c      	movs	r1, #44	@ 0x2c
 80230f2:	fb01 f303 	mul.w	r3, r1, r3
 80230f6:	4413      	add	r3, r2
 80230f8:	333b      	adds	r3, #59	@ 0x3b
 80230fa:	781b      	ldrb	r3, [r3, #0]
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	d009      	beq.n	8023114 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8023100:	78fb      	ldrb	r3, [r7, #3]
 8023102:	68fa      	ldr	r2, [r7, #12]
 8023104:	212c      	movs	r1, #44	@ 0x2c
 8023106:	fb01 f303 	mul.w	r3, r1, r3
 802310a:	4413      	add	r3, r2
 802310c:	3354      	adds	r3, #84	@ 0x54
 802310e:	78ba      	ldrb	r2, [r7, #2]
 8023110:	701a      	strb	r2, [r3, #0]
 8023112:	e008      	b.n	8023126 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8023114:	78fb      	ldrb	r3, [r7, #3]
 8023116:	68fa      	ldr	r2, [r7, #12]
 8023118:	212c      	movs	r1, #44	@ 0x2c
 802311a:	fb01 f303 	mul.w	r3, r1, r3
 802311e:	4413      	add	r3, r2
 8023120:	3355      	adds	r3, #85	@ 0x55
 8023122:	78ba      	ldrb	r2, [r7, #2]
 8023124:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8023126:	2300      	movs	r3, #0
}
 8023128:	4618      	mov	r0, r3
 802312a:	3714      	adds	r7, #20
 802312c:	46bd      	mov	sp, r7
 802312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023132:	4770      	bx	lr

08023134 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8023134:	b580      	push	{r7, lr}
 8023136:	b082      	sub	sp, #8
 8023138:	af00      	add	r7, sp, #0
 802313a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802313c:	6878      	ldr	r0, [r7, #4]
 802313e:	f7e0 fe21 	bl	8003d84 <HAL_Delay>
}
 8023142:	bf00      	nop
 8023144:	3708      	adds	r7, #8
 8023146:	46bd      	mov	sp, r7
 8023148:	bd80      	pop	{r7, pc}
	...

0802314c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802314c:	b480      	push	{r7}
 802314e:	b085      	sub	sp, #20
 8023150:	af00      	add	r7, sp, #0
 8023152:	4603      	mov	r3, r0
 8023154:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023156:	2300      	movs	r3, #0
 8023158:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802315a:	79fb      	ldrb	r3, [r7, #7]
 802315c:	2b03      	cmp	r3, #3
 802315e:	d817      	bhi.n	8023190 <USBH_Get_USB_Status+0x44>
 8023160:	a201      	add	r2, pc, #4	@ (adr r2, 8023168 <USBH_Get_USB_Status+0x1c>)
 8023162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023166:	bf00      	nop
 8023168:	08023179 	.word	0x08023179
 802316c:	0802317f 	.word	0x0802317f
 8023170:	08023185 	.word	0x08023185
 8023174:	0802318b 	.word	0x0802318b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8023178:	2300      	movs	r3, #0
 802317a:	73fb      	strb	r3, [r7, #15]
    break;
 802317c:	e00b      	b.n	8023196 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802317e:	2302      	movs	r3, #2
 8023180:	73fb      	strb	r3, [r7, #15]
    break;
 8023182:	e008      	b.n	8023196 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8023184:	2301      	movs	r3, #1
 8023186:	73fb      	strb	r3, [r7, #15]
    break;
 8023188:	e005      	b.n	8023196 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802318a:	2302      	movs	r3, #2
 802318c:	73fb      	strb	r3, [r7, #15]
    break;
 802318e:	e002      	b.n	8023196 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8023190:	2302      	movs	r3, #2
 8023192:	73fb      	strb	r3, [r7, #15]
    break;
 8023194:	bf00      	nop
  }
  return usb_status;
 8023196:	7bfb      	ldrb	r3, [r7, #15]
}
 8023198:	4618      	mov	r0, r3
 802319a:	3714      	adds	r7, #20
 802319c:	46bd      	mov	sp, r7
 802319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a2:	4770      	bx	lr

080231a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80231a4:	b580      	push	{r7, lr}
 80231a6:	b084      	sub	sp, #16
 80231a8:	af00      	add	r7, sp, #0
 80231aa:	4603      	mov	r3, r0
 80231ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80231ae:	79fb      	ldrb	r3, [r7, #7]
 80231b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80231b2:	79fb      	ldrb	r3, [r7, #7]
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d102      	bne.n	80231be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80231b8:	2300      	movs	r3, #0
 80231ba:	73fb      	strb	r3, [r7, #15]
 80231bc:	e001      	b.n	80231c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80231be:	2301      	movs	r3, #1
 80231c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80231c2:	7bfb      	ldrb	r3, [r7, #15]
 80231c4:	461a      	mov	r2, r3
 80231c6:	2120      	movs	r1, #32
 80231c8:	4803      	ldr	r0, [pc, #12]	@ (80231d8 <MX_DriverVbusFS+0x34>)
 80231ca:	f7e3 f97d 	bl	80064c8 <HAL_GPIO_WritePin>
}
 80231ce:	bf00      	nop
 80231d0:	3710      	adds	r7, #16
 80231d2:	46bd      	mov	sp, r7
 80231d4:	bd80      	pop	{r7, pc}
 80231d6:	bf00      	nop
 80231d8:	40020c00 	.word	0x40020c00

080231dc <atoi>:
 80231dc:	220a      	movs	r2, #10
 80231de:	2100      	movs	r1, #0
 80231e0:	f000 b976 	b.w	80234d0 <strtol>

080231e4 <malloc>:
 80231e4:	4b02      	ldr	r3, [pc, #8]	@ (80231f0 <malloc+0xc>)
 80231e6:	4601      	mov	r1, r0
 80231e8:	6818      	ldr	r0, [r3, #0]
 80231ea:	f000 b82d 	b.w	8023248 <_malloc_r>
 80231ee:	bf00      	nop
 80231f0:	2000005c 	.word	0x2000005c

080231f4 <free>:
 80231f4:	4b02      	ldr	r3, [pc, #8]	@ (8023200 <free+0xc>)
 80231f6:	4601      	mov	r1, r0
 80231f8:	6818      	ldr	r0, [r3, #0]
 80231fa:	f000 bc09 	b.w	8023a10 <_free_r>
 80231fe:	bf00      	nop
 8023200:	2000005c 	.word	0x2000005c

08023204 <sbrk_aligned>:
 8023204:	b570      	push	{r4, r5, r6, lr}
 8023206:	4e0f      	ldr	r6, [pc, #60]	@ (8023244 <sbrk_aligned+0x40>)
 8023208:	460c      	mov	r4, r1
 802320a:	6831      	ldr	r1, [r6, #0]
 802320c:	4605      	mov	r5, r0
 802320e:	b911      	cbnz	r1, 8023216 <sbrk_aligned+0x12>
 8023210:	f000 fb82 	bl	8023918 <_sbrk_r>
 8023214:	6030      	str	r0, [r6, #0]
 8023216:	4621      	mov	r1, r4
 8023218:	4628      	mov	r0, r5
 802321a:	f000 fb7d 	bl	8023918 <_sbrk_r>
 802321e:	1c43      	adds	r3, r0, #1
 8023220:	d103      	bne.n	802322a <sbrk_aligned+0x26>
 8023222:	f04f 34ff 	mov.w	r4, #4294967295
 8023226:	4620      	mov	r0, r4
 8023228:	bd70      	pop	{r4, r5, r6, pc}
 802322a:	1cc4      	adds	r4, r0, #3
 802322c:	f024 0403 	bic.w	r4, r4, #3
 8023230:	42a0      	cmp	r0, r4
 8023232:	d0f8      	beq.n	8023226 <sbrk_aligned+0x22>
 8023234:	1a21      	subs	r1, r4, r0
 8023236:	4628      	mov	r0, r5
 8023238:	f000 fb6e 	bl	8023918 <_sbrk_r>
 802323c:	3001      	adds	r0, #1
 802323e:	d1f2      	bne.n	8023226 <sbrk_aligned+0x22>
 8023240:	e7ef      	b.n	8023222 <sbrk_aligned+0x1e>
 8023242:	bf00      	nop
 8023244:	2001940c 	.word	0x2001940c

08023248 <_malloc_r>:
 8023248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802324c:	1ccd      	adds	r5, r1, #3
 802324e:	f025 0503 	bic.w	r5, r5, #3
 8023252:	3508      	adds	r5, #8
 8023254:	2d0c      	cmp	r5, #12
 8023256:	bf38      	it	cc
 8023258:	250c      	movcc	r5, #12
 802325a:	2d00      	cmp	r5, #0
 802325c:	4606      	mov	r6, r0
 802325e:	db01      	blt.n	8023264 <_malloc_r+0x1c>
 8023260:	42a9      	cmp	r1, r5
 8023262:	d904      	bls.n	802326e <_malloc_r+0x26>
 8023264:	230c      	movs	r3, #12
 8023266:	6033      	str	r3, [r6, #0]
 8023268:	2000      	movs	r0, #0
 802326a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802326e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023344 <_malloc_r+0xfc>
 8023272:	f000 f869 	bl	8023348 <__malloc_lock>
 8023276:	f8d8 3000 	ldr.w	r3, [r8]
 802327a:	461c      	mov	r4, r3
 802327c:	bb44      	cbnz	r4, 80232d0 <_malloc_r+0x88>
 802327e:	4629      	mov	r1, r5
 8023280:	4630      	mov	r0, r6
 8023282:	f7ff ffbf 	bl	8023204 <sbrk_aligned>
 8023286:	1c43      	adds	r3, r0, #1
 8023288:	4604      	mov	r4, r0
 802328a:	d158      	bne.n	802333e <_malloc_r+0xf6>
 802328c:	f8d8 4000 	ldr.w	r4, [r8]
 8023290:	4627      	mov	r7, r4
 8023292:	2f00      	cmp	r7, #0
 8023294:	d143      	bne.n	802331e <_malloc_r+0xd6>
 8023296:	2c00      	cmp	r4, #0
 8023298:	d04b      	beq.n	8023332 <_malloc_r+0xea>
 802329a:	6823      	ldr	r3, [r4, #0]
 802329c:	4639      	mov	r1, r7
 802329e:	4630      	mov	r0, r6
 80232a0:	eb04 0903 	add.w	r9, r4, r3
 80232a4:	f000 fb38 	bl	8023918 <_sbrk_r>
 80232a8:	4581      	cmp	r9, r0
 80232aa:	d142      	bne.n	8023332 <_malloc_r+0xea>
 80232ac:	6821      	ldr	r1, [r4, #0]
 80232ae:	1a6d      	subs	r5, r5, r1
 80232b0:	4629      	mov	r1, r5
 80232b2:	4630      	mov	r0, r6
 80232b4:	f7ff ffa6 	bl	8023204 <sbrk_aligned>
 80232b8:	3001      	adds	r0, #1
 80232ba:	d03a      	beq.n	8023332 <_malloc_r+0xea>
 80232bc:	6823      	ldr	r3, [r4, #0]
 80232be:	442b      	add	r3, r5
 80232c0:	6023      	str	r3, [r4, #0]
 80232c2:	f8d8 3000 	ldr.w	r3, [r8]
 80232c6:	685a      	ldr	r2, [r3, #4]
 80232c8:	bb62      	cbnz	r2, 8023324 <_malloc_r+0xdc>
 80232ca:	f8c8 7000 	str.w	r7, [r8]
 80232ce:	e00f      	b.n	80232f0 <_malloc_r+0xa8>
 80232d0:	6822      	ldr	r2, [r4, #0]
 80232d2:	1b52      	subs	r2, r2, r5
 80232d4:	d420      	bmi.n	8023318 <_malloc_r+0xd0>
 80232d6:	2a0b      	cmp	r2, #11
 80232d8:	d917      	bls.n	802330a <_malloc_r+0xc2>
 80232da:	1961      	adds	r1, r4, r5
 80232dc:	42a3      	cmp	r3, r4
 80232de:	6025      	str	r5, [r4, #0]
 80232e0:	bf18      	it	ne
 80232e2:	6059      	strne	r1, [r3, #4]
 80232e4:	6863      	ldr	r3, [r4, #4]
 80232e6:	bf08      	it	eq
 80232e8:	f8c8 1000 	streq.w	r1, [r8]
 80232ec:	5162      	str	r2, [r4, r5]
 80232ee:	604b      	str	r3, [r1, #4]
 80232f0:	4630      	mov	r0, r6
 80232f2:	f000 f82f 	bl	8023354 <__malloc_unlock>
 80232f6:	f104 000b 	add.w	r0, r4, #11
 80232fa:	1d23      	adds	r3, r4, #4
 80232fc:	f020 0007 	bic.w	r0, r0, #7
 8023300:	1ac2      	subs	r2, r0, r3
 8023302:	bf1c      	itt	ne
 8023304:	1a1b      	subne	r3, r3, r0
 8023306:	50a3      	strne	r3, [r4, r2]
 8023308:	e7af      	b.n	802326a <_malloc_r+0x22>
 802330a:	6862      	ldr	r2, [r4, #4]
 802330c:	42a3      	cmp	r3, r4
 802330e:	bf0c      	ite	eq
 8023310:	f8c8 2000 	streq.w	r2, [r8]
 8023314:	605a      	strne	r2, [r3, #4]
 8023316:	e7eb      	b.n	80232f0 <_malloc_r+0xa8>
 8023318:	4623      	mov	r3, r4
 802331a:	6864      	ldr	r4, [r4, #4]
 802331c:	e7ae      	b.n	802327c <_malloc_r+0x34>
 802331e:	463c      	mov	r4, r7
 8023320:	687f      	ldr	r7, [r7, #4]
 8023322:	e7b6      	b.n	8023292 <_malloc_r+0x4a>
 8023324:	461a      	mov	r2, r3
 8023326:	685b      	ldr	r3, [r3, #4]
 8023328:	42a3      	cmp	r3, r4
 802332a:	d1fb      	bne.n	8023324 <_malloc_r+0xdc>
 802332c:	2300      	movs	r3, #0
 802332e:	6053      	str	r3, [r2, #4]
 8023330:	e7de      	b.n	80232f0 <_malloc_r+0xa8>
 8023332:	230c      	movs	r3, #12
 8023334:	6033      	str	r3, [r6, #0]
 8023336:	4630      	mov	r0, r6
 8023338:	f000 f80c 	bl	8023354 <__malloc_unlock>
 802333c:	e794      	b.n	8023268 <_malloc_r+0x20>
 802333e:	6005      	str	r5, [r0, #0]
 8023340:	e7d6      	b.n	80232f0 <_malloc_r+0xa8>
 8023342:	bf00      	nop
 8023344:	20019410 	.word	0x20019410

08023348 <__malloc_lock>:
 8023348:	4801      	ldr	r0, [pc, #4]	@ (8023350 <__malloc_lock+0x8>)
 802334a:	f000 bb32 	b.w	80239b2 <__retarget_lock_acquire_recursive>
 802334e:	bf00      	nop
 8023350:	20019554 	.word	0x20019554

08023354 <__malloc_unlock>:
 8023354:	4801      	ldr	r0, [pc, #4]	@ (802335c <__malloc_unlock+0x8>)
 8023356:	f000 bb2d 	b.w	80239b4 <__retarget_lock_release_recursive>
 802335a:	bf00      	nop
 802335c:	20019554 	.word	0x20019554

08023360 <rand>:
 8023360:	4b16      	ldr	r3, [pc, #88]	@ (80233bc <rand+0x5c>)
 8023362:	b510      	push	{r4, lr}
 8023364:	681c      	ldr	r4, [r3, #0]
 8023366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8023368:	b9b3      	cbnz	r3, 8023398 <rand+0x38>
 802336a:	2018      	movs	r0, #24
 802336c:	f7ff ff3a 	bl	80231e4 <malloc>
 8023370:	4602      	mov	r2, r0
 8023372:	6320      	str	r0, [r4, #48]	@ 0x30
 8023374:	b920      	cbnz	r0, 8023380 <rand+0x20>
 8023376:	4b12      	ldr	r3, [pc, #72]	@ (80233c0 <rand+0x60>)
 8023378:	4812      	ldr	r0, [pc, #72]	@ (80233c4 <rand+0x64>)
 802337a:	2152      	movs	r1, #82	@ 0x52
 802337c:	f000 fb2a 	bl	80239d4 <__assert_func>
 8023380:	4911      	ldr	r1, [pc, #68]	@ (80233c8 <rand+0x68>)
 8023382:	4b12      	ldr	r3, [pc, #72]	@ (80233cc <rand+0x6c>)
 8023384:	e9c0 1300 	strd	r1, r3, [r0]
 8023388:	4b11      	ldr	r3, [pc, #68]	@ (80233d0 <rand+0x70>)
 802338a:	6083      	str	r3, [r0, #8]
 802338c:	230b      	movs	r3, #11
 802338e:	8183      	strh	r3, [r0, #12]
 8023390:	2100      	movs	r1, #0
 8023392:	2001      	movs	r0, #1
 8023394:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023398:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802339a:	480e      	ldr	r0, [pc, #56]	@ (80233d4 <rand+0x74>)
 802339c:	690b      	ldr	r3, [r1, #16]
 802339e:	694c      	ldr	r4, [r1, #20]
 80233a0:	4a0d      	ldr	r2, [pc, #52]	@ (80233d8 <rand+0x78>)
 80233a2:	4358      	muls	r0, r3
 80233a4:	fb02 0004 	mla	r0, r2, r4, r0
 80233a8:	fba3 3202 	umull	r3, r2, r3, r2
 80233ac:	3301      	adds	r3, #1
 80233ae:	eb40 0002 	adc.w	r0, r0, r2
 80233b2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80233b6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80233ba:	bd10      	pop	{r4, pc}
 80233bc:	2000005c 	.word	0x2000005c
 80233c0:	08028078 	.word	0x08028078
 80233c4:	0802808f 	.word	0x0802808f
 80233c8:	abcd330e 	.word	0xabcd330e
 80233cc:	e66d1234 	.word	0xe66d1234
 80233d0:	0005deec 	.word	0x0005deec
 80233d4:	5851f42d 	.word	0x5851f42d
 80233d8:	4c957f2d 	.word	0x4c957f2d

080233dc <_strtol_l.constprop.0>:
 80233dc:	2b24      	cmp	r3, #36	@ 0x24
 80233de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80233e2:	4686      	mov	lr, r0
 80233e4:	4690      	mov	r8, r2
 80233e6:	d801      	bhi.n	80233ec <_strtol_l.constprop.0+0x10>
 80233e8:	2b01      	cmp	r3, #1
 80233ea:	d106      	bne.n	80233fa <_strtol_l.constprop.0+0x1e>
 80233ec:	f000 fab6 	bl	802395c <__errno>
 80233f0:	2316      	movs	r3, #22
 80233f2:	6003      	str	r3, [r0, #0]
 80233f4:	2000      	movs	r0, #0
 80233f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233fa:	4834      	ldr	r0, [pc, #208]	@ (80234cc <_strtol_l.constprop.0+0xf0>)
 80233fc:	460d      	mov	r5, r1
 80233fe:	462a      	mov	r2, r5
 8023400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023404:	5d06      	ldrb	r6, [r0, r4]
 8023406:	f016 0608 	ands.w	r6, r6, #8
 802340a:	d1f8      	bne.n	80233fe <_strtol_l.constprop.0+0x22>
 802340c:	2c2d      	cmp	r4, #45	@ 0x2d
 802340e:	d12d      	bne.n	802346c <_strtol_l.constprop.0+0x90>
 8023410:	782c      	ldrb	r4, [r5, #0]
 8023412:	2601      	movs	r6, #1
 8023414:	1c95      	adds	r5, r2, #2
 8023416:	f033 0210 	bics.w	r2, r3, #16
 802341a:	d109      	bne.n	8023430 <_strtol_l.constprop.0+0x54>
 802341c:	2c30      	cmp	r4, #48	@ 0x30
 802341e:	d12a      	bne.n	8023476 <_strtol_l.constprop.0+0x9a>
 8023420:	782a      	ldrb	r2, [r5, #0]
 8023422:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8023426:	2a58      	cmp	r2, #88	@ 0x58
 8023428:	d125      	bne.n	8023476 <_strtol_l.constprop.0+0x9a>
 802342a:	786c      	ldrb	r4, [r5, #1]
 802342c:	2310      	movs	r3, #16
 802342e:	3502      	adds	r5, #2
 8023430:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8023434:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023438:	2200      	movs	r2, #0
 802343a:	fbbc f9f3 	udiv	r9, ip, r3
 802343e:	4610      	mov	r0, r2
 8023440:	fb03 ca19 	mls	sl, r3, r9, ip
 8023444:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023448:	2f09      	cmp	r7, #9
 802344a:	d81b      	bhi.n	8023484 <_strtol_l.constprop.0+0xa8>
 802344c:	463c      	mov	r4, r7
 802344e:	42a3      	cmp	r3, r4
 8023450:	dd27      	ble.n	80234a2 <_strtol_l.constprop.0+0xc6>
 8023452:	1c57      	adds	r7, r2, #1
 8023454:	d007      	beq.n	8023466 <_strtol_l.constprop.0+0x8a>
 8023456:	4581      	cmp	r9, r0
 8023458:	d320      	bcc.n	802349c <_strtol_l.constprop.0+0xc0>
 802345a:	d101      	bne.n	8023460 <_strtol_l.constprop.0+0x84>
 802345c:	45a2      	cmp	sl, r4
 802345e:	db1d      	blt.n	802349c <_strtol_l.constprop.0+0xc0>
 8023460:	fb00 4003 	mla	r0, r0, r3, r4
 8023464:	2201      	movs	r2, #1
 8023466:	f815 4b01 	ldrb.w	r4, [r5], #1
 802346a:	e7eb      	b.n	8023444 <_strtol_l.constprop.0+0x68>
 802346c:	2c2b      	cmp	r4, #43	@ 0x2b
 802346e:	bf04      	itt	eq
 8023470:	782c      	ldrbeq	r4, [r5, #0]
 8023472:	1c95      	addeq	r5, r2, #2
 8023474:	e7cf      	b.n	8023416 <_strtol_l.constprop.0+0x3a>
 8023476:	2b00      	cmp	r3, #0
 8023478:	d1da      	bne.n	8023430 <_strtol_l.constprop.0+0x54>
 802347a:	2c30      	cmp	r4, #48	@ 0x30
 802347c:	bf0c      	ite	eq
 802347e:	2308      	moveq	r3, #8
 8023480:	230a      	movne	r3, #10
 8023482:	e7d5      	b.n	8023430 <_strtol_l.constprop.0+0x54>
 8023484:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023488:	2f19      	cmp	r7, #25
 802348a:	d801      	bhi.n	8023490 <_strtol_l.constprop.0+0xb4>
 802348c:	3c37      	subs	r4, #55	@ 0x37
 802348e:	e7de      	b.n	802344e <_strtol_l.constprop.0+0x72>
 8023490:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8023494:	2f19      	cmp	r7, #25
 8023496:	d804      	bhi.n	80234a2 <_strtol_l.constprop.0+0xc6>
 8023498:	3c57      	subs	r4, #87	@ 0x57
 802349a:	e7d8      	b.n	802344e <_strtol_l.constprop.0+0x72>
 802349c:	f04f 32ff 	mov.w	r2, #4294967295
 80234a0:	e7e1      	b.n	8023466 <_strtol_l.constprop.0+0x8a>
 80234a2:	1c53      	adds	r3, r2, #1
 80234a4:	d108      	bne.n	80234b8 <_strtol_l.constprop.0+0xdc>
 80234a6:	2322      	movs	r3, #34	@ 0x22
 80234a8:	f8ce 3000 	str.w	r3, [lr]
 80234ac:	4660      	mov	r0, ip
 80234ae:	f1b8 0f00 	cmp.w	r8, #0
 80234b2:	d0a0      	beq.n	80233f6 <_strtol_l.constprop.0+0x1a>
 80234b4:	1e69      	subs	r1, r5, #1
 80234b6:	e006      	b.n	80234c6 <_strtol_l.constprop.0+0xea>
 80234b8:	b106      	cbz	r6, 80234bc <_strtol_l.constprop.0+0xe0>
 80234ba:	4240      	negs	r0, r0
 80234bc:	f1b8 0f00 	cmp.w	r8, #0
 80234c0:	d099      	beq.n	80233f6 <_strtol_l.constprop.0+0x1a>
 80234c2:	2a00      	cmp	r2, #0
 80234c4:	d1f6      	bne.n	80234b4 <_strtol_l.constprop.0+0xd8>
 80234c6:	f8c8 1000 	str.w	r1, [r8]
 80234ca:	e794      	b.n	80233f6 <_strtol_l.constprop.0+0x1a>
 80234cc:	080280e8 	.word	0x080280e8

080234d0 <strtol>:
 80234d0:	4613      	mov	r3, r2
 80234d2:	460a      	mov	r2, r1
 80234d4:	4601      	mov	r1, r0
 80234d6:	4802      	ldr	r0, [pc, #8]	@ (80234e0 <strtol+0x10>)
 80234d8:	6800      	ldr	r0, [r0, #0]
 80234da:	f7ff bf7f 	b.w	80233dc <_strtol_l.constprop.0>
 80234de:	bf00      	nop
 80234e0:	2000005c 	.word	0x2000005c

080234e4 <std>:
 80234e4:	2300      	movs	r3, #0
 80234e6:	b510      	push	{r4, lr}
 80234e8:	4604      	mov	r4, r0
 80234ea:	e9c0 3300 	strd	r3, r3, [r0]
 80234ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80234f2:	6083      	str	r3, [r0, #8]
 80234f4:	8181      	strh	r1, [r0, #12]
 80234f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80234f8:	81c2      	strh	r2, [r0, #14]
 80234fa:	6183      	str	r3, [r0, #24]
 80234fc:	4619      	mov	r1, r3
 80234fe:	2208      	movs	r2, #8
 8023500:	305c      	adds	r0, #92	@ 0x5c
 8023502:	f000 f964 	bl	80237ce <memset>
 8023506:	4b0d      	ldr	r3, [pc, #52]	@ (802353c <std+0x58>)
 8023508:	6263      	str	r3, [r4, #36]	@ 0x24
 802350a:	4b0d      	ldr	r3, [pc, #52]	@ (8023540 <std+0x5c>)
 802350c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802350e:	4b0d      	ldr	r3, [pc, #52]	@ (8023544 <std+0x60>)
 8023510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023512:	4b0d      	ldr	r3, [pc, #52]	@ (8023548 <std+0x64>)
 8023514:	6323      	str	r3, [r4, #48]	@ 0x30
 8023516:	4b0d      	ldr	r3, [pc, #52]	@ (802354c <std+0x68>)
 8023518:	6224      	str	r4, [r4, #32]
 802351a:	429c      	cmp	r4, r3
 802351c:	d006      	beq.n	802352c <std+0x48>
 802351e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023522:	4294      	cmp	r4, r2
 8023524:	d002      	beq.n	802352c <std+0x48>
 8023526:	33d0      	adds	r3, #208	@ 0xd0
 8023528:	429c      	cmp	r4, r3
 802352a:	d105      	bne.n	8023538 <std+0x54>
 802352c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023534:	f000 ba3c 	b.w	80239b0 <__retarget_lock_init_recursive>
 8023538:	bd10      	pop	{r4, pc}
 802353a:	bf00      	nop
 802353c:	080236f5 	.word	0x080236f5
 8023540:	08023717 	.word	0x08023717
 8023544:	0802374f 	.word	0x0802374f
 8023548:	08023773 	.word	0x08023773
 802354c:	20019414 	.word	0x20019414

08023550 <stdio_exit_handler>:
 8023550:	4a02      	ldr	r2, [pc, #8]	@ (802355c <stdio_exit_handler+0xc>)
 8023552:	4903      	ldr	r1, [pc, #12]	@ (8023560 <stdio_exit_handler+0x10>)
 8023554:	4803      	ldr	r0, [pc, #12]	@ (8023564 <stdio_exit_handler+0x14>)
 8023556:	f000 b869 	b.w	802362c <_fwalk_sglue>
 802355a:	bf00      	nop
 802355c:	20000050 	.word	0x20000050
 8023560:	080243fd 	.word	0x080243fd
 8023564:	20000060 	.word	0x20000060

08023568 <cleanup_stdio>:
 8023568:	6841      	ldr	r1, [r0, #4]
 802356a:	4b0c      	ldr	r3, [pc, #48]	@ (802359c <cleanup_stdio+0x34>)
 802356c:	4299      	cmp	r1, r3
 802356e:	b510      	push	{r4, lr}
 8023570:	4604      	mov	r4, r0
 8023572:	d001      	beq.n	8023578 <cleanup_stdio+0x10>
 8023574:	f000 ff42 	bl	80243fc <_fflush_r>
 8023578:	68a1      	ldr	r1, [r4, #8]
 802357a:	4b09      	ldr	r3, [pc, #36]	@ (80235a0 <cleanup_stdio+0x38>)
 802357c:	4299      	cmp	r1, r3
 802357e:	d002      	beq.n	8023586 <cleanup_stdio+0x1e>
 8023580:	4620      	mov	r0, r4
 8023582:	f000 ff3b 	bl	80243fc <_fflush_r>
 8023586:	68e1      	ldr	r1, [r4, #12]
 8023588:	4b06      	ldr	r3, [pc, #24]	@ (80235a4 <cleanup_stdio+0x3c>)
 802358a:	4299      	cmp	r1, r3
 802358c:	d004      	beq.n	8023598 <cleanup_stdio+0x30>
 802358e:	4620      	mov	r0, r4
 8023590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023594:	f000 bf32 	b.w	80243fc <_fflush_r>
 8023598:	bd10      	pop	{r4, pc}
 802359a:	bf00      	nop
 802359c:	20019414 	.word	0x20019414
 80235a0:	2001947c 	.word	0x2001947c
 80235a4:	200194e4 	.word	0x200194e4

080235a8 <global_stdio_init.part.0>:
 80235a8:	b510      	push	{r4, lr}
 80235aa:	4b0b      	ldr	r3, [pc, #44]	@ (80235d8 <global_stdio_init.part.0+0x30>)
 80235ac:	4c0b      	ldr	r4, [pc, #44]	@ (80235dc <global_stdio_init.part.0+0x34>)
 80235ae:	4a0c      	ldr	r2, [pc, #48]	@ (80235e0 <global_stdio_init.part.0+0x38>)
 80235b0:	601a      	str	r2, [r3, #0]
 80235b2:	4620      	mov	r0, r4
 80235b4:	2200      	movs	r2, #0
 80235b6:	2104      	movs	r1, #4
 80235b8:	f7ff ff94 	bl	80234e4 <std>
 80235bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80235c0:	2201      	movs	r2, #1
 80235c2:	2109      	movs	r1, #9
 80235c4:	f7ff ff8e 	bl	80234e4 <std>
 80235c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80235cc:	2202      	movs	r2, #2
 80235ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235d2:	2112      	movs	r1, #18
 80235d4:	f7ff bf86 	b.w	80234e4 <std>
 80235d8:	2001954c 	.word	0x2001954c
 80235dc:	20019414 	.word	0x20019414
 80235e0:	08023551 	.word	0x08023551

080235e4 <__sfp_lock_acquire>:
 80235e4:	4801      	ldr	r0, [pc, #4]	@ (80235ec <__sfp_lock_acquire+0x8>)
 80235e6:	f000 b9e4 	b.w	80239b2 <__retarget_lock_acquire_recursive>
 80235ea:	bf00      	nop
 80235ec:	20019555 	.word	0x20019555

080235f0 <__sfp_lock_release>:
 80235f0:	4801      	ldr	r0, [pc, #4]	@ (80235f8 <__sfp_lock_release+0x8>)
 80235f2:	f000 b9df 	b.w	80239b4 <__retarget_lock_release_recursive>
 80235f6:	bf00      	nop
 80235f8:	20019555 	.word	0x20019555

080235fc <__sinit>:
 80235fc:	b510      	push	{r4, lr}
 80235fe:	4604      	mov	r4, r0
 8023600:	f7ff fff0 	bl	80235e4 <__sfp_lock_acquire>
 8023604:	6a23      	ldr	r3, [r4, #32]
 8023606:	b11b      	cbz	r3, 8023610 <__sinit+0x14>
 8023608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802360c:	f7ff bff0 	b.w	80235f0 <__sfp_lock_release>
 8023610:	4b04      	ldr	r3, [pc, #16]	@ (8023624 <__sinit+0x28>)
 8023612:	6223      	str	r3, [r4, #32]
 8023614:	4b04      	ldr	r3, [pc, #16]	@ (8023628 <__sinit+0x2c>)
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	2b00      	cmp	r3, #0
 802361a:	d1f5      	bne.n	8023608 <__sinit+0xc>
 802361c:	f7ff ffc4 	bl	80235a8 <global_stdio_init.part.0>
 8023620:	e7f2      	b.n	8023608 <__sinit+0xc>
 8023622:	bf00      	nop
 8023624:	08023569 	.word	0x08023569
 8023628:	2001954c 	.word	0x2001954c

0802362c <_fwalk_sglue>:
 802362c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023630:	4607      	mov	r7, r0
 8023632:	4688      	mov	r8, r1
 8023634:	4614      	mov	r4, r2
 8023636:	2600      	movs	r6, #0
 8023638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802363c:	f1b9 0901 	subs.w	r9, r9, #1
 8023640:	d505      	bpl.n	802364e <_fwalk_sglue+0x22>
 8023642:	6824      	ldr	r4, [r4, #0]
 8023644:	2c00      	cmp	r4, #0
 8023646:	d1f7      	bne.n	8023638 <_fwalk_sglue+0xc>
 8023648:	4630      	mov	r0, r6
 802364a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802364e:	89ab      	ldrh	r3, [r5, #12]
 8023650:	2b01      	cmp	r3, #1
 8023652:	d907      	bls.n	8023664 <_fwalk_sglue+0x38>
 8023654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023658:	3301      	adds	r3, #1
 802365a:	d003      	beq.n	8023664 <_fwalk_sglue+0x38>
 802365c:	4629      	mov	r1, r5
 802365e:	4638      	mov	r0, r7
 8023660:	47c0      	blx	r8
 8023662:	4306      	orrs	r6, r0
 8023664:	3568      	adds	r5, #104	@ 0x68
 8023666:	e7e9      	b.n	802363c <_fwalk_sglue+0x10>

08023668 <iprintf>:
 8023668:	b40f      	push	{r0, r1, r2, r3}
 802366a:	b507      	push	{r0, r1, r2, lr}
 802366c:	4906      	ldr	r1, [pc, #24]	@ (8023688 <iprintf+0x20>)
 802366e:	ab04      	add	r3, sp, #16
 8023670:	6808      	ldr	r0, [r1, #0]
 8023672:	f853 2b04 	ldr.w	r2, [r3], #4
 8023676:	6881      	ldr	r1, [r0, #8]
 8023678:	9301      	str	r3, [sp, #4]
 802367a:	f000 fb95 	bl	8023da8 <_vfiprintf_r>
 802367e:	b003      	add	sp, #12
 8023680:	f85d eb04 	ldr.w	lr, [sp], #4
 8023684:	b004      	add	sp, #16
 8023686:	4770      	bx	lr
 8023688:	2000005c 	.word	0x2000005c

0802368c <sniprintf>:
 802368c:	b40c      	push	{r2, r3}
 802368e:	b530      	push	{r4, r5, lr}
 8023690:	4b17      	ldr	r3, [pc, #92]	@ (80236f0 <sniprintf+0x64>)
 8023692:	1e0c      	subs	r4, r1, #0
 8023694:	681d      	ldr	r5, [r3, #0]
 8023696:	b09d      	sub	sp, #116	@ 0x74
 8023698:	da08      	bge.n	80236ac <sniprintf+0x20>
 802369a:	238b      	movs	r3, #139	@ 0x8b
 802369c:	602b      	str	r3, [r5, #0]
 802369e:	f04f 30ff 	mov.w	r0, #4294967295
 80236a2:	b01d      	add	sp, #116	@ 0x74
 80236a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80236a8:	b002      	add	sp, #8
 80236aa:	4770      	bx	lr
 80236ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80236b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80236b4:	bf14      	ite	ne
 80236b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80236ba:	4623      	moveq	r3, r4
 80236bc:	9304      	str	r3, [sp, #16]
 80236be:	9307      	str	r3, [sp, #28]
 80236c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80236c4:	9002      	str	r0, [sp, #8]
 80236c6:	9006      	str	r0, [sp, #24]
 80236c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80236cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80236ce:	ab21      	add	r3, sp, #132	@ 0x84
 80236d0:	a902      	add	r1, sp, #8
 80236d2:	4628      	mov	r0, r5
 80236d4:	9301      	str	r3, [sp, #4]
 80236d6:	f000 fa41 	bl	8023b5c <_svfiprintf_r>
 80236da:	1c43      	adds	r3, r0, #1
 80236dc:	bfbc      	itt	lt
 80236de:	238b      	movlt	r3, #139	@ 0x8b
 80236e0:	602b      	strlt	r3, [r5, #0]
 80236e2:	2c00      	cmp	r4, #0
 80236e4:	d0dd      	beq.n	80236a2 <sniprintf+0x16>
 80236e6:	9b02      	ldr	r3, [sp, #8]
 80236e8:	2200      	movs	r2, #0
 80236ea:	701a      	strb	r2, [r3, #0]
 80236ec:	e7d9      	b.n	80236a2 <sniprintf+0x16>
 80236ee:	bf00      	nop
 80236f0:	2000005c 	.word	0x2000005c

080236f4 <__sread>:
 80236f4:	b510      	push	{r4, lr}
 80236f6:	460c      	mov	r4, r1
 80236f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236fc:	f000 f8fa 	bl	80238f4 <_read_r>
 8023700:	2800      	cmp	r0, #0
 8023702:	bfab      	itete	ge
 8023704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023706:	89a3      	ldrhlt	r3, [r4, #12]
 8023708:	181b      	addge	r3, r3, r0
 802370a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802370e:	bfac      	ite	ge
 8023710:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023712:	81a3      	strhlt	r3, [r4, #12]
 8023714:	bd10      	pop	{r4, pc}

08023716 <__swrite>:
 8023716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802371a:	461f      	mov	r7, r3
 802371c:	898b      	ldrh	r3, [r1, #12]
 802371e:	05db      	lsls	r3, r3, #23
 8023720:	4605      	mov	r5, r0
 8023722:	460c      	mov	r4, r1
 8023724:	4616      	mov	r6, r2
 8023726:	d505      	bpl.n	8023734 <__swrite+0x1e>
 8023728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802372c:	2302      	movs	r3, #2
 802372e:	2200      	movs	r2, #0
 8023730:	f000 f8ce 	bl	80238d0 <_lseek_r>
 8023734:	89a3      	ldrh	r3, [r4, #12]
 8023736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802373a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802373e:	81a3      	strh	r3, [r4, #12]
 8023740:	4632      	mov	r2, r6
 8023742:	463b      	mov	r3, r7
 8023744:	4628      	mov	r0, r5
 8023746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802374a:	f000 b8f5 	b.w	8023938 <_write_r>

0802374e <__sseek>:
 802374e:	b510      	push	{r4, lr}
 8023750:	460c      	mov	r4, r1
 8023752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023756:	f000 f8bb 	bl	80238d0 <_lseek_r>
 802375a:	1c43      	adds	r3, r0, #1
 802375c:	89a3      	ldrh	r3, [r4, #12]
 802375e:	bf15      	itete	ne
 8023760:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802376a:	81a3      	strheq	r3, [r4, #12]
 802376c:	bf18      	it	ne
 802376e:	81a3      	strhne	r3, [r4, #12]
 8023770:	bd10      	pop	{r4, pc}

08023772 <__sclose>:
 8023772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023776:	f000 b845 	b.w	8023804 <_close_r>

0802377a <memcmp>:
 802377a:	b510      	push	{r4, lr}
 802377c:	3901      	subs	r1, #1
 802377e:	4402      	add	r2, r0
 8023780:	4290      	cmp	r0, r2
 8023782:	d101      	bne.n	8023788 <memcmp+0xe>
 8023784:	2000      	movs	r0, #0
 8023786:	e005      	b.n	8023794 <memcmp+0x1a>
 8023788:	7803      	ldrb	r3, [r0, #0]
 802378a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802378e:	42a3      	cmp	r3, r4
 8023790:	d001      	beq.n	8023796 <memcmp+0x1c>
 8023792:	1b18      	subs	r0, r3, r4
 8023794:	bd10      	pop	{r4, pc}
 8023796:	3001      	adds	r0, #1
 8023798:	e7f2      	b.n	8023780 <memcmp+0x6>

0802379a <memmove>:
 802379a:	4288      	cmp	r0, r1
 802379c:	b510      	push	{r4, lr}
 802379e:	eb01 0402 	add.w	r4, r1, r2
 80237a2:	d902      	bls.n	80237aa <memmove+0x10>
 80237a4:	4284      	cmp	r4, r0
 80237a6:	4623      	mov	r3, r4
 80237a8:	d807      	bhi.n	80237ba <memmove+0x20>
 80237aa:	1e43      	subs	r3, r0, #1
 80237ac:	42a1      	cmp	r1, r4
 80237ae:	d008      	beq.n	80237c2 <memmove+0x28>
 80237b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80237b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80237b8:	e7f8      	b.n	80237ac <memmove+0x12>
 80237ba:	4402      	add	r2, r0
 80237bc:	4601      	mov	r1, r0
 80237be:	428a      	cmp	r2, r1
 80237c0:	d100      	bne.n	80237c4 <memmove+0x2a>
 80237c2:	bd10      	pop	{r4, pc}
 80237c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80237c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80237cc:	e7f7      	b.n	80237be <memmove+0x24>

080237ce <memset>:
 80237ce:	4402      	add	r2, r0
 80237d0:	4603      	mov	r3, r0
 80237d2:	4293      	cmp	r3, r2
 80237d4:	d100      	bne.n	80237d8 <memset+0xa>
 80237d6:	4770      	bx	lr
 80237d8:	f803 1b01 	strb.w	r1, [r3], #1
 80237dc:	e7f9      	b.n	80237d2 <memset+0x4>

080237de <strncpy>:
 80237de:	b510      	push	{r4, lr}
 80237e0:	3901      	subs	r1, #1
 80237e2:	4603      	mov	r3, r0
 80237e4:	b132      	cbz	r2, 80237f4 <strncpy+0x16>
 80237e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80237ea:	f803 4b01 	strb.w	r4, [r3], #1
 80237ee:	3a01      	subs	r2, #1
 80237f0:	2c00      	cmp	r4, #0
 80237f2:	d1f7      	bne.n	80237e4 <strncpy+0x6>
 80237f4:	441a      	add	r2, r3
 80237f6:	2100      	movs	r1, #0
 80237f8:	4293      	cmp	r3, r2
 80237fa:	d100      	bne.n	80237fe <strncpy+0x20>
 80237fc:	bd10      	pop	{r4, pc}
 80237fe:	f803 1b01 	strb.w	r1, [r3], #1
 8023802:	e7f9      	b.n	80237f8 <strncpy+0x1a>

08023804 <_close_r>:
 8023804:	b538      	push	{r3, r4, r5, lr}
 8023806:	4d06      	ldr	r5, [pc, #24]	@ (8023820 <_close_r+0x1c>)
 8023808:	2300      	movs	r3, #0
 802380a:	4604      	mov	r4, r0
 802380c:	4608      	mov	r0, r1
 802380e:	602b      	str	r3, [r5, #0]
 8023810:	f7df ffc8 	bl	80037a4 <_close>
 8023814:	1c43      	adds	r3, r0, #1
 8023816:	d102      	bne.n	802381e <_close_r+0x1a>
 8023818:	682b      	ldr	r3, [r5, #0]
 802381a:	b103      	cbz	r3, 802381e <_close_r+0x1a>
 802381c:	6023      	str	r3, [r4, #0]
 802381e:	bd38      	pop	{r3, r4, r5, pc}
 8023820:	20019550 	.word	0x20019550

08023824 <_reclaim_reent>:
 8023824:	4b29      	ldr	r3, [pc, #164]	@ (80238cc <_reclaim_reent+0xa8>)
 8023826:	681b      	ldr	r3, [r3, #0]
 8023828:	4283      	cmp	r3, r0
 802382a:	b570      	push	{r4, r5, r6, lr}
 802382c:	4604      	mov	r4, r0
 802382e:	d04b      	beq.n	80238c8 <_reclaim_reent+0xa4>
 8023830:	69c3      	ldr	r3, [r0, #28]
 8023832:	b1ab      	cbz	r3, 8023860 <_reclaim_reent+0x3c>
 8023834:	68db      	ldr	r3, [r3, #12]
 8023836:	b16b      	cbz	r3, 8023854 <_reclaim_reent+0x30>
 8023838:	2500      	movs	r5, #0
 802383a:	69e3      	ldr	r3, [r4, #28]
 802383c:	68db      	ldr	r3, [r3, #12]
 802383e:	5959      	ldr	r1, [r3, r5]
 8023840:	2900      	cmp	r1, #0
 8023842:	d13b      	bne.n	80238bc <_reclaim_reent+0x98>
 8023844:	3504      	adds	r5, #4
 8023846:	2d80      	cmp	r5, #128	@ 0x80
 8023848:	d1f7      	bne.n	802383a <_reclaim_reent+0x16>
 802384a:	69e3      	ldr	r3, [r4, #28]
 802384c:	4620      	mov	r0, r4
 802384e:	68d9      	ldr	r1, [r3, #12]
 8023850:	f000 f8de 	bl	8023a10 <_free_r>
 8023854:	69e3      	ldr	r3, [r4, #28]
 8023856:	6819      	ldr	r1, [r3, #0]
 8023858:	b111      	cbz	r1, 8023860 <_reclaim_reent+0x3c>
 802385a:	4620      	mov	r0, r4
 802385c:	f000 f8d8 	bl	8023a10 <_free_r>
 8023860:	6961      	ldr	r1, [r4, #20]
 8023862:	b111      	cbz	r1, 802386a <_reclaim_reent+0x46>
 8023864:	4620      	mov	r0, r4
 8023866:	f000 f8d3 	bl	8023a10 <_free_r>
 802386a:	69e1      	ldr	r1, [r4, #28]
 802386c:	b111      	cbz	r1, 8023874 <_reclaim_reent+0x50>
 802386e:	4620      	mov	r0, r4
 8023870:	f000 f8ce 	bl	8023a10 <_free_r>
 8023874:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8023876:	b111      	cbz	r1, 802387e <_reclaim_reent+0x5a>
 8023878:	4620      	mov	r0, r4
 802387a:	f000 f8c9 	bl	8023a10 <_free_r>
 802387e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023880:	b111      	cbz	r1, 8023888 <_reclaim_reent+0x64>
 8023882:	4620      	mov	r0, r4
 8023884:	f000 f8c4 	bl	8023a10 <_free_r>
 8023888:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802388a:	b111      	cbz	r1, 8023892 <_reclaim_reent+0x6e>
 802388c:	4620      	mov	r0, r4
 802388e:	f000 f8bf 	bl	8023a10 <_free_r>
 8023892:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8023894:	b111      	cbz	r1, 802389c <_reclaim_reent+0x78>
 8023896:	4620      	mov	r0, r4
 8023898:	f000 f8ba 	bl	8023a10 <_free_r>
 802389c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802389e:	b111      	cbz	r1, 80238a6 <_reclaim_reent+0x82>
 80238a0:	4620      	mov	r0, r4
 80238a2:	f000 f8b5 	bl	8023a10 <_free_r>
 80238a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80238a8:	b111      	cbz	r1, 80238b0 <_reclaim_reent+0x8c>
 80238aa:	4620      	mov	r0, r4
 80238ac:	f000 f8b0 	bl	8023a10 <_free_r>
 80238b0:	6a23      	ldr	r3, [r4, #32]
 80238b2:	b14b      	cbz	r3, 80238c8 <_reclaim_reent+0xa4>
 80238b4:	4620      	mov	r0, r4
 80238b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80238ba:	4718      	bx	r3
 80238bc:	680e      	ldr	r6, [r1, #0]
 80238be:	4620      	mov	r0, r4
 80238c0:	f000 f8a6 	bl	8023a10 <_free_r>
 80238c4:	4631      	mov	r1, r6
 80238c6:	e7bb      	b.n	8023840 <_reclaim_reent+0x1c>
 80238c8:	bd70      	pop	{r4, r5, r6, pc}
 80238ca:	bf00      	nop
 80238cc:	2000005c 	.word	0x2000005c

080238d0 <_lseek_r>:
 80238d0:	b538      	push	{r3, r4, r5, lr}
 80238d2:	4d07      	ldr	r5, [pc, #28]	@ (80238f0 <_lseek_r+0x20>)
 80238d4:	4604      	mov	r4, r0
 80238d6:	4608      	mov	r0, r1
 80238d8:	4611      	mov	r1, r2
 80238da:	2200      	movs	r2, #0
 80238dc:	602a      	str	r2, [r5, #0]
 80238de:	461a      	mov	r2, r3
 80238e0:	f7df ff87 	bl	80037f2 <_lseek>
 80238e4:	1c43      	adds	r3, r0, #1
 80238e6:	d102      	bne.n	80238ee <_lseek_r+0x1e>
 80238e8:	682b      	ldr	r3, [r5, #0]
 80238ea:	b103      	cbz	r3, 80238ee <_lseek_r+0x1e>
 80238ec:	6023      	str	r3, [r4, #0]
 80238ee:	bd38      	pop	{r3, r4, r5, pc}
 80238f0:	20019550 	.word	0x20019550

080238f4 <_read_r>:
 80238f4:	b538      	push	{r3, r4, r5, lr}
 80238f6:	4d07      	ldr	r5, [pc, #28]	@ (8023914 <_read_r+0x20>)
 80238f8:	4604      	mov	r4, r0
 80238fa:	4608      	mov	r0, r1
 80238fc:	4611      	mov	r1, r2
 80238fe:	2200      	movs	r2, #0
 8023900:	602a      	str	r2, [r5, #0]
 8023902:	461a      	mov	r2, r3
 8023904:	f7df ff15 	bl	8003732 <_read>
 8023908:	1c43      	adds	r3, r0, #1
 802390a:	d102      	bne.n	8023912 <_read_r+0x1e>
 802390c:	682b      	ldr	r3, [r5, #0]
 802390e:	b103      	cbz	r3, 8023912 <_read_r+0x1e>
 8023910:	6023      	str	r3, [r4, #0]
 8023912:	bd38      	pop	{r3, r4, r5, pc}
 8023914:	20019550 	.word	0x20019550

08023918 <_sbrk_r>:
 8023918:	b538      	push	{r3, r4, r5, lr}
 802391a:	4d06      	ldr	r5, [pc, #24]	@ (8023934 <_sbrk_r+0x1c>)
 802391c:	2300      	movs	r3, #0
 802391e:	4604      	mov	r4, r0
 8023920:	4608      	mov	r0, r1
 8023922:	602b      	str	r3, [r5, #0]
 8023924:	f7df ff72 	bl	800380c <_sbrk>
 8023928:	1c43      	adds	r3, r0, #1
 802392a:	d102      	bne.n	8023932 <_sbrk_r+0x1a>
 802392c:	682b      	ldr	r3, [r5, #0]
 802392e:	b103      	cbz	r3, 8023932 <_sbrk_r+0x1a>
 8023930:	6023      	str	r3, [r4, #0]
 8023932:	bd38      	pop	{r3, r4, r5, pc}
 8023934:	20019550 	.word	0x20019550

08023938 <_write_r>:
 8023938:	b538      	push	{r3, r4, r5, lr}
 802393a:	4d07      	ldr	r5, [pc, #28]	@ (8023958 <_write_r+0x20>)
 802393c:	4604      	mov	r4, r0
 802393e:	4608      	mov	r0, r1
 8023940:	4611      	mov	r1, r2
 8023942:	2200      	movs	r2, #0
 8023944:	602a      	str	r2, [r5, #0]
 8023946:	461a      	mov	r2, r3
 8023948:	f7df ff10 	bl	800376c <_write>
 802394c:	1c43      	adds	r3, r0, #1
 802394e:	d102      	bne.n	8023956 <_write_r+0x1e>
 8023950:	682b      	ldr	r3, [r5, #0]
 8023952:	b103      	cbz	r3, 8023956 <_write_r+0x1e>
 8023954:	6023      	str	r3, [r4, #0]
 8023956:	bd38      	pop	{r3, r4, r5, pc}
 8023958:	20019550 	.word	0x20019550

0802395c <__errno>:
 802395c:	4b01      	ldr	r3, [pc, #4]	@ (8023964 <__errno+0x8>)
 802395e:	6818      	ldr	r0, [r3, #0]
 8023960:	4770      	bx	lr
 8023962:	bf00      	nop
 8023964:	2000005c 	.word	0x2000005c

08023968 <__libc_init_array>:
 8023968:	b570      	push	{r4, r5, r6, lr}
 802396a:	4d0d      	ldr	r5, [pc, #52]	@ (80239a0 <__libc_init_array+0x38>)
 802396c:	4c0d      	ldr	r4, [pc, #52]	@ (80239a4 <__libc_init_array+0x3c>)
 802396e:	1b64      	subs	r4, r4, r5
 8023970:	10a4      	asrs	r4, r4, #2
 8023972:	2600      	movs	r6, #0
 8023974:	42a6      	cmp	r6, r4
 8023976:	d109      	bne.n	802398c <__libc_init_array+0x24>
 8023978:	4d0b      	ldr	r5, [pc, #44]	@ (80239a8 <__libc_init_array+0x40>)
 802397a:	4c0c      	ldr	r4, [pc, #48]	@ (80239ac <__libc_init_array+0x44>)
 802397c:	f000 ff12 	bl	80247a4 <_init>
 8023980:	1b64      	subs	r4, r4, r5
 8023982:	10a4      	asrs	r4, r4, #2
 8023984:	2600      	movs	r6, #0
 8023986:	42a6      	cmp	r6, r4
 8023988:	d105      	bne.n	8023996 <__libc_init_array+0x2e>
 802398a:	bd70      	pop	{r4, r5, r6, pc}
 802398c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023990:	4798      	blx	r3
 8023992:	3601      	adds	r6, #1
 8023994:	e7ee      	b.n	8023974 <__libc_init_array+0xc>
 8023996:	f855 3b04 	ldr.w	r3, [r5], #4
 802399a:	4798      	blx	r3
 802399c:	3601      	adds	r6, #1
 802399e:	e7f2      	b.n	8023986 <__libc_init_array+0x1e>
 80239a0:	08028260 	.word	0x08028260
 80239a4:	08028260 	.word	0x08028260
 80239a8:	08028260 	.word	0x08028260
 80239ac:	08028264 	.word	0x08028264

080239b0 <__retarget_lock_init_recursive>:
 80239b0:	4770      	bx	lr

080239b2 <__retarget_lock_acquire_recursive>:
 80239b2:	4770      	bx	lr

080239b4 <__retarget_lock_release_recursive>:
 80239b4:	4770      	bx	lr

080239b6 <memcpy>:
 80239b6:	440a      	add	r2, r1
 80239b8:	4291      	cmp	r1, r2
 80239ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80239be:	d100      	bne.n	80239c2 <memcpy+0xc>
 80239c0:	4770      	bx	lr
 80239c2:	b510      	push	{r4, lr}
 80239c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80239c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80239cc:	4291      	cmp	r1, r2
 80239ce:	d1f9      	bne.n	80239c4 <memcpy+0xe>
 80239d0:	bd10      	pop	{r4, pc}
	...

080239d4 <__assert_func>:
 80239d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80239d6:	4614      	mov	r4, r2
 80239d8:	461a      	mov	r2, r3
 80239da:	4b09      	ldr	r3, [pc, #36]	@ (8023a00 <__assert_func+0x2c>)
 80239dc:	681b      	ldr	r3, [r3, #0]
 80239de:	4605      	mov	r5, r0
 80239e0:	68d8      	ldr	r0, [r3, #12]
 80239e2:	b954      	cbnz	r4, 80239fa <__assert_func+0x26>
 80239e4:	4b07      	ldr	r3, [pc, #28]	@ (8023a04 <__assert_func+0x30>)
 80239e6:	461c      	mov	r4, r3
 80239e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80239ec:	9100      	str	r1, [sp, #0]
 80239ee:	462b      	mov	r3, r5
 80239f0:	4905      	ldr	r1, [pc, #20]	@ (8023a08 <__assert_func+0x34>)
 80239f2:	f000 fd2b 	bl	802444c <fiprintf>
 80239f6:	f000 fdcf 	bl	8024598 <abort>
 80239fa:	4b04      	ldr	r3, [pc, #16]	@ (8023a0c <__assert_func+0x38>)
 80239fc:	e7f4      	b.n	80239e8 <__assert_func+0x14>
 80239fe:	bf00      	nop
 8023a00:	2000005c 	.word	0x2000005c
 8023a04:	08028223 	.word	0x08028223
 8023a08:	080281f5 	.word	0x080281f5
 8023a0c:	080281e8 	.word	0x080281e8

08023a10 <_free_r>:
 8023a10:	b538      	push	{r3, r4, r5, lr}
 8023a12:	4605      	mov	r5, r0
 8023a14:	2900      	cmp	r1, #0
 8023a16:	d041      	beq.n	8023a9c <_free_r+0x8c>
 8023a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023a1c:	1f0c      	subs	r4, r1, #4
 8023a1e:	2b00      	cmp	r3, #0
 8023a20:	bfb8      	it	lt
 8023a22:	18e4      	addlt	r4, r4, r3
 8023a24:	f7ff fc90 	bl	8023348 <__malloc_lock>
 8023a28:	4a1d      	ldr	r2, [pc, #116]	@ (8023aa0 <_free_r+0x90>)
 8023a2a:	6813      	ldr	r3, [r2, #0]
 8023a2c:	b933      	cbnz	r3, 8023a3c <_free_r+0x2c>
 8023a2e:	6063      	str	r3, [r4, #4]
 8023a30:	6014      	str	r4, [r2, #0]
 8023a32:	4628      	mov	r0, r5
 8023a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023a38:	f7ff bc8c 	b.w	8023354 <__malloc_unlock>
 8023a3c:	42a3      	cmp	r3, r4
 8023a3e:	d908      	bls.n	8023a52 <_free_r+0x42>
 8023a40:	6820      	ldr	r0, [r4, #0]
 8023a42:	1821      	adds	r1, r4, r0
 8023a44:	428b      	cmp	r3, r1
 8023a46:	bf01      	itttt	eq
 8023a48:	6819      	ldreq	r1, [r3, #0]
 8023a4a:	685b      	ldreq	r3, [r3, #4]
 8023a4c:	1809      	addeq	r1, r1, r0
 8023a4e:	6021      	streq	r1, [r4, #0]
 8023a50:	e7ed      	b.n	8023a2e <_free_r+0x1e>
 8023a52:	461a      	mov	r2, r3
 8023a54:	685b      	ldr	r3, [r3, #4]
 8023a56:	b10b      	cbz	r3, 8023a5c <_free_r+0x4c>
 8023a58:	42a3      	cmp	r3, r4
 8023a5a:	d9fa      	bls.n	8023a52 <_free_r+0x42>
 8023a5c:	6811      	ldr	r1, [r2, #0]
 8023a5e:	1850      	adds	r0, r2, r1
 8023a60:	42a0      	cmp	r0, r4
 8023a62:	d10b      	bne.n	8023a7c <_free_r+0x6c>
 8023a64:	6820      	ldr	r0, [r4, #0]
 8023a66:	4401      	add	r1, r0
 8023a68:	1850      	adds	r0, r2, r1
 8023a6a:	4283      	cmp	r3, r0
 8023a6c:	6011      	str	r1, [r2, #0]
 8023a6e:	d1e0      	bne.n	8023a32 <_free_r+0x22>
 8023a70:	6818      	ldr	r0, [r3, #0]
 8023a72:	685b      	ldr	r3, [r3, #4]
 8023a74:	6053      	str	r3, [r2, #4]
 8023a76:	4408      	add	r0, r1
 8023a78:	6010      	str	r0, [r2, #0]
 8023a7a:	e7da      	b.n	8023a32 <_free_r+0x22>
 8023a7c:	d902      	bls.n	8023a84 <_free_r+0x74>
 8023a7e:	230c      	movs	r3, #12
 8023a80:	602b      	str	r3, [r5, #0]
 8023a82:	e7d6      	b.n	8023a32 <_free_r+0x22>
 8023a84:	6820      	ldr	r0, [r4, #0]
 8023a86:	1821      	adds	r1, r4, r0
 8023a88:	428b      	cmp	r3, r1
 8023a8a:	bf04      	itt	eq
 8023a8c:	6819      	ldreq	r1, [r3, #0]
 8023a8e:	685b      	ldreq	r3, [r3, #4]
 8023a90:	6063      	str	r3, [r4, #4]
 8023a92:	bf04      	itt	eq
 8023a94:	1809      	addeq	r1, r1, r0
 8023a96:	6021      	streq	r1, [r4, #0]
 8023a98:	6054      	str	r4, [r2, #4]
 8023a9a:	e7ca      	b.n	8023a32 <_free_r+0x22>
 8023a9c:	bd38      	pop	{r3, r4, r5, pc}
 8023a9e:	bf00      	nop
 8023aa0:	20019410 	.word	0x20019410

08023aa4 <__ssputs_r>:
 8023aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023aa8:	688e      	ldr	r6, [r1, #8]
 8023aaa:	461f      	mov	r7, r3
 8023aac:	42be      	cmp	r6, r7
 8023aae:	680b      	ldr	r3, [r1, #0]
 8023ab0:	4682      	mov	sl, r0
 8023ab2:	460c      	mov	r4, r1
 8023ab4:	4690      	mov	r8, r2
 8023ab6:	d82d      	bhi.n	8023b14 <__ssputs_r+0x70>
 8023ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023abc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8023ac0:	d026      	beq.n	8023b10 <__ssputs_r+0x6c>
 8023ac2:	6965      	ldr	r5, [r4, #20]
 8023ac4:	6909      	ldr	r1, [r1, #16]
 8023ac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023aca:	eba3 0901 	sub.w	r9, r3, r1
 8023ace:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023ad2:	1c7b      	adds	r3, r7, #1
 8023ad4:	444b      	add	r3, r9
 8023ad6:	106d      	asrs	r5, r5, #1
 8023ad8:	429d      	cmp	r5, r3
 8023ada:	bf38      	it	cc
 8023adc:	461d      	movcc	r5, r3
 8023ade:	0553      	lsls	r3, r2, #21
 8023ae0:	d527      	bpl.n	8023b32 <__ssputs_r+0x8e>
 8023ae2:	4629      	mov	r1, r5
 8023ae4:	f7ff fbb0 	bl	8023248 <_malloc_r>
 8023ae8:	4606      	mov	r6, r0
 8023aea:	b360      	cbz	r0, 8023b46 <__ssputs_r+0xa2>
 8023aec:	6921      	ldr	r1, [r4, #16]
 8023aee:	464a      	mov	r2, r9
 8023af0:	f7ff ff61 	bl	80239b6 <memcpy>
 8023af4:	89a3      	ldrh	r3, [r4, #12]
 8023af6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8023afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023afe:	81a3      	strh	r3, [r4, #12]
 8023b00:	6126      	str	r6, [r4, #16]
 8023b02:	6165      	str	r5, [r4, #20]
 8023b04:	444e      	add	r6, r9
 8023b06:	eba5 0509 	sub.w	r5, r5, r9
 8023b0a:	6026      	str	r6, [r4, #0]
 8023b0c:	60a5      	str	r5, [r4, #8]
 8023b0e:	463e      	mov	r6, r7
 8023b10:	42be      	cmp	r6, r7
 8023b12:	d900      	bls.n	8023b16 <__ssputs_r+0x72>
 8023b14:	463e      	mov	r6, r7
 8023b16:	6820      	ldr	r0, [r4, #0]
 8023b18:	4632      	mov	r2, r6
 8023b1a:	4641      	mov	r1, r8
 8023b1c:	f7ff fe3d 	bl	802379a <memmove>
 8023b20:	68a3      	ldr	r3, [r4, #8]
 8023b22:	1b9b      	subs	r3, r3, r6
 8023b24:	60a3      	str	r3, [r4, #8]
 8023b26:	6823      	ldr	r3, [r4, #0]
 8023b28:	4433      	add	r3, r6
 8023b2a:	6023      	str	r3, [r4, #0]
 8023b2c:	2000      	movs	r0, #0
 8023b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b32:	462a      	mov	r2, r5
 8023b34:	f000 fd37 	bl	80245a6 <_realloc_r>
 8023b38:	4606      	mov	r6, r0
 8023b3a:	2800      	cmp	r0, #0
 8023b3c:	d1e0      	bne.n	8023b00 <__ssputs_r+0x5c>
 8023b3e:	6921      	ldr	r1, [r4, #16]
 8023b40:	4650      	mov	r0, sl
 8023b42:	f7ff ff65 	bl	8023a10 <_free_r>
 8023b46:	230c      	movs	r3, #12
 8023b48:	f8ca 3000 	str.w	r3, [sl]
 8023b4c:	89a3      	ldrh	r3, [r4, #12]
 8023b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023b52:	81a3      	strh	r3, [r4, #12]
 8023b54:	f04f 30ff 	mov.w	r0, #4294967295
 8023b58:	e7e9      	b.n	8023b2e <__ssputs_r+0x8a>
	...

08023b5c <_svfiprintf_r>:
 8023b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b60:	4698      	mov	r8, r3
 8023b62:	898b      	ldrh	r3, [r1, #12]
 8023b64:	061b      	lsls	r3, r3, #24
 8023b66:	b09d      	sub	sp, #116	@ 0x74
 8023b68:	4607      	mov	r7, r0
 8023b6a:	460d      	mov	r5, r1
 8023b6c:	4614      	mov	r4, r2
 8023b6e:	d510      	bpl.n	8023b92 <_svfiprintf_r+0x36>
 8023b70:	690b      	ldr	r3, [r1, #16]
 8023b72:	b973      	cbnz	r3, 8023b92 <_svfiprintf_r+0x36>
 8023b74:	2140      	movs	r1, #64	@ 0x40
 8023b76:	f7ff fb67 	bl	8023248 <_malloc_r>
 8023b7a:	6028      	str	r0, [r5, #0]
 8023b7c:	6128      	str	r0, [r5, #16]
 8023b7e:	b930      	cbnz	r0, 8023b8e <_svfiprintf_r+0x32>
 8023b80:	230c      	movs	r3, #12
 8023b82:	603b      	str	r3, [r7, #0]
 8023b84:	f04f 30ff 	mov.w	r0, #4294967295
 8023b88:	b01d      	add	sp, #116	@ 0x74
 8023b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b8e:	2340      	movs	r3, #64	@ 0x40
 8023b90:	616b      	str	r3, [r5, #20]
 8023b92:	2300      	movs	r3, #0
 8023b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b96:	2320      	movs	r3, #32
 8023b98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ba0:	2330      	movs	r3, #48	@ 0x30
 8023ba2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8023d40 <_svfiprintf_r+0x1e4>
 8023ba6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023baa:	f04f 0901 	mov.w	r9, #1
 8023bae:	4623      	mov	r3, r4
 8023bb0:	469a      	mov	sl, r3
 8023bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023bb6:	b10a      	cbz	r2, 8023bbc <_svfiprintf_r+0x60>
 8023bb8:	2a25      	cmp	r2, #37	@ 0x25
 8023bba:	d1f9      	bne.n	8023bb0 <_svfiprintf_r+0x54>
 8023bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8023bc0:	d00b      	beq.n	8023bda <_svfiprintf_r+0x7e>
 8023bc2:	465b      	mov	r3, fp
 8023bc4:	4622      	mov	r2, r4
 8023bc6:	4629      	mov	r1, r5
 8023bc8:	4638      	mov	r0, r7
 8023bca:	f7ff ff6b 	bl	8023aa4 <__ssputs_r>
 8023bce:	3001      	adds	r0, #1
 8023bd0:	f000 80a7 	beq.w	8023d22 <_svfiprintf_r+0x1c6>
 8023bd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023bd6:	445a      	add	r2, fp
 8023bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8023bda:	f89a 3000 	ldrb.w	r3, [sl]
 8023bde:	2b00      	cmp	r3, #0
 8023be0:	f000 809f 	beq.w	8023d22 <_svfiprintf_r+0x1c6>
 8023be4:	2300      	movs	r3, #0
 8023be6:	f04f 32ff 	mov.w	r2, #4294967295
 8023bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023bee:	f10a 0a01 	add.w	sl, sl, #1
 8023bf2:	9304      	str	r3, [sp, #16]
 8023bf4:	9307      	str	r3, [sp, #28]
 8023bf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023bfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8023bfc:	4654      	mov	r4, sl
 8023bfe:	2205      	movs	r2, #5
 8023c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c04:	484e      	ldr	r0, [pc, #312]	@ (8023d40 <_svfiprintf_r+0x1e4>)
 8023c06:	f7dc fb03 	bl	8000210 <memchr>
 8023c0a:	9a04      	ldr	r2, [sp, #16]
 8023c0c:	b9d8      	cbnz	r0, 8023c46 <_svfiprintf_r+0xea>
 8023c0e:	06d0      	lsls	r0, r2, #27
 8023c10:	bf44      	itt	mi
 8023c12:	2320      	movmi	r3, #32
 8023c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023c18:	0711      	lsls	r1, r2, #28
 8023c1a:	bf44      	itt	mi
 8023c1c:	232b      	movmi	r3, #43	@ 0x2b
 8023c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023c22:	f89a 3000 	ldrb.w	r3, [sl]
 8023c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8023c28:	d015      	beq.n	8023c56 <_svfiprintf_r+0xfa>
 8023c2a:	9a07      	ldr	r2, [sp, #28]
 8023c2c:	4654      	mov	r4, sl
 8023c2e:	2000      	movs	r0, #0
 8023c30:	f04f 0c0a 	mov.w	ip, #10
 8023c34:	4621      	mov	r1, r4
 8023c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023c3a:	3b30      	subs	r3, #48	@ 0x30
 8023c3c:	2b09      	cmp	r3, #9
 8023c3e:	d94b      	bls.n	8023cd8 <_svfiprintf_r+0x17c>
 8023c40:	b1b0      	cbz	r0, 8023c70 <_svfiprintf_r+0x114>
 8023c42:	9207      	str	r2, [sp, #28]
 8023c44:	e014      	b.n	8023c70 <_svfiprintf_r+0x114>
 8023c46:	eba0 0308 	sub.w	r3, r0, r8
 8023c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8023c4e:	4313      	orrs	r3, r2
 8023c50:	9304      	str	r3, [sp, #16]
 8023c52:	46a2      	mov	sl, r4
 8023c54:	e7d2      	b.n	8023bfc <_svfiprintf_r+0xa0>
 8023c56:	9b03      	ldr	r3, [sp, #12]
 8023c58:	1d19      	adds	r1, r3, #4
 8023c5a:	681b      	ldr	r3, [r3, #0]
 8023c5c:	9103      	str	r1, [sp, #12]
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	bfbb      	ittet	lt
 8023c62:	425b      	neglt	r3, r3
 8023c64:	f042 0202 	orrlt.w	r2, r2, #2
 8023c68:	9307      	strge	r3, [sp, #28]
 8023c6a:	9307      	strlt	r3, [sp, #28]
 8023c6c:	bfb8      	it	lt
 8023c6e:	9204      	strlt	r2, [sp, #16]
 8023c70:	7823      	ldrb	r3, [r4, #0]
 8023c72:	2b2e      	cmp	r3, #46	@ 0x2e
 8023c74:	d10a      	bne.n	8023c8c <_svfiprintf_r+0x130>
 8023c76:	7863      	ldrb	r3, [r4, #1]
 8023c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8023c7a:	d132      	bne.n	8023ce2 <_svfiprintf_r+0x186>
 8023c7c:	9b03      	ldr	r3, [sp, #12]
 8023c7e:	1d1a      	adds	r2, r3, #4
 8023c80:	681b      	ldr	r3, [r3, #0]
 8023c82:	9203      	str	r2, [sp, #12]
 8023c84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023c88:	3402      	adds	r4, #2
 8023c8a:	9305      	str	r3, [sp, #20]
 8023c8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8023d50 <_svfiprintf_r+0x1f4>
 8023c90:	7821      	ldrb	r1, [r4, #0]
 8023c92:	2203      	movs	r2, #3
 8023c94:	4650      	mov	r0, sl
 8023c96:	f7dc fabb 	bl	8000210 <memchr>
 8023c9a:	b138      	cbz	r0, 8023cac <_svfiprintf_r+0x150>
 8023c9c:	9b04      	ldr	r3, [sp, #16]
 8023c9e:	eba0 000a 	sub.w	r0, r0, sl
 8023ca2:	2240      	movs	r2, #64	@ 0x40
 8023ca4:	4082      	lsls	r2, r0
 8023ca6:	4313      	orrs	r3, r2
 8023ca8:	3401      	adds	r4, #1
 8023caa:	9304      	str	r3, [sp, #16]
 8023cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023cb0:	4824      	ldr	r0, [pc, #144]	@ (8023d44 <_svfiprintf_r+0x1e8>)
 8023cb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023cb6:	2206      	movs	r2, #6
 8023cb8:	f7dc faaa 	bl	8000210 <memchr>
 8023cbc:	2800      	cmp	r0, #0
 8023cbe:	d036      	beq.n	8023d2e <_svfiprintf_r+0x1d2>
 8023cc0:	4b21      	ldr	r3, [pc, #132]	@ (8023d48 <_svfiprintf_r+0x1ec>)
 8023cc2:	bb1b      	cbnz	r3, 8023d0c <_svfiprintf_r+0x1b0>
 8023cc4:	9b03      	ldr	r3, [sp, #12]
 8023cc6:	3307      	adds	r3, #7
 8023cc8:	f023 0307 	bic.w	r3, r3, #7
 8023ccc:	3308      	adds	r3, #8
 8023cce:	9303      	str	r3, [sp, #12]
 8023cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023cd2:	4433      	add	r3, r6
 8023cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cd6:	e76a      	b.n	8023bae <_svfiprintf_r+0x52>
 8023cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8023cdc:	460c      	mov	r4, r1
 8023cde:	2001      	movs	r0, #1
 8023ce0:	e7a8      	b.n	8023c34 <_svfiprintf_r+0xd8>
 8023ce2:	2300      	movs	r3, #0
 8023ce4:	3401      	adds	r4, #1
 8023ce6:	9305      	str	r3, [sp, #20]
 8023ce8:	4619      	mov	r1, r3
 8023cea:	f04f 0c0a 	mov.w	ip, #10
 8023cee:	4620      	mov	r0, r4
 8023cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023cf4:	3a30      	subs	r2, #48	@ 0x30
 8023cf6:	2a09      	cmp	r2, #9
 8023cf8:	d903      	bls.n	8023d02 <_svfiprintf_r+0x1a6>
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d0c6      	beq.n	8023c8c <_svfiprintf_r+0x130>
 8023cfe:	9105      	str	r1, [sp, #20]
 8023d00:	e7c4      	b.n	8023c8c <_svfiprintf_r+0x130>
 8023d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8023d06:	4604      	mov	r4, r0
 8023d08:	2301      	movs	r3, #1
 8023d0a:	e7f0      	b.n	8023cee <_svfiprintf_r+0x192>
 8023d0c:	ab03      	add	r3, sp, #12
 8023d0e:	9300      	str	r3, [sp, #0]
 8023d10:	462a      	mov	r2, r5
 8023d12:	4b0e      	ldr	r3, [pc, #56]	@ (8023d4c <_svfiprintf_r+0x1f0>)
 8023d14:	a904      	add	r1, sp, #16
 8023d16:	4638      	mov	r0, r7
 8023d18:	f3af 8000 	nop.w
 8023d1c:	1c42      	adds	r2, r0, #1
 8023d1e:	4606      	mov	r6, r0
 8023d20:	d1d6      	bne.n	8023cd0 <_svfiprintf_r+0x174>
 8023d22:	89ab      	ldrh	r3, [r5, #12]
 8023d24:	065b      	lsls	r3, r3, #25
 8023d26:	f53f af2d 	bmi.w	8023b84 <_svfiprintf_r+0x28>
 8023d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023d2c:	e72c      	b.n	8023b88 <_svfiprintf_r+0x2c>
 8023d2e:	ab03      	add	r3, sp, #12
 8023d30:	9300      	str	r3, [sp, #0]
 8023d32:	462a      	mov	r2, r5
 8023d34:	4b05      	ldr	r3, [pc, #20]	@ (8023d4c <_svfiprintf_r+0x1f0>)
 8023d36:	a904      	add	r1, sp, #16
 8023d38:	4638      	mov	r0, r7
 8023d3a:	f000 f9bb 	bl	80240b4 <_printf_i>
 8023d3e:	e7ed      	b.n	8023d1c <_svfiprintf_r+0x1c0>
 8023d40:	08028224 	.word	0x08028224
 8023d44:	0802822e 	.word	0x0802822e
 8023d48:	00000000 	.word	0x00000000
 8023d4c:	08023aa5 	.word	0x08023aa5
 8023d50:	0802822a 	.word	0x0802822a

08023d54 <__sfputc_r>:
 8023d54:	6893      	ldr	r3, [r2, #8]
 8023d56:	3b01      	subs	r3, #1
 8023d58:	2b00      	cmp	r3, #0
 8023d5a:	b410      	push	{r4}
 8023d5c:	6093      	str	r3, [r2, #8]
 8023d5e:	da08      	bge.n	8023d72 <__sfputc_r+0x1e>
 8023d60:	6994      	ldr	r4, [r2, #24]
 8023d62:	42a3      	cmp	r3, r4
 8023d64:	db01      	blt.n	8023d6a <__sfputc_r+0x16>
 8023d66:	290a      	cmp	r1, #10
 8023d68:	d103      	bne.n	8023d72 <__sfputc_r+0x1e>
 8023d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023d6e:	f000 bb7f 	b.w	8024470 <__swbuf_r>
 8023d72:	6813      	ldr	r3, [r2, #0]
 8023d74:	1c58      	adds	r0, r3, #1
 8023d76:	6010      	str	r0, [r2, #0]
 8023d78:	7019      	strb	r1, [r3, #0]
 8023d7a:	4608      	mov	r0, r1
 8023d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023d80:	4770      	bx	lr

08023d82 <__sfputs_r>:
 8023d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d84:	4606      	mov	r6, r0
 8023d86:	460f      	mov	r7, r1
 8023d88:	4614      	mov	r4, r2
 8023d8a:	18d5      	adds	r5, r2, r3
 8023d8c:	42ac      	cmp	r4, r5
 8023d8e:	d101      	bne.n	8023d94 <__sfputs_r+0x12>
 8023d90:	2000      	movs	r0, #0
 8023d92:	e007      	b.n	8023da4 <__sfputs_r+0x22>
 8023d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d98:	463a      	mov	r2, r7
 8023d9a:	4630      	mov	r0, r6
 8023d9c:	f7ff ffda 	bl	8023d54 <__sfputc_r>
 8023da0:	1c43      	adds	r3, r0, #1
 8023da2:	d1f3      	bne.n	8023d8c <__sfputs_r+0xa>
 8023da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023da8 <_vfiprintf_r>:
 8023da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dac:	460d      	mov	r5, r1
 8023dae:	b09d      	sub	sp, #116	@ 0x74
 8023db0:	4614      	mov	r4, r2
 8023db2:	4698      	mov	r8, r3
 8023db4:	4606      	mov	r6, r0
 8023db6:	b118      	cbz	r0, 8023dc0 <_vfiprintf_r+0x18>
 8023db8:	6a03      	ldr	r3, [r0, #32]
 8023dba:	b90b      	cbnz	r3, 8023dc0 <_vfiprintf_r+0x18>
 8023dbc:	f7ff fc1e 	bl	80235fc <__sinit>
 8023dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023dc2:	07d9      	lsls	r1, r3, #31
 8023dc4:	d405      	bmi.n	8023dd2 <_vfiprintf_r+0x2a>
 8023dc6:	89ab      	ldrh	r3, [r5, #12]
 8023dc8:	059a      	lsls	r2, r3, #22
 8023dca:	d402      	bmi.n	8023dd2 <_vfiprintf_r+0x2a>
 8023dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023dce:	f7ff fdf0 	bl	80239b2 <__retarget_lock_acquire_recursive>
 8023dd2:	89ab      	ldrh	r3, [r5, #12]
 8023dd4:	071b      	lsls	r3, r3, #28
 8023dd6:	d501      	bpl.n	8023ddc <_vfiprintf_r+0x34>
 8023dd8:	692b      	ldr	r3, [r5, #16]
 8023dda:	b99b      	cbnz	r3, 8023e04 <_vfiprintf_r+0x5c>
 8023ddc:	4629      	mov	r1, r5
 8023dde:	4630      	mov	r0, r6
 8023de0:	f000 fb84 	bl	80244ec <__swsetup_r>
 8023de4:	b170      	cbz	r0, 8023e04 <_vfiprintf_r+0x5c>
 8023de6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023de8:	07dc      	lsls	r4, r3, #31
 8023dea:	d504      	bpl.n	8023df6 <_vfiprintf_r+0x4e>
 8023dec:	f04f 30ff 	mov.w	r0, #4294967295
 8023df0:	b01d      	add	sp, #116	@ 0x74
 8023df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023df6:	89ab      	ldrh	r3, [r5, #12]
 8023df8:	0598      	lsls	r0, r3, #22
 8023dfa:	d4f7      	bmi.n	8023dec <_vfiprintf_r+0x44>
 8023dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023dfe:	f7ff fdd9 	bl	80239b4 <__retarget_lock_release_recursive>
 8023e02:	e7f3      	b.n	8023dec <_vfiprintf_r+0x44>
 8023e04:	2300      	movs	r3, #0
 8023e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e08:	2320      	movs	r3, #32
 8023e0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023e12:	2330      	movs	r3, #48	@ 0x30
 8023e14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023fc4 <_vfiprintf_r+0x21c>
 8023e18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023e1c:	f04f 0901 	mov.w	r9, #1
 8023e20:	4623      	mov	r3, r4
 8023e22:	469a      	mov	sl, r3
 8023e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023e28:	b10a      	cbz	r2, 8023e2e <_vfiprintf_r+0x86>
 8023e2a:	2a25      	cmp	r2, #37	@ 0x25
 8023e2c:	d1f9      	bne.n	8023e22 <_vfiprintf_r+0x7a>
 8023e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8023e32:	d00b      	beq.n	8023e4c <_vfiprintf_r+0xa4>
 8023e34:	465b      	mov	r3, fp
 8023e36:	4622      	mov	r2, r4
 8023e38:	4629      	mov	r1, r5
 8023e3a:	4630      	mov	r0, r6
 8023e3c:	f7ff ffa1 	bl	8023d82 <__sfputs_r>
 8023e40:	3001      	adds	r0, #1
 8023e42:	f000 80a7 	beq.w	8023f94 <_vfiprintf_r+0x1ec>
 8023e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023e48:	445a      	add	r2, fp
 8023e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	f000 809f 	beq.w	8023f94 <_vfiprintf_r+0x1ec>
 8023e56:	2300      	movs	r3, #0
 8023e58:	f04f 32ff 	mov.w	r2, #4294967295
 8023e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023e60:	f10a 0a01 	add.w	sl, sl, #1
 8023e64:	9304      	str	r3, [sp, #16]
 8023e66:	9307      	str	r3, [sp, #28]
 8023e68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8023e6e:	4654      	mov	r4, sl
 8023e70:	2205      	movs	r2, #5
 8023e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023e76:	4853      	ldr	r0, [pc, #332]	@ (8023fc4 <_vfiprintf_r+0x21c>)
 8023e78:	f7dc f9ca 	bl	8000210 <memchr>
 8023e7c:	9a04      	ldr	r2, [sp, #16]
 8023e7e:	b9d8      	cbnz	r0, 8023eb8 <_vfiprintf_r+0x110>
 8023e80:	06d1      	lsls	r1, r2, #27
 8023e82:	bf44      	itt	mi
 8023e84:	2320      	movmi	r3, #32
 8023e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023e8a:	0713      	lsls	r3, r2, #28
 8023e8c:	bf44      	itt	mi
 8023e8e:	232b      	movmi	r3, #43	@ 0x2b
 8023e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023e94:	f89a 3000 	ldrb.w	r3, [sl]
 8023e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8023e9a:	d015      	beq.n	8023ec8 <_vfiprintf_r+0x120>
 8023e9c:	9a07      	ldr	r2, [sp, #28]
 8023e9e:	4654      	mov	r4, sl
 8023ea0:	2000      	movs	r0, #0
 8023ea2:	f04f 0c0a 	mov.w	ip, #10
 8023ea6:	4621      	mov	r1, r4
 8023ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023eac:	3b30      	subs	r3, #48	@ 0x30
 8023eae:	2b09      	cmp	r3, #9
 8023eb0:	d94b      	bls.n	8023f4a <_vfiprintf_r+0x1a2>
 8023eb2:	b1b0      	cbz	r0, 8023ee2 <_vfiprintf_r+0x13a>
 8023eb4:	9207      	str	r2, [sp, #28]
 8023eb6:	e014      	b.n	8023ee2 <_vfiprintf_r+0x13a>
 8023eb8:	eba0 0308 	sub.w	r3, r0, r8
 8023ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8023ec0:	4313      	orrs	r3, r2
 8023ec2:	9304      	str	r3, [sp, #16]
 8023ec4:	46a2      	mov	sl, r4
 8023ec6:	e7d2      	b.n	8023e6e <_vfiprintf_r+0xc6>
 8023ec8:	9b03      	ldr	r3, [sp, #12]
 8023eca:	1d19      	adds	r1, r3, #4
 8023ecc:	681b      	ldr	r3, [r3, #0]
 8023ece:	9103      	str	r1, [sp, #12]
 8023ed0:	2b00      	cmp	r3, #0
 8023ed2:	bfbb      	ittet	lt
 8023ed4:	425b      	neglt	r3, r3
 8023ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8023eda:	9307      	strge	r3, [sp, #28]
 8023edc:	9307      	strlt	r3, [sp, #28]
 8023ede:	bfb8      	it	lt
 8023ee0:	9204      	strlt	r2, [sp, #16]
 8023ee2:	7823      	ldrb	r3, [r4, #0]
 8023ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8023ee6:	d10a      	bne.n	8023efe <_vfiprintf_r+0x156>
 8023ee8:	7863      	ldrb	r3, [r4, #1]
 8023eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8023eec:	d132      	bne.n	8023f54 <_vfiprintf_r+0x1ac>
 8023eee:	9b03      	ldr	r3, [sp, #12]
 8023ef0:	1d1a      	adds	r2, r3, #4
 8023ef2:	681b      	ldr	r3, [r3, #0]
 8023ef4:	9203      	str	r2, [sp, #12]
 8023ef6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023efa:	3402      	adds	r4, #2
 8023efc:	9305      	str	r3, [sp, #20]
 8023efe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023fd4 <_vfiprintf_r+0x22c>
 8023f02:	7821      	ldrb	r1, [r4, #0]
 8023f04:	2203      	movs	r2, #3
 8023f06:	4650      	mov	r0, sl
 8023f08:	f7dc f982 	bl	8000210 <memchr>
 8023f0c:	b138      	cbz	r0, 8023f1e <_vfiprintf_r+0x176>
 8023f0e:	9b04      	ldr	r3, [sp, #16]
 8023f10:	eba0 000a 	sub.w	r0, r0, sl
 8023f14:	2240      	movs	r2, #64	@ 0x40
 8023f16:	4082      	lsls	r2, r0
 8023f18:	4313      	orrs	r3, r2
 8023f1a:	3401      	adds	r4, #1
 8023f1c:	9304      	str	r3, [sp, #16]
 8023f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f22:	4829      	ldr	r0, [pc, #164]	@ (8023fc8 <_vfiprintf_r+0x220>)
 8023f24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023f28:	2206      	movs	r2, #6
 8023f2a:	f7dc f971 	bl	8000210 <memchr>
 8023f2e:	2800      	cmp	r0, #0
 8023f30:	d03f      	beq.n	8023fb2 <_vfiprintf_r+0x20a>
 8023f32:	4b26      	ldr	r3, [pc, #152]	@ (8023fcc <_vfiprintf_r+0x224>)
 8023f34:	bb1b      	cbnz	r3, 8023f7e <_vfiprintf_r+0x1d6>
 8023f36:	9b03      	ldr	r3, [sp, #12]
 8023f38:	3307      	adds	r3, #7
 8023f3a:	f023 0307 	bic.w	r3, r3, #7
 8023f3e:	3308      	adds	r3, #8
 8023f40:	9303      	str	r3, [sp, #12]
 8023f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f44:	443b      	add	r3, r7
 8023f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f48:	e76a      	b.n	8023e20 <_vfiprintf_r+0x78>
 8023f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8023f4e:	460c      	mov	r4, r1
 8023f50:	2001      	movs	r0, #1
 8023f52:	e7a8      	b.n	8023ea6 <_vfiprintf_r+0xfe>
 8023f54:	2300      	movs	r3, #0
 8023f56:	3401      	adds	r4, #1
 8023f58:	9305      	str	r3, [sp, #20]
 8023f5a:	4619      	mov	r1, r3
 8023f5c:	f04f 0c0a 	mov.w	ip, #10
 8023f60:	4620      	mov	r0, r4
 8023f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023f66:	3a30      	subs	r2, #48	@ 0x30
 8023f68:	2a09      	cmp	r2, #9
 8023f6a:	d903      	bls.n	8023f74 <_vfiprintf_r+0x1cc>
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d0c6      	beq.n	8023efe <_vfiprintf_r+0x156>
 8023f70:	9105      	str	r1, [sp, #20]
 8023f72:	e7c4      	b.n	8023efe <_vfiprintf_r+0x156>
 8023f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8023f78:	4604      	mov	r4, r0
 8023f7a:	2301      	movs	r3, #1
 8023f7c:	e7f0      	b.n	8023f60 <_vfiprintf_r+0x1b8>
 8023f7e:	ab03      	add	r3, sp, #12
 8023f80:	9300      	str	r3, [sp, #0]
 8023f82:	462a      	mov	r2, r5
 8023f84:	4b12      	ldr	r3, [pc, #72]	@ (8023fd0 <_vfiprintf_r+0x228>)
 8023f86:	a904      	add	r1, sp, #16
 8023f88:	4630      	mov	r0, r6
 8023f8a:	f3af 8000 	nop.w
 8023f8e:	4607      	mov	r7, r0
 8023f90:	1c78      	adds	r0, r7, #1
 8023f92:	d1d6      	bne.n	8023f42 <_vfiprintf_r+0x19a>
 8023f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023f96:	07d9      	lsls	r1, r3, #31
 8023f98:	d405      	bmi.n	8023fa6 <_vfiprintf_r+0x1fe>
 8023f9a:	89ab      	ldrh	r3, [r5, #12]
 8023f9c:	059a      	lsls	r2, r3, #22
 8023f9e:	d402      	bmi.n	8023fa6 <_vfiprintf_r+0x1fe>
 8023fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023fa2:	f7ff fd07 	bl	80239b4 <__retarget_lock_release_recursive>
 8023fa6:	89ab      	ldrh	r3, [r5, #12]
 8023fa8:	065b      	lsls	r3, r3, #25
 8023faa:	f53f af1f 	bmi.w	8023dec <_vfiprintf_r+0x44>
 8023fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023fb0:	e71e      	b.n	8023df0 <_vfiprintf_r+0x48>
 8023fb2:	ab03      	add	r3, sp, #12
 8023fb4:	9300      	str	r3, [sp, #0]
 8023fb6:	462a      	mov	r2, r5
 8023fb8:	4b05      	ldr	r3, [pc, #20]	@ (8023fd0 <_vfiprintf_r+0x228>)
 8023fba:	a904      	add	r1, sp, #16
 8023fbc:	4630      	mov	r0, r6
 8023fbe:	f000 f879 	bl	80240b4 <_printf_i>
 8023fc2:	e7e4      	b.n	8023f8e <_vfiprintf_r+0x1e6>
 8023fc4:	08028224 	.word	0x08028224
 8023fc8:	0802822e 	.word	0x0802822e
 8023fcc:	00000000 	.word	0x00000000
 8023fd0:	08023d83 	.word	0x08023d83
 8023fd4:	0802822a 	.word	0x0802822a

08023fd8 <_printf_common>:
 8023fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023fdc:	4616      	mov	r6, r2
 8023fde:	4698      	mov	r8, r3
 8023fe0:	688a      	ldr	r2, [r1, #8]
 8023fe2:	690b      	ldr	r3, [r1, #16]
 8023fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023fe8:	4293      	cmp	r3, r2
 8023fea:	bfb8      	it	lt
 8023fec:	4613      	movlt	r3, r2
 8023fee:	6033      	str	r3, [r6, #0]
 8023ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023ff4:	4607      	mov	r7, r0
 8023ff6:	460c      	mov	r4, r1
 8023ff8:	b10a      	cbz	r2, 8023ffe <_printf_common+0x26>
 8023ffa:	3301      	adds	r3, #1
 8023ffc:	6033      	str	r3, [r6, #0]
 8023ffe:	6823      	ldr	r3, [r4, #0]
 8024000:	0699      	lsls	r1, r3, #26
 8024002:	bf42      	ittt	mi
 8024004:	6833      	ldrmi	r3, [r6, #0]
 8024006:	3302      	addmi	r3, #2
 8024008:	6033      	strmi	r3, [r6, #0]
 802400a:	6825      	ldr	r5, [r4, #0]
 802400c:	f015 0506 	ands.w	r5, r5, #6
 8024010:	d106      	bne.n	8024020 <_printf_common+0x48>
 8024012:	f104 0a19 	add.w	sl, r4, #25
 8024016:	68e3      	ldr	r3, [r4, #12]
 8024018:	6832      	ldr	r2, [r6, #0]
 802401a:	1a9b      	subs	r3, r3, r2
 802401c:	42ab      	cmp	r3, r5
 802401e:	dc26      	bgt.n	802406e <_printf_common+0x96>
 8024020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024024:	6822      	ldr	r2, [r4, #0]
 8024026:	3b00      	subs	r3, #0
 8024028:	bf18      	it	ne
 802402a:	2301      	movne	r3, #1
 802402c:	0692      	lsls	r2, r2, #26
 802402e:	d42b      	bmi.n	8024088 <_printf_common+0xb0>
 8024030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024034:	4641      	mov	r1, r8
 8024036:	4638      	mov	r0, r7
 8024038:	47c8      	blx	r9
 802403a:	3001      	adds	r0, #1
 802403c:	d01e      	beq.n	802407c <_printf_common+0xa4>
 802403e:	6823      	ldr	r3, [r4, #0]
 8024040:	6922      	ldr	r2, [r4, #16]
 8024042:	f003 0306 	and.w	r3, r3, #6
 8024046:	2b04      	cmp	r3, #4
 8024048:	bf02      	ittt	eq
 802404a:	68e5      	ldreq	r5, [r4, #12]
 802404c:	6833      	ldreq	r3, [r6, #0]
 802404e:	1aed      	subeq	r5, r5, r3
 8024050:	68a3      	ldr	r3, [r4, #8]
 8024052:	bf0c      	ite	eq
 8024054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024058:	2500      	movne	r5, #0
 802405a:	4293      	cmp	r3, r2
 802405c:	bfc4      	itt	gt
 802405e:	1a9b      	subgt	r3, r3, r2
 8024060:	18ed      	addgt	r5, r5, r3
 8024062:	2600      	movs	r6, #0
 8024064:	341a      	adds	r4, #26
 8024066:	42b5      	cmp	r5, r6
 8024068:	d11a      	bne.n	80240a0 <_printf_common+0xc8>
 802406a:	2000      	movs	r0, #0
 802406c:	e008      	b.n	8024080 <_printf_common+0xa8>
 802406e:	2301      	movs	r3, #1
 8024070:	4652      	mov	r2, sl
 8024072:	4641      	mov	r1, r8
 8024074:	4638      	mov	r0, r7
 8024076:	47c8      	blx	r9
 8024078:	3001      	adds	r0, #1
 802407a:	d103      	bne.n	8024084 <_printf_common+0xac>
 802407c:	f04f 30ff 	mov.w	r0, #4294967295
 8024080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024084:	3501      	adds	r5, #1
 8024086:	e7c6      	b.n	8024016 <_printf_common+0x3e>
 8024088:	18e1      	adds	r1, r4, r3
 802408a:	1c5a      	adds	r2, r3, #1
 802408c:	2030      	movs	r0, #48	@ 0x30
 802408e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024092:	4422      	add	r2, r4
 8024094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802409c:	3302      	adds	r3, #2
 802409e:	e7c7      	b.n	8024030 <_printf_common+0x58>
 80240a0:	2301      	movs	r3, #1
 80240a2:	4622      	mov	r2, r4
 80240a4:	4641      	mov	r1, r8
 80240a6:	4638      	mov	r0, r7
 80240a8:	47c8      	blx	r9
 80240aa:	3001      	adds	r0, #1
 80240ac:	d0e6      	beq.n	802407c <_printf_common+0xa4>
 80240ae:	3601      	adds	r6, #1
 80240b0:	e7d9      	b.n	8024066 <_printf_common+0x8e>
	...

080240b4 <_printf_i>:
 80240b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80240b8:	7e0f      	ldrb	r7, [r1, #24]
 80240ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80240bc:	2f78      	cmp	r7, #120	@ 0x78
 80240be:	4691      	mov	r9, r2
 80240c0:	4680      	mov	r8, r0
 80240c2:	460c      	mov	r4, r1
 80240c4:	469a      	mov	sl, r3
 80240c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80240ca:	d807      	bhi.n	80240dc <_printf_i+0x28>
 80240cc:	2f62      	cmp	r7, #98	@ 0x62
 80240ce:	d80a      	bhi.n	80240e6 <_printf_i+0x32>
 80240d0:	2f00      	cmp	r7, #0
 80240d2:	f000 80d2 	beq.w	802427a <_printf_i+0x1c6>
 80240d6:	2f58      	cmp	r7, #88	@ 0x58
 80240d8:	f000 80b9 	beq.w	802424e <_printf_i+0x19a>
 80240dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80240e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80240e4:	e03a      	b.n	802415c <_printf_i+0xa8>
 80240e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80240ea:	2b15      	cmp	r3, #21
 80240ec:	d8f6      	bhi.n	80240dc <_printf_i+0x28>
 80240ee:	a101      	add	r1, pc, #4	@ (adr r1, 80240f4 <_printf_i+0x40>)
 80240f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80240f4:	0802414d 	.word	0x0802414d
 80240f8:	08024161 	.word	0x08024161
 80240fc:	080240dd 	.word	0x080240dd
 8024100:	080240dd 	.word	0x080240dd
 8024104:	080240dd 	.word	0x080240dd
 8024108:	080240dd 	.word	0x080240dd
 802410c:	08024161 	.word	0x08024161
 8024110:	080240dd 	.word	0x080240dd
 8024114:	080240dd 	.word	0x080240dd
 8024118:	080240dd 	.word	0x080240dd
 802411c:	080240dd 	.word	0x080240dd
 8024120:	08024261 	.word	0x08024261
 8024124:	0802418b 	.word	0x0802418b
 8024128:	0802421b 	.word	0x0802421b
 802412c:	080240dd 	.word	0x080240dd
 8024130:	080240dd 	.word	0x080240dd
 8024134:	08024283 	.word	0x08024283
 8024138:	080240dd 	.word	0x080240dd
 802413c:	0802418b 	.word	0x0802418b
 8024140:	080240dd 	.word	0x080240dd
 8024144:	080240dd 	.word	0x080240dd
 8024148:	08024223 	.word	0x08024223
 802414c:	6833      	ldr	r3, [r6, #0]
 802414e:	1d1a      	adds	r2, r3, #4
 8024150:	681b      	ldr	r3, [r3, #0]
 8024152:	6032      	str	r2, [r6, #0]
 8024154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802415c:	2301      	movs	r3, #1
 802415e:	e09d      	b.n	802429c <_printf_i+0x1e8>
 8024160:	6833      	ldr	r3, [r6, #0]
 8024162:	6820      	ldr	r0, [r4, #0]
 8024164:	1d19      	adds	r1, r3, #4
 8024166:	6031      	str	r1, [r6, #0]
 8024168:	0606      	lsls	r6, r0, #24
 802416a:	d501      	bpl.n	8024170 <_printf_i+0xbc>
 802416c:	681d      	ldr	r5, [r3, #0]
 802416e:	e003      	b.n	8024178 <_printf_i+0xc4>
 8024170:	0645      	lsls	r5, r0, #25
 8024172:	d5fb      	bpl.n	802416c <_printf_i+0xb8>
 8024174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024178:	2d00      	cmp	r5, #0
 802417a:	da03      	bge.n	8024184 <_printf_i+0xd0>
 802417c:	232d      	movs	r3, #45	@ 0x2d
 802417e:	426d      	negs	r5, r5
 8024180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024184:	4859      	ldr	r0, [pc, #356]	@ (80242ec <_printf_i+0x238>)
 8024186:	230a      	movs	r3, #10
 8024188:	e011      	b.n	80241ae <_printf_i+0xfa>
 802418a:	6821      	ldr	r1, [r4, #0]
 802418c:	6833      	ldr	r3, [r6, #0]
 802418e:	0608      	lsls	r0, r1, #24
 8024190:	f853 5b04 	ldr.w	r5, [r3], #4
 8024194:	d402      	bmi.n	802419c <_printf_i+0xe8>
 8024196:	0649      	lsls	r1, r1, #25
 8024198:	bf48      	it	mi
 802419a:	b2ad      	uxthmi	r5, r5
 802419c:	2f6f      	cmp	r7, #111	@ 0x6f
 802419e:	4853      	ldr	r0, [pc, #332]	@ (80242ec <_printf_i+0x238>)
 80241a0:	6033      	str	r3, [r6, #0]
 80241a2:	bf14      	ite	ne
 80241a4:	230a      	movne	r3, #10
 80241a6:	2308      	moveq	r3, #8
 80241a8:	2100      	movs	r1, #0
 80241aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80241ae:	6866      	ldr	r6, [r4, #4]
 80241b0:	60a6      	str	r6, [r4, #8]
 80241b2:	2e00      	cmp	r6, #0
 80241b4:	bfa2      	ittt	ge
 80241b6:	6821      	ldrge	r1, [r4, #0]
 80241b8:	f021 0104 	bicge.w	r1, r1, #4
 80241bc:	6021      	strge	r1, [r4, #0]
 80241be:	b90d      	cbnz	r5, 80241c4 <_printf_i+0x110>
 80241c0:	2e00      	cmp	r6, #0
 80241c2:	d04b      	beq.n	802425c <_printf_i+0x1a8>
 80241c4:	4616      	mov	r6, r2
 80241c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80241ca:	fb03 5711 	mls	r7, r3, r1, r5
 80241ce:	5dc7      	ldrb	r7, [r0, r7]
 80241d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80241d4:	462f      	mov	r7, r5
 80241d6:	42bb      	cmp	r3, r7
 80241d8:	460d      	mov	r5, r1
 80241da:	d9f4      	bls.n	80241c6 <_printf_i+0x112>
 80241dc:	2b08      	cmp	r3, #8
 80241de:	d10b      	bne.n	80241f8 <_printf_i+0x144>
 80241e0:	6823      	ldr	r3, [r4, #0]
 80241e2:	07df      	lsls	r7, r3, #31
 80241e4:	d508      	bpl.n	80241f8 <_printf_i+0x144>
 80241e6:	6923      	ldr	r3, [r4, #16]
 80241e8:	6861      	ldr	r1, [r4, #4]
 80241ea:	4299      	cmp	r1, r3
 80241ec:	bfde      	ittt	le
 80241ee:	2330      	movle	r3, #48	@ 0x30
 80241f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80241f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80241f8:	1b92      	subs	r2, r2, r6
 80241fa:	6122      	str	r2, [r4, #16]
 80241fc:	f8cd a000 	str.w	sl, [sp]
 8024200:	464b      	mov	r3, r9
 8024202:	aa03      	add	r2, sp, #12
 8024204:	4621      	mov	r1, r4
 8024206:	4640      	mov	r0, r8
 8024208:	f7ff fee6 	bl	8023fd8 <_printf_common>
 802420c:	3001      	adds	r0, #1
 802420e:	d14a      	bne.n	80242a6 <_printf_i+0x1f2>
 8024210:	f04f 30ff 	mov.w	r0, #4294967295
 8024214:	b004      	add	sp, #16
 8024216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802421a:	6823      	ldr	r3, [r4, #0]
 802421c:	f043 0320 	orr.w	r3, r3, #32
 8024220:	6023      	str	r3, [r4, #0]
 8024222:	4833      	ldr	r0, [pc, #204]	@ (80242f0 <_printf_i+0x23c>)
 8024224:	2778      	movs	r7, #120	@ 0x78
 8024226:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802422a:	6823      	ldr	r3, [r4, #0]
 802422c:	6831      	ldr	r1, [r6, #0]
 802422e:	061f      	lsls	r7, r3, #24
 8024230:	f851 5b04 	ldr.w	r5, [r1], #4
 8024234:	d402      	bmi.n	802423c <_printf_i+0x188>
 8024236:	065f      	lsls	r7, r3, #25
 8024238:	bf48      	it	mi
 802423a:	b2ad      	uxthmi	r5, r5
 802423c:	6031      	str	r1, [r6, #0]
 802423e:	07d9      	lsls	r1, r3, #31
 8024240:	bf44      	itt	mi
 8024242:	f043 0320 	orrmi.w	r3, r3, #32
 8024246:	6023      	strmi	r3, [r4, #0]
 8024248:	b11d      	cbz	r5, 8024252 <_printf_i+0x19e>
 802424a:	2310      	movs	r3, #16
 802424c:	e7ac      	b.n	80241a8 <_printf_i+0xf4>
 802424e:	4827      	ldr	r0, [pc, #156]	@ (80242ec <_printf_i+0x238>)
 8024250:	e7e9      	b.n	8024226 <_printf_i+0x172>
 8024252:	6823      	ldr	r3, [r4, #0]
 8024254:	f023 0320 	bic.w	r3, r3, #32
 8024258:	6023      	str	r3, [r4, #0]
 802425a:	e7f6      	b.n	802424a <_printf_i+0x196>
 802425c:	4616      	mov	r6, r2
 802425e:	e7bd      	b.n	80241dc <_printf_i+0x128>
 8024260:	6833      	ldr	r3, [r6, #0]
 8024262:	6825      	ldr	r5, [r4, #0]
 8024264:	6961      	ldr	r1, [r4, #20]
 8024266:	1d18      	adds	r0, r3, #4
 8024268:	6030      	str	r0, [r6, #0]
 802426a:	062e      	lsls	r6, r5, #24
 802426c:	681b      	ldr	r3, [r3, #0]
 802426e:	d501      	bpl.n	8024274 <_printf_i+0x1c0>
 8024270:	6019      	str	r1, [r3, #0]
 8024272:	e002      	b.n	802427a <_printf_i+0x1c6>
 8024274:	0668      	lsls	r0, r5, #25
 8024276:	d5fb      	bpl.n	8024270 <_printf_i+0x1bc>
 8024278:	8019      	strh	r1, [r3, #0]
 802427a:	2300      	movs	r3, #0
 802427c:	6123      	str	r3, [r4, #16]
 802427e:	4616      	mov	r6, r2
 8024280:	e7bc      	b.n	80241fc <_printf_i+0x148>
 8024282:	6833      	ldr	r3, [r6, #0]
 8024284:	1d1a      	adds	r2, r3, #4
 8024286:	6032      	str	r2, [r6, #0]
 8024288:	681e      	ldr	r6, [r3, #0]
 802428a:	6862      	ldr	r2, [r4, #4]
 802428c:	2100      	movs	r1, #0
 802428e:	4630      	mov	r0, r6
 8024290:	f7db ffbe 	bl	8000210 <memchr>
 8024294:	b108      	cbz	r0, 802429a <_printf_i+0x1e6>
 8024296:	1b80      	subs	r0, r0, r6
 8024298:	6060      	str	r0, [r4, #4]
 802429a:	6863      	ldr	r3, [r4, #4]
 802429c:	6123      	str	r3, [r4, #16]
 802429e:	2300      	movs	r3, #0
 80242a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80242a4:	e7aa      	b.n	80241fc <_printf_i+0x148>
 80242a6:	6923      	ldr	r3, [r4, #16]
 80242a8:	4632      	mov	r2, r6
 80242aa:	4649      	mov	r1, r9
 80242ac:	4640      	mov	r0, r8
 80242ae:	47d0      	blx	sl
 80242b0:	3001      	adds	r0, #1
 80242b2:	d0ad      	beq.n	8024210 <_printf_i+0x15c>
 80242b4:	6823      	ldr	r3, [r4, #0]
 80242b6:	079b      	lsls	r3, r3, #30
 80242b8:	d413      	bmi.n	80242e2 <_printf_i+0x22e>
 80242ba:	68e0      	ldr	r0, [r4, #12]
 80242bc:	9b03      	ldr	r3, [sp, #12]
 80242be:	4298      	cmp	r0, r3
 80242c0:	bfb8      	it	lt
 80242c2:	4618      	movlt	r0, r3
 80242c4:	e7a6      	b.n	8024214 <_printf_i+0x160>
 80242c6:	2301      	movs	r3, #1
 80242c8:	4632      	mov	r2, r6
 80242ca:	4649      	mov	r1, r9
 80242cc:	4640      	mov	r0, r8
 80242ce:	47d0      	blx	sl
 80242d0:	3001      	adds	r0, #1
 80242d2:	d09d      	beq.n	8024210 <_printf_i+0x15c>
 80242d4:	3501      	adds	r5, #1
 80242d6:	68e3      	ldr	r3, [r4, #12]
 80242d8:	9903      	ldr	r1, [sp, #12]
 80242da:	1a5b      	subs	r3, r3, r1
 80242dc:	42ab      	cmp	r3, r5
 80242de:	dcf2      	bgt.n	80242c6 <_printf_i+0x212>
 80242e0:	e7eb      	b.n	80242ba <_printf_i+0x206>
 80242e2:	2500      	movs	r5, #0
 80242e4:	f104 0619 	add.w	r6, r4, #25
 80242e8:	e7f5      	b.n	80242d6 <_printf_i+0x222>
 80242ea:	bf00      	nop
 80242ec:	08028235 	.word	0x08028235
 80242f0:	08028246 	.word	0x08028246

080242f4 <__sflush_r>:
 80242f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80242f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242fc:	0716      	lsls	r6, r2, #28
 80242fe:	4605      	mov	r5, r0
 8024300:	460c      	mov	r4, r1
 8024302:	d454      	bmi.n	80243ae <__sflush_r+0xba>
 8024304:	684b      	ldr	r3, [r1, #4]
 8024306:	2b00      	cmp	r3, #0
 8024308:	dc02      	bgt.n	8024310 <__sflush_r+0x1c>
 802430a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802430c:	2b00      	cmp	r3, #0
 802430e:	dd48      	ble.n	80243a2 <__sflush_r+0xae>
 8024310:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024312:	2e00      	cmp	r6, #0
 8024314:	d045      	beq.n	80243a2 <__sflush_r+0xae>
 8024316:	2300      	movs	r3, #0
 8024318:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802431c:	682f      	ldr	r7, [r5, #0]
 802431e:	6a21      	ldr	r1, [r4, #32]
 8024320:	602b      	str	r3, [r5, #0]
 8024322:	d030      	beq.n	8024386 <__sflush_r+0x92>
 8024324:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024326:	89a3      	ldrh	r3, [r4, #12]
 8024328:	0759      	lsls	r1, r3, #29
 802432a:	d505      	bpl.n	8024338 <__sflush_r+0x44>
 802432c:	6863      	ldr	r3, [r4, #4]
 802432e:	1ad2      	subs	r2, r2, r3
 8024330:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024332:	b10b      	cbz	r3, 8024338 <__sflush_r+0x44>
 8024334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024336:	1ad2      	subs	r2, r2, r3
 8024338:	2300      	movs	r3, #0
 802433a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802433c:	6a21      	ldr	r1, [r4, #32]
 802433e:	4628      	mov	r0, r5
 8024340:	47b0      	blx	r6
 8024342:	1c43      	adds	r3, r0, #1
 8024344:	89a3      	ldrh	r3, [r4, #12]
 8024346:	d106      	bne.n	8024356 <__sflush_r+0x62>
 8024348:	6829      	ldr	r1, [r5, #0]
 802434a:	291d      	cmp	r1, #29
 802434c:	d82b      	bhi.n	80243a6 <__sflush_r+0xb2>
 802434e:	4a2a      	ldr	r2, [pc, #168]	@ (80243f8 <__sflush_r+0x104>)
 8024350:	410a      	asrs	r2, r1
 8024352:	07d6      	lsls	r6, r2, #31
 8024354:	d427      	bmi.n	80243a6 <__sflush_r+0xb2>
 8024356:	2200      	movs	r2, #0
 8024358:	6062      	str	r2, [r4, #4]
 802435a:	04d9      	lsls	r1, r3, #19
 802435c:	6922      	ldr	r2, [r4, #16]
 802435e:	6022      	str	r2, [r4, #0]
 8024360:	d504      	bpl.n	802436c <__sflush_r+0x78>
 8024362:	1c42      	adds	r2, r0, #1
 8024364:	d101      	bne.n	802436a <__sflush_r+0x76>
 8024366:	682b      	ldr	r3, [r5, #0]
 8024368:	b903      	cbnz	r3, 802436c <__sflush_r+0x78>
 802436a:	6560      	str	r0, [r4, #84]	@ 0x54
 802436c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802436e:	602f      	str	r7, [r5, #0]
 8024370:	b1b9      	cbz	r1, 80243a2 <__sflush_r+0xae>
 8024372:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024376:	4299      	cmp	r1, r3
 8024378:	d002      	beq.n	8024380 <__sflush_r+0x8c>
 802437a:	4628      	mov	r0, r5
 802437c:	f7ff fb48 	bl	8023a10 <_free_r>
 8024380:	2300      	movs	r3, #0
 8024382:	6363      	str	r3, [r4, #52]	@ 0x34
 8024384:	e00d      	b.n	80243a2 <__sflush_r+0xae>
 8024386:	2301      	movs	r3, #1
 8024388:	4628      	mov	r0, r5
 802438a:	47b0      	blx	r6
 802438c:	4602      	mov	r2, r0
 802438e:	1c50      	adds	r0, r2, #1
 8024390:	d1c9      	bne.n	8024326 <__sflush_r+0x32>
 8024392:	682b      	ldr	r3, [r5, #0]
 8024394:	2b00      	cmp	r3, #0
 8024396:	d0c6      	beq.n	8024326 <__sflush_r+0x32>
 8024398:	2b1d      	cmp	r3, #29
 802439a:	d001      	beq.n	80243a0 <__sflush_r+0xac>
 802439c:	2b16      	cmp	r3, #22
 802439e:	d11e      	bne.n	80243de <__sflush_r+0xea>
 80243a0:	602f      	str	r7, [r5, #0]
 80243a2:	2000      	movs	r0, #0
 80243a4:	e022      	b.n	80243ec <__sflush_r+0xf8>
 80243a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80243aa:	b21b      	sxth	r3, r3
 80243ac:	e01b      	b.n	80243e6 <__sflush_r+0xf2>
 80243ae:	690f      	ldr	r7, [r1, #16]
 80243b0:	2f00      	cmp	r7, #0
 80243b2:	d0f6      	beq.n	80243a2 <__sflush_r+0xae>
 80243b4:	0793      	lsls	r3, r2, #30
 80243b6:	680e      	ldr	r6, [r1, #0]
 80243b8:	bf08      	it	eq
 80243ba:	694b      	ldreq	r3, [r1, #20]
 80243bc:	600f      	str	r7, [r1, #0]
 80243be:	bf18      	it	ne
 80243c0:	2300      	movne	r3, #0
 80243c2:	eba6 0807 	sub.w	r8, r6, r7
 80243c6:	608b      	str	r3, [r1, #8]
 80243c8:	f1b8 0f00 	cmp.w	r8, #0
 80243cc:	dde9      	ble.n	80243a2 <__sflush_r+0xae>
 80243ce:	6a21      	ldr	r1, [r4, #32]
 80243d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80243d2:	4643      	mov	r3, r8
 80243d4:	463a      	mov	r2, r7
 80243d6:	4628      	mov	r0, r5
 80243d8:	47b0      	blx	r6
 80243da:	2800      	cmp	r0, #0
 80243dc:	dc08      	bgt.n	80243f0 <__sflush_r+0xfc>
 80243de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80243e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80243e6:	81a3      	strh	r3, [r4, #12]
 80243e8:	f04f 30ff 	mov.w	r0, #4294967295
 80243ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80243f0:	4407      	add	r7, r0
 80243f2:	eba8 0800 	sub.w	r8, r8, r0
 80243f6:	e7e7      	b.n	80243c8 <__sflush_r+0xd4>
 80243f8:	dfbffffe 	.word	0xdfbffffe

080243fc <_fflush_r>:
 80243fc:	b538      	push	{r3, r4, r5, lr}
 80243fe:	690b      	ldr	r3, [r1, #16]
 8024400:	4605      	mov	r5, r0
 8024402:	460c      	mov	r4, r1
 8024404:	b913      	cbnz	r3, 802440c <_fflush_r+0x10>
 8024406:	2500      	movs	r5, #0
 8024408:	4628      	mov	r0, r5
 802440a:	bd38      	pop	{r3, r4, r5, pc}
 802440c:	b118      	cbz	r0, 8024416 <_fflush_r+0x1a>
 802440e:	6a03      	ldr	r3, [r0, #32]
 8024410:	b90b      	cbnz	r3, 8024416 <_fflush_r+0x1a>
 8024412:	f7ff f8f3 	bl	80235fc <__sinit>
 8024416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802441a:	2b00      	cmp	r3, #0
 802441c:	d0f3      	beq.n	8024406 <_fflush_r+0xa>
 802441e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024420:	07d0      	lsls	r0, r2, #31
 8024422:	d404      	bmi.n	802442e <_fflush_r+0x32>
 8024424:	0599      	lsls	r1, r3, #22
 8024426:	d402      	bmi.n	802442e <_fflush_r+0x32>
 8024428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802442a:	f7ff fac2 	bl	80239b2 <__retarget_lock_acquire_recursive>
 802442e:	4628      	mov	r0, r5
 8024430:	4621      	mov	r1, r4
 8024432:	f7ff ff5f 	bl	80242f4 <__sflush_r>
 8024436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024438:	07da      	lsls	r2, r3, #31
 802443a:	4605      	mov	r5, r0
 802443c:	d4e4      	bmi.n	8024408 <_fflush_r+0xc>
 802443e:	89a3      	ldrh	r3, [r4, #12]
 8024440:	059b      	lsls	r3, r3, #22
 8024442:	d4e1      	bmi.n	8024408 <_fflush_r+0xc>
 8024444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024446:	f7ff fab5 	bl	80239b4 <__retarget_lock_release_recursive>
 802444a:	e7dd      	b.n	8024408 <_fflush_r+0xc>

0802444c <fiprintf>:
 802444c:	b40e      	push	{r1, r2, r3}
 802444e:	b503      	push	{r0, r1, lr}
 8024450:	4601      	mov	r1, r0
 8024452:	ab03      	add	r3, sp, #12
 8024454:	4805      	ldr	r0, [pc, #20]	@ (802446c <fiprintf+0x20>)
 8024456:	f853 2b04 	ldr.w	r2, [r3], #4
 802445a:	6800      	ldr	r0, [r0, #0]
 802445c:	9301      	str	r3, [sp, #4]
 802445e:	f7ff fca3 	bl	8023da8 <_vfiprintf_r>
 8024462:	b002      	add	sp, #8
 8024464:	f85d eb04 	ldr.w	lr, [sp], #4
 8024468:	b003      	add	sp, #12
 802446a:	4770      	bx	lr
 802446c:	2000005c 	.word	0x2000005c

08024470 <__swbuf_r>:
 8024470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024472:	460e      	mov	r6, r1
 8024474:	4614      	mov	r4, r2
 8024476:	4605      	mov	r5, r0
 8024478:	b118      	cbz	r0, 8024482 <__swbuf_r+0x12>
 802447a:	6a03      	ldr	r3, [r0, #32]
 802447c:	b90b      	cbnz	r3, 8024482 <__swbuf_r+0x12>
 802447e:	f7ff f8bd 	bl	80235fc <__sinit>
 8024482:	69a3      	ldr	r3, [r4, #24]
 8024484:	60a3      	str	r3, [r4, #8]
 8024486:	89a3      	ldrh	r3, [r4, #12]
 8024488:	071a      	lsls	r2, r3, #28
 802448a:	d501      	bpl.n	8024490 <__swbuf_r+0x20>
 802448c:	6923      	ldr	r3, [r4, #16]
 802448e:	b943      	cbnz	r3, 80244a2 <__swbuf_r+0x32>
 8024490:	4621      	mov	r1, r4
 8024492:	4628      	mov	r0, r5
 8024494:	f000 f82a 	bl	80244ec <__swsetup_r>
 8024498:	b118      	cbz	r0, 80244a2 <__swbuf_r+0x32>
 802449a:	f04f 37ff 	mov.w	r7, #4294967295
 802449e:	4638      	mov	r0, r7
 80244a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80244a2:	6823      	ldr	r3, [r4, #0]
 80244a4:	6922      	ldr	r2, [r4, #16]
 80244a6:	1a98      	subs	r0, r3, r2
 80244a8:	6963      	ldr	r3, [r4, #20]
 80244aa:	b2f6      	uxtb	r6, r6
 80244ac:	4283      	cmp	r3, r0
 80244ae:	4637      	mov	r7, r6
 80244b0:	dc05      	bgt.n	80244be <__swbuf_r+0x4e>
 80244b2:	4621      	mov	r1, r4
 80244b4:	4628      	mov	r0, r5
 80244b6:	f7ff ffa1 	bl	80243fc <_fflush_r>
 80244ba:	2800      	cmp	r0, #0
 80244bc:	d1ed      	bne.n	802449a <__swbuf_r+0x2a>
 80244be:	68a3      	ldr	r3, [r4, #8]
 80244c0:	3b01      	subs	r3, #1
 80244c2:	60a3      	str	r3, [r4, #8]
 80244c4:	6823      	ldr	r3, [r4, #0]
 80244c6:	1c5a      	adds	r2, r3, #1
 80244c8:	6022      	str	r2, [r4, #0]
 80244ca:	701e      	strb	r6, [r3, #0]
 80244cc:	6962      	ldr	r2, [r4, #20]
 80244ce:	1c43      	adds	r3, r0, #1
 80244d0:	429a      	cmp	r2, r3
 80244d2:	d004      	beq.n	80244de <__swbuf_r+0x6e>
 80244d4:	89a3      	ldrh	r3, [r4, #12]
 80244d6:	07db      	lsls	r3, r3, #31
 80244d8:	d5e1      	bpl.n	802449e <__swbuf_r+0x2e>
 80244da:	2e0a      	cmp	r6, #10
 80244dc:	d1df      	bne.n	802449e <__swbuf_r+0x2e>
 80244de:	4621      	mov	r1, r4
 80244e0:	4628      	mov	r0, r5
 80244e2:	f7ff ff8b 	bl	80243fc <_fflush_r>
 80244e6:	2800      	cmp	r0, #0
 80244e8:	d0d9      	beq.n	802449e <__swbuf_r+0x2e>
 80244ea:	e7d6      	b.n	802449a <__swbuf_r+0x2a>

080244ec <__swsetup_r>:
 80244ec:	b538      	push	{r3, r4, r5, lr}
 80244ee:	4b29      	ldr	r3, [pc, #164]	@ (8024594 <__swsetup_r+0xa8>)
 80244f0:	4605      	mov	r5, r0
 80244f2:	6818      	ldr	r0, [r3, #0]
 80244f4:	460c      	mov	r4, r1
 80244f6:	b118      	cbz	r0, 8024500 <__swsetup_r+0x14>
 80244f8:	6a03      	ldr	r3, [r0, #32]
 80244fa:	b90b      	cbnz	r3, 8024500 <__swsetup_r+0x14>
 80244fc:	f7ff f87e 	bl	80235fc <__sinit>
 8024500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024504:	0719      	lsls	r1, r3, #28
 8024506:	d422      	bmi.n	802454e <__swsetup_r+0x62>
 8024508:	06da      	lsls	r2, r3, #27
 802450a:	d407      	bmi.n	802451c <__swsetup_r+0x30>
 802450c:	2209      	movs	r2, #9
 802450e:	602a      	str	r2, [r5, #0]
 8024510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024514:	81a3      	strh	r3, [r4, #12]
 8024516:	f04f 30ff 	mov.w	r0, #4294967295
 802451a:	e033      	b.n	8024584 <__swsetup_r+0x98>
 802451c:	0758      	lsls	r0, r3, #29
 802451e:	d512      	bpl.n	8024546 <__swsetup_r+0x5a>
 8024520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024522:	b141      	cbz	r1, 8024536 <__swsetup_r+0x4a>
 8024524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024528:	4299      	cmp	r1, r3
 802452a:	d002      	beq.n	8024532 <__swsetup_r+0x46>
 802452c:	4628      	mov	r0, r5
 802452e:	f7ff fa6f 	bl	8023a10 <_free_r>
 8024532:	2300      	movs	r3, #0
 8024534:	6363      	str	r3, [r4, #52]	@ 0x34
 8024536:	89a3      	ldrh	r3, [r4, #12]
 8024538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802453c:	81a3      	strh	r3, [r4, #12]
 802453e:	2300      	movs	r3, #0
 8024540:	6063      	str	r3, [r4, #4]
 8024542:	6923      	ldr	r3, [r4, #16]
 8024544:	6023      	str	r3, [r4, #0]
 8024546:	89a3      	ldrh	r3, [r4, #12]
 8024548:	f043 0308 	orr.w	r3, r3, #8
 802454c:	81a3      	strh	r3, [r4, #12]
 802454e:	6923      	ldr	r3, [r4, #16]
 8024550:	b94b      	cbnz	r3, 8024566 <__swsetup_r+0x7a>
 8024552:	89a3      	ldrh	r3, [r4, #12]
 8024554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802455c:	d003      	beq.n	8024566 <__swsetup_r+0x7a>
 802455e:	4621      	mov	r1, r4
 8024560:	4628      	mov	r0, r5
 8024562:	f000 f874 	bl	802464e <__smakebuf_r>
 8024566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802456a:	f013 0201 	ands.w	r2, r3, #1
 802456e:	d00a      	beq.n	8024586 <__swsetup_r+0x9a>
 8024570:	2200      	movs	r2, #0
 8024572:	60a2      	str	r2, [r4, #8]
 8024574:	6962      	ldr	r2, [r4, #20]
 8024576:	4252      	negs	r2, r2
 8024578:	61a2      	str	r2, [r4, #24]
 802457a:	6922      	ldr	r2, [r4, #16]
 802457c:	b942      	cbnz	r2, 8024590 <__swsetup_r+0xa4>
 802457e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024582:	d1c5      	bne.n	8024510 <__swsetup_r+0x24>
 8024584:	bd38      	pop	{r3, r4, r5, pc}
 8024586:	0799      	lsls	r1, r3, #30
 8024588:	bf58      	it	pl
 802458a:	6962      	ldrpl	r2, [r4, #20]
 802458c:	60a2      	str	r2, [r4, #8]
 802458e:	e7f4      	b.n	802457a <__swsetup_r+0x8e>
 8024590:	2000      	movs	r0, #0
 8024592:	e7f7      	b.n	8024584 <__swsetup_r+0x98>
 8024594:	2000005c 	.word	0x2000005c

08024598 <abort>:
 8024598:	b508      	push	{r3, lr}
 802459a:	2006      	movs	r0, #6
 802459c:	f000 f8bc 	bl	8024718 <raise>
 80245a0:	2001      	movs	r0, #1
 80245a2:	f7df f8bb 	bl	800371c <_exit>

080245a6 <_realloc_r>:
 80245a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245aa:	4680      	mov	r8, r0
 80245ac:	4615      	mov	r5, r2
 80245ae:	460c      	mov	r4, r1
 80245b0:	b921      	cbnz	r1, 80245bc <_realloc_r+0x16>
 80245b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80245b6:	4611      	mov	r1, r2
 80245b8:	f7fe be46 	b.w	8023248 <_malloc_r>
 80245bc:	b92a      	cbnz	r2, 80245ca <_realloc_r+0x24>
 80245be:	f7ff fa27 	bl	8023a10 <_free_r>
 80245c2:	2400      	movs	r4, #0
 80245c4:	4620      	mov	r0, r4
 80245c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245ca:	f000 f8e3 	bl	8024794 <_malloc_usable_size_r>
 80245ce:	4285      	cmp	r5, r0
 80245d0:	4606      	mov	r6, r0
 80245d2:	d802      	bhi.n	80245da <_realloc_r+0x34>
 80245d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80245d8:	d8f4      	bhi.n	80245c4 <_realloc_r+0x1e>
 80245da:	4629      	mov	r1, r5
 80245dc:	4640      	mov	r0, r8
 80245de:	f7fe fe33 	bl	8023248 <_malloc_r>
 80245e2:	4607      	mov	r7, r0
 80245e4:	2800      	cmp	r0, #0
 80245e6:	d0ec      	beq.n	80245c2 <_realloc_r+0x1c>
 80245e8:	42b5      	cmp	r5, r6
 80245ea:	462a      	mov	r2, r5
 80245ec:	4621      	mov	r1, r4
 80245ee:	bf28      	it	cs
 80245f0:	4632      	movcs	r2, r6
 80245f2:	f7ff f9e0 	bl	80239b6 <memcpy>
 80245f6:	4621      	mov	r1, r4
 80245f8:	4640      	mov	r0, r8
 80245fa:	f7ff fa09 	bl	8023a10 <_free_r>
 80245fe:	463c      	mov	r4, r7
 8024600:	e7e0      	b.n	80245c4 <_realloc_r+0x1e>

08024602 <__swhatbuf_r>:
 8024602:	b570      	push	{r4, r5, r6, lr}
 8024604:	460c      	mov	r4, r1
 8024606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802460a:	2900      	cmp	r1, #0
 802460c:	b096      	sub	sp, #88	@ 0x58
 802460e:	4615      	mov	r5, r2
 8024610:	461e      	mov	r6, r3
 8024612:	da0d      	bge.n	8024630 <__swhatbuf_r+0x2e>
 8024614:	89a3      	ldrh	r3, [r4, #12]
 8024616:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802461a:	f04f 0100 	mov.w	r1, #0
 802461e:	bf14      	ite	ne
 8024620:	2340      	movne	r3, #64	@ 0x40
 8024622:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024626:	2000      	movs	r0, #0
 8024628:	6031      	str	r1, [r6, #0]
 802462a:	602b      	str	r3, [r5, #0]
 802462c:	b016      	add	sp, #88	@ 0x58
 802462e:	bd70      	pop	{r4, r5, r6, pc}
 8024630:	466a      	mov	r2, sp
 8024632:	f000 f879 	bl	8024728 <_fstat_r>
 8024636:	2800      	cmp	r0, #0
 8024638:	dbec      	blt.n	8024614 <__swhatbuf_r+0x12>
 802463a:	9901      	ldr	r1, [sp, #4]
 802463c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024640:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024644:	4259      	negs	r1, r3
 8024646:	4159      	adcs	r1, r3
 8024648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802464c:	e7eb      	b.n	8024626 <__swhatbuf_r+0x24>

0802464e <__smakebuf_r>:
 802464e:	898b      	ldrh	r3, [r1, #12]
 8024650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024652:	079d      	lsls	r5, r3, #30
 8024654:	4606      	mov	r6, r0
 8024656:	460c      	mov	r4, r1
 8024658:	d507      	bpl.n	802466a <__smakebuf_r+0x1c>
 802465a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802465e:	6023      	str	r3, [r4, #0]
 8024660:	6123      	str	r3, [r4, #16]
 8024662:	2301      	movs	r3, #1
 8024664:	6163      	str	r3, [r4, #20]
 8024666:	b003      	add	sp, #12
 8024668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802466a:	ab01      	add	r3, sp, #4
 802466c:	466a      	mov	r2, sp
 802466e:	f7ff ffc8 	bl	8024602 <__swhatbuf_r>
 8024672:	9f00      	ldr	r7, [sp, #0]
 8024674:	4605      	mov	r5, r0
 8024676:	4639      	mov	r1, r7
 8024678:	4630      	mov	r0, r6
 802467a:	f7fe fde5 	bl	8023248 <_malloc_r>
 802467e:	b948      	cbnz	r0, 8024694 <__smakebuf_r+0x46>
 8024680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024684:	059a      	lsls	r2, r3, #22
 8024686:	d4ee      	bmi.n	8024666 <__smakebuf_r+0x18>
 8024688:	f023 0303 	bic.w	r3, r3, #3
 802468c:	f043 0302 	orr.w	r3, r3, #2
 8024690:	81a3      	strh	r3, [r4, #12]
 8024692:	e7e2      	b.n	802465a <__smakebuf_r+0xc>
 8024694:	89a3      	ldrh	r3, [r4, #12]
 8024696:	6020      	str	r0, [r4, #0]
 8024698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802469c:	81a3      	strh	r3, [r4, #12]
 802469e:	9b01      	ldr	r3, [sp, #4]
 80246a0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80246a4:	b15b      	cbz	r3, 80246be <__smakebuf_r+0x70>
 80246a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80246aa:	4630      	mov	r0, r6
 80246ac:	f000 f84e 	bl	802474c <_isatty_r>
 80246b0:	b128      	cbz	r0, 80246be <__smakebuf_r+0x70>
 80246b2:	89a3      	ldrh	r3, [r4, #12]
 80246b4:	f023 0303 	bic.w	r3, r3, #3
 80246b8:	f043 0301 	orr.w	r3, r3, #1
 80246bc:	81a3      	strh	r3, [r4, #12]
 80246be:	89a3      	ldrh	r3, [r4, #12]
 80246c0:	431d      	orrs	r5, r3
 80246c2:	81a5      	strh	r5, [r4, #12]
 80246c4:	e7cf      	b.n	8024666 <__smakebuf_r+0x18>

080246c6 <_raise_r>:
 80246c6:	291f      	cmp	r1, #31
 80246c8:	b538      	push	{r3, r4, r5, lr}
 80246ca:	4605      	mov	r5, r0
 80246cc:	460c      	mov	r4, r1
 80246ce:	d904      	bls.n	80246da <_raise_r+0x14>
 80246d0:	2316      	movs	r3, #22
 80246d2:	6003      	str	r3, [r0, #0]
 80246d4:	f04f 30ff 	mov.w	r0, #4294967295
 80246d8:	bd38      	pop	{r3, r4, r5, pc}
 80246da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80246dc:	b112      	cbz	r2, 80246e4 <_raise_r+0x1e>
 80246de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80246e2:	b94b      	cbnz	r3, 80246f8 <_raise_r+0x32>
 80246e4:	4628      	mov	r0, r5
 80246e6:	f000 f853 	bl	8024790 <_getpid_r>
 80246ea:	4622      	mov	r2, r4
 80246ec:	4601      	mov	r1, r0
 80246ee:	4628      	mov	r0, r5
 80246f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80246f4:	f000 b83a 	b.w	802476c <_kill_r>
 80246f8:	2b01      	cmp	r3, #1
 80246fa:	d00a      	beq.n	8024712 <_raise_r+0x4c>
 80246fc:	1c59      	adds	r1, r3, #1
 80246fe:	d103      	bne.n	8024708 <_raise_r+0x42>
 8024700:	2316      	movs	r3, #22
 8024702:	6003      	str	r3, [r0, #0]
 8024704:	2001      	movs	r0, #1
 8024706:	e7e7      	b.n	80246d8 <_raise_r+0x12>
 8024708:	2100      	movs	r1, #0
 802470a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802470e:	4620      	mov	r0, r4
 8024710:	4798      	blx	r3
 8024712:	2000      	movs	r0, #0
 8024714:	e7e0      	b.n	80246d8 <_raise_r+0x12>
	...

08024718 <raise>:
 8024718:	4b02      	ldr	r3, [pc, #8]	@ (8024724 <raise+0xc>)
 802471a:	4601      	mov	r1, r0
 802471c:	6818      	ldr	r0, [r3, #0]
 802471e:	f7ff bfd2 	b.w	80246c6 <_raise_r>
 8024722:	bf00      	nop
 8024724:	2000005c 	.word	0x2000005c

08024728 <_fstat_r>:
 8024728:	b538      	push	{r3, r4, r5, lr}
 802472a:	4d07      	ldr	r5, [pc, #28]	@ (8024748 <_fstat_r+0x20>)
 802472c:	2300      	movs	r3, #0
 802472e:	4604      	mov	r4, r0
 8024730:	4608      	mov	r0, r1
 8024732:	4611      	mov	r1, r2
 8024734:	602b      	str	r3, [r5, #0]
 8024736:	f7df f841 	bl	80037bc <_fstat>
 802473a:	1c43      	adds	r3, r0, #1
 802473c:	d102      	bne.n	8024744 <_fstat_r+0x1c>
 802473e:	682b      	ldr	r3, [r5, #0]
 8024740:	b103      	cbz	r3, 8024744 <_fstat_r+0x1c>
 8024742:	6023      	str	r3, [r4, #0]
 8024744:	bd38      	pop	{r3, r4, r5, pc}
 8024746:	bf00      	nop
 8024748:	20019550 	.word	0x20019550

0802474c <_isatty_r>:
 802474c:	b538      	push	{r3, r4, r5, lr}
 802474e:	4d06      	ldr	r5, [pc, #24]	@ (8024768 <_isatty_r+0x1c>)
 8024750:	2300      	movs	r3, #0
 8024752:	4604      	mov	r4, r0
 8024754:	4608      	mov	r0, r1
 8024756:	602b      	str	r3, [r5, #0]
 8024758:	f7df f840 	bl	80037dc <_isatty>
 802475c:	1c43      	adds	r3, r0, #1
 802475e:	d102      	bne.n	8024766 <_isatty_r+0x1a>
 8024760:	682b      	ldr	r3, [r5, #0]
 8024762:	b103      	cbz	r3, 8024766 <_isatty_r+0x1a>
 8024764:	6023      	str	r3, [r4, #0]
 8024766:	bd38      	pop	{r3, r4, r5, pc}
 8024768:	20019550 	.word	0x20019550

0802476c <_kill_r>:
 802476c:	b538      	push	{r3, r4, r5, lr}
 802476e:	4d07      	ldr	r5, [pc, #28]	@ (802478c <_kill_r+0x20>)
 8024770:	2300      	movs	r3, #0
 8024772:	4604      	mov	r4, r0
 8024774:	4608      	mov	r0, r1
 8024776:	4611      	mov	r1, r2
 8024778:	602b      	str	r3, [r5, #0]
 802477a:	f7de ffbd 	bl	80036f8 <_kill>
 802477e:	1c43      	adds	r3, r0, #1
 8024780:	d102      	bne.n	8024788 <_kill_r+0x1c>
 8024782:	682b      	ldr	r3, [r5, #0]
 8024784:	b103      	cbz	r3, 8024788 <_kill_r+0x1c>
 8024786:	6023      	str	r3, [r4, #0]
 8024788:	bd38      	pop	{r3, r4, r5, pc}
 802478a:	bf00      	nop
 802478c:	20019550 	.word	0x20019550

08024790 <_getpid_r>:
 8024790:	f7de bfaa 	b.w	80036e8 <_getpid>

08024794 <_malloc_usable_size_r>:
 8024794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024798:	1f18      	subs	r0, r3, #4
 802479a:	2b00      	cmp	r3, #0
 802479c:	bfbc      	itt	lt
 802479e:	580b      	ldrlt	r3, [r1, r0]
 80247a0:	18c0      	addlt	r0, r0, r3
 80247a2:	4770      	bx	lr

080247a4 <_init>:
 80247a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247a6:	bf00      	nop
 80247a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247aa:	bc08      	pop	{r3}
 80247ac:	469e      	mov	lr, r3
 80247ae:	4770      	bx	lr

080247b0 <_fini>:
 80247b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247b2:	bf00      	nop
 80247b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247b6:	bc08      	pop	{r3}
 80247b8:	469e      	mov	lr, r3
 80247ba:	4770      	bx	lr
